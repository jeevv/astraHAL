
HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016604  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fa4  080167a8  080167a8  000177a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801774c  0801774c  000192b8  2**0
                  CONTENTS
  4 .ARM          00000008  0801774c  0801774c  0001874c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017754  08017754  000192b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08017754  08017754  00018754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017760  08017760  00018760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b8  20000000  08017764  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dbc4  200002b8  08017a1c  000192b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000de7c  08017a1c  00019e7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000192b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f76  00000000  00000000  000192e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ba1  00000000  00000000  0003325e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  00036e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001112  00000000  00000000  00038410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000087d8  00000000  00000000  00039522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a25  00000000  00000000  00041cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a42d7  00000000  00000000  0005b71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  000ff9f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b94  00000000  00000000  000ffa6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00106600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b8 	.word	0x200002b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801678c 	.word	0x0801678c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002bc 	.word	0x200002bc
 80001dc:	0801678c 	.word	0x0801678c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__gedf2>:
 8000504:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000508:	e006      	b.n	8000518 <__cmpdf2+0x4>
 800050a:	bf00      	nop

0800050c <__ledf2>:
 800050c:	f04f 0c01 	mov.w	ip, #1
 8000510:	e002      	b.n	8000518 <__cmpdf2+0x4>
 8000512:	bf00      	nop

08000514 <__cmpdf2>:
 8000514:	f04f 0c01 	mov.w	ip, #1
 8000518:	f84d cd04 	str.w	ip, [sp, #-4]!
 800051c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000520:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000524:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000528:	bf18      	it	ne
 800052a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052e:	d01b      	beq.n	8000568 <__cmpdf2+0x54>
 8000530:	b001      	add	sp, #4
 8000532:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000536:	bf0c      	ite	eq
 8000538:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800053c:	ea91 0f03 	teqne	r1, r3
 8000540:	bf02      	ittt	eq
 8000542:	ea90 0f02 	teqeq	r0, r2
 8000546:	2000      	moveq	r0, #0
 8000548:	4770      	bxeq	lr
 800054a:	f110 0f00 	cmn.w	r0, #0
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf58      	it	pl
 8000554:	4299      	cmppl	r1, r3
 8000556:	bf08      	it	eq
 8000558:	4290      	cmpeq	r0, r2
 800055a:	bf2c      	ite	cs
 800055c:	17d8      	asrcs	r0, r3, #31
 800055e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000562:	f040 0001 	orr.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800056c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000570:	d102      	bne.n	8000578 <__cmpdf2+0x64>
 8000572:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000576:	d107      	bne.n	8000588 <__cmpdf2+0x74>
 8000578:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800057c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000580:	d1d6      	bne.n	8000530 <__cmpdf2+0x1c>
 8000582:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000586:	d0d3      	beq.n	8000530 <__cmpdf2+0x1c>
 8000588:	f85d 0b04 	ldr.w	r0, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <__aeabi_cdrcmple>:
 8000590:	4684      	mov	ip, r0
 8000592:	4610      	mov	r0, r2
 8000594:	4662      	mov	r2, ip
 8000596:	468c      	mov	ip, r1
 8000598:	4619      	mov	r1, r3
 800059a:	4663      	mov	r3, ip
 800059c:	e000      	b.n	80005a0 <__aeabi_cdcmpeq>
 800059e:	bf00      	nop

080005a0 <__aeabi_cdcmpeq>:
 80005a0:	b501      	push	{r0, lr}
 80005a2:	f7ff ffb7 	bl	8000514 <__cmpdf2>
 80005a6:	2800      	cmp	r0, #0
 80005a8:	bf48      	it	mi
 80005aa:	f110 0f00 	cmnmi.w	r0, #0
 80005ae:	bd01      	pop	{r0, pc}

080005b0 <__aeabi_dcmpeq>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff fff4 	bl	80005a0 <__aeabi_cdcmpeq>
 80005b8:	bf0c      	ite	eq
 80005ba:	2001      	moveq	r0, #1
 80005bc:	2000      	movne	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmplt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffea 	bl	80005a0 <__aeabi_cdcmpeq>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_dcmple>:
 80005d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005dc:	f7ff ffe0 	bl	80005a0 <__aeabi_cdcmpeq>
 80005e0:	bf94      	ite	ls
 80005e2:	2001      	movls	r0, #1
 80005e4:	2000      	movhi	r0, #0
 80005e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ea:	bf00      	nop

080005ec <__aeabi_dcmpge>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff ffce 	bl	8000590 <__aeabi_cdrcmple>
 80005f4:	bf94      	ite	ls
 80005f6:	2001      	movls	r0, #1
 80005f8:	2000      	movhi	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_dcmpgt>:
 8000600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000604:	f7ff ffc4 	bl	8000590 <__aeabi_cdrcmple>
 8000608:	bf34      	ite	cc
 800060a:	2001      	movcc	r0, #1
 800060c:	2000      	movcs	r0, #0
 800060e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000612:	bf00      	nop

08000614 <__aeabi_d2uiz>:
 8000614:	004a      	lsls	r2, r1, #1
 8000616:	d211      	bcs.n	800063c <__aeabi_d2uiz+0x28>
 8000618:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800061c:	d211      	bcs.n	8000642 <__aeabi_d2uiz+0x2e>
 800061e:	d50d      	bpl.n	800063c <__aeabi_d2uiz+0x28>
 8000620:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000624:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000628:	d40e      	bmi.n	8000648 <__aeabi_d2uiz+0x34>
 800062a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000632:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	4770      	bx	lr
 800063c:	f04f 0000 	mov.w	r0, #0
 8000640:	4770      	bx	lr
 8000642:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000646:	d102      	bne.n	800064e <__aeabi_d2uiz+0x3a>
 8000648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <__aeabi_ldivmod>:
 8000654:	b97b      	cbnz	r3, 8000676 <__aeabi_ldivmod+0x22>
 8000656:	b972      	cbnz	r2, 8000676 <__aeabi_ldivmod+0x22>
 8000658:	2900      	cmp	r1, #0
 800065a:	bfbe      	ittt	lt
 800065c:	2000      	movlt	r0, #0
 800065e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000662:	e006      	blt.n	8000672 <__aeabi_ldivmod+0x1e>
 8000664:	bf08      	it	eq
 8000666:	2800      	cmpeq	r0, #0
 8000668:	bf1c      	itt	ne
 800066a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800066e:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000672:	f000 b9b5 	b.w	80009e0 <__aeabi_idiv0>
 8000676:	f1ad 0c08 	sub.w	ip, sp, #8
 800067a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800067e:	2900      	cmp	r1, #0
 8000680:	db09      	blt.n	8000696 <__aeabi_ldivmod+0x42>
 8000682:	2b00      	cmp	r3, #0
 8000684:	db1a      	blt.n	80006bc <__aeabi_ldivmod+0x68>
 8000686:	f000 f84d 	bl	8000724 <__udivmoddi4>
 800068a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800068e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000692:	b004      	add	sp, #16
 8000694:	4770      	bx	lr
 8000696:	4240      	negs	r0, r0
 8000698:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800069c:	2b00      	cmp	r3, #0
 800069e:	db1b      	blt.n	80006d8 <__aeabi_ldivmod+0x84>
 80006a0:	f000 f840 	bl	8000724 <__udivmoddi4>
 80006a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006ac:	b004      	add	sp, #16
 80006ae:	4240      	negs	r0, r0
 80006b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b4:	4252      	negs	r2, r2
 80006b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ba:	4770      	bx	lr
 80006bc:	4252      	negs	r2, r2
 80006be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006c2:	f000 f82f 	bl	8000724 <__udivmoddi4>
 80006c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006ce:	b004      	add	sp, #16
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	4770      	bx	lr
 80006d8:	4252      	negs	r2, r2
 80006da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006de:	f000 f821 	bl	8000724 <__udivmoddi4>
 80006e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006ea:	b004      	add	sp, #16
 80006ec:	4252      	negs	r2, r2
 80006ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f2:	4770      	bx	lr

080006f4 <__aeabi_uldivmod>:
 80006f4:	b953      	cbnz	r3, 800070c <__aeabi_uldivmod+0x18>
 80006f6:	b94a      	cbnz	r2, 800070c <__aeabi_uldivmod+0x18>
 80006f8:	2900      	cmp	r1, #0
 80006fa:	bf08      	it	eq
 80006fc:	2800      	cmpeq	r0, #0
 80006fe:	bf1c      	itt	ne
 8000700:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000704:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000708:	f000 b96a 	b.w	80009e0 <__aeabi_idiv0>
 800070c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000710:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000714:	f000 f806 	bl	8000724 <__udivmoddi4>
 8000718:	f8dd e004 	ldr.w	lr, [sp, #4]
 800071c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000720:	b004      	add	sp, #16
 8000722:	4770      	bx	lr

08000724 <__udivmoddi4>:
 8000724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000728:	9d08      	ldr	r5, [sp, #32]
 800072a:	460c      	mov	r4, r1
 800072c:	2b00      	cmp	r3, #0
 800072e:	d14e      	bne.n	80007ce <__udivmoddi4+0xaa>
 8000730:	4694      	mov	ip, r2
 8000732:	458c      	cmp	ip, r1
 8000734:	4686      	mov	lr, r0
 8000736:	fab2 f282 	clz	r2, r2
 800073a:	d962      	bls.n	8000802 <__udivmoddi4+0xde>
 800073c:	b14a      	cbz	r2, 8000752 <__udivmoddi4+0x2e>
 800073e:	f1c2 0320 	rsb	r3, r2, #32
 8000742:	4091      	lsls	r1, r2
 8000744:	fa20 f303 	lsr.w	r3, r0, r3
 8000748:	fa0c fc02 	lsl.w	ip, ip, r2
 800074c:	4319      	orrs	r1, r3
 800074e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000752:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000756:	fa1f f68c 	uxth.w	r6, ip
 800075a:	fbb1 f4f7 	udiv	r4, r1, r7
 800075e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000762:	fb07 1114 	mls	r1, r7, r4, r1
 8000766:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076a:	fb04 f106 	mul.w	r1, r4, r6
 800076e:	4299      	cmp	r1, r3
 8000770:	d90a      	bls.n	8000788 <__udivmoddi4+0x64>
 8000772:	eb1c 0303 	adds.w	r3, ip, r3
 8000776:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800077a:	f080 8112 	bcs.w	80009a2 <__udivmoddi4+0x27e>
 800077e:	4299      	cmp	r1, r3
 8000780:	f240 810f 	bls.w	80009a2 <__udivmoddi4+0x27e>
 8000784:	3c02      	subs	r4, #2
 8000786:	4463      	add	r3, ip
 8000788:	1a59      	subs	r1, r3, r1
 800078a:	fa1f f38e 	uxth.w	r3, lr
 800078e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000792:	fb07 1110 	mls	r1, r7, r0, r1
 8000796:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800079a:	fb00 f606 	mul.w	r6, r0, r6
 800079e:	429e      	cmp	r6, r3
 80007a0:	d90a      	bls.n	80007b8 <__udivmoddi4+0x94>
 80007a2:	eb1c 0303 	adds.w	r3, ip, r3
 80007a6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80007aa:	f080 80fc 	bcs.w	80009a6 <__udivmoddi4+0x282>
 80007ae:	429e      	cmp	r6, r3
 80007b0:	f240 80f9 	bls.w	80009a6 <__udivmoddi4+0x282>
 80007b4:	4463      	add	r3, ip
 80007b6:	3802      	subs	r0, #2
 80007b8:	1b9b      	subs	r3, r3, r6
 80007ba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007be:	2100      	movs	r1, #0
 80007c0:	b11d      	cbz	r5, 80007ca <__udivmoddi4+0xa6>
 80007c2:	40d3      	lsrs	r3, r2
 80007c4:	2200      	movs	r2, #0
 80007c6:	e9c5 3200 	strd	r3, r2, [r5]
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d905      	bls.n	80007de <__udivmoddi4+0xba>
 80007d2:	b10d      	cbz	r5, 80007d8 <__udivmoddi4+0xb4>
 80007d4:	e9c5 0100 	strd	r0, r1, [r5]
 80007d8:	2100      	movs	r1, #0
 80007da:	4608      	mov	r0, r1
 80007dc:	e7f5      	b.n	80007ca <__udivmoddi4+0xa6>
 80007de:	fab3 f183 	clz	r1, r3
 80007e2:	2900      	cmp	r1, #0
 80007e4:	d146      	bne.n	8000874 <__udivmoddi4+0x150>
 80007e6:	42a3      	cmp	r3, r4
 80007e8:	d302      	bcc.n	80007f0 <__udivmoddi4+0xcc>
 80007ea:	4290      	cmp	r0, r2
 80007ec:	f0c0 80f0 	bcc.w	80009d0 <__udivmoddi4+0x2ac>
 80007f0:	1a86      	subs	r6, r0, r2
 80007f2:	eb64 0303 	sbc.w	r3, r4, r3
 80007f6:	2001      	movs	r0, #1
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	d0e6      	beq.n	80007ca <__udivmoddi4+0xa6>
 80007fc:	e9c5 6300 	strd	r6, r3, [r5]
 8000800:	e7e3      	b.n	80007ca <__udivmoddi4+0xa6>
 8000802:	2a00      	cmp	r2, #0
 8000804:	f040 8090 	bne.w	8000928 <__udivmoddi4+0x204>
 8000808:	eba1 040c 	sub.w	r4, r1, ip
 800080c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000810:	fa1f f78c 	uxth.w	r7, ip
 8000814:	2101      	movs	r1, #1
 8000816:	fbb4 f6f8 	udiv	r6, r4, r8
 800081a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800081e:	fb08 4416 	mls	r4, r8, r6, r4
 8000822:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000826:	fb07 f006 	mul.w	r0, r7, r6
 800082a:	4298      	cmp	r0, r3
 800082c:	d908      	bls.n	8000840 <__udivmoddi4+0x11c>
 800082e:	eb1c 0303 	adds.w	r3, ip, r3
 8000832:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000836:	d202      	bcs.n	800083e <__udivmoddi4+0x11a>
 8000838:	4298      	cmp	r0, r3
 800083a:	f200 80cd 	bhi.w	80009d8 <__udivmoddi4+0x2b4>
 800083e:	4626      	mov	r6, r4
 8000840:	1a1c      	subs	r4, r3, r0
 8000842:	fa1f f38e 	uxth.w	r3, lr
 8000846:	fbb4 f0f8 	udiv	r0, r4, r8
 800084a:	fb08 4410 	mls	r4, r8, r0, r4
 800084e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000852:	fb00 f707 	mul.w	r7, r0, r7
 8000856:	429f      	cmp	r7, r3
 8000858:	d908      	bls.n	800086c <__udivmoddi4+0x148>
 800085a:	eb1c 0303 	adds.w	r3, ip, r3
 800085e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000862:	d202      	bcs.n	800086a <__udivmoddi4+0x146>
 8000864:	429f      	cmp	r7, r3
 8000866:	f200 80b0 	bhi.w	80009ca <__udivmoddi4+0x2a6>
 800086a:	4620      	mov	r0, r4
 800086c:	1bdb      	subs	r3, r3, r7
 800086e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000872:	e7a5      	b.n	80007c0 <__udivmoddi4+0x9c>
 8000874:	f1c1 0620 	rsb	r6, r1, #32
 8000878:	408b      	lsls	r3, r1
 800087a:	fa22 f706 	lsr.w	r7, r2, r6
 800087e:	431f      	orrs	r7, r3
 8000880:	fa20 fc06 	lsr.w	ip, r0, r6
 8000884:	fa04 f301 	lsl.w	r3, r4, r1
 8000888:	ea43 030c 	orr.w	r3, r3, ip
 800088c:	40f4      	lsrs	r4, r6
 800088e:	fa00 f801 	lsl.w	r8, r0, r1
 8000892:	0c38      	lsrs	r0, r7, #16
 8000894:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000898:	fbb4 fef0 	udiv	lr, r4, r0
 800089c:	fa1f fc87 	uxth.w	ip, r7
 80008a0:	fb00 441e 	mls	r4, r0, lr, r4
 80008a4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008a8:	fb0e f90c 	mul.w	r9, lr, ip
 80008ac:	45a1      	cmp	r9, r4
 80008ae:	fa02 f201 	lsl.w	r2, r2, r1
 80008b2:	d90a      	bls.n	80008ca <__udivmoddi4+0x1a6>
 80008b4:	193c      	adds	r4, r7, r4
 80008b6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80008ba:	f080 8084 	bcs.w	80009c6 <__udivmoddi4+0x2a2>
 80008be:	45a1      	cmp	r9, r4
 80008c0:	f240 8081 	bls.w	80009c6 <__udivmoddi4+0x2a2>
 80008c4:	f1ae 0e02 	sub.w	lr, lr, #2
 80008c8:	443c      	add	r4, r7
 80008ca:	eba4 0409 	sub.w	r4, r4, r9
 80008ce:	fa1f f983 	uxth.w	r9, r3
 80008d2:	fbb4 f3f0 	udiv	r3, r4, r0
 80008d6:	fb00 4413 	mls	r4, r0, r3, r4
 80008da:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008de:	fb03 fc0c 	mul.w	ip, r3, ip
 80008e2:	45a4      	cmp	ip, r4
 80008e4:	d907      	bls.n	80008f6 <__udivmoddi4+0x1d2>
 80008e6:	193c      	adds	r4, r7, r4
 80008e8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80008ec:	d267      	bcs.n	80009be <__udivmoddi4+0x29a>
 80008ee:	45a4      	cmp	ip, r4
 80008f0:	d965      	bls.n	80009be <__udivmoddi4+0x29a>
 80008f2:	3b02      	subs	r3, #2
 80008f4:	443c      	add	r4, r7
 80008f6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008fa:	fba0 9302 	umull	r9, r3, r0, r2
 80008fe:	eba4 040c 	sub.w	r4, r4, ip
 8000902:	429c      	cmp	r4, r3
 8000904:	46ce      	mov	lr, r9
 8000906:	469c      	mov	ip, r3
 8000908:	d351      	bcc.n	80009ae <__udivmoddi4+0x28a>
 800090a:	d04e      	beq.n	80009aa <__udivmoddi4+0x286>
 800090c:	b155      	cbz	r5, 8000924 <__udivmoddi4+0x200>
 800090e:	ebb8 030e 	subs.w	r3, r8, lr
 8000912:	eb64 040c 	sbc.w	r4, r4, ip
 8000916:	fa04 f606 	lsl.w	r6, r4, r6
 800091a:	40cb      	lsrs	r3, r1
 800091c:	431e      	orrs	r6, r3
 800091e:	40cc      	lsrs	r4, r1
 8000920:	e9c5 6400 	strd	r6, r4, [r5]
 8000924:	2100      	movs	r1, #0
 8000926:	e750      	b.n	80007ca <__udivmoddi4+0xa6>
 8000928:	f1c2 0320 	rsb	r3, r2, #32
 800092c:	fa20 f103 	lsr.w	r1, r0, r3
 8000930:	fa0c fc02 	lsl.w	ip, ip, r2
 8000934:	fa24 f303 	lsr.w	r3, r4, r3
 8000938:	4094      	lsls	r4, r2
 800093a:	430c      	orrs	r4, r1
 800093c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000940:	fa00 fe02 	lsl.w	lr, r0, r2
 8000944:	fa1f f78c 	uxth.w	r7, ip
 8000948:	fbb3 f0f8 	udiv	r0, r3, r8
 800094c:	fb08 3110 	mls	r1, r8, r0, r3
 8000950:	0c23      	lsrs	r3, r4, #16
 8000952:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000956:	fb00 f107 	mul.w	r1, r0, r7
 800095a:	4299      	cmp	r1, r3
 800095c:	d908      	bls.n	8000970 <__udivmoddi4+0x24c>
 800095e:	eb1c 0303 	adds.w	r3, ip, r3
 8000962:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000966:	d22c      	bcs.n	80009c2 <__udivmoddi4+0x29e>
 8000968:	4299      	cmp	r1, r3
 800096a:	d92a      	bls.n	80009c2 <__udivmoddi4+0x29e>
 800096c:	3802      	subs	r0, #2
 800096e:	4463      	add	r3, ip
 8000970:	1a5b      	subs	r3, r3, r1
 8000972:	b2a4      	uxth	r4, r4
 8000974:	fbb3 f1f8 	udiv	r1, r3, r8
 8000978:	fb08 3311 	mls	r3, r8, r1, r3
 800097c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000980:	fb01 f307 	mul.w	r3, r1, r7
 8000984:	42a3      	cmp	r3, r4
 8000986:	d908      	bls.n	800099a <__udivmoddi4+0x276>
 8000988:	eb1c 0404 	adds.w	r4, ip, r4
 800098c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000990:	d213      	bcs.n	80009ba <__udivmoddi4+0x296>
 8000992:	42a3      	cmp	r3, r4
 8000994:	d911      	bls.n	80009ba <__udivmoddi4+0x296>
 8000996:	3902      	subs	r1, #2
 8000998:	4464      	add	r4, ip
 800099a:	1ae4      	subs	r4, r4, r3
 800099c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009a0:	e739      	b.n	8000816 <__udivmoddi4+0xf2>
 80009a2:	4604      	mov	r4, r0
 80009a4:	e6f0      	b.n	8000788 <__udivmoddi4+0x64>
 80009a6:	4608      	mov	r0, r1
 80009a8:	e706      	b.n	80007b8 <__udivmoddi4+0x94>
 80009aa:	45c8      	cmp	r8, r9
 80009ac:	d2ae      	bcs.n	800090c <__udivmoddi4+0x1e8>
 80009ae:	ebb9 0e02 	subs.w	lr, r9, r2
 80009b2:	eb63 0c07 	sbc.w	ip, r3, r7
 80009b6:	3801      	subs	r0, #1
 80009b8:	e7a8      	b.n	800090c <__udivmoddi4+0x1e8>
 80009ba:	4631      	mov	r1, r6
 80009bc:	e7ed      	b.n	800099a <__udivmoddi4+0x276>
 80009be:	4603      	mov	r3, r0
 80009c0:	e799      	b.n	80008f6 <__udivmoddi4+0x1d2>
 80009c2:	4630      	mov	r0, r6
 80009c4:	e7d4      	b.n	8000970 <__udivmoddi4+0x24c>
 80009c6:	46d6      	mov	lr, sl
 80009c8:	e77f      	b.n	80008ca <__udivmoddi4+0x1a6>
 80009ca:	4463      	add	r3, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e74d      	b.n	800086c <__udivmoddi4+0x148>
 80009d0:	4606      	mov	r6, r0
 80009d2:	4623      	mov	r3, r4
 80009d4:	4608      	mov	r0, r1
 80009d6:	e70f      	b.n	80007f8 <__udivmoddi4+0xd4>
 80009d8:	3e02      	subs	r6, #2
 80009da:	4463      	add	r3, ip
 80009dc:	e730      	b.n	8000840 <__udivmoddi4+0x11c>
 80009de:	bf00      	nop

080009e0 <__aeabi_idiv0>:
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop

080009e4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80009f0:	f006 f828 	bl	8006a44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80009f4:	4b5a      	ldr	r3, [pc, #360]	@ (8000b60 <pvPortMallocMicroROS+0x17c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d101      	bne.n	8000a00 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80009fc:	f000 f986 	bl	8000d0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000a00:	4b58      	ldr	r3, [pc, #352]	@ (8000b64 <pvPortMallocMicroROS+0x180>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4013      	ands	r3, r2
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	f040 8090 	bne.w	8000b2e <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d01e      	beq.n	8000a52 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000a14:	2208      	movs	r2, #8
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d015      	beq.n	8000a52 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f023 0307 	bic.w	r3, r3, #7
 8000a2c:	3308      	adds	r3, #8
 8000a2e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00b      	beq.n	8000a52 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a3e:	f383 8811 	msr	BASEPRI, r3
 8000a42:	f3bf 8f6f 	isb	sy
 8000a46:	f3bf 8f4f 	dsb	sy
 8000a4a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	e7fd      	b.n	8000a4e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d06a      	beq.n	8000b2e <pvPortMallocMicroROS+0x14a>
 8000a58:	4b43      	ldr	r3, [pc, #268]	@ (8000b68 <pvPortMallocMicroROS+0x184>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d865      	bhi.n	8000b2e <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a62:	4b42      	ldr	r3, [pc, #264]	@ (8000b6c <pvPortMallocMicroROS+0x188>)
 8000a64:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a66:	4b41      	ldr	r3, [pc, #260]	@ (8000b6c <pvPortMallocMicroROS+0x188>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a6c:	e004      	b.n	8000a78 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a70:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d903      	bls.n	8000a8a <pvPortMallocMicroROS+0xa6>
 8000a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1f1      	bne.n	8000a6e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a8a:	4b35      	ldr	r3, [pc, #212]	@ (8000b60 <pvPortMallocMicroROS+0x17c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d04c      	beq.n	8000b2e <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a94:	6a3b      	ldr	r3, [r7, #32]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2208      	movs	r2, #8
 8000a9a:	4413      	add	r3, r2
 8000a9c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	6a3b      	ldr	r3, [r7, #32]
 8000aa4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa8:	685a      	ldr	r2, [r3, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	1ad2      	subs	r2, r2, r3
 8000aae:	2308      	movs	r3, #8
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d920      	bls.n	8000af8 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4413      	add	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	f003 0307 	and.w	r3, r3, #7
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d00b      	beq.n	8000ae0 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000acc:	f383 8811 	msr	BASEPRI, r3
 8000ad0:	f3bf 8f6f 	isb	sy
 8000ad4:	f3bf 8f4f 	dsb	sy
 8000ad8:	613b      	str	r3, [r7, #16]
}
 8000ada:	bf00      	nop
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	1ad2      	subs	r2, r2, r3
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000af2:	69b8      	ldr	r0, [r7, #24]
 8000af4:	f000 f96c 	bl	8000dd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000af8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <pvPortMallocMicroROS+0x184>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	4a19      	ldr	r2, [pc, #100]	@ (8000b68 <pvPortMallocMicroROS+0x184>)
 8000b04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000b06:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <pvPortMallocMicroROS+0x184>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <pvPortMallocMicroROS+0x18c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d203      	bcs.n	8000b1a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <pvPortMallocMicroROS+0x184>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a16      	ldr	r2, [pc, #88]	@ (8000b70 <pvPortMallocMicroROS+0x18c>)
 8000b18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <pvPortMallocMicroROS+0x180>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	431a      	orrs	r2, r3
 8000b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000b2e:	f005 ff97 	bl	8006a60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	f003 0307 	and.w	r3, r3, #7
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00b      	beq.n	8000b54 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b40:	f383 8811 	msr	BASEPRI, r3
 8000b44:	f3bf 8f6f 	isb	sy
 8000b48:	f3bf 8f4f 	dsb	sy
 8000b4c:	60fb      	str	r3, [r7, #12]
}
 8000b4e:	bf00      	nop
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000b54:	69fb      	ldr	r3, [r7, #28]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3728      	adds	r7, #40	@ 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20003edc 	.word	0x20003edc
 8000b64:	20003ee8 	.word	0x20003ee8
 8000b68:	20003ee0 	.word	0x20003ee0
 8000b6c:	20003ed4 	.word	0x20003ed4
 8000b70:	20003ee4 	.word	0x20003ee4

08000b74 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d04a      	beq.n	8000c1c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b86:	2308      	movs	r3, #8
 8000b88:	425b      	negs	r3, r3
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	4b22      	ldr	r3, [pc, #136]	@ (8000c24 <vPortFreeMicroROS+0xb0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10b      	bne.n	8000bba <vPortFreeMicroROS+0x46>
	__asm volatile
 8000ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ba6:	f383 8811 	msr	BASEPRI, r3
 8000baa:	f3bf 8f6f 	isb	sy
 8000bae:	f3bf 8f4f 	dsb	sy
 8000bb2:	60fb      	str	r3, [r7, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	bf00      	nop
 8000bb8:	e7fd      	b.n	8000bb6 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00b      	beq.n	8000bda <vPortFreeMicroROS+0x66>
	__asm volatile
 8000bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bc6:	f383 8811 	msr	BASEPRI, r3
 8000bca:	f3bf 8f6f 	isb	sy
 8000bce:	f3bf 8f4f 	dsb	sy
 8000bd2:	60bb      	str	r3, [r7, #8]
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	e7fd      	b.n	8000bd6 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <vPortFreeMicroROS+0xb0>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4013      	ands	r3, r2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d019      	beq.n	8000c1c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d115      	bne.n	8000c1c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <vPortFreeMicroROS+0xb0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000c00:	f005 ff20 	bl	8006a44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <vPortFreeMicroROS+0xb4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a06      	ldr	r2, [pc, #24]	@ (8000c28 <vPortFreeMicroROS+0xb4>)
 8000c10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000c12:	6938      	ldr	r0, [r7, #16]
 8000c14:	f000 f8dc 	bl	8000dd0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000c18:	f005 ff22 	bl	8006a60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000c1c:	bf00      	nop
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20003ee8 	.word	0x20003ee8
 8000c28:	20003ee0 	.word	0x20003ee0

08000c2c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b087      	sub	sp, #28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000c38:	2308      	movs	r3, #8
 8000c3a:	425b      	negs	r3, r3
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	4413      	add	r3, r2
 8000c40:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <getBlockSize+0x38>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	4013      	ands	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]

	return count;
 8000c54:	68fb      	ldr	r3, [r7, #12]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	371c      	adds	r7, #28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20003ee8 	.word	0x20003ee8

08000c68 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c72:	f005 fee7 	bl	8006a44 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c76:	6838      	ldr	r0, [r7, #0]
 8000c78:	f7ff feb4 	bl	80009e4 <pvPortMallocMicroROS>
 8000c7c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d017      	beq.n	8000cb4 <pvPortReallocMicroROS+0x4c>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d014      	beq.n	8000cb4 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ffce 	bl	8000c2c <getBlockSize>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2208      	movs	r2, #8
 8000c94:	1a9b      	subs	r3, r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d201      	bcs.n	8000ca4 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	68b8      	ldr	r0, [r7, #8]
 8000caa:	f014 fe9a 	bl	80159e2 <memcpy>

		vPortFreeMicroROS(pv);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ff60 	bl	8000b74 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000cb4:	f005 fed4 	bl	8006a60 <xTaskResumeAll>

	return newmem;
 8000cb8:	68bb      	ldr	r3, [r7, #8]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000ccc:	f005 feba 	bl	8006a44 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	fb02 f303 	mul.w	r3, r2, r3
 8000cd8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000cda:	6978      	ldr	r0, [r7, #20]
 8000cdc:	f7ff fe82 	bl	80009e4 <pvPortMallocMicroROS>
 8000ce0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000ce6:	e004      	b.n	8000cf2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	613a      	str	r2, [r7, #16]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	1e5a      	subs	r2, r3, #1
 8000cf6:	617a      	str	r2, [r7, #20]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1f5      	bne.n	8000ce8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000cfc:	f005 feb0 	bl	8006a60 <xTaskResumeAll>
  	return mem;
 8000d00:	68fb      	ldr	r3, [r7, #12]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000d12:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000d16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000d18:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <prvHeapInit+0xac>)
 8000d1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d00c      	beq.n	8000d40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3307      	adds	r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f023 0307 	bic.w	r3, r3, #7
 8000d32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000d34:	68ba      	ldr	r2, [r7, #8]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000db8 <prvHeapInit+0xac>)
 8000d3c:	4413      	add	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d44:	4a1d      	ldr	r2, [pc, #116]	@ (8000dbc <prvHeapInit+0xb0>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dbc <prvHeapInit+0xb0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	4413      	add	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d58:	2208      	movs	r2, #8
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	1a9b      	subs	r3, r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f023 0307 	bic.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4a15      	ldr	r2, [pc, #84]	@ (8000dc0 <prvHeapInit+0xb4>)
 8000d6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <prvHeapInit+0xb4>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2200      	movs	r2, #0
 8000d74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d76:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <prvHeapInit+0xb4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	1ad2      	subs	r2, r2, r3
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <prvHeapInit+0xb4>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <prvHeapInit+0xb8>)
 8000d9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	4a09      	ldr	r2, [pc, #36]	@ (8000dc8 <prvHeapInit+0xbc>)
 8000da2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <prvHeapInit+0xc0>)
 8000da6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000daa:	601a      	str	r2, [r3, #0]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	200002d4 	.word	0x200002d4
 8000dbc:	20003ed4 	.word	0x20003ed4
 8000dc0:	20003edc 	.word	0x20003edc
 8000dc4:	20003ee4 	.word	0x20003ee4
 8000dc8:	20003ee0 	.word	0x20003ee0
 8000dcc:	20003ee8 	.word	0x20003ee8

08000dd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000dd8:	4b28      	ldr	r3, [pc, #160]	@ (8000e7c <prvInsertBlockIntoFreeList+0xac>)
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	e002      	b.n	8000de4 <prvInsertBlockIntoFreeList+0x14>
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d8f7      	bhi.n	8000dde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	4413      	add	r3, r2
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d108      	bne.n	8000e12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	441a      	add	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	441a      	add	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d118      	bne.n	8000e58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <prvInsertBlockIntoFreeList+0xb0>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d00d      	beq.n	8000e4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	441a      	add	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	e008      	b.n	8000e60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <prvInsertBlockIntoFreeList+0xb0>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e003      	b.n	8000e60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d002      	beq.n	8000e6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20003ed4 	.word	0x20003ed4
 8000e80:	20003edc 	.word	0x20003edc

08000e84 <subscription_cmd_vel_callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void subscription_cmd_vel_callback(const void * msgin)
{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	geometry_msgs__msg__Twist * msg = (geometry_msgs__msg__Twist *)msgin;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	60fb      	str	r3, [r7, #12]

	if (msg->linear.x >= 0) {
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	f04f 0300 	mov.w	r3, #0
 8000e9e:	f7ff fba5 	bl	80005ec <__aeabi_dcmpge>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d028      	beq.n	8000efa <subscription_cmd_vel_callback+0x76>
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
		TIM3->CCR1 = 200*msg->linear.x;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	4b28      	ldr	r3, [pc, #160]	@ (8000f54 <subscription_cmd_vel_callback+0xd0>)
 8000eb4:	f7ff f9fc 	bl	80002b0 <__aeabi_dmul>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4c26      	ldr	r4, [pc, #152]	@ (8000f58 <subscription_cmd_vel_callback+0xd4>)
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff fba7 	bl	8000614 <__aeabi_d2uiz>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6363      	str	r3, [r4, #52]	@ 0x34
		TIM3->CCR2 = 0;
 8000eca:	4b23      	ldr	r3, [pc, #140]	@ (8000f58 <subscription_cmd_vel_callback+0xd4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3 = 200*msg->linear.x;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <subscription_cmd_vel_callback+0xd0>)
 8000edc:	f7ff f9e8 	bl	80002b0 <__aeabi_dmul>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4c1c      	ldr	r4, [pc, #112]	@ (8000f58 <subscription_cmd_vel_callback+0xd4>)
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f7ff fb93 	bl	8000614 <__aeabi_d2uiz>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	63e3      	str	r3, [r4, #60]	@ 0x3c
		TIM3->CCR4 = 0;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <subscription_cmd_vel_callback+0xd4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR1 = 0;
		TIM3->CCR2 = -200*msg->linear.x;
		TIM3->CCR3 = 0;
		TIM3->CCR4 = -200*msg->linear.x;
	}
}
 8000ef8:	e027      	b.n	8000f4a <subscription_cmd_vel_callback+0xc6>
		TIM3->CCR1 = 0;
 8000efa:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <subscription_cmd_vel_callback+0xd4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = -200*msg->linear.x;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <subscription_cmd_vel_callback+0xd8>)
 8000f0c:	f7ff f9d0 	bl	80002b0 <__aeabi_dmul>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4c10      	ldr	r4, [pc, #64]	@ (8000f58 <subscription_cmd_vel_callback+0xd4>)
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f7ff fb7b 	bl	8000614 <__aeabi_d2uiz>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	63a3      	str	r3, [r4, #56]	@ 0x38
		TIM3->CCR3 = 0;
 8000f22:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <subscription_cmd_vel_callback+0xd4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = -200*msg->linear.x;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <subscription_cmd_vel_callback+0xd8>)
 8000f34:	f7ff f9bc 	bl	80002b0 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4c06      	ldr	r4, [pc, #24]	@ (8000f58 <subscription_cmd_vel_callback+0xd4>)
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	f7ff fb67 	bl	8000614 <__aeabi_d2uiz>
 8000f46:	4603      	mov	r3, r0
 8000f48:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd90      	pop	{r4, r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40690000 	.word	0x40690000
 8000f58:	40000400 	.word	0x40000400
 8000f5c:	c0690000 	.word	0xc0690000

08000f60 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d104      	bne.n	8000f7a <HAL_GPIO_EXTI_Callback+0x1a>
	{
		left_wheel_encoder++;
 8000f70:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0x38>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	4a08      	ldr	r2, [pc, #32]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0x38>)
 8000f78:	6013      	str	r3, [r2, #0]
	}
	if (GPIO_Pin == GPIO_PIN_1)
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d104      	bne.n	8000f8a <HAL_GPIO_EXTI_Callback+0x2a>
	{
		right_wheel_encoder++;
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	4a05      	ldr	r2, [pc, #20]	@ (8000f9c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000f88:	6013      	str	r3, [r2, #0]
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20004040 	.word	0x20004040
 8000f9c:	20004044 	.word	0x20004044

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa4:	f000 ffb8 	bl	8001f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa8:	f000 f82e 	bl	8001008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fac:	f000 f97e 	bl	80012ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb0:	f000 f954 	bl	800125c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fb4:	f000 f928 	bl	8001208 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000fb8:	f000 f88e 	bl	80010d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	480e      	ldr	r0, [pc, #56]	@ (8000ff8 <main+0x58>)
 8000fc0:	f002 fc0c 	bl	80037dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	480c      	ldr	r0, [pc, #48]	@ (8000ff8 <main+0x58>)
 8000fc8:	f002 fc08 	bl	80037dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000fcc:	2108      	movs	r1, #8
 8000fce:	480a      	ldr	r0, [pc, #40]	@ (8000ff8 <main+0x58>)
 8000fd0:	f002 fc04 	bl	80037dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8000fd4:	210c      	movs	r1, #12
 8000fd6:	4808      	ldr	r0, [pc, #32]	@ (8000ff8 <main+0x58>)
 8000fd8:	f002 fc00 	bl	80037dc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fdc:	f004 fc14 	bl	8005808 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fe0:	4a06      	ldr	r2, [pc, #24]	@ (8000ffc <main+0x5c>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4806      	ldr	r0, [pc, #24]	@ (8001000 <main+0x60>)
 8000fe6:	f004 fc59 	bl	800589c <osThreadNew>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <main+0x64>)
 8000fee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ff0:	f004 fc2e 	bl	8005850 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <main+0x54>
 8000ff8:	20003eec 	.word	0x20003eec
 8000ffc:	08016870 	.word	0x08016870
 8001000:	080013b9 	.word	0x080013b9
 8001004:	2000403c 	.word	0x2000403c

08001008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b094      	sub	sp, #80	@ 0x50
 800100c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	2230      	movs	r2, #48	@ 0x30
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f014 fc1a 	bl	8015850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	4b27      	ldr	r3, [pc, #156]	@ (80010d0 <SystemClock_Config+0xc8>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001034:	4a26      	ldr	r2, [pc, #152]	@ (80010d0 <SystemClock_Config+0xc8>)
 8001036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800103a:	6413      	str	r3, [r2, #64]	@ 0x40
 800103c:	4b24      	ldr	r3, [pc, #144]	@ (80010d0 <SystemClock_Config+0xc8>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <SystemClock_Config+0xcc>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a20      	ldr	r2, [pc, #128]	@ (80010d4 <SystemClock_Config+0xcc>)
 8001052:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b1e      	ldr	r3, [pc, #120]	@ (80010d4 <SystemClock_Config+0xcc>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001064:	2301      	movs	r3, #1
 8001066:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001068:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800106c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106e:	2302      	movs	r3, #2
 8001070:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001072:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001078:	2304      	movs	r3, #4
 800107a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800107c:	23c0      	movs	r3, #192	@ 0xc0
 800107e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001080:	2304      	movs	r3, #4
 8001082:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001084:	2308      	movs	r3, #8
 8001086:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	4618      	mov	r0, r3
 800108e:	f001 fe65 	bl	8002d5c <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001098:	f000 fa74 	bl	8001584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109c:	230f      	movs	r3, #15
 800109e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a0:	2302      	movs	r3, #2
 80010a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	2103      	movs	r1, #3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 f8c7 	bl	800324c <HAL_RCC_ClockConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010c4:	f000 fa5e 	bl	8001584 <Error_Handler>
  }
}
 80010c8:	bf00      	nop
 80010ca:	3750      	adds	r7, #80	@ 0x50
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40007000 	.word	0x40007000

080010d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08e      	sub	sp, #56	@ 0x38
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	f107 0320 	add.w	r3, r7, #32
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
 8001104:	615a      	str	r2, [r3, #20]
 8001106:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001108:	4b3d      	ldr	r3, [pc, #244]	@ (8001200 <MX_TIM3_Init+0x128>)
 800110a:	4a3e      	ldr	r2, [pc, #248]	@ (8001204 <MX_TIM3_Init+0x12c>)
 800110c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 800110e:	4b3c      	ldr	r3, [pc, #240]	@ (8001200 <MX_TIM3_Init+0x128>)
 8001110:	2209      	movs	r2, #9
 8001112:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001114:	4b3a      	ldr	r3, [pc, #232]	@ (8001200 <MX_TIM3_Init+0x128>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800111a:	4b39      	ldr	r3, [pc, #228]	@ (8001200 <MX_TIM3_Init+0x128>)
 800111c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001120:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001122:	4b37      	ldr	r3, [pc, #220]	@ (8001200 <MX_TIM3_Init+0x128>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001128:	4b35      	ldr	r3, [pc, #212]	@ (8001200 <MX_TIM3_Init+0x128>)
 800112a:	2280      	movs	r2, #128	@ 0x80
 800112c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800112e:	4834      	ldr	r0, [pc, #208]	@ (8001200 <MX_TIM3_Init+0x128>)
 8001130:	f002 faac 	bl	800368c <HAL_TIM_Base_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800113a:	f000 fa23 	bl	8001584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001144:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001148:	4619      	mov	r1, r3
 800114a:	482d      	ldr	r0, [pc, #180]	@ (8001200 <MX_TIM3_Init+0x128>)
 800114c:	f002 fcb8 	bl	8003ac0 <HAL_TIM_ConfigClockSource>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001156:	f000 fa15 	bl	8001584 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800115a:	4829      	ldr	r0, [pc, #164]	@ (8001200 <MX_TIM3_Init+0x128>)
 800115c:	f002 fae5 	bl	800372a <HAL_TIM_PWM_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001166:	f000 fa0d 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001172:	f107 0320 	add.w	r3, r7, #32
 8001176:	4619      	mov	r1, r3
 8001178:	4821      	ldr	r0, [pc, #132]	@ (8001200 <MX_TIM3_Init+0x128>)
 800117a:	f003 f841 	bl	8004200 <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001184:	f000 f9fe 	bl	8001584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001188:	2360      	movs	r3, #96	@ 0x60
 800118a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	4619      	mov	r1, r3
 800119e:	4818      	ldr	r0, [pc, #96]	@ (8001200 <MX_TIM3_Init+0x128>)
 80011a0:	f002 fbcc 	bl	800393c <HAL_TIM_PWM_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011aa:	f000 f9eb 	bl	8001584 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2204      	movs	r2, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	4812      	ldr	r0, [pc, #72]	@ (8001200 <MX_TIM3_Init+0x128>)
 80011b6:	f002 fbc1 	bl	800393c <HAL_TIM_PWM_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80011c0:	f000 f9e0 	bl	8001584 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2208      	movs	r2, #8
 80011c8:	4619      	mov	r1, r3
 80011ca:	480d      	ldr	r0, [pc, #52]	@ (8001200 <MX_TIM3_Init+0x128>)
 80011cc:	f002 fbb6 	bl	800393c <HAL_TIM_PWM_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80011d6:	f000 f9d5 	bl	8001584 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	220c      	movs	r2, #12
 80011de:	4619      	mov	r1, r3
 80011e0:	4807      	ldr	r0, [pc, #28]	@ (8001200 <MX_TIM3_Init+0x128>)
 80011e2:	f002 fbab 	bl	800393c <HAL_TIM_PWM_ConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80011ec:	f000 f9ca 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011f0:	4803      	ldr	r0, [pc, #12]	@ (8001200 <MX_TIM3_Init+0x128>)
 80011f2:	f000 fb7b 	bl	80018ec <HAL_TIM_MspPostInit>

}
 80011f6:	bf00      	nop
 80011f8:	3738      	adds	r7, #56	@ 0x38
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20003eec 	.word	0x20003eec
 8001204:	40000400 	.word	0x40000400

08001208 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800120c:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <MX_USART2_UART_Init+0x4c>)
 800120e:	4a12      	ldr	r2, [pc, #72]	@ (8001258 <MX_USART2_UART_Init+0x50>)
 8001210:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001212:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <MX_USART2_UART_Init+0x4c>)
 8001214:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001218:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <MX_USART2_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001220:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <MX_USART2_UART_Init+0x4c>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001226:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <MX_USART2_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800122c:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <MX_USART2_UART_Init+0x4c>)
 800122e:	220c      	movs	r2, #12
 8001230:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001232:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <MX_USART2_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <MX_USART2_UART_Init+0x4c>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800123e:	4805      	ldr	r0, [pc, #20]	@ (8001254 <MX_USART2_UART_Init+0x4c>)
 8001240:	f003 f84c 	bl	80042dc <HAL_UART_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800124a:	f000 f99b 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20003f34 	.word	0x20003f34
 8001258:	40004400 	.word	0x40004400

0800125c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <MX_DMA_Init+0x4c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a0f      	ldr	r2, [pc, #60]	@ (80012a8 <MX_DMA_Init+0x4c>)
 800126c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <MX_DMA_Init+0x4c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2105      	movs	r1, #5
 8001282:	2010      	movs	r0, #16
 8001284:	f000 ff95 	bl	80021b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001288:	2010      	movs	r0, #16
 800128a:	f000 ffae 	bl	80021ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2105      	movs	r1, #5
 8001292:	2011      	movs	r0, #17
 8001294:	f000 ff8d 	bl	80021b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001298:	2011      	movs	r0, #17
 800129a:	f000 ffa6 	bl	80021ea <HAL_NVIC_EnableIRQ>

}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	@ 0x28
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b39      	ldr	r3, [pc, #228]	@ (80013ac <MX_GPIO_Init+0x100>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a38      	ldr	r2, [pc, #224]	@ (80013ac <MX_GPIO_Init+0x100>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b36      	ldr	r3, [pc, #216]	@ (80013ac <MX_GPIO_Init+0x100>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b32      	ldr	r3, [pc, #200]	@ (80013ac <MX_GPIO_Init+0x100>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a31      	ldr	r2, [pc, #196]	@ (80013ac <MX_GPIO_Init+0x100>)
 80012e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b2f      	ldr	r3, [pc, #188]	@ (80013ac <MX_GPIO_Init+0x100>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	4b2b      	ldr	r3, [pc, #172]	@ (80013ac <MX_GPIO_Init+0x100>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a2a      	ldr	r2, [pc, #168]	@ (80013ac <MX_GPIO_Init+0x100>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <MX_GPIO_Init+0x100>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b24      	ldr	r3, [pc, #144]	@ (80013ac <MX_GPIO_Init+0x100>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a23      	ldr	r2, [pc, #140]	@ (80013ac <MX_GPIO_Init+0x100>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <MX_GPIO_Init+0x100>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b1d      	ldr	r3, [pc, #116]	@ (80013ac <MX_GPIO_Init+0x100>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a1c      	ldr	r2, [pc, #112]	@ (80013ac <MX_GPIO_Init+0x100>)
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <MX_GPIO_Init+0x100>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800134e:	2303      	movs	r3, #3
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001352:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4813      	ldr	r0, [pc, #76]	@ (80013b0 <MX_GPIO_Init+0x104>)
 8001364:	f001 fb5e 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001368:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	480d      	ldr	r0, [pc, #52]	@ (80013b4 <MX_GPIO_Init+0x108>)
 800137e:	f001 fb51 	bl	8002a24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2006      	movs	r0, #6
 8001388:	f000 ff13 	bl	80021b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800138c:	2006      	movs	r0, #6
 800138e:	f000 ff2c 	bl	80021ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	2007      	movs	r0, #7
 8001398:	f000 ff0b 	bl	80021b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800139c:	2007      	movs	r0, #7
 800139e:	f000 ff24 	bl	80021ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	@ 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020c00 	.word	0x40020c00

080013b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80013b8:	b5b0      	push	{r4, r5, r7, lr}
 80013ba:	b0d8      	sub	sp, #352	@ 0x160
 80013bc:	af02      	add	r7, sp, #8
 80013be:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80013c2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80013c6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

	  // micro-ROS configuration

	  rmw_uros_set_custom_transport(
 80013c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001538 <StartDefaultTask+0x180>)
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	4b5b      	ldr	r3, [pc, #364]	@ (800153c <StartDefaultTask+0x184>)
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001540 <StartDefaultTask+0x188>)
 80013d2:	4a5c      	ldr	r2, [pc, #368]	@ (8001544 <StartDefaultTask+0x18c>)
 80013d4:	495c      	ldr	r1, [pc, #368]	@ (8001548 <StartDefaultTask+0x190>)
 80013d6:	2001      	movs	r0, #1
 80013d8:	f009 fbca 	bl	800ab70 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80013dc:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 80013e0:	4618      	mov	r0, r3
 80013e2:	f009 faf7 	bl	800a9d4 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 80013e6:	4b59      	ldr	r3, [pc, #356]	@ (800154c <StartDefaultTask+0x194>)
 80013e8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
	  freeRTOS_allocator.deallocate = microros_deallocate;
 80013ec:	4b58      	ldr	r3, [pc, #352]	@ (8001550 <StartDefaultTask+0x198>)
 80013ee:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	  freeRTOS_allocator.reallocate = microros_reallocate;
 80013f2:	4b58      	ldr	r3, [pc, #352]	@ (8001554 <StartDefaultTask+0x19c>)
 80013f4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80013f8:	4b57      	ldr	r3, [pc, #348]	@ (8001558 <StartDefaultTask+0x1a0>)
 80013fa:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80013fe:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8001402:	4618      	mov	r0, r3
 8001404:	f009 faf4 	bl	800a9f0 <rcutils_set_default_allocator>
 8001408:	4603      	mov	r3, r0
 800140a:	f083 0301 	eor.w	r3, r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d004      	beq.n	800141e <StartDefaultTask+0x66>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001414:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8001418:	4850      	ldr	r0, [pc, #320]	@ (800155c <StartDefaultTask+0x1a4>)
 800141a:	f014 f92d 	bl	8015678 <iprintf>
	  geometry_msgs__msg__Twist sub_cmd_vel_msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 800141e:	463b      	mov	r3, r7
 8001420:	4618      	mov	r0, r3
 8001422:	f009 fb03 	bl	800aa2c <rcutils_get_default_allocator>
 8001426:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800142a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800142e:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 8001432:	461d      	mov	r5, r3
 8001434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001438:	682b      	ldr	r3, [r5, #0]
 800143a:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 800143c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001440:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	f009 f9ce 	bl	800a7e8 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "stm32_microros", "", &support);
 800144c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001450:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001454:	4a42      	ldr	r2, [pc, #264]	@ (8001560 <StartDefaultTask+0x1a8>)
 8001456:	4943      	ldr	r1, [pc, #268]	@ (8001564 <StartDefaultTask+0x1ac>)
 8001458:	f009 fa10 	bl	800a87c <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 800145c:	f00a f8e2 	bl	800b624 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001460:	4602      	mov	r2, r0
 8001462:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001466:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800146a:	4b3f      	ldr	r3, [pc, #252]	@ (8001568 <StartDefaultTask+0x1b0>)
 800146c:	f009 fa42 	bl	800a8f4 <rclc_publisher_init_default>
	    &publisher1,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    "left_wheel_encoder");

	  rclc_publisher_init_default(
 8001470:	f00a f8d8 	bl	800b624 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001474:	4602      	mov	r2, r0
 8001476:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800147a:	f507 709a 	add.w	r0, r7, #308	@ 0x134
 800147e:	4b3b      	ldr	r3, [pc, #236]	@ (800156c <StartDefaultTask+0x1b4>)
 8001480:	f009 fa38 	bl	800a8f4 <rclc_publisher_init_default>
	  	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	  	    "right_wheel_encoder");

	  // create subscriber

	  	  rclc_subscription_init_default(
 8001484:	f006 ff68 	bl	8008358 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001488:	4602      	mov	r2, r0
 800148a:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800148e:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8001492:	4b37      	ldr	r3, [pc, #220]	@ (8001570 <StartDefaultTask+0x1b8>)
 8001494:	f009 fa62 	bl	800a95c <rclc_subscription_init_default>
	  	     &node,
	  	     ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
	  	     "cmd_vel");

	  	// create executor
	  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8001498:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800149c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80014a0:	4618      	mov	r0, r3
 80014a2:	f008 fecd 	bl	800a240 <rclc_executor_get_zero_initialized_executor>
	  	rclc_executor_init(&executor, &support.context, 2, &allocator);
 80014a6:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80014aa:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 80014ae:	f107 0020 	add.w	r0, r7, #32
 80014b2:	2202      	movs	r2, #2
 80014b4:	f008 fed0 	bl	800a258 <rclc_executor_init>
	  	rclc_executor_add_subscription(&executor, &subscriber_cmd_vel, &sub_cmd_vel_msg, &subscription_cmd_vel_callback, ON_NEW_DATA);
 80014b8:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 80014bc:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 80014c0:	f107 0020 	add.w	r0, r7, #32
 80014c4:	2300      	movs	r3, #0
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001574 <StartDefaultTask+0x1bc>)
 80014ca:	f008 ff35 	bl	800a338 <rclc_executor_add_subscription>

	  for(;;)
	  {
		msg1.data = left_wheel_encoder;
 80014ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <StartDefaultTask+0x1c0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		msg2.data = right_wheel_encoder;
 80014d6:	4b29      	ldr	r3, [pc, #164]	@ (800157c <StartDefaultTask+0x1c4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	    rcl_ret_t ret1 = rcl_publish(&publisher1, &msg1, NULL);
 80014de:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 80014e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014e6:	2200      	movs	r2, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f008 fb1b 	bl	8009b24 <rcl_publish>
 80014ee:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
	    rcl_ret_t ret2 = rcl_publish(&publisher2, &msg2, NULL);
 80014f2:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 80014f6:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80014fa:	2200      	movs	r2, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f008 fb11 	bl	8009b24 <rcl_publish>
 8001502:	f8c7 0150 	str.w	r0, [r7, #336]	@ 0x150
	    rclc_executor_spin_some(&executor, 1000);    						// waits for 1000ns for ros data, theres no data it continues, if there is data then it executes subscription callback
 8001506:	f107 0120 	add.w	r1, r7, #32
 800150a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	4608      	mov	r0, r1
 8001514:	f009 f930 	bl	800a778 <rclc_executor_spin_some>

	    if ((ret1 | ret2) != RCL_RET_OK)
 8001518:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 800151c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001520:	4313      	orrs	r3, r2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d004      	beq.n	8001530 <StartDefaultTask+0x178>
	    {
	      printf("Error publishing (line %d)\n", __LINE__);
 8001526:	f240 2106 	movw	r1, #518	@ 0x206
 800152a:	4815      	ldr	r0, [pc, #84]	@ (8001580 <StartDefaultTask+0x1c8>)
 800152c:	f014 f8a4 	bl	8015678 <iprintf>
	    }
	    osDelay(10);
 8001530:	200a      	movs	r0, #10
 8001532:	f004 fa45 	bl	80059c0 <osDelay>
	  {
 8001536:	e7ca      	b.n	80014ce <StartDefaultTask+0x116>
 8001538:	08001e1d 	.word	0x08001e1d
 800153c:	08001db5 	.word	0x08001db5
 8001540:	08001d95 	.word	0x08001d95
 8001544:	08001d69 	.word	0x08001d69
 8001548:	20003f34 	.word	0x20003f34
 800154c:	08001591 	.word	0x08001591
 8001550:	080015d5 	.word	0x080015d5
 8001554:	0800160d 	.word	0x0800160d
 8001558:	08001679 	.word	0x08001679
 800155c:	080167b4 	.word	0x080167b4
 8001560:	080167dc 	.word	0x080167dc
 8001564:	080167e0 	.word	0x080167e0
 8001568:	080167f0 	.word	0x080167f0
 800156c:	08016804 	.word	0x08016804
 8001570:	08016818 	.word	0x08016818
 8001574:	08000e85 	.word	0x08000e85
 8001578:	20004040 	.word	0x20004040
 800157c:	20004044 	.word	0x20004044
 8001580:	08016820 	.word	0x08016820

08001584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001588:	b672      	cpsid	i
}
 800158a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <Error_Handler+0x8>

08001590 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800159a:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <microros_allocate+0x3c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4413      	add	r3, r2
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <microros_allocate+0x3c>)
 80015a8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <microros_allocate+0x40>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <microros_allocate+0x40>)
 80015b8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fa12 	bl	80009e4 <pvPortMallocMicroROS>
 80015c0:	4603      	mov	r3, r0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20004048 	.word	0x20004048
 80015d0:	2000404c 	.word	0x2000404c

080015d4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00c      	beq.n	80015fe <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fb21 	bl	8000c2c <getBlockSize>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4a06      	ldr	r2, [pc, #24]	@ (8001608 <microros_deallocate+0x34>)
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <microros_deallocate+0x34>)
 80015f6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff fabb 	bl	8000b74 <vPortFreeMicroROS>
  }
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	2000404c 	.word	0x2000404c

0800160c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001618:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <microros_reallocate+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	4413      	add	r3, r2
 8001622:	461a      	mov	r2, r3
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <microros_reallocate+0x64>)
 8001626:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <microros_reallocate+0x68>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	4413      	add	r3, r2
 8001632:	461a      	mov	r2, r3
 8001634:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <microros_reallocate+0x68>)
 8001636:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d104      	bne.n	8001648 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800163e:	68b8      	ldr	r0, [r7, #8]
 8001640:	f7ff f9d0 	bl	80009e4 <pvPortMallocMicroROS>
 8001644:	4603      	mov	r3, r0
 8001646:	e00e      	b.n	8001666 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f7ff faef 	bl	8000c2c <getBlockSize>
 800164e:	4603      	mov	r3, r0
 8001650:	4a08      	ldr	r2, [pc, #32]	@ (8001674 <microros_reallocate+0x68>)
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	461a      	mov	r2, r3
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <microros_reallocate+0x68>)
 800165a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f7ff fb02 	bl	8000c68 <pvPortReallocMicroROS>
 8001664:	4603      	mov	r3, r0
  }
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20004048 	.word	0x20004048
 8001674:	2000404c 	.word	0x2000404c

08001678 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	fb02 f303 	mul.w	r3, r2, r3
 800168c:	4a0c      	ldr	r2, [pc, #48]	@ (80016c0 <microros_zero_allocate+0x48>)
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	4413      	add	r3, r2
 8001692:	461a      	mov	r2, r3
 8001694:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <microros_zero_allocate+0x48>)
 8001696:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	fb02 f303 	mul.w	r3, r2, r3
 80016a0:	4a08      	ldr	r2, [pc, #32]	@ (80016c4 <microros_zero_allocate+0x4c>)
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	4413      	add	r3, r2
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <microros_zero_allocate+0x4c>)
 80016aa:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f7ff fb07 	bl	8000cc2 <pvPortCallocMicroROS>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20004048 	.word	0x20004048
 80016c4:	2000404c 	.word	0x2000404c

080016c8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80016c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80016da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016de:	a320      	add	r3, pc, #128	@ (adr r3, 8001760 <UTILS_NanosecondsToTimespec+0x98>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe ffb6 	bl	8000654 <__aeabi_ldivmod>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80016f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016f6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001760 <UTILS_NanosecondsToTimespec+0x98>)
 80016f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fc:	f7fe ffaa 	bl	8000654 <__aeabi_ldivmod>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	da20      	bge.n	800174e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4a11      	ldr	r2, [pc, #68]	@ (8001758 <UTILS_NanosecondsToTimespec+0x90>)
 8001712:	fb82 1203 	smull	r1, r2, r2, r3
 8001716:	1712      	asrs	r2, r2, #28
 8001718:	17db      	asrs	r3, r3, #31
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	3301      	adds	r3, #1
 800171e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	6979      	ldr	r1, [r7, #20]
 8001728:	17c8      	asrs	r0, r1, #31
 800172a:	460c      	mov	r4, r1
 800172c:	4605      	mov	r5, r0
 800172e:	ebb2 0804 	subs.w	r8, r2, r4
 8001732:	eb63 0905 	sbc.w	r9, r3, r5
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	4906      	ldr	r1, [pc, #24]	@ (800175c <UTILS_NanosecondsToTimespec+0x94>)
 8001744:	fb01 f303 	mul.w	r3, r1, r3
 8001748:	441a      	add	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	609a      	str	r2, [r3, #8]
    }
}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001758:	44b82fa1 	.word	0x44b82fa1
 800175c:	3b9aca00 	.word	0x3b9aca00
 8001760:	3b9aca00 	.word	0x3b9aca00
 8001764:	00000000 	.word	0x00000000

08001768 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800176c:	b08e      	sub	sp, #56	@ 0x38
 800176e:	af00      	add	r7, sp, #0
 8001770:	6278      	str	r0, [r7, #36]	@ 0x24
 8001772:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001774:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001778:	2300      	movs	r3, #0
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800178a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800178e:	4618      	mov	r0, r3
 8001790:	f005 fbe2 	bl	8006f58 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001796:	17da      	asrs	r2, r3, #31
 8001798:	61bb      	str	r3, [r7, #24]
 800179a:	61fa      	str	r2, [r7, #28]
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	69b9      	ldr	r1, [r7, #24]
 80017a6:	000b      	movs	r3, r1
 80017a8:	2200      	movs	r2, #0
 80017aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80017ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b0:	2200      	movs	r2, #0
 80017b2:	461c      	mov	r4, r3
 80017b4:	4615      	mov	r5, r2
 80017b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80017ba:	1911      	adds	r1, r2, r4
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	416b      	adcs	r3, r5
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017c6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80017ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	f04f 0400 	mov.w	r4, #0
 80017d6:	f04f 0500 	mov.w	r5, #0
 80017da:	015d      	lsls	r5, r3, #5
 80017dc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80017e0:	0154      	lsls	r4, r2, #5
 80017e2:	4622      	mov	r2, r4
 80017e4:	462b      	mov	r3, r5
 80017e6:	ebb2 0800 	subs.w	r8, r2, r0
 80017ea:	eb63 0901 	sbc.w	r9, r3, r1
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80017fa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80017fe:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001802:	4690      	mov	r8, r2
 8001804:	4699      	mov	r9, r3
 8001806:	eb18 0a00 	adds.w	sl, r8, r0
 800180a:	eb49 0b01 	adc.w	fp, r9, r1
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800181a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800181e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001822:	ebb2 040a 	subs.w	r4, r2, sl
 8001826:	603c      	str	r4, [r7, #0]
 8001828:	eb63 030b 	sbc.w	r3, r3, fp
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001832:	4623      	mov	r3, r4
 8001834:	181b      	adds	r3, r3, r0
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	462b      	mov	r3, r5
 800183a:	eb41 0303 	adc.w	r3, r1, r3
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	6a3a      	ldr	r2, [r7, #32]
 8001842:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001846:	f7ff ff3f 	bl	80016c8 <UTILS_NanosecondsToTimespec>

    return 0;
 800184a:	2300      	movs	r3, #0
 800184c:	4618      	mov	r0, r3
 800184e:	3738      	adds	r7, #56	@ 0x38
 8001850:	46bd      	mov	sp, r7
 8001852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001858 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <HAL_MspInit+0x4c>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001866:	4a0f      	ldr	r2, [pc, #60]	@ (80018a4 <HAL_MspInit+0x4c>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800186c:	6453      	str	r3, [r2, #68]	@ 0x44
 800186e:	4b0d      	ldr	r3, [pc, #52]	@ (80018a4 <HAL_MspInit+0x4c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <HAL_MspInit+0x4c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	4a08      	ldr	r2, [pc, #32]	@ (80018a4 <HAL_MspInit+0x4c>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001888:	6413      	str	r3, [r2, #64]	@ 0x40
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_MspInit+0x4c>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800

080018a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0b      	ldr	r2, [pc, #44]	@ (80018e4 <HAL_TIM_Base_MspInit+0x3c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d10d      	bne.n	80018d6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <HAL_TIM_Base_MspInit+0x40>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	4a09      	ldr	r2, [pc, #36]	@ (80018e8 <HAL_TIM_Base_MspInit+0x40>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ca:	4b07      	ldr	r3, [pc, #28]	@ (80018e8 <HAL_TIM_Base_MspInit+0x40>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40000400 	.word	0x40000400
 80018e8:	40023800 	.word	0x40023800

080018ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	@ 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a21      	ldr	r2, [pc, #132]	@ (8001990 <HAL_TIM_MspPostInit+0xa4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d13b      	bne.n	8001986 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <HAL_TIM_MspPostInit+0xa8>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a1f      	ldr	r2, [pc, #124]	@ (8001994 <HAL_TIM_MspPostInit+0xa8>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b1d      	ldr	r3, [pc, #116]	@ (8001994 <HAL_TIM_MspPostInit+0xa8>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b19      	ldr	r3, [pc, #100]	@ (8001994 <HAL_TIM_MspPostInit+0xa8>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	4a18      	ldr	r2, [pc, #96]	@ (8001994 <HAL_TIM_MspPostInit+0xa8>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6313      	str	r3, [r2, #48]	@ 0x30
 800193a:	4b16      	ldr	r3, [pc, #88]	@ (8001994 <HAL_TIM_MspPostInit+0xa8>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001946:	23c0      	movs	r3, #192	@ 0xc0
 8001948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001956:	2302      	movs	r3, #2
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	480d      	ldr	r0, [pc, #52]	@ (8001998 <HAL_TIM_MspPostInit+0xac>)
 8001962:	f001 f85f 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001966:	2303      	movs	r3, #3
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001976:	2302      	movs	r3, #2
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	4806      	ldr	r0, [pc, #24]	@ (800199c <HAL_TIM_MspPostInit+0xb0>)
 8001982:	f001 f84f 	bl	8002a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	@ 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40000400 	.word	0x40000400
 8001994:	40023800 	.word	0x40023800
 8001998:	40020000 	.word	0x40020000
 800199c:	40020400 	.word	0x40020400

080019a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	@ 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a4d      	ldr	r2, [pc, #308]	@ (8001af4 <HAL_UART_MspInit+0x154>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	f040 8093 	bne.w	8001aea <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	4b4b      	ldr	r3, [pc, #300]	@ (8001af8 <HAL_UART_MspInit+0x158>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	4a4a      	ldr	r2, [pc, #296]	@ (8001af8 <HAL_UART_MspInit+0x158>)
 80019ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d4:	4b48      	ldr	r3, [pc, #288]	@ (8001af8 <HAL_UART_MspInit+0x158>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	4b44      	ldr	r3, [pc, #272]	@ (8001af8 <HAL_UART_MspInit+0x158>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e8:	4a43      	ldr	r2, [pc, #268]	@ (8001af8 <HAL_UART_MspInit+0x158>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f0:	4b41      	ldr	r3, [pc, #260]	@ (8001af8 <HAL_UART_MspInit+0x158>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019fc:	230c      	movs	r3, #12
 80019fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a0c:	2307      	movs	r3, #7
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4619      	mov	r1, r3
 8001a16:	4839      	ldr	r0, [pc, #228]	@ (8001afc <HAL_UART_MspInit+0x15c>)
 8001a18:	f001 f804 	bl	8002a24 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001a1c:	4b38      	ldr	r3, [pc, #224]	@ (8001b00 <HAL_UART_MspInit+0x160>)
 8001a1e:	4a39      	ldr	r2, [pc, #228]	@ (8001b04 <HAL_UART_MspInit+0x164>)
 8001a20:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001a22:	4b37      	ldr	r3, [pc, #220]	@ (8001b00 <HAL_UART_MspInit+0x160>)
 8001a24:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a28:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a2a:	4b35      	ldr	r3, [pc, #212]	@ (8001b00 <HAL_UART_MspInit+0x160>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a30:	4b33      	ldr	r3, [pc, #204]	@ (8001b00 <HAL_UART_MspInit+0x160>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a36:	4b32      	ldr	r3, [pc, #200]	@ (8001b00 <HAL_UART_MspInit+0x160>)
 8001a38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a3c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a3e:	4b30      	ldr	r3, [pc, #192]	@ (8001b00 <HAL_UART_MspInit+0x160>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a44:	4b2e      	ldr	r3, [pc, #184]	@ (8001b00 <HAL_UART_MspInit+0x160>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b00 <HAL_UART_MspInit+0x160>)
 8001a4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a50:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a52:	4b2b      	ldr	r3, [pc, #172]	@ (8001b00 <HAL_UART_MspInit+0x160>)
 8001a54:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a58:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a5a:	4b29      	ldr	r3, [pc, #164]	@ (8001b00 <HAL_UART_MspInit+0x160>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a60:	4827      	ldr	r0, [pc, #156]	@ (8001b00 <HAL_UART_MspInit+0x160>)
 8001a62:	f000 fbdd 	bl	8002220 <HAL_DMA_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001a6c:	f7ff fd8a 	bl	8001584 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a23      	ldr	r2, [pc, #140]	@ (8001b00 <HAL_UART_MspInit+0x160>)
 8001a74:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a76:	4a22      	ldr	r2, [pc, #136]	@ (8001b00 <HAL_UART_MspInit+0x160>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001a7c:	4b22      	ldr	r3, [pc, #136]	@ (8001b08 <HAL_UART_MspInit+0x168>)
 8001a7e:	4a23      	ldr	r2, [pc, #140]	@ (8001b0c <HAL_UART_MspInit+0x16c>)
 8001a80:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001a82:	4b21      	ldr	r3, [pc, #132]	@ (8001b08 <HAL_UART_MspInit+0x168>)
 8001a84:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a88:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b08 <HAL_UART_MspInit+0x168>)
 8001a8c:	2240      	movs	r2, #64	@ 0x40
 8001a8e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a90:	4b1d      	ldr	r3, [pc, #116]	@ (8001b08 <HAL_UART_MspInit+0x168>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a96:	4b1c      	ldr	r3, [pc, #112]	@ (8001b08 <HAL_UART_MspInit+0x168>)
 8001a98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a9c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <HAL_UART_MspInit+0x168>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aa4:	4b18      	ldr	r3, [pc, #96]	@ (8001b08 <HAL_UART_MspInit+0x168>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001aaa:	4b17      	ldr	r3, [pc, #92]	@ (8001b08 <HAL_UART_MspInit+0x168>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ab0:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <HAL_UART_MspInit+0x168>)
 8001ab2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001ab6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ab8:	4b13      	ldr	r3, [pc, #76]	@ (8001b08 <HAL_UART_MspInit+0x168>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001abe:	4812      	ldr	r0, [pc, #72]	@ (8001b08 <HAL_UART_MspInit+0x168>)
 8001ac0:	f000 fbae 	bl	8002220 <HAL_DMA_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001aca:	f7ff fd5b 	bl	8001584 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b08 <HAL_UART_MspInit+0x168>)
 8001ad2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ad4:	4a0c      	ldr	r2, [pc, #48]	@ (8001b08 <HAL_UART_MspInit+0x168>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2105      	movs	r1, #5
 8001ade:	2026      	movs	r0, #38	@ 0x26
 8001ae0:	f000 fb67 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ae4:	2026      	movs	r0, #38	@ 0x26
 8001ae6:	f000 fb80 	bl	80021ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	@ 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40004400 	.word	0x40004400
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	20003f7c 	.word	0x20003f7c
 8001b04:	40026088 	.word	0x40026088
 8001b08:	20003fdc 	.word	0x20003fdc
 8001b0c:	400260a0 	.word	0x400260a0

08001b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <NMI_Handler+0x4>

08001b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <HardFault_Handler+0x4>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <MemManage_Handler+0x4>

08001b28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <BusFault_Handler+0x4>

08001b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <UsageFault_Handler+0x4>

08001b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4a:	f000 fa37 	bl	8001fbc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b4e:	f005 fb87 	bl	8007260 <xTaskGetSchedulerState>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d001      	beq.n	8001b5c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b58:	f006 f97e 	bl	8007e58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b64:	2001      	movs	r0, #1
 8001b66:	f001 f8e1 	bl	8002d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b72:	2002      	movs	r0, #2
 8001b74:	f001 f8da 	bl	8002d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b80:	4802      	ldr	r0, [pc, #8]	@ (8001b8c <DMA1_Stream5_IRQHandler+0x10>)
 8001b82:	f000 fce5 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20003f7c 	.word	0x20003f7c

08001b90 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b94:	4802      	ldr	r0, [pc, #8]	@ (8001ba0 <DMA1_Stream6_IRQHandler+0x10>)
 8001b96:	f000 fcdb 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20003fdc 	.word	0x20003fdc

08001ba4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ba8:	4802      	ldr	r0, [pc, #8]	@ (8001bb4 <USART2_IRQHandler+0x10>)
 8001baa:	f002 fcfb 	bl	80045a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20003f34 	.word	0x20003f34

08001bb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return 1;
 8001bbc:	2301      	movs	r3, #1
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_kill>:

int _kill(int pid, int sig)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bd2:	f013 fed1 	bl	8015978 <__errno>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2216      	movs	r2, #22
 8001bda:	601a      	str	r2, [r3, #0]
  return -1;
 8001bdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_exit>:

void _exit (int status)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ffe7 	bl	8001bc8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bfa:	bf00      	nop
 8001bfc:	e7fd      	b.n	8001bfa <_exit+0x12>

08001bfe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b086      	sub	sp, #24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	e00a      	b.n	8001c26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c10:	f3af 8000 	nop.w
 8001c14:	4601      	mov	r1, r0
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	60ba      	str	r2, [r7, #8]
 8001c1c:	b2ca      	uxtb	r2, r1
 8001c1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3301      	adds	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	dbf0      	blt.n	8001c10 <_read+0x12>
  }

  return len;
 8001c2e:	687b      	ldr	r3, [r7, #4]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	e009      	b.n	8001c5e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	60ba      	str	r2, [r7, #8]
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	dbf1      	blt.n	8001c4a <_write+0x12>
  }
  return len;
 8001c66:	687b      	ldr	r3, [r7, #4]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <_close>:

int _close(int file)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c98:	605a      	str	r2, [r3, #4]
  return 0;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <_isatty>:

int _isatty(int file)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cb0:	2301      	movs	r3, #1
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b085      	sub	sp, #20
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce0:	4a14      	ldr	r2, [pc, #80]	@ (8001d34 <_sbrk+0x5c>)
 8001ce2:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <_sbrk+0x60>)
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cec:	4b13      	ldr	r3, [pc, #76]	@ (8001d3c <_sbrk+0x64>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d102      	bne.n	8001cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <_sbrk+0x64>)
 8001cf6:	4a12      	ldr	r2, [pc, #72]	@ (8001d40 <_sbrk+0x68>)
 8001cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfa:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <_sbrk+0x64>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d207      	bcs.n	8001d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d08:	f013 fe36 	bl	8015978 <__errno>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	220c      	movs	r2, #12
 8001d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d16:	e009      	b.n	8001d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d18:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1e:	4b07      	ldr	r3, [pc, #28]	@ (8001d3c <_sbrk+0x64>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	4a05      	ldr	r2, [pc, #20]	@ (8001d3c <_sbrk+0x64>)
 8001d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20020000 	.word	0x20020000
 8001d38:	00000400 	.word	0x00000400
 8001d3c:	20004054 	.word	0x20004054
 8001d40:	2000de80 	.word	0x2000de80

08001d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d48:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <SystemInit+0x20>)
 8001d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d4e:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <SystemInit+0x20>)
 8001d50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001d76:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001d78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d7c:	4904      	ldr	r1, [pc, #16]	@ (8001d90 <cubemx_transport_open+0x28>)
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f002 fb6c 	bl	800445c <HAL_UART_Receive_DMA>
    return true;
 8001d84:	2301      	movs	r3, #1
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20004058 	.word	0x20004058

08001d94 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001da2:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f002 fb7e 	bl	80044a6 <HAL_UART_DMAStop>
    return true;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001dc8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b20      	cmp	r3, #32
 8001dd4:	d11c      	bne.n	8001e10 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	6978      	ldr	r0, [r7, #20]
 8001de0:	f002 facc 	bl	800437c <HAL_UART_Transmit_DMA>
 8001de4:	4603      	mov	r3, r0
 8001de6:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001de8:	e002      	b.n	8001df0 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001dea:	2001      	movs	r0, #1
 8001dec:	f003 fde8 	bl	80059c0 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d105      	bne.n	8001e02 <cubemx_transport_write+0x4e>
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	d1f3      	bne.n	8001dea <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001e02:	7cfb      	ldrb	r3, [r7, #19]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <cubemx_transport_write+0x58>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	e002      	b.n	8001e12 <cubemx_transport_write+0x5e>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e000      	b.n	8001e12 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001e10:	2300      	movs	r3, #0
    }
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001e30:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e36:	b672      	cpsid	i
}
 8001e38:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001e46:	4a1c      	ldr	r2, [pc, #112]	@ (8001eb8 <cubemx_transport_read+0x9c>)
 8001e48:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e4a:	b662      	cpsie	i
}
 8001e4c:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3301      	adds	r3, #1
 8001e52:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001e54:	2001      	movs	r0, #1
 8001e56:	f003 fdb3 	bl	80059c0 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001e5a:	4b18      	ldr	r3, [pc, #96]	@ (8001ebc <cubemx_transport_read+0xa0>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4b16      	ldr	r3, [pc, #88]	@ (8001eb8 <cubemx_transport_read+0x9c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d103      	bne.n	8001e6e <cubemx_transport_read+0x52>
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	dbe3      	blt.n	8001e36 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001e72:	e011      	b.n	8001e98 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001e74:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <cubemx_transport_read+0xa0>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	440b      	add	r3, r1
 8001e7e:	4910      	ldr	r1, [pc, #64]	@ (8001ec0 <cubemx_transport_read+0xa4>)
 8001e80:	5c8a      	ldrb	r2, [r1, r2]
 8001e82:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001e84:	4b0d      	ldr	r3, [pc, #52]	@ (8001ebc <cubemx_transport_read+0xa0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001ebc <cubemx_transport_read+0xa0>)
 8001e90:	6013      	str	r3, [r2, #0]
        wrote++;
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	3301      	adds	r3, #1
 8001e96:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001e98:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <cubemx_transport_read+0xa0>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <cubemx_transport_read+0x9c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d003      	beq.n	8001eac <cubemx_transport_read+0x90>
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d3e3      	bcc.n	8001e74 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001eac:	69bb      	ldr	r3, [r7, #24]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3720      	adds	r7, #32
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	2000485c 	.word	0x2000485c
 8001ebc:	20004858 	.word	0x20004858
 8001ec0:	20004058 	.word	0x20004058

08001ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001efc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ec8:	f7ff ff3c 	bl	8001d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ecc:	480c      	ldr	r0, [pc, #48]	@ (8001f00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ece:	490d      	ldr	r1, [pc, #52]	@ (8001f04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8001f10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ef2:	f013 fd47 	bl	8015984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef6:	f7ff f853 	bl	8000fa0 <main>
  bx  lr    
 8001efa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001efc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f04:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8001f08:	08017764 	.word	0x08017764
  ldr r2, =_sbss
 8001f0c:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8001f10:	2000de7c 	.word	0x2000de7c

08001f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f14:	e7fe      	b.n	8001f14 <ADC_IRQHandler>
	...

08001f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <HAL_Init+0x40>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0d      	ldr	r2, [pc, #52]	@ (8001f58 <HAL_Init+0x40>)
 8001f22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f28:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f58 <HAL_Init+0x40>)
 8001f2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f34:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a07      	ldr	r2, [pc, #28]	@ (8001f58 <HAL_Init+0x40>)
 8001f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f40:	2003      	movs	r0, #3
 8001f42:	f000 f92b 	bl	800219c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f46:	2000      	movs	r0, #0
 8001f48:	f000 f808 	bl	8001f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f4c:	f7ff fc84 	bl	8001858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023c00 	.word	0x40023c00

08001f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f64:	4b12      	ldr	r3, [pc, #72]	@ (8001fb0 <HAL_InitTick+0x54>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b12      	ldr	r3, [pc, #72]	@ (8001fb4 <HAL_InitTick+0x58>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 f943 	bl	8002206 <HAL_SYSTICK_Config>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00e      	b.n	8001fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b0f      	cmp	r3, #15
 8001f8e:	d80a      	bhi.n	8001fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f90:	2200      	movs	r2, #0
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f98:	f000 f90b 	bl	80021b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f9c:	4a06      	ldr	r2, [pc, #24]	@ (8001fb8 <HAL_InitTick+0x5c>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e000      	b.n	8001fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000004 	.word	0x20000004
 8001fb4:	2000000c 	.word	0x2000000c
 8001fb8:	20000008 	.word	0x20000008

08001fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <HAL_IncTick+0x20>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_IncTick+0x24>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <HAL_IncTick+0x24>)
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	2000000c 	.word	0x2000000c
 8001fe0:	20004860 	.word	0x20004860

08001fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe8:	4b03      	ldr	r3, [pc, #12]	@ (8001ff8 <HAL_GetTick+0x14>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20004860 	.word	0x20004860

08001ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800200c:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002018:	4013      	ands	r3, r2
 800201a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002024:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800202c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202e:	4a04      	ldr	r2, [pc, #16]	@ (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	60d3      	str	r3, [r2, #12]
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002048:	4b04      	ldr	r3, [pc, #16]	@ (800205c <__NVIC_GetPriorityGrouping+0x18>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	f003 0307 	and.w	r3, r3, #7
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	2b00      	cmp	r3, #0
 8002070:	db0b      	blt.n	800208a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	f003 021f 	and.w	r2, r3, #31
 8002078:	4907      	ldr	r1, [pc, #28]	@ (8002098 <__NVIC_EnableIRQ+0x38>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	2001      	movs	r0, #1
 8002082:	fa00 f202 	lsl.w	r2, r0, r2
 8002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000e100 	.word	0xe000e100

0800209c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	6039      	str	r1, [r7, #0]
 80020a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	db0a      	blt.n	80020c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	490c      	ldr	r1, [pc, #48]	@ (80020e8 <__NVIC_SetPriority+0x4c>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	0112      	lsls	r2, r2, #4
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	440b      	add	r3, r1
 80020c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c4:	e00a      	b.n	80020dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4908      	ldr	r1, [pc, #32]	@ (80020ec <__NVIC_SetPriority+0x50>)
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	3b04      	subs	r3, #4
 80020d4:	0112      	lsls	r2, r2, #4
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	440b      	add	r3, r1
 80020da:	761a      	strb	r2, [r3, #24]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000e100 	.word	0xe000e100
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	@ 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f1c3 0307 	rsb	r3, r3, #7
 800210a:	2b04      	cmp	r3, #4
 800210c:	bf28      	it	cs
 800210e:	2304      	movcs	r3, #4
 8002110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3304      	adds	r3, #4
 8002116:	2b06      	cmp	r3, #6
 8002118:	d902      	bls.n	8002120 <NVIC_EncodePriority+0x30>
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3b03      	subs	r3, #3
 800211e:	e000      	b.n	8002122 <NVIC_EncodePriority+0x32>
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43da      	mvns	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	401a      	ands	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002138:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	43d9      	mvns	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	4313      	orrs	r3, r2
         );
}
 800214a:	4618      	mov	r0, r3
 800214c:	3724      	adds	r7, #36	@ 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002168:	d301      	bcc.n	800216e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216a:	2301      	movs	r3, #1
 800216c:	e00f      	b.n	800218e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216e:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <SysTick_Config+0x40>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002176:	210f      	movs	r1, #15
 8002178:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800217c:	f7ff ff8e 	bl	800209c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002180:	4b05      	ldr	r3, [pc, #20]	@ (8002198 <SysTick_Config+0x40>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002186:	4b04      	ldr	r3, [pc, #16]	@ (8002198 <SysTick_Config+0x40>)
 8002188:	2207      	movs	r2, #7
 800218a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	e000e010 	.word	0xe000e010

0800219c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ff29 	bl	8001ffc <__NVIC_SetPriorityGrouping>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c4:	f7ff ff3e 	bl	8002044 <__NVIC_GetPriorityGrouping>
 80021c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	6978      	ldr	r0, [r7, #20]
 80021d0:	f7ff ff8e 	bl	80020f0 <NVIC_EncodePriority>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff5d 	bl	800209c <__NVIC_SetPriority>
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff31 	bl	8002060 <__NVIC_EnableIRQ>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ffa2 	bl	8002158 <SysTick_Config>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800222c:	f7ff feda 	bl	8001fe4 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e099      	b.n	8002370 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800225c:	e00f      	b.n	800227e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800225e:	f7ff fec1 	bl	8001fe4 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b05      	cmp	r3, #5
 800226a:	d908      	bls.n	800227e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2203      	movs	r2, #3
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e078      	b.n	8002370 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1e8      	bne.n	800225e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	4b38      	ldr	r3, [pc, #224]	@ (8002378 <HAL_DMA_Init+0x158>)
 8002298:	4013      	ands	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d107      	bne.n	80022e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e0:	4313      	orrs	r3, r2
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f023 0307 	bic.w	r3, r3, #7
 80022fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	4313      	orrs	r3, r2
 8002308:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230e:	2b04      	cmp	r3, #4
 8002310:	d117      	bne.n	8002342 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00e      	beq.n	8002342 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 fb01 	bl	800292c <DMA_CheckFifoParam>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2240      	movs	r2, #64	@ 0x40
 8002334:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800233e:	2301      	movs	r3, #1
 8002340:	e016      	b.n	8002370 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fab8 	bl	80028c0 <DMA_CalcBaseAndBitshift>
 8002350:	4603      	mov	r3, r0
 8002352:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002358:	223f      	movs	r2, #63	@ 0x3f
 800235a:	409a      	lsls	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	f010803f 	.word	0xf010803f

0800237c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002392:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_DMA_Start_IT+0x26>
 800239e:	2302      	movs	r3, #2
 80023a0:	e040      	b.n	8002424 <HAL_DMA_Start_IT+0xa8>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d12f      	bne.n	8002416 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2202      	movs	r2, #2
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fa4a 	bl	8002864 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d4:	223f      	movs	r2, #63	@ 0x3f
 80023d6:	409a      	lsls	r2, r3
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0216 	orr.w	r2, r2, #22
 80023ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d007      	beq.n	8002404 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0208 	orr.w	r2, r2, #8
 8002402:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	e005      	b.n	8002422 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800241e:	2302      	movs	r3, #2
 8002420:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002422:	7dfb      	ldrb	r3, [r7, #23]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002438:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800243a:	f7ff fdd3 	bl	8001fe4 <HAL_GetTick>
 800243e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d008      	beq.n	800245e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2280      	movs	r2, #128	@ 0x80
 8002450:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e052      	b.n	8002504 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0216 	bic.w	r2, r2, #22
 800246c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695a      	ldr	r2, [r3, #20]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800247c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <HAL_DMA_Abort+0x62>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0208 	bic.w	r2, r2, #8
 800249c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0201 	bic.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ae:	e013      	b.n	80024d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024b0:	f7ff fd98 	bl	8001fe4 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b05      	cmp	r3, #5
 80024bc:	d90c      	bls.n	80024d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2220      	movs	r2, #32
 80024c2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2203      	movs	r2, #3
 80024c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e015      	b.n	8002504 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1e4      	bne.n	80024b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ea:	223f      	movs	r2, #63	@ 0x3f
 80024ec:	409a      	lsls	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d004      	beq.n	800252a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2280      	movs	r2, #128	@ 0x80
 8002524:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e00c      	b.n	8002544 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2205      	movs	r2, #5
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800255c:	4b8e      	ldr	r3, [pc, #568]	@ (8002798 <HAL_DMA_IRQHandler+0x248>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a8e      	ldr	r2, [pc, #568]	@ (800279c <HAL_DMA_IRQHandler+0x24c>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	0a9b      	lsrs	r3, r3, #10
 8002568:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800257a:	2208      	movs	r2, #8
 800257c:	409a      	lsls	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d01a      	beq.n	80025bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0204 	bic.w	r2, r2, #4
 80025a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a8:	2208      	movs	r2, #8
 80025aa:	409a      	lsls	r2, r3
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b4:	f043 0201 	orr.w	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c0:	2201      	movs	r2, #1
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d012      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00b      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025de:	2201      	movs	r2, #1
 80025e0:	409a      	lsls	r2, r3
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ea:	f043 0202 	orr.w	r2, r3, #2
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f6:	2204      	movs	r2, #4
 80025f8:	409a      	lsls	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d012      	beq.n	8002628 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00b      	beq.n	8002628 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002614:	2204      	movs	r2, #4
 8002616:	409a      	lsls	r2, r3
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002620:	f043 0204 	orr.w	r2, r3, #4
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262c:	2210      	movs	r2, #16
 800262e:	409a      	lsls	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d043      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d03c      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264a:	2210      	movs	r2, #16
 800264c:	409a      	lsls	r2, r3
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d018      	beq.n	8002692 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d108      	bne.n	8002680 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d024      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	4798      	blx	r3
 800267e:	e01f      	b.n	80026c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01b      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4798      	blx	r3
 8002690:	e016      	b.n	80026c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d107      	bne.n	80026b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0208 	bic.w	r2, r2, #8
 80026ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c4:	2220      	movs	r2, #32
 80026c6:	409a      	lsls	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 808f 	beq.w	80027f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 8087 	beq.w	80027f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e6:	2220      	movs	r2, #32
 80026e8:	409a      	lsls	r2, r3
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b05      	cmp	r3, #5
 80026f8:	d136      	bne.n	8002768 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0216 	bic.w	r2, r2, #22
 8002708:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002718:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d103      	bne.n	800272a <HAL_DMA_IRQHandler+0x1da>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0208 	bic.w	r2, r2, #8
 8002738:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273e:	223f      	movs	r2, #63	@ 0x3f
 8002740:	409a      	lsls	r2, r3
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800275a:	2b00      	cmp	r3, #0
 800275c:	d07e      	beq.n	800285c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	4798      	blx	r3
        }
        return;
 8002766:	e079      	b.n	800285c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d01d      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10d      	bne.n	80027a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002788:	2b00      	cmp	r3, #0
 800278a:	d031      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
 8002794:	e02c      	b.n	80027f0 <HAL_DMA_IRQHandler+0x2a0>
 8002796:	bf00      	nop
 8002798:	20000004 	.word	0x20000004
 800279c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d023      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	4798      	blx	r3
 80027b0:	e01e      	b.n	80027f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10f      	bne.n	80027e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0210 	bic.w	r2, r2, #16
 80027ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d032      	beq.n	800285e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d022      	beq.n	800284a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2205      	movs	r2, #5
 8002808:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	3301      	adds	r3, #1
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	429a      	cmp	r2, r3
 8002826:	d307      	bcc.n	8002838 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f2      	bne.n	800281c <HAL_DMA_IRQHandler+0x2cc>
 8002836:	e000      	b.n	800283a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002838:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	4798      	blx	r3
 800285a:	e000      	b.n	800285e <HAL_DMA_IRQHandler+0x30e>
        return;
 800285c:	bf00      	nop
    }
  }
}
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002880:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b40      	cmp	r3, #64	@ 0x40
 8002890:	d108      	bne.n	80028a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028a2:	e007      	b.n	80028b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	60da      	str	r2, [r3, #12]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	3b10      	subs	r3, #16
 80028d0:	4a14      	ldr	r2, [pc, #80]	@ (8002924 <DMA_CalcBaseAndBitshift+0x64>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	091b      	lsrs	r3, r3, #4
 80028d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028da:	4a13      	ldr	r2, [pc, #76]	@ (8002928 <DMA_CalcBaseAndBitshift+0x68>)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d909      	bls.n	8002902 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80028f6:	f023 0303 	bic.w	r3, r3, #3
 80028fa:	1d1a      	adds	r2, r3, #4
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8002900:	e007      	b.n	8002912 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800290a:	f023 0303 	bic.w	r3, r3, #3
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	aaaaaaab 	.word	0xaaaaaaab
 8002928:	080168ac 	.word	0x080168ac

0800292c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d11f      	bne.n	8002986 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b03      	cmp	r3, #3
 800294a:	d856      	bhi.n	80029fa <DMA_CheckFifoParam+0xce>
 800294c:	a201      	add	r2, pc, #4	@ (adr r2, 8002954 <DMA_CheckFifoParam+0x28>)
 800294e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002952:	bf00      	nop
 8002954:	08002965 	.word	0x08002965
 8002958:	08002977 	.word	0x08002977
 800295c:	08002965 	.word	0x08002965
 8002960:	080029fb 	.word	0x080029fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002968:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d046      	beq.n	80029fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002974:	e043      	b.n	80029fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800297e:	d140      	bne.n	8002a02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002984:	e03d      	b.n	8002a02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800298e:	d121      	bne.n	80029d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d837      	bhi.n	8002a06 <DMA_CheckFifoParam+0xda>
 8002996:	a201      	add	r2, pc, #4	@ (adr r2, 800299c <DMA_CheckFifoParam+0x70>)
 8002998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299c:	080029ad 	.word	0x080029ad
 80029a0:	080029b3 	.word	0x080029b3
 80029a4:	080029ad 	.word	0x080029ad
 80029a8:	080029c5 	.word	0x080029c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
      break;
 80029b0:	e030      	b.n	8002a14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d025      	beq.n	8002a0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c2:	e022      	b.n	8002a0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029cc:	d11f      	bne.n	8002a0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029d2:	e01c      	b.n	8002a0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d903      	bls.n	80029e2 <DMA_CheckFifoParam+0xb6>
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d003      	beq.n	80029e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029e0:	e018      	b.n	8002a14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
      break;
 80029e6:	e015      	b.n	8002a14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00e      	beq.n	8002a12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      break;
 80029f8:	e00b      	b.n	8002a12 <DMA_CheckFifoParam+0xe6>
      break;
 80029fa:	bf00      	nop
 80029fc:	e00a      	b.n	8002a14 <DMA_CheckFifoParam+0xe8>
      break;
 80029fe:	bf00      	nop
 8002a00:	e008      	b.n	8002a14 <DMA_CheckFifoParam+0xe8>
      break;
 8002a02:	bf00      	nop
 8002a04:	e006      	b.n	8002a14 <DMA_CheckFifoParam+0xe8>
      break;
 8002a06:	bf00      	nop
 8002a08:	e004      	b.n	8002a14 <DMA_CheckFifoParam+0xe8>
      break;
 8002a0a:	bf00      	nop
 8002a0c:	e002      	b.n	8002a14 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a0e:	bf00      	nop
 8002a10:	e000      	b.n	8002a14 <DMA_CheckFifoParam+0xe8>
      break;
 8002a12:	bf00      	nop
    }
  } 
  
  return status; 
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop

08002a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b089      	sub	sp, #36	@ 0x24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	e159      	b.n	8002cf4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a40:	2201      	movs	r2, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	f040 8148 	bne.w	8002cee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d005      	beq.n	8002a76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d130      	bne.n	8002ad8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	2203      	movs	r2, #3
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aac:	2201      	movs	r2, #1
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 0201 	and.w	r2, r3, #1
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d017      	beq.n	8002b14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2203      	movs	r2, #3
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d123      	bne.n	8002b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	08da      	lsrs	r2, r3, #3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3208      	adds	r2, #8
 8002b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	220f      	movs	r2, #15
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	08da      	lsrs	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3208      	adds	r2, #8
 8002b62:	69b9      	ldr	r1, [r7, #24]
 8002b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	2203      	movs	r2, #3
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0203 	and.w	r2, r3, #3
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80a2 	beq.w	8002cee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	4b57      	ldr	r3, [pc, #348]	@ (8002d0c <HAL_GPIO_Init+0x2e8>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb2:	4a56      	ldr	r2, [pc, #344]	@ (8002d0c <HAL_GPIO_Init+0x2e8>)
 8002bb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bba:	4b54      	ldr	r3, [pc, #336]	@ (8002d0c <HAL_GPIO_Init+0x2e8>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bc6:	4a52      	ldr	r2, [pc, #328]	@ (8002d10 <HAL_GPIO_Init+0x2ec>)
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	089b      	lsrs	r3, r3, #2
 8002bcc:	3302      	adds	r3, #2
 8002bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	220f      	movs	r2, #15
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a49      	ldr	r2, [pc, #292]	@ (8002d14 <HAL_GPIO_Init+0x2f0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d019      	beq.n	8002c26 <HAL_GPIO_Init+0x202>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a48      	ldr	r2, [pc, #288]	@ (8002d18 <HAL_GPIO_Init+0x2f4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d013      	beq.n	8002c22 <HAL_GPIO_Init+0x1fe>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a47      	ldr	r2, [pc, #284]	@ (8002d1c <HAL_GPIO_Init+0x2f8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00d      	beq.n	8002c1e <HAL_GPIO_Init+0x1fa>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a46      	ldr	r2, [pc, #280]	@ (8002d20 <HAL_GPIO_Init+0x2fc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d007      	beq.n	8002c1a <HAL_GPIO_Init+0x1f6>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a45      	ldr	r2, [pc, #276]	@ (8002d24 <HAL_GPIO_Init+0x300>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d101      	bne.n	8002c16 <HAL_GPIO_Init+0x1f2>
 8002c12:	2304      	movs	r3, #4
 8002c14:	e008      	b.n	8002c28 <HAL_GPIO_Init+0x204>
 8002c16:	2307      	movs	r3, #7
 8002c18:	e006      	b.n	8002c28 <HAL_GPIO_Init+0x204>
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e004      	b.n	8002c28 <HAL_GPIO_Init+0x204>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e002      	b.n	8002c28 <HAL_GPIO_Init+0x204>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_GPIO_Init+0x204>
 8002c26:	2300      	movs	r3, #0
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	f002 0203 	and.w	r2, r2, #3
 8002c2e:	0092      	lsls	r2, r2, #2
 8002c30:	4093      	lsls	r3, r2
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c38:	4935      	ldr	r1, [pc, #212]	@ (8002d10 <HAL_GPIO_Init+0x2ec>)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	089b      	lsrs	r3, r3, #2
 8002c3e:	3302      	adds	r3, #2
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c46:	4b38      	ldr	r3, [pc, #224]	@ (8002d28 <HAL_GPIO_Init+0x304>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c6a:	4a2f      	ldr	r2, [pc, #188]	@ (8002d28 <HAL_GPIO_Init+0x304>)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c70:	4b2d      	ldr	r3, [pc, #180]	@ (8002d28 <HAL_GPIO_Init+0x304>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c94:	4a24      	ldr	r2, [pc, #144]	@ (8002d28 <HAL_GPIO_Init+0x304>)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c9a:	4b23      	ldr	r3, [pc, #140]	@ (8002d28 <HAL_GPIO_Init+0x304>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8002d28 <HAL_GPIO_Init+0x304>)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cc4:	4b18      	ldr	r3, [pc, #96]	@ (8002d28 <HAL_GPIO_Init+0x304>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ce8:	4a0f      	ldr	r2, [pc, #60]	@ (8002d28 <HAL_GPIO_Init+0x304>)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	61fb      	str	r3, [r7, #28]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	2b0f      	cmp	r3, #15
 8002cf8:	f67f aea2 	bls.w	8002a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	3724      	adds	r7, #36	@ 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40013800 	.word	0x40013800
 8002d14:	40020000 	.word	0x40020000
 8002d18:	40020400 	.word	0x40020400
 8002d1c:	40020800 	.word	0x40020800
 8002d20:	40020c00 	.word	0x40020c00
 8002d24:	40021000 	.word	0x40021000
 8002d28:	40013c00 	.word	0x40013c00

08002d2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d36:	4b08      	ldr	r3, [pc, #32]	@ (8002d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d006      	beq.n	8002d50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d42:	4a05      	ldr	r2, [pc, #20]	@ (8002d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe f908 	bl	8000f60 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40013c00 	.word	0x40013c00

08002d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e267      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d075      	beq.n	8002e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d7a:	4b88      	ldr	r3, [pc, #544]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d00c      	beq.n	8002da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d86:	4b85      	ldr	r3, [pc, #532]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d112      	bne.n	8002db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d92:	4b82      	ldr	r3, [pc, #520]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d9e:	d10b      	bne.n	8002db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da0:	4b7e      	ldr	r3, [pc, #504]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d05b      	beq.n	8002e64 <HAL_RCC_OscConfig+0x108>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d157      	bne.n	8002e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e242      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dc0:	d106      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x74>
 8002dc2:	4b76      	ldr	r3, [pc, #472]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a75      	ldr	r2, [pc, #468]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e01d      	b.n	8002e0c <HAL_RCC_OscConfig+0xb0>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x98>
 8002dda:	4b70      	ldr	r3, [pc, #448]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a6f      	ldr	r2, [pc, #444]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002de0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	4b6d      	ldr	r3, [pc, #436]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a6c      	ldr	r2, [pc, #432]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0xb0>
 8002df4:	4b69      	ldr	r3, [pc, #420]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a68      	ldr	r2, [pc, #416]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	4b66      	ldr	r3, [pc, #408]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a65      	ldr	r2, [pc, #404]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d013      	beq.n	8002e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7ff f8e6 	bl	8001fe4 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7ff f8e2 	bl	8001fe4 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	@ 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e207      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0xc0>
 8002e3a:	e014      	b.n	8002e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7ff f8d2 	bl	8001fe4 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e44:	f7ff f8ce 	bl	8001fe4 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	@ 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e1f3      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	4b51      	ldr	r3, [pc, #324]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0xe8>
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d063      	beq.n	8002f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e72:	4b4a      	ldr	r3, [pc, #296]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7e:	4b47      	ldr	r3, [pc, #284]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d11c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8a:	4b44      	ldr	r3, [pc, #272]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d116      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e96:	4b41      	ldr	r3, [pc, #260]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_RCC_OscConfig+0x152>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e1c7      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	4b3b      	ldr	r3, [pc, #236]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4937      	ldr	r1, [pc, #220]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec2:	e03a      	b.n	8002f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ecc:	4b34      	ldr	r3, [pc, #208]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7ff f887 	bl	8001fe4 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eda:	f7ff f883 	bl	8001fe4 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e1a8      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	4b2b      	ldr	r3, [pc, #172]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	4b28      	ldr	r3, [pc, #160]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4925      	ldr	r1, [pc, #148]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]
 8002f0c:	e015      	b.n	8002f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0e:	4b24      	ldr	r3, [pc, #144]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7ff f866 	bl	8001fe4 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1c:	f7ff f862 	bl	8001fe4 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e187      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d036      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d016      	beq.n	8002f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4e:	4b15      	ldr	r3, [pc, #84]	@ (8002fa4 <HAL_RCC_OscConfig+0x248>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7ff f846 	bl	8001fe4 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7ff f842 	bl	8001fe4 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e167      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x200>
 8002f7a:	e01b      	b.n	8002fb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7c:	4b09      	ldr	r3, [pc, #36]	@ (8002fa4 <HAL_RCC_OscConfig+0x248>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f82:	f7ff f82f 	bl	8001fe4 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f88:	e00e      	b.n	8002fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f8a:	f7ff f82b 	bl	8001fe4 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d907      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e150      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	42470000 	.word	0x42470000
 8002fa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa8:	4b88      	ldr	r3, [pc, #544]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 8002faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ea      	bne.n	8002f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8097 	beq.w	80030f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc6:	4b81      	ldr	r3, [pc, #516]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10f      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	4b7d      	ldr	r3, [pc, #500]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	4a7c      	ldr	r2, [pc, #496]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe2:	4b7a      	ldr	r3, [pc, #488]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff2:	4b77      	ldr	r3, [pc, #476]	@ (80031d0 <HAL_RCC_OscConfig+0x474>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d118      	bne.n	8003030 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffe:	4b74      	ldr	r3, [pc, #464]	@ (80031d0 <HAL_RCC_OscConfig+0x474>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a73      	ldr	r2, [pc, #460]	@ (80031d0 <HAL_RCC_OscConfig+0x474>)
 8003004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300a:	f7fe ffeb 	bl	8001fe4 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003012:	f7fe ffe7 	bl	8001fe4 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e10c      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	4b6a      	ldr	r3, [pc, #424]	@ (80031d0 <HAL_RCC_OscConfig+0x474>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x2ea>
 8003038:	4b64      	ldr	r3, [pc, #400]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303c:	4a63      	ldr	r2, [pc, #396]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6713      	str	r3, [r2, #112]	@ 0x70
 8003044:	e01c      	b.n	8003080 <HAL_RCC_OscConfig+0x324>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b05      	cmp	r3, #5
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0x30c>
 800304e:	4b5f      	ldr	r3, [pc, #380]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003052:	4a5e      	ldr	r2, [pc, #376]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	6713      	str	r3, [r2, #112]	@ 0x70
 800305a:	4b5c      	ldr	r3, [pc, #368]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305e:	4a5b      	ldr	r2, [pc, #364]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6713      	str	r3, [r2, #112]	@ 0x70
 8003066:	e00b      	b.n	8003080 <HAL_RCC_OscConfig+0x324>
 8003068:	4b58      	ldr	r3, [pc, #352]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306c:	4a57      	ldr	r2, [pc, #348]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	6713      	str	r3, [r2, #112]	@ 0x70
 8003074:	4b55      	ldr	r3, [pc, #340]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003078:	4a54      	ldr	r2, [pc, #336]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 800307a:	f023 0304 	bic.w	r3, r3, #4
 800307e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d015      	beq.n	80030b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fe ffac 	bl	8001fe4 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7fe ffa8 	bl	8001fe4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e0cb      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a6:	4b49      	ldr	r3, [pc, #292]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0ee      	beq.n	8003090 <HAL_RCC_OscConfig+0x334>
 80030b2:	e014      	b.n	80030de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b4:	f7fe ff96 	bl	8001fe4 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030bc:	f7fe ff92 	bl	8001fe4 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e0b5      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d2:	4b3e      	ldr	r3, [pc, #248]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1ee      	bne.n	80030bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d105      	bne.n	80030f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e4:	4b39      	ldr	r3, [pc, #228]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	4a38      	ldr	r2, [pc, #224]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 80030ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80a1 	beq.w	800323c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030fa:	4b34      	ldr	r3, [pc, #208]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b08      	cmp	r3, #8
 8003104:	d05c      	beq.n	80031c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d141      	bne.n	8003192 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310e:	4b31      	ldr	r3, [pc, #196]	@ (80031d4 <HAL_RCC_OscConfig+0x478>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fe ff66 	bl	8001fe4 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311c:	f7fe ff62 	bl	8001fe4 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e087      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	4b27      	ldr	r3, [pc, #156]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69da      	ldr	r2, [r3, #28]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003148:	019b      	lsls	r3, r3, #6
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	3b01      	subs	r3, #1
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	491b      	ldr	r1, [pc, #108]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 8003160:	4313      	orrs	r3, r2
 8003162:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003164:	4b1b      	ldr	r3, [pc, #108]	@ (80031d4 <HAL_RCC_OscConfig+0x478>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316a:	f7fe ff3b 	bl	8001fe4 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003172:	f7fe ff37 	bl	8001fe4 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e05c      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003184:	4b11      	ldr	r3, [pc, #68]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x416>
 8003190:	e054      	b.n	800323c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003192:	4b10      	ldr	r3, [pc, #64]	@ (80031d4 <HAL_RCC_OscConfig+0x478>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fe ff24 	bl	8001fe4 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fe ff20 	bl	8001fe4 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e045      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <HAL_RCC_OscConfig+0x470>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x444>
 80031be:	e03d      	b.n	800323c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e038      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40007000 	.word	0x40007000
 80031d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003248 <HAL_RCC_OscConfig+0x4ec>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d028      	beq.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d121      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d11a      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003208:	4013      	ands	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800320e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003210:	4293      	cmp	r3, r2
 8003212:	d111      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321e:	085b      	lsrs	r3, r3, #1
 8003220:	3b01      	subs	r3, #1
 8003222:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d107      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003232:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40023800 	.word	0x40023800

0800324c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0cc      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003260:	4b68      	ldr	r3, [pc, #416]	@ (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d90c      	bls.n	8003288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b65      	ldr	r3, [pc, #404]	@ (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b63      	ldr	r3, [pc, #396]	@ (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0b8      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d020      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a0:	4b59      	ldr	r3, [pc, #356]	@ (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4a58      	ldr	r2, [pc, #352]	@ (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b8:	4b53      	ldr	r3, [pc, #332]	@ (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	4a52      	ldr	r2, [pc, #328]	@ (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c4:	4b50      	ldr	r3, [pc, #320]	@ (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	494d      	ldr	r1, [pc, #308]	@ (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d044      	beq.n	800336c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	4b47      	ldr	r3, [pc, #284]	@ (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d119      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e07f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d003      	beq.n	800330a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003306:	2b03      	cmp	r3, #3
 8003308:	d107      	bne.n	800331a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330a:	4b3f      	ldr	r3, [pc, #252]	@ (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e06f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331a:	4b3b      	ldr	r3, [pc, #236]	@ (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e067      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332a:	4b37      	ldr	r3, [pc, #220]	@ (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f023 0203 	bic.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4934      	ldr	r1, [pc, #208]	@ (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	4313      	orrs	r3, r2
 800333a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800333c:	f7fe fe52 	bl	8001fe4 <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003342:	e00a      	b.n	800335a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003344:	f7fe fe4e 	bl	8001fe4 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e04f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	4b2b      	ldr	r3, [pc, #172]	@ (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 020c 	and.w	r2, r3, #12
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	429a      	cmp	r2, r3
 800336a:	d1eb      	bne.n	8003344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800336c:	4b25      	ldr	r3, [pc, #148]	@ (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d20c      	bcs.n	8003394 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b22      	ldr	r3, [pc, #136]	@ (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	4b20      	ldr	r3, [pc, #128]	@ (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e032      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a0:	4b19      	ldr	r3, [pc, #100]	@ (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4916      	ldr	r1, [pc, #88]	@ (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d009      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033be:	4b12      	ldr	r3, [pc, #72]	@ (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	490e      	ldr	r1, [pc, #56]	@ (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033d2:	f000 f821 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 80033d6:	4602      	mov	r2, r0
 80033d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	490a      	ldr	r1, [pc, #40]	@ (800340c <HAL_RCC_ClockConfig+0x1c0>)
 80033e4:	5ccb      	ldrb	r3, [r1, r3]
 80033e6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ea:	4a09      	ldr	r2, [pc, #36]	@ (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ee:	4b09      	ldr	r3, [pc, #36]	@ (8003414 <HAL_RCC_ClockConfig+0x1c8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe fdb2 	bl	8001f5c <HAL_InitTick>

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40023c00 	.word	0x40023c00
 8003408:	40023800 	.word	0x40023800
 800340c:	08016894 	.word	0x08016894
 8003410:	20000004 	.word	0x20000004
 8003414:	20000008 	.word	0x20000008

08003418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800341c:	b094      	sub	sp, #80	@ 0x50
 800341e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	647b      	str	r3, [r7, #68]	@ 0x44
 8003424:	2300      	movs	r3, #0
 8003426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003428:	2300      	movs	r3, #0
 800342a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003430:	4b79      	ldr	r3, [pc, #484]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 030c 	and.w	r3, r3, #12
 8003438:	2b08      	cmp	r3, #8
 800343a:	d00d      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x40>
 800343c:	2b08      	cmp	r3, #8
 800343e:	f200 80e1 	bhi.w	8003604 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x34>
 8003446:	2b04      	cmp	r3, #4
 8003448:	d003      	beq.n	8003452 <HAL_RCC_GetSysClockFreq+0x3a>
 800344a:	e0db      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800344c:	4b73      	ldr	r3, [pc, #460]	@ (800361c <HAL_RCC_GetSysClockFreq+0x204>)
 800344e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003450:	e0db      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003452:	4b73      	ldr	r3, [pc, #460]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x208>)
 8003454:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003456:	e0d8      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003458:	4b6f      	ldr	r3, [pc, #444]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003460:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003462:	4b6d      	ldr	r3, [pc, #436]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d063      	beq.n	8003536 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800346e:	4b6a      	ldr	r3, [pc, #424]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	099b      	lsrs	r3, r3, #6
 8003474:	2200      	movs	r2, #0
 8003476:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003478:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800347a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800347c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003480:	633b      	str	r3, [r7, #48]	@ 0x30
 8003482:	2300      	movs	r3, #0
 8003484:	637b      	str	r3, [r7, #52]	@ 0x34
 8003486:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800348a:	4622      	mov	r2, r4
 800348c:	462b      	mov	r3, r5
 800348e:	f04f 0000 	mov.w	r0, #0
 8003492:	f04f 0100 	mov.w	r1, #0
 8003496:	0159      	lsls	r1, r3, #5
 8003498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800349c:	0150      	lsls	r0, r2, #5
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4621      	mov	r1, r4
 80034a4:	1a51      	subs	r1, r2, r1
 80034a6:	6139      	str	r1, [r7, #16]
 80034a8:	4629      	mov	r1, r5
 80034aa:	eb63 0301 	sbc.w	r3, r3, r1
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034bc:	4659      	mov	r1, fp
 80034be:	018b      	lsls	r3, r1, #6
 80034c0:	4651      	mov	r1, sl
 80034c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034c6:	4651      	mov	r1, sl
 80034c8:	018a      	lsls	r2, r1, #6
 80034ca:	4651      	mov	r1, sl
 80034cc:	ebb2 0801 	subs.w	r8, r2, r1
 80034d0:	4659      	mov	r1, fp
 80034d2:	eb63 0901 	sbc.w	r9, r3, r1
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ea:	4690      	mov	r8, r2
 80034ec:	4699      	mov	r9, r3
 80034ee:	4623      	mov	r3, r4
 80034f0:	eb18 0303 	adds.w	r3, r8, r3
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	462b      	mov	r3, r5
 80034f8:	eb49 0303 	adc.w	r3, r9, r3
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800350a:	4629      	mov	r1, r5
 800350c:	024b      	lsls	r3, r1, #9
 800350e:	4621      	mov	r1, r4
 8003510:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003514:	4621      	mov	r1, r4
 8003516:	024a      	lsls	r2, r1, #9
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800351e:	2200      	movs	r2, #0
 8003520:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003524:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003528:	f7fd f8e4 	bl	80006f4 <__aeabi_uldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4613      	mov	r3, r2
 8003532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003534:	e058      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003536:	4b38      	ldr	r3, [pc, #224]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	2200      	movs	r2, #0
 800353e:	4618      	mov	r0, r3
 8003540:	4611      	mov	r1, r2
 8003542:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003546:	623b      	str	r3, [r7, #32]
 8003548:	2300      	movs	r3, #0
 800354a:	627b      	str	r3, [r7, #36]	@ 0x24
 800354c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003550:	4642      	mov	r2, r8
 8003552:	464b      	mov	r3, r9
 8003554:	f04f 0000 	mov.w	r0, #0
 8003558:	f04f 0100 	mov.w	r1, #0
 800355c:	0159      	lsls	r1, r3, #5
 800355e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003562:	0150      	lsls	r0, r2, #5
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4641      	mov	r1, r8
 800356a:	ebb2 0a01 	subs.w	sl, r2, r1
 800356e:	4649      	mov	r1, r9
 8003570:	eb63 0b01 	sbc.w	fp, r3, r1
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003580:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003584:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003588:	ebb2 040a 	subs.w	r4, r2, sl
 800358c:	eb63 050b 	sbc.w	r5, r3, fp
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	00eb      	lsls	r3, r5, #3
 800359a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800359e:	00e2      	lsls	r2, r4, #3
 80035a0:	4614      	mov	r4, r2
 80035a2:	461d      	mov	r5, r3
 80035a4:	4643      	mov	r3, r8
 80035a6:	18e3      	adds	r3, r4, r3
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	464b      	mov	r3, r9
 80035ac:	eb45 0303 	adc.w	r3, r5, r3
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035be:	4629      	mov	r1, r5
 80035c0:	028b      	lsls	r3, r1, #10
 80035c2:	4621      	mov	r1, r4
 80035c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035c8:	4621      	mov	r1, r4
 80035ca:	028a      	lsls	r2, r1, #10
 80035cc:	4610      	mov	r0, r2
 80035ce:	4619      	mov	r1, r3
 80035d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035d2:	2200      	movs	r2, #0
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	61fa      	str	r2, [r7, #28]
 80035d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035dc:	f7fd f88a 	bl	80006f4 <__aeabi_uldivmod>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4613      	mov	r3, r2
 80035e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	3301      	adds	r3, #1
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80035f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003600:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003602:	e002      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003604:	4b05      	ldr	r3, [pc, #20]	@ (800361c <HAL_RCC_GetSysClockFreq+0x204>)
 8003606:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800360a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800360c:	4618      	mov	r0, r3
 800360e:	3750      	adds	r7, #80	@ 0x50
 8003610:	46bd      	mov	sp, r7
 8003612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003616:	bf00      	nop
 8003618:	40023800 	.word	0x40023800
 800361c:	00f42400 	.word	0x00f42400
 8003620:	007a1200 	.word	0x007a1200

08003624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003628:	4b03      	ldr	r3, [pc, #12]	@ (8003638 <HAL_RCC_GetHCLKFreq+0x14>)
 800362a:	681b      	ldr	r3, [r3, #0]
}
 800362c:	4618      	mov	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	20000004 	.word	0x20000004

0800363c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003640:	f7ff fff0 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b05      	ldr	r3, [pc, #20]	@ (800365c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	0a9b      	lsrs	r3, r3, #10
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4903      	ldr	r1, [pc, #12]	@ (8003660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003658:	4618      	mov	r0, r3
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40023800 	.word	0x40023800
 8003660:	080168a4 	.word	0x080168a4

08003664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003668:	f7ff ffdc 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 800366c:	4602      	mov	r2, r0
 800366e:	4b05      	ldr	r3, [pc, #20]	@ (8003684 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	0b5b      	lsrs	r3, r3, #13
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	4903      	ldr	r1, [pc, #12]	@ (8003688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800367a:	5ccb      	ldrb	r3, [r1, r3]
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003680:	4618      	mov	r0, r3
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40023800 	.word	0x40023800
 8003688:	080168a4 	.word	0x080168a4

0800368c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e041      	b.n	8003722 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fe f8f8 	bl	80018a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	4619      	mov	r1, r3
 80036ca:	4610      	mov	r0, r2
 80036cc:	f000 fac0 	bl	8003c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e041      	b.n	80037c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d106      	bne.n	8003756 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f839 	bl	80037c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2202      	movs	r2, #2
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3304      	adds	r3, #4
 8003766:	4619      	mov	r1, r3
 8003768:	4610      	mov	r0, r2
 800376a:	f000 fa71 	bl	8003c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d109      	bne.n	8003800 <HAL_TIM_PWM_Start+0x24>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	bf14      	ite	ne
 80037f8:	2301      	movne	r3, #1
 80037fa:	2300      	moveq	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	e022      	b.n	8003846 <HAL_TIM_PWM_Start+0x6a>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b04      	cmp	r3, #4
 8003804:	d109      	bne.n	800381a <HAL_TIM_PWM_Start+0x3e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b01      	cmp	r3, #1
 8003810:	bf14      	ite	ne
 8003812:	2301      	movne	r3, #1
 8003814:	2300      	moveq	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	e015      	b.n	8003846 <HAL_TIM_PWM_Start+0x6a>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d109      	bne.n	8003834 <HAL_TIM_PWM_Start+0x58>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e008      	b.n	8003846 <HAL_TIM_PWM_Start+0x6a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e068      	b.n	8003920 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d104      	bne.n	800385e <HAL_TIM_PWM_Start+0x82>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800385c:	e013      	b.n	8003886 <HAL_TIM_PWM_Start+0xaa>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b04      	cmp	r3, #4
 8003862:	d104      	bne.n	800386e <HAL_TIM_PWM_Start+0x92>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800386c:	e00b      	b.n	8003886 <HAL_TIM_PWM_Start+0xaa>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b08      	cmp	r3, #8
 8003872:	d104      	bne.n	800387e <HAL_TIM_PWM_Start+0xa2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800387c:	e003      	b.n	8003886 <HAL_TIM_PWM_Start+0xaa>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2202      	movs	r2, #2
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2201      	movs	r2, #1
 800388c:	6839      	ldr	r1, [r7, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fc90 	bl	80041b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a23      	ldr	r2, [pc, #140]	@ (8003928 <HAL_TIM_PWM_Start+0x14c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d107      	bne.n	80038ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003928 <HAL_TIM_PWM_Start+0x14c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d018      	beq.n	80038ea <HAL_TIM_PWM_Start+0x10e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c0:	d013      	beq.n	80038ea <HAL_TIM_PWM_Start+0x10e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a19      	ldr	r2, [pc, #100]	@ (800392c <HAL_TIM_PWM_Start+0x150>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00e      	beq.n	80038ea <HAL_TIM_PWM_Start+0x10e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a17      	ldr	r2, [pc, #92]	@ (8003930 <HAL_TIM_PWM_Start+0x154>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d009      	beq.n	80038ea <HAL_TIM_PWM_Start+0x10e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a16      	ldr	r2, [pc, #88]	@ (8003934 <HAL_TIM_PWM_Start+0x158>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d004      	beq.n	80038ea <HAL_TIM_PWM_Start+0x10e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a14      	ldr	r2, [pc, #80]	@ (8003938 <HAL_TIM_PWM_Start+0x15c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d111      	bne.n	800390e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b06      	cmp	r3, #6
 80038fa:	d010      	beq.n	800391e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390c:	e007      	b.n	800391e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0201 	orr.w	r2, r2, #1
 800391c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40010000 	.word	0x40010000
 800392c:	40000400 	.word	0x40000400
 8003930:	40000800 	.word	0x40000800
 8003934:	40000c00 	.word	0x40000c00
 8003938:	40014000 	.word	0x40014000

0800393c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003956:	2302      	movs	r3, #2
 8003958:	e0ae      	b.n	8003ab8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b0c      	cmp	r3, #12
 8003966:	f200 809f 	bhi.w	8003aa8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800396a:	a201      	add	r2, pc, #4	@ (adr r2, 8003970 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800396c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003970:	080039a5 	.word	0x080039a5
 8003974:	08003aa9 	.word	0x08003aa9
 8003978:	08003aa9 	.word	0x08003aa9
 800397c:	08003aa9 	.word	0x08003aa9
 8003980:	080039e5 	.word	0x080039e5
 8003984:	08003aa9 	.word	0x08003aa9
 8003988:	08003aa9 	.word	0x08003aa9
 800398c:	08003aa9 	.word	0x08003aa9
 8003990:	08003a27 	.word	0x08003a27
 8003994:	08003aa9 	.word	0x08003aa9
 8003998:	08003aa9 	.word	0x08003aa9
 800399c:	08003aa9 	.word	0x08003aa9
 80039a0:	08003a67 	.word	0x08003a67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 f9dc 	bl	8003d68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0208 	orr.w	r2, r2, #8
 80039be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0204 	bic.w	r2, r2, #4
 80039ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6999      	ldr	r1, [r3, #24]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	691a      	ldr	r2, [r3, #16]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	619a      	str	r2, [r3, #24]
      break;
 80039e2:	e064      	b.n	8003aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fa22 	bl	8003e34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6999      	ldr	r1, [r3, #24]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	021a      	lsls	r2, r3, #8
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	619a      	str	r2, [r3, #24]
      break;
 8003a24:	e043      	b.n	8003aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fa6d 	bl	8003f0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69da      	ldr	r2, [r3, #28]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0208 	orr.w	r2, r2, #8
 8003a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	69da      	ldr	r2, [r3, #28]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0204 	bic.w	r2, r2, #4
 8003a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69d9      	ldr	r1, [r3, #28]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	61da      	str	r2, [r3, #28]
      break;
 8003a64:	e023      	b.n	8003aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68b9      	ldr	r1, [r7, #8]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 fab7 	bl	8003fe0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69da      	ldr	r2, [r3, #28]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69d9      	ldr	r1, [r3, #28]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	021a      	lsls	r2, r3, #8
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	61da      	str	r2, [r3, #28]
      break;
 8003aa6:	e002      	b.n	8003aae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8003aac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_TIM_ConfigClockSource+0x1c>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e0b4      	b.n	8003c46 <HAL_TIM_ConfigClockSource+0x186>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b14:	d03e      	beq.n	8003b94 <HAL_TIM_ConfigClockSource+0xd4>
 8003b16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b1a:	f200 8087 	bhi.w	8003c2c <HAL_TIM_ConfigClockSource+0x16c>
 8003b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b22:	f000 8086 	beq.w	8003c32 <HAL_TIM_ConfigClockSource+0x172>
 8003b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b2a:	d87f      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x16c>
 8003b2c:	2b70      	cmp	r3, #112	@ 0x70
 8003b2e:	d01a      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0xa6>
 8003b30:	2b70      	cmp	r3, #112	@ 0x70
 8003b32:	d87b      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x16c>
 8003b34:	2b60      	cmp	r3, #96	@ 0x60
 8003b36:	d050      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x11a>
 8003b38:	2b60      	cmp	r3, #96	@ 0x60
 8003b3a:	d877      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x16c>
 8003b3c:	2b50      	cmp	r3, #80	@ 0x50
 8003b3e:	d03c      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0xfa>
 8003b40:	2b50      	cmp	r3, #80	@ 0x50
 8003b42:	d873      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x16c>
 8003b44:	2b40      	cmp	r3, #64	@ 0x40
 8003b46:	d058      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x13a>
 8003b48:	2b40      	cmp	r3, #64	@ 0x40
 8003b4a:	d86f      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x16c>
 8003b4c:	2b30      	cmp	r3, #48	@ 0x30
 8003b4e:	d064      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0x15a>
 8003b50:	2b30      	cmp	r3, #48	@ 0x30
 8003b52:	d86b      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x16c>
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d060      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0x15a>
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	d867      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x16c>
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d05c      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0x15a>
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d05a      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0x15a>
 8003b64:	e062      	b.n	8003c2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b76:	f000 fafd 	bl	8004174 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	609a      	str	r2, [r3, #8]
      break;
 8003b92:	e04f      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ba4:	f000 fae6 	bl	8004174 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bb6:	609a      	str	r2, [r3, #8]
      break;
 8003bb8:	e03c      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f000 fa5a 	bl	8004080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2150      	movs	r1, #80	@ 0x50
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fab3 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003bd8:	e02c      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003be6:	461a      	mov	r2, r3
 8003be8:	f000 fa79 	bl	80040de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2160      	movs	r1, #96	@ 0x60
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 faa3 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003bf8:	e01c      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c06:	461a      	mov	r2, r3
 8003c08:	f000 fa3a 	bl	8004080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2140      	movs	r1, #64	@ 0x40
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fa93 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003c18:	e00c      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f000 fa8a 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003c2a:	e003      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c30:	e000      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a3a      	ldr	r2, [pc, #232]	@ (8003d4c <TIM_Base_SetConfig+0xfc>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d00f      	beq.n	8003c88 <TIM_Base_SetConfig+0x38>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c6e:	d00b      	beq.n	8003c88 <TIM_Base_SetConfig+0x38>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a37      	ldr	r2, [pc, #220]	@ (8003d50 <TIM_Base_SetConfig+0x100>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d007      	beq.n	8003c88 <TIM_Base_SetConfig+0x38>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a36      	ldr	r2, [pc, #216]	@ (8003d54 <TIM_Base_SetConfig+0x104>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d003      	beq.n	8003c88 <TIM_Base_SetConfig+0x38>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a35      	ldr	r2, [pc, #212]	@ (8003d58 <TIM_Base_SetConfig+0x108>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d108      	bne.n	8003c9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8003d4c <TIM_Base_SetConfig+0xfc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01b      	beq.n	8003cda <TIM_Base_SetConfig+0x8a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca8:	d017      	beq.n	8003cda <TIM_Base_SetConfig+0x8a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a28      	ldr	r2, [pc, #160]	@ (8003d50 <TIM_Base_SetConfig+0x100>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <TIM_Base_SetConfig+0x8a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a27      	ldr	r2, [pc, #156]	@ (8003d54 <TIM_Base_SetConfig+0x104>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00f      	beq.n	8003cda <TIM_Base_SetConfig+0x8a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a26      	ldr	r2, [pc, #152]	@ (8003d58 <TIM_Base_SetConfig+0x108>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00b      	beq.n	8003cda <TIM_Base_SetConfig+0x8a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a25      	ldr	r2, [pc, #148]	@ (8003d5c <TIM_Base_SetConfig+0x10c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d007      	beq.n	8003cda <TIM_Base_SetConfig+0x8a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a24      	ldr	r2, [pc, #144]	@ (8003d60 <TIM_Base_SetConfig+0x110>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d003      	beq.n	8003cda <TIM_Base_SetConfig+0x8a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a23      	ldr	r2, [pc, #140]	@ (8003d64 <TIM_Base_SetConfig+0x114>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d108      	bne.n	8003cec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a0e      	ldr	r2, [pc, #56]	@ (8003d4c <TIM_Base_SetConfig+0xfc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d103      	bne.n	8003d20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d105      	bne.n	8003d3e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f023 0201 	bic.w	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	611a      	str	r2, [r3, #16]
  }
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40000800 	.word	0x40000800
 8003d58:	40000c00 	.word	0x40000c00
 8003d5c:	40014000 	.word	0x40014000
 8003d60:	40014400 	.word	0x40014400
 8003d64:	40014800 	.word	0x40014800

08003d68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f023 0201 	bic.w	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0303 	bic.w	r3, r3, #3
 8003d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f023 0302 	bic.w	r3, r3, #2
 8003db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8003e30 <TIM_OC1_SetConfig+0xc8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d10c      	bne.n	8003dde <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f023 0308 	bic.w	r3, r3, #8
 8003dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f023 0304 	bic.w	r3, r3, #4
 8003ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a13      	ldr	r2, [pc, #76]	@ (8003e30 <TIM_OC1_SetConfig+0xc8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d111      	bne.n	8003e0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	621a      	str	r2, [r3, #32]
}
 8003e24:	bf00      	nop
 8003e26:	371c      	adds	r7, #28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	40010000 	.word	0x40010000

08003e34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f023 0210 	bic.w	r2, r3, #16
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f023 0320 	bic.w	r3, r3, #32
 8003e7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003f08 <TIM_OC2_SetConfig+0xd4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d10d      	bne.n	8003eb0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a15      	ldr	r2, [pc, #84]	@ (8003f08 <TIM_OC2_SetConfig+0xd4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d113      	bne.n	8003ee0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ebe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	621a      	str	r2, [r3, #32]
}
 8003efa:	bf00      	nop
 8003efc:	371c      	adds	r7, #28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40010000 	.word	0x40010000

08003f0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0303 	bic.w	r3, r3, #3
 8003f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a1d      	ldr	r2, [pc, #116]	@ (8003fdc <TIM_OC3_SetConfig+0xd0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d10d      	bne.n	8003f86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a14      	ldr	r2, [pc, #80]	@ (8003fdc <TIM_OC3_SetConfig+0xd0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d113      	bne.n	8003fb6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	621a      	str	r2, [r3, #32]
}
 8003fd0:	bf00      	nop
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	40010000 	.word	0x40010000

08003fe0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800400e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800402a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	031b      	lsls	r3, r3, #12
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a10      	ldr	r2, [pc, #64]	@ (800407c <TIM_OC4_SetConfig+0x9c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d109      	bne.n	8004054 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004046:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	019b      	lsls	r3, r3, #6
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40010000 	.word	0x40010000

08004080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f023 0201 	bic.w	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f023 030a 	bic.w	r3, r3, #10
 80040bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040de:	b480      	push	{r7}
 80040e0:	b087      	sub	sp, #28
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	f023 0210 	bic.w	r2, r3, #16
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004108:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	031b      	lsls	r3, r3, #12
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800411a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800413e:	b480      	push	{r7}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	f043 0307 	orr.w	r3, r3, #7
 8004160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	609a      	str	r2, [r3, #8]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800418e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	021a      	lsls	r2, r3, #8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	431a      	orrs	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4313      	orrs	r3, r2
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	609a      	str	r2, [r3, #8]
}
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f003 031f 	and.w	r3, r3, #31
 80041c6:	2201      	movs	r2, #1
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a1a      	ldr	r2, [r3, #32]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	43db      	mvns	r3, r3
 80041d6:	401a      	ands	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a1a      	ldr	r2, [r3, #32]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f003 031f 	and.w	r3, r3, #31
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ec:	431a      	orrs	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	621a      	str	r2, [r3, #32]
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004214:	2302      	movs	r3, #2
 8004216:	e050      	b.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800423e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1c      	ldr	r2, [pc, #112]	@ (80042c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d018      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004264:	d013      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a18      	ldr	r2, [pc, #96]	@ (80042cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00e      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a16      	ldr	r2, [pc, #88]	@ (80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d009      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a15      	ldr	r2, [pc, #84]	@ (80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d004      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a13      	ldr	r2, [pc, #76]	@ (80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d10c      	bne.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004294:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	4313      	orrs	r3, r2
 800429e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40000c00 	.word	0x40000c00
 80042d8:	40014000 	.word	0x40014000

080042dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e042      	b.n	8004374 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fd fb4c 	bl	80019a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2224      	movs	r2, #36	@ 0x24
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800431e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 ffc9 	bl	80052b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08c      	sub	sp, #48	@ 0x30
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	4613      	mov	r3, r2
 8004388:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b20      	cmp	r3, #32
 8004394:	d156      	bne.n	8004444 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <HAL_UART_Transmit_DMA+0x26>
 800439c:	88fb      	ldrh	r3, [r7, #6]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e04f      	b.n	8004446 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	88fa      	ldrh	r2, [r7, #6]
 80043b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	88fa      	ldrh	r2, [r7, #6]
 80043b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2221      	movs	r2, #33	@ 0x21
 80043c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ca:	4a21      	ldr	r2, [pc, #132]	@ (8004450 <HAL_UART_Transmit_DMA+0xd4>)
 80043cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d2:	4a20      	ldr	r2, [pc, #128]	@ (8004454 <HAL_UART_Transmit_DMA+0xd8>)
 80043d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043da:	4a1f      	ldr	r2, [pc, #124]	@ (8004458 <HAL_UART_Transmit_DMA+0xdc>)
 80043dc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e2:	2200      	movs	r2, #0
 80043e4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80043e6:	f107 0308 	add.w	r3, r7, #8
 80043ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80043f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f2:	6819      	ldr	r1, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3304      	adds	r3, #4
 80043fa:	461a      	mov	r2, r3
 80043fc:	88fb      	ldrh	r3, [r7, #6]
 80043fe:	f7fd ffbd 	bl	800237c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800440a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3314      	adds	r3, #20
 8004412:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	617b      	str	r3, [r7, #20]
   return(result);
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004422:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3314      	adds	r3, #20
 800442a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800442c:	627a      	str	r2, [r7, #36]	@ 0x24
 800442e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	6a39      	ldr	r1, [r7, #32]
 8004432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	61fb      	str	r3, [r7, #28]
   return(result);
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e5      	bne.n	800440c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004440:	2300      	movs	r3, #0
 8004442:	e000      	b.n	8004446 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004444:	2302      	movs	r3, #2
  }
}
 8004446:	4618      	mov	r0, r3
 8004448:	3730      	adds	r7, #48	@ 0x30
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	08004b45 	.word	0x08004b45
 8004454:	08004bdf 	.word	0x08004bdf
 8004458:	08004d63 	.word	0x08004d63

0800445c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	4613      	mov	r3, r2
 8004468:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b20      	cmp	r3, #32
 8004474:	d112      	bne.n	800449c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_UART_Receive_DMA+0x26>
 800447c:	88fb      	ldrh	r3, [r7, #6]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e00b      	b.n	800449e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	461a      	mov	r2, r3
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fcb0 	bl	8004df8 <UART_Start_Receive_DMA>
 8004498:	4603      	mov	r3, r0
 800449a:	e000      	b.n	800449e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800449c:	2302      	movs	r3, #2
  }
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b090      	sub	sp, #64	@ 0x40
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044bc:	2b80      	cmp	r3, #128	@ 0x80
 80044be:	bf0c      	ite	eq
 80044c0:	2301      	moveq	r3, #1
 80044c2:	2300      	movne	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b21      	cmp	r3, #33	@ 0x21
 80044d2:	d128      	bne.n	8004526 <HAL_UART_DMAStop+0x80>
 80044d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d025      	beq.n	8004526 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3314      	adds	r3, #20
 80044e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	623b      	str	r3, [r7, #32]
   return(result);
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3314      	adds	r3, #20
 80044f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80044fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80044fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e5      	bne.n	80044da <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004512:	2b00      	cmp	r3, #0
 8004514:	d004      	beq.n	8004520 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451a:	4618      	mov	r0, r3
 800451c:	f7fd ff86 	bl	800242c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fd03 	bl	8004f2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004530:	2b40      	cmp	r3, #64	@ 0x40
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b22      	cmp	r3, #34	@ 0x22
 8004546:	d128      	bne.n	800459a <HAL_UART_DMAStop+0xf4>
 8004548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800454a:	2b00      	cmp	r3, #0
 800454c:	d025      	beq.n	800459a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3314      	adds	r3, #20
 8004554:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	60fb      	str	r3, [r7, #12]
   return(result);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004564:	637b      	str	r3, [r7, #52]	@ 0x34
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3314      	adds	r3, #20
 800456c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800456e:	61fa      	str	r2, [r7, #28]
 8004570:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	69b9      	ldr	r1, [r7, #24]
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	617b      	str	r3, [r7, #20]
   return(result);
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e5      	bne.n	800454e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d004      	beq.n	8004594 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800458e:	4618      	mov	r0, r3
 8004590:	f7fd ff4c 	bl	800242c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 fcf1 	bl	8004f7c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3740      	adds	r7, #64	@ 0x40
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b0ba      	sub	sp, #232	@ 0xe8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80045e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10f      	bne.n	800460a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <HAL_UART_IRQHandler+0x66>
 80045f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fd99 	bl	800513a <UART_Receive_IT>
      return;
 8004608:	e25b      	b.n	8004ac2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800460a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80de 	beq.w	80047d0 <HAL_UART_IRQHandler+0x22c>
 8004614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004624:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80d1 	beq.w	80047d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800462e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00b      	beq.n	8004652 <HAL_UART_IRQHandler+0xae>
 800463a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800463e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464a:	f043 0201 	orr.w	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00b      	beq.n	8004676 <HAL_UART_IRQHandler+0xd2>
 800465e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466e:	f043 0202 	orr.w	r2, r3, #2
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <HAL_UART_IRQHandler+0xf6>
 8004682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004692:	f043 0204 	orr.w	r2, r3, #4
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800469a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d011      	beq.n	80046ca <HAL_UART_IRQHandler+0x126>
 80046a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d105      	bne.n	80046be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c2:	f043 0208 	orr.w	r2, r3, #8
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 81f2 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_UART_IRQHandler+0x14e>
 80046e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fd24 	bl	800513a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fc:	2b40      	cmp	r3, #64	@ 0x40
 80046fe:	bf0c      	ite	eq
 8004700:	2301      	moveq	r3, #1
 8004702:	2300      	movne	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d103      	bne.n	800471e <HAL_UART_IRQHandler+0x17a>
 8004716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800471a:	2b00      	cmp	r3, #0
 800471c:	d04f      	beq.n	80047be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fc2c 	bl	8004f7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472e:	2b40      	cmp	r3, #64	@ 0x40
 8004730:	d141      	bne.n	80047b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3314      	adds	r3, #20
 8004738:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004748:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800474c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004750:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3314      	adds	r3, #20
 800475a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800475e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004762:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800476a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1d9      	bne.n	8004732 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d013      	beq.n	80047ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478a:	4a7e      	ldr	r2, [pc, #504]	@ (8004984 <HAL_UART_IRQHandler+0x3e0>)
 800478c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004792:	4618      	mov	r0, r3
 8004794:	f7fd feba 	bl	800250c <HAL_DMA_Abort_IT>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d016      	beq.n	80047cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047a8:	4610      	mov	r0, r2
 80047aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ac:	e00e      	b.n	80047cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f9b2 	bl	8004b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	e00a      	b.n	80047cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f9ae 	bl	8004b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047bc:	e006      	b.n	80047cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f9aa 	bl	8004b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80047ca:	e175      	b.n	8004ab8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047cc:	bf00      	nop
    return;
 80047ce:	e173      	b.n	8004ab8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	f040 814f 	bne.w	8004a78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8148 	beq.w	8004a78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 8141 	beq.w	8004a78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047f6:	2300      	movs	r3, #0
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	60bb      	str	r3, [r7, #8]
 800480a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004816:	2b40      	cmp	r3, #64	@ 0x40
 8004818:	f040 80b6 	bne.w	8004988 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004828:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8145 	beq.w	8004abc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800483a:	429a      	cmp	r2, r3
 800483c:	f080 813e 	bcs.w	8004abc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004846:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004852:	f000 8088 	beq.w	8004966 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800486c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004874:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	330c      	adds	r3, #12
 800487e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004882:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004886:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800488e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800489a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1d9      	bne.n	8004856 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3314      	adds	r3, #20
 80048a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80048b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048b4:	f023 0301 	bic.w	r3, r3, #1
 80048b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3314      	adds	r3, #20
 80048c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80048ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80048ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80048d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e1      	bne.n	80048a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3314      	adds	r3, #20
 80048e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80048ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3314      	adds	r3, #20
 80048fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004902:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004904:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004908:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e3      	bne.n	80048de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	330c      	adds	r3, #12
 800492a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004934:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004936:	f023 0310 	bic.w	r3, r3, #16
 800493a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004948:	65ba      	str	r2, [r7, #88]	@ 0x58
 800494a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800494e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004950:	e841 2300 	strex	r3, r2, [r1]
 8004954:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004956:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e3      	bne.n	8004924 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004960:	4618      	mov	r0, r3
 8004962:	f7fd fd63 	bl	800242c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2202      	movs	r2, #2
 800496a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004974:	b29b      	uxth	r3, r3
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	b29b      	uxth	r3, r3
 800497a:	4619      	mov	r1, r3
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f8d5 	bl	8004b2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004982:	e09b      	b.n	8004abc <HAL_UART_IRQHandler+0x518>
 8004984:	08005043 	.word	0x08005043
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004990:	b29b      	uxth	r3, r3
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 808e 	beq.w	8004ac0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80049a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8089 	beq.w	8004ac0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	330c      	adds	r3, #12
 80049b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	330c      	adds	r3, #12
 80049ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80049d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80049d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e3      	bne.n	80049ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3314      	adds	r3, #20
 80049ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	623b      	str	r3, [r7, #32]
   return(result);
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3314      	adds	r3, #20
 8004a06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e3      	bne.n	80049e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	e853 3f00 	ldrex	r3, [r3]
 8004a3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0310 	bic.w	r3, r3, #16
 8004a42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	330c      	adds	r3, #12
 8004a4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a50:	61fa      	str	r2, [r7, #28]
 8004a52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	69b9      	ldr	r1, [r7, #24]
 8004a56:	69fa      	ldr	r2, [r7, #28]
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e3      	bne.n	8004a2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f85b 	bl	8004b2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a76:	e023      	b.n	8004ac0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d009      	beq.n	8004a98 <HAL_UART_IRQHandler+0x4f4>
 8004a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 faea 	bl	800506a <UART_Transmit_IT>
    return;
 8004a96:	e014      	b.n	8004ac2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00e      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x51e>
 8004aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fb2a 	bl	800510a <UART_EndTransmit_IT>
    return;
 8004ab6:	e004      	b.n	8004ac2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004ab8:	bf00      	nop
 8004aba:	e002      	b.n	8004ac2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004abc:	bf00      	nop
 8004abe:	e000      	b.n	8004ac2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ac0:	bf00      	nop
  }
}
 8004ac2:	37e8      	adds	r7, #232	@ 0xe8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b090      	sub	sp, #64	@ 0x40
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d137      	bne.n	8004bd0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b62:	2200      	movs	r2, #0
 8004b64:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3314      	adds	r3, #20
 8004b6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	623b      	str	r3, [r7, #32]
   return(result);
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3314      	adds	r3, #20
 8004b84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b86:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e5      	bne.n	8004b66 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	330c      	adds	r3, #12
 8004ba0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	330c      	adds	r3, #12
 8004bb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bba:	61fa      	str	r2, [r7, #28]
 8004bbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	69b9      	ldr	r1, [r7, #24]
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	617b      	str	r3, [r7, #20]
   return(result);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e5      	bne.n	8004b9a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bce:	e002      	b.n	8004bd6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004bd0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004bd2:	f7ff ff79 	bl	8004ac8 <HAL_UART_TxCpltCallback>
}
 8004bd6:	bf00      	nop
 8004bd8:	3740      	adds	r7, #64	@ 0x40
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f7ff ff75 	bl	8004adc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bf2:	bf00      	nop
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b09c      	sub	sp, #112	@ 0x70
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c06:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d172      	bne.n	8004cfc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004c16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c18:	2200      	movs	r2, #0
 8004c1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	330c      	adds	r3, #12
 8004c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004c3c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c3e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e5      	bne.n	8004c1c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3314      	adds	r3, #20
 8004c56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c62:	f023 0301 	bic.w	r3, r3, #1
 8004c66:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3314      	adds	r3, #20
 8004c6e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004c70:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c72:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e5      	bne.n	8004c50 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3314      	adds	r3, #20
 8004c8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	623b      	str	r3, [r7, #32]
   return(result);
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3314      	adds	r3, #20
 8004ca2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004ca4:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004caa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e5      	bne.n	8004c84 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d119      	bne.n	8004cfc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	330c      	adds	r3, #12
 8004cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0310 	bic.w	r3, r3, #16
 8004cde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ce0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004ce8:	61fa      	str	r2, [r7, #28]
 8004cea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	69b9      	ldr	r1, [r7, #24]
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	617b      	str	r3, [r7, #20]
   return(result);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e5      	bne.n	8004cc8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cfe:	2200      	movs	r2, #0
 8004d00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d106      	bne.n	8004d18 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004d12:	f7ff ff0b 	bl	8004b2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d16:	e002      	b.n	8004d1e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004d18:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004d1a:	f7ff fee9 	bl	8004af0 <HAL_UART_RxCpltCallback>
}
 8004d1e:	bf00      	nop
 8004d20:	3770      	adds	r7, #112	@ 0x70
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b084      	sub	sp, #16
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2201      	movs	r2, #1
 8004d38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d108      	bne.n	8004d54 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d46:	085b      	lsrs	r3, r3, #1
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f7ff feed 	bl	8004b2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d52:	e002      	b.n	8004d5a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff fed5 	bl	8004b04 <HAL_UART_RxHalfCpltCallback>
}
 8004d5a:	bf00      	nop
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b084      	sub	sp, #16
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d72:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d7e:	2b80      	cmp	r3, #128	@ 0x80
 8004d80:	bf0c      	ite	eq
 8004d82:	2301      	moveq	r3, #1
 8004d84:	2300      	movne	r3, #0
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b21      	cmp	r3, #33	@ 0x21
 8004d94:	d108      	bne.n	8004da8 <UART_DMAError+0x46>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d005      	beq.n	8004da8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004da2:	68b8      	ldr	r0, [r7, #8]
 8004da4:	f000 f8c2 	bl	8004f2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db2:	2b40      	cmp	r3, #64	@ 0x40
 8004db4:	bf0c      	ite	eq
 8004db6:	2301      	moveq	r3, #1
 8004db8:	2300      	movne	r3, #0
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b22      	cmp	r3, #34	@ 0x22
 8004dc8:	d108      	bne.n	8004ddc <UART_DMAError+0x7a>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004dd6:	68b8      	ldr	r0, [r7, #8]
 8004dd8:	f000 f8d0 	bl	8004f7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de0:	f043 0210 	orr.w	r2, r3, #16
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004de8:	68b8      	ldr	r0, [r7, #8]
 8004dea:	f7ff fe95 	bl	8004b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dee:	bf00      	nop
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b098      	sub	sp, #96	@ 0x60
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	4613      	mov	r3, r2
 8004e04:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	88fa      	ldrh	r2, [r7, #6]
 8004e10:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2222      	movs	r2, #34	@ 0x22
 8004e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e24:	4a3e      	ldr	r2, [pc, #248]	@ (8004f20 <UART_Start_Receive_DMA+0x128>)
 8004e26:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2c:	4a3d      	ldr	r2, [pc, #244]	@ (8004f24 <UART_Start_Receive_DMA+0x12c>)
 8004e2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e34:	4a3c      	ldr	r2, [pc, #240]	@ (8004f28 <UART_Start_Receive_DMA+0x130>)
 8004e36:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004e40:	f107 0308 	add.w	r3, r7, #8
 8004e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	4619      	mov	r1, r3
 8004e52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	88fb      	ldrh	r3, [r7, #6]
 8004e58:	f7fd fa90 	bl	800237c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	613b      	str	r3, [r7, #16]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d019      	beq.n	8004eae <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	330c      	adds	r3, #12
 8004e80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	330c      	adds	r3, #12
 8004e98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e9a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004ea0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e5      	bne.n	8004e7a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3314      	adds	r3, #20
 8004eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3314      	adds	r3, #20
 8004ecc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ece:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004ed0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004ed4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ed6:	e841 2300 	strex	r3, r2, [r1]
 8004eda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e5      	bne.n	8004eae <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3314      	adds	r3, #20
 8004ee8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ef8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3314      	adds	r3, #20
 8004f00:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004f02:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	6a39      	ldr	r1, [r7, #32]
 8004f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e5      	bne.n	8004ee2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3760      	adds	r7, #96	@ 0x60
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	08004bfb 	.word	0x08004bfb
 8004f24:	08004d27 	.word	0x08004d27
 8004f28:	08004d63 	.word	0x08004d63

08004f2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b089      	sub	sp, #36	@ 0x24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	330c      	adds	r3, #12
 8004f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	330c      	adds	r3, #12
 8004f52:	69fa      	ldr	r2, [r7, #28]
 8004f54:	61ba      	str	r2, [r7, #24]
 8004f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	6979      	ldr	r1, [r7, #20]
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	e841 2300 	strex	r3, r2, [r1]
 8004f60:	613b      	str	r3, [r7, #16]
   return(result);
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e5      	bne.n	8004f34 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004f70:	bf00      	nop
 8004f72:	3724      	adds	r7, #36	@ 0x24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b095      	sub	sp, #84	@ 0x54
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	330c      	adds	r3, #12
 8004f8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fa4:	643a      	str	r2, [r7, #64]	@ 0x40
 8004fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004faa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fac:	e841 2300 	strex	r3, r2, [r1]
 8004fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1e5      	bne.n	8004f84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3314      	adds	r3, #20
 8004fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	e853 3f00 	ldrex	r3, [r3]
 8004fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f023 0301 	bic.w	r3, r3, #1
 8004fce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3314      	adds	r3, #20
 8004fd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fe0:	e841 2300 	strex	r3, r2, [r1]
 8004fe4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e5      	bne.n	8004fb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d119      	bne.n	8005028 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	e853 3f00 	ldrex	r3, [r3]
 8005002:	60bb      	str	r3, [r7, #8]
   return(result);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f023 0310 	bic.w	r3, r3, #16
 800500a:	647b      	str	r3, [r7, #68]	@ 0x44
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	330c      	adds	r3, #12
 8005012:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005014:	61ba      	str	r2, [r7, #24]
 8005016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005018:	6979      	ldr	r1, [r7, #20]
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	e841 2300 	strex	r3, r2, [r1]
 8005020:	613b      	str	r3, [r7, #16]
   return(result);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e5      	bne.n	8004ff4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005036:	bf00      	nop
 8005038:	3754      	adds	r7, #84	@ 0x54
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f7ff fd5b 	bl	8004b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005062:	bf00      	nop
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800506a:	b480      	push	{r7}
 800506c:	b085      	sub	sp, #20
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b21      	cmp	r3, #33	@ 0x21
 800507c:	d13e      	bne.n	80050fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005086:	d114      	bne.n	80050b2 <UART_Transmit_IT+0x48>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d110      	bne.n	80050b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	1c9a      	adds	r2, r3, #2
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	621a      	str	r2, [r3, #32]
 80050b0:	e008      	b.n	80050c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	1c59      	adds	r1, r3, #1
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6211      	str	r1, [r2, #32]
 80050bc:	781a      	ldrb	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	4619      	mov	r1, r3
 80050d2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10f      	bne.n	80050f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	e000      	b.n	80050fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050fc:	2302      	movs	r3, #2
  }
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005120:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff fccc 	bl	8004ac8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b08c      	sub	sp, #48	@ 0x30
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b22      	cmp	r3, #34	@ 0x22
 800514c:	f040 80ae 	bne.w	80052ac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005158:	d117      	bne.n	800518a <UART_Receive_IT+0x50>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d113      	bne.n	800518a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005162:	2300      	movs	r3, #0
 8005164:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	b29b      	uxth	r3, r3
 8005174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005178:	b29a      	uxth	r2, r3
 800517a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005182:	1c9a      	adds	r2, r3, #2
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	629a      	str	r2, [r3, #40]	@ 0x28
 8005188:	e026      	b.n	80051d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005190:	2300      	movs	r3, #0
 8005192:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800519c:	d007      	beq.n	80051ae <UART_Receive_IT+0x74>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10a      	bne.n	80051bc <UART_Receive_IT+0x82>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	e008      	b.n	80051ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	4619      	mov	r1, r3
 80051e6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d15d      	bne.n	80052a8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0220 	bic.w	r2, r2, #32
 80051fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800520a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695a      	ldr	r2, [r3, #20]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0201 	bic.w	r2, r2, #1
 800521a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522e:	2b01      	cmp	r3, #1
 8005230:	d135      	bne.n	800529e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	330c      	adds	r3, #12
 800523e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	613b      	str	r3, [r7, #16]
   return(result);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f023 0310 	bic.w	r3, r3, #16
 800524e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005258:	623a      	str	r2, [r7, #32]
 800525a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	69f9      	ldr	r1, [r7, #28]
 800525e:	6a3a      	ldr	r2, [r7, #32]
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	61bb      	str	r3, [r7, #24]
   return(result);
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e5      	bne.n	8005238 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0310 	and.w	r3, r3, #16
 8005276:	2b10      	cmp	r3, #16
 8005278:	d10a      	bne.n	8005290 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005294:	4619      	mov	r1, r3
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7ff fc48 	bl	8004b2c <HAL_UARTEx_RxEventCallback>
 800529c:	e002      	b.n	80052a4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7ff fc26 	bl	8004af0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	e002      	b.n	80052ae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	e000      	b.n	80052ae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80052ac:	2302      	movs	r3, #2
  }
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3730      	adds	r7, #48	@ 0x30
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052bc:	b0c0      	sub	sp, #256	@ 0x100
 80052be:	af00      	add	r7, sp, #0
 80052c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d4:	68d9      	ldr	r1, [r3, #12]
 80052d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	ea40 0301 	orr.w	r3, r0, r1
 80052e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	431a      	orrs	r2, r3
 80052f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005310:	f021 010c 	bic.w	r1, r1, #12
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800531e:	430b      	orrs	r3, r1
 8005320:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800532e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005332:	6999      	ldr	r1, [r3, #24]
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	ea40 0301 	orr.w	r3, r0, r1
 800533e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	4b8f      	ldr	r3, [pc, #572]	@ (8005584 <UART_SetConfig+0x2cc>)
 8005348:	429a      	cmp	r2, r3
 800534a:	d005      	beq.n	8005358 <UART_SetConfig+0xa0>
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4b8d      	ldr	r3, [pc, #564]	@ (8005588 <UART_SetConfig+0x2d0>)
 8005354:	429a      	cmp	r2, r3
 8005356:	d104      	bne.n	8005362 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005358:	f7fe f984 	bl	8003664 <HAL_RCC_GetPCLK2Freq>
 800535c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005360:	e003      	b.n	800536a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005362:	f7fe f96b 	bl	800363c <HAL_RCC_GetPCLK1Freq>
 8005366:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800536a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005374:	f040 810c 	bne.w	8005590 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800537c:	2200      	movs	r2, #0
 800537e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005382:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005386:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800538a:	4622      	mov	r2, r4
 800538c:	462b      	mov	r3, r5
 800538e:	1891      	adds	r1, r2, r2
 8005390:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005392:	415b      	adcs	r3, r3
 8005394:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005396:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800539a:	4621      	mov	r1, r4
 800539c:	eb12 0801 	adds.w	r8, r2, r1
 80053a0:	4629      	mov	r1, r5
 80053a2:	eb43 0901 	adc.w	r9, r3, r1
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ba:	4690      	mov	r8, r2
 80053bc:	4699      	mov	r9, r3
 80053be:	4623      	mov	r3, r4
 80053c0:	eb18 0303 	adds.w	r3, r8, r3
 80053c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053c8:	462b      	mov	r3, r5
 80053ca:	eb49 0303 	adc.w	r3, r9, r3
 80053ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80053e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053e6:	460b      	mov	r3, r1
 80053e8:	18db      	adds	r3, r3, r3
 80053ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80053ec:	4613      	mov	r3, r2
 80053ee:	eb42 0303 	adc.w	r3, r2, r3
 80053f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80053f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80053f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053fc:	f7fb f97a 	bl	80006f4 <__aeabi_uldivmod>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4b61      	ldr	r3, [pc, #388]	@ (800558c <UART_SetConfig+0x2d4>)
 8005406:	fba3 2302 	umull	r2, r3, r3, r2
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	011c      	lsls	r4, r3, #4
 800540e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005412:	2200      	movs	r2, #0
 8005414:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005418:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800541c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005420:	4642      	mov	r2, r8
 8005422:	464b      	mov	r3, r9
 8005424:	1891      	adds	r1, r2, r2
 8005426:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005428:	415b      	adcs	r3, r3
 800542a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800542c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005430:	4641      	mov	r1, r8
 8005432:	eb12 0a01 	adds.w	sl, r2, r1
 8005436:	4649      	mov	r1, r9
 8005438:	eb43 0b01 	adc.w	fp, r3, r1
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005448:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800544c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005450:	4692      	mov	sl, r2
 8005452:	469b      	mov	fp, r3
 8005454:	4643      	mov	r3, r8
 8005456:	eb1a 0303 	adds.w	r3, sl, r3
 800545a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800545e:	464b      	mov	r3, r9
 8005460:	eb4b 0303 	adc.w	r3, fp, r3
 8005464:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005474:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005478:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800547c:	460b      	mov	r3, r1
 800547e:	18db      	adds	r3, r3, r3
 8005480:	643b      	str	r3, [r7, #64]	@ 0x40
 8005482:	4613      	mov	r3, r2
 8005484:	eb42 0303 	adc.w	r3, r2, r3
 8005488:	647b      	str	r3, [r7, #68]	@ 0x44
 800548a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800548e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005492:	f7fb f92f 	bl	80006f4 <__aeabi_uldivmod>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4611      	mov	r1, r2
 800549c:	4b3b      	ldr	r3, [pc, #236]	@ (800558c <UART_SetConfig+0x2d4>)
 800549e:	fba3 2301 	umull	r2, r3, r3, r1
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	2264      	movs	r2, #100	@ 0x64
 80054a6:	fb02 f303 	mul.w	r3, r2, r3
 80054aa:	1acb      	subs	r3, r1, r3
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054b2:	4b36      	ldr	r3, [pc, #216]	@ (800558c <UART_SetConfig+0x2d4>)
 80054b4:	fba3 2302 	umull	r2, r3, r3, r2
 80054b8:	095b      	lsrs	r3, r3, #5
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054c0:	441c      	add	r4, r3
 80054c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054d4:	4642      	mov	r2, r8
 80054d6:	464b      	mov	r3, r9
 80054d8:	1891      	adds	r1, r2, r2
 80054da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80054dc:	415b      	adcs	r3, r3
 80054de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80054e4:	4641      	mov	r1, r8
 80054e6:	1851      	adds	r1, r2, r1
 80054e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80054ea:	4649      	mov	r1, r9
 80054ec:	414b      	adcs	r3, r1
 80054ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80054fc:	4659      	mov	r1, fp
 80054fe:	00cb      	lsls	r3, r1, #3
 8005500:	4651      	mov	r1, sl
 8005502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005506:	4651      	mov	r1, sl
 8005508:	00ca      	lsls	r2, r1, #3
 800550a:	4610      	mov	r0, r2
 800550c:	4619      	mov	r1, r3
 800550e:	4603      	mov	r3, r0
 8005510:	4642      	mov	r2, r8
 8005512:	189b      	adds	r3, r3, r2
 8005514:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005518:	464b      	mov	r3, r9
 800551a:	460a      	mov	r2, r1
 800551c:	eb42 0303 	adc.w	r3, r2, r3
 8005520:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005530:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005534:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005538:	460b      	mov	r3, r1
 800553a:	18db      	adds	r3, r3, r3
 800553c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800553e:	4613      	mov	r3, r2
 8005540:	eb42 0303 	adc.w	r3, r2, r3
 8005544:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005546:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800554a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800554e:	f7fb f8d1 	bl	80006f4 <__aeabi_uldivmod>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4b0d      	ldr	r3, [pc, #52]	@ (800558c <UART_SetConfig+0x2d4>)
 8005558:	fba3 1302 	umull	r1, r3, r3, r2
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	2164      	movs	r1, #100	@ 0x64
 8005560:	fb01 f303 	mul.w	r3, r1, r3
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	3332      	adds	r3, #50	@ 0x32
 800556a:	4a08      	ldr	r2, [pc, #32]	@ (800558c <UART_SetConfig+0x2d4>)
 800556c:	fba2 2303 	umull	r2, r3, r2, r3
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	f003 0207 	and.w	r2, r3, #7
 8005576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4422      	add	r2, r4
 800557e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005580:	e106      	b.n	8005790 <UART_SetConfig+0x4d8>
 8005582:	bf00      	nop
 8005584:	40011000 	.word	0x40011000
 8005588:	40011400 	.word	0x40011400
 800558c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005594:	2200      	movs	r2, #0
 8005596:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800559a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800559e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80055a2:	4642      	mov	r2, r8
 80055a4:	464b      	mov	r3, r9
 80055a6:	1891      	adds	r1, r2, r2
 80055a8:	6239      	str	r1, [r7, #32]
 80055aa:	415b      	adcs	r3, r3
 80055ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055b2:	4641      	mov	r1, r8
 80055b4:	1854      	adds	r4, r2, r1
 80055b6:	4649      	mov	r1, r9
 80055b8:	eb43 0501 	adc.w	r5, r3, r1
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	00eb      	lsls	r3, r5, #3
 80055c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055ca:	00e2      	lsls	r2, r4, #3
 80055cc:	4614      	mov	r4, r2
 80055ce:	461d      	mov	r5, r3
 80055d0:	4643      	mov	r3, r8
 80055d2:	18e3      	adds	r3, r4, r3
 80055d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055d8:	464b      	mov	r3, r9
 80055da:	eb45 0303 	adc.w	r3, r5, r3
 80055de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055fe:	4629      	mov	r1, r5
 8005600:	008b      	lsls	r3, r1, #2
 8005602:	4621      	mov	r1, r4
 8005604:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005608:	4621      	mov	r1, r4
 800560a:	008a      	lsls	r2, r1, #2
 800560c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005610:	f7fb f870 	bl	80006f4 <__aeabi_uldivmod>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4b60      	ldr	r3, [pc, #384]	@ (800579c <UART_SetConfig+0x4e4>)
 800561a:	fba3 2302 	umull	r2, r3, r3, r2
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	011c      	lsls	r4, r3, #4
 8005622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005626:	2200      	movs	r2, #0
 8005628:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800562c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005630:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005634:	4642      	mov	r2, r8
 8005636:	464b      	mov	r3, r9
 8005638:	1891      	adds	r1, r2, r2
 800563a:	61b9      	str	r1, [r7, #24]
 800563c:	415b      	adcs	r3, r3
 800563e:	61fb      	str	r3, [r7, #28]
 8005640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005644:	4641      	mov	r1, r8
 8005646:	1851      	adds	r1, r2, r1
 8005648:	6139      	str	r1, [r7, #16]
 800564a:	4649      	mov	r1, r9
 800564c:	414b      	adcs	r3, r1
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800565c:	4659      	mov	r1, fp
 800565e:	00cb      	lsls	r3, r1, #3
 8005660:	4651      	mov	r1, sl
 8005662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005666:	4651      	mov	r1, sl
 8005668:	00ca      	lsls	r2, r1, #3
 800566a:	4610      	mov	r0, r2
 800566c:	4619      	mov	r1, r3
 800566e:	4603      	mov	r3, r0
 8005670:	4642      	mov	r2, r8
 8005672:	189b      	adds	r3, r3, r2
 8005674:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005678:	464b      	mov	r3, r9
 800567a:	460a      	mov	r2, r1
 800567c:	eb42 0303 	adc.w	r3, r2, r3
 8005680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800568e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800569c:	4649      	mov	r1, r9
 800569e:	008b      	lsls	r3, r1, #2
 80056a0:	4641      	mov	r1, r8
 80056a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056a6:	4641      	mov	r1, r8
 80056a8:	008a      	lsls	r2, r1, #2
 80056aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056ae:	f7fb f821 	bl	80006f4 <__aeabi_uldivmod>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	4611      	mov	r1, r2
 80056b8:	4b38      	ldr	r3, [pc, #224]	@ (800579c <UART_SetConfig+0x4e4>)
 80056ba:	fba3 2301 	umull	r2, r3, r3, r1
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	2264      	movs	r2, #100	@ 0x64
 80056c2:	fb02 f303 	mul.w	r3, r2, r3
 80056c6:	1acb      	subs	r3, r1, r3
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	3332      	adds	r3, #50	@ 0x32
 80056cc:	4a33      	ldr	r2, [pc, #204]	@ (800579c <UART_SetConfig+0x4e4>)
 80056ce:	fba2 2303 	umull	r2, r3, r2, r3
 80056d2:	095b      	lsrs	r3, r3, #5
 80056d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056d8:	441c      	add	r4, r3
 80056da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056de:	2200      	movs	r2, #0
 80056e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80056e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80056e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80056e8:	4642      	mov	r2, r8
 80056ea:	464b      	mov	r3, r9
 80056ec:	1891      	adds	r1, r2, r2
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	415b      	adcs	r3, r3
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056f8:	4641      	mov	r1, r8
 80056fa:	1851      	adds	r1, r2, r1
 80056fc:	6039      	str	r1, [r7, #0]
 80056fe:	4649      	mov	r1, r9
 8005700:	414b      	adcs	r3, r1
 8005702:	607b      	str	r3, [r7, #4]
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	f04f 0300 	mov.w	r3, #0
 800570c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005710:	4659      	mov	r1, fp
 8005712:	00cb      	lsls	r3, r1, #3
 8005714:	4651      	mov	r1, sl
 8005716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800571a:	4651      	mov	r1, sl
 800571c:	00ca      	lsls	r2, r1, #3
 800571e:	4610      	mov	r0, r2
 8005720:	4619      	mov	r1, r3
 8005722:	4603      	mov	r3, r0
 8005724:	4642      	mov	r2, r8
 8005726:	189b      	adds	r3, r3, r2
 8005728:	66bb      	str	r3, [r7, #104]	@ 0x68
 800572a:	464b      	mov	r3, r9
 800572c:	460a      	mov	r2, r1
 800572e:	eb42 0303 	adc.w	r3, r2, r3
 8005732:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	663b      	str	r3, [r7, #96]	@ 0x60
 800573e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	f04f 0300 	mov.w	r3, #0
 8005748:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800574c:	4649      	mov	r1, r9
 800574e:	008b      	lsls	r3, r1, #2
 8005750:	4641      	mov	r1, r8
 8005752:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005756:	4641      	mov	r1, r8
 8005758:	008a      	lsls	r2, r1, #2
 800575a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800575e:	f7fa ffc9 	bl	80006f4 <__aeabi_uldivmod>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4b0d      	ldr	r3, [pc, #52]	@ (800579c <UART_SetConfig+0x4e4>)
 8005768:	fba3 1302 	umull	r1, r3, r3, r2
 800576c:	095b      	lsrs	r3, r3, #5
 800576e:	2164      	movs	r1, #100	@ 0x64
 8005770:	fb01 f303 	mul.w	r3, r1, r3
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	3332      	adds	r3, #50	@ 0x32
 800577a:	4a08      	ldr	r2, [pc, #32]	@ (800579c <UART_SetConfig+0x4e4>)
 800577c:	fba2 2303 	umull	r2, r3, r2, r3
 8005780:	095b      	lsrs	r3, r3, #5
 8005782:	f003 020f 	and.w	r2, r3, #15
 8005786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4422      	add	r2, r4
 800578e:	609a      	str	r2, [r3, #8]
}
 8005790:	bf00      	nop
 8005792:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005796:	46bd      	mov	sp, r7
 8005798:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800579c:	51eb851f 	.word	0x51eb851f

080057a0 <__NVIC_SetPriority>:
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	4603      	mov	r3, r0
 80057a8:	6039      	str	r1, [r7, #0]
 80057aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	db0a      	blt.n	80057ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	490c      	ldr	r1, [pc, #48]	@ (80057ec <__NVIC_SetPriority+0x4c>)
 80057ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057be:	0112      	lsls	r2, r2, #4
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	440b      	add	r3, r1
 80057c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80057c8:	e00a      	b.n	80057e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	4908      	ldr	r1, [pc, #32]	@ (80057f0 <__NVIC_SetPriority+0x50>)
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	3b04      	subs	r3, #4
 80057d8:	0112      	lsls	r2, r2, #4
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	440b      	add	r3, r1
 80057de:	761a      	strb	r2, [r3, #24]
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	e000e100 	.word	0xe000e100
 80057f0:	e000ed00 	.word	0xe000ed00

080057f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80057f8:	2100      	movs	r1, #0
 80057fa:	f06f 0004 	mvn.w	r0, #4
 80057fe:	f7ff ffcf 	bl	80057a0 <__NVIC_SetPriority>
#endif
}
 8005802:	bf00      	nop
 8005804:	bd80      	pop	{r7, pc}
	...

08005808 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800580e:	f3ef 8305 	mrs	r3, IPSR
 8005812:	603b      	str	r3, [r7, #0]
  return(result);
 8005814:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800581a:	f06f 0305 	mvn.w	r3, #5
 800581e:	607b      	str	r3, [r7, #4]
 8005820:	e00c      	b.n	800583c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005822:	4b0a      	ldr	r3, [pc, #40]	@ (800584c <osKernelInitialize+0x44>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d105      	bne.n	8005836 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800582a:	4b08      	ldr	r3, [pc, #32]	@ (800584c <osKernelInitialize+0x44>)
 800582c:	2201      	movs	r2, #1
 800582e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005830:	2300      	movs	r3, #0
 8005832:	607b      	str	r3, [r7, #4]
 8005834:	e002      	b.n	800583c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800583a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800583c:	687b      	ldr	r3, [r7, #4]
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	20004864 	.word	0x20004864

08005850 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005856:	f3ef 8305 	mrs	r3, IPSR
 800585a:	603b      	str	r3, [r7, #0]
  return(result);
 800585c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005862:	f06f 0305 	mvn.w	r3, #5
 8005866:	607b      	str	r3, [r7, #4]
 8005868:	e010      	b.n	800588c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800586a:	4b0b      	ldr	r3, [pc, #44]	@ (8005898 <osKernelStart+0x48>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d109      	bne.n	8005886 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005872:	f7ff ffbf 	bl	80057f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005876:	4b08      	ldr	r3, [pc, #32]	@ (8005898 <osKernelStart+0x48>)
 8005878:	2202      	movs	r2, #2
 800587a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800587c:	f001 f87a 	bl	8006974 <vTaskStartScheduler>
      stat = osOK;
 8005880:	2300      	movs	r3, #0
 8005882:	607b      	str	r3, [r7, #4]
 8005884:	e002      	b.n	800588c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005886:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800588a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800588c:	687b      	ldr	r3, [r7, #4]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20004864 	.word	0x20004864

0800589c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800589c:	b580      	push	{r7, lr}
 800589e:	b08e      	sub	sp, #56	@ 0x38
 80058a0:	af04      	add	r7, sp, #16
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058a8:	2300      	movs	r3, #0
 80058aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ac:	f3ef 8305 	mrs	r3, IPSR
 80058b0:	617b      	str	r3, [r7, #20]
  return(result);
 80058b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d17e      	bne.n	80059b6 <osThreadNew+0x11a>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d07b      	beq.n	80059b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80058be:	2380      	movs	r3, #128	@ 0x80
 80058c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80058c2:	2318      	movs	r3, #24
 80058c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80058c6:	2300      	movs	r3, #0
 80058c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80058ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d045      	beq.n	8005962 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <osThreadNew+0x48>
        name = attr->name;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <osThreadNew+0x6e>
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2b38      	cmp	r3, #56	@ 0x38
 80058fc:	d805      	bhi.n	800590a <osThreadNew+0x6e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <osThreadNew+0x72>
        return (NULL);
 800590a:	2300      	movs	r3, #0
 800590c:	e054      	b.n	80059b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	089b      	lsrs	r3, r3, #2
 800591c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00e      	beq.n	8005944 <osThreadNew+0xa8>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	2b5b      	cmp	r3, #91	@ 0x5b
 800592c:	d90a      	bls.n	8005944 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005932:	2b00      	cmp	r3, #0
 8005934:	d006      	beq.n	8005944 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <osThreadNew+0xa8>
        mem = 1;
 800593e:	2301      	movs	r3, #1
 8005940:	61bb      	str	r3, [r7, #24]
 8005942:	e010      	b.n	8005966 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10c      	bne.n	8005966 <osThreadNew+0xca>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d108      	bne.n	8005966 <osThreadNew+0xca>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d104      	bne.n	8005966 <osThreadNew+0xca>
          mem = 0;
 800595c:	2300      	movs	r3, #0
 800595e:	61bb      	str	r3, [r7, #24]
 8005960:	e001      	b.n	8005966 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005962:	2300      	movs	r3, #0
 8005964:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d110      	bne.n	800598e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005974:	9202      	str	r2, [sp, #8]
 8005976:	9301      	str	r3, [sp, #4]
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	6a3a      	ldr	r2, [r7, #32]
 8005980:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fe1a 	bl	80065bc <xTaskCreateStatic>
 8005988:	4603      	mov	r3, r0
 800598a:	613b      	str	r3, [r7, #16]
 800598c:	e013      	b.n	80059b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d110      	bne.n	80059b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	b29a      	uxth	r2, r3
 8005998:	f107 0310 	add.w	r3, r7, #16
 800599c:	9301      	str	r3, [sp, #4]
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 fe68 	bl	800667c <xTaskCreate>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d001      	beq.n	80059b6 <osThreadNew+0x11a>
            hTask = NULL;
 80059b2:	2300      	movs	r3, #0
 80059b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80059b6:	693b      	ldr	r3, [r7, #16]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3728      	adds	r7, #40	@ 0x28
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059c8:	f3ef 8305 	mrs	r3, IPSR
 80059cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80059ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <osDelay+0x1c>
    stat = osErrorISR;
 80059d4:	f06f 0305 	mvn.w	r3, #5
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	e007      	b.n	80059ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80059dc:	2300      	movs	r3, #0
 80059de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 ff8e 	bl	8006908 <vTaskDelay>
    }
  }

  return (stat);
 80059ec:	68fb      	ldr	r3, [r7, #12]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a07      	ldr	r2, [pc, #28]	@ (8005a24 <vApplicationGetIdleTaskMemory+0x2c>)
 8005a08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4a06      	ldr	r2, [pc, #24]	@ (8005a28 <vApplicationGetIdleTaskMemory+0x30>)
 8005a0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2280      	movs	r2, #128	@ 0x80
 8005a14:	601a      	str	r2, [r3, #0]
}
 8005a16:	bf00      	nop
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20004868 	.word	0x20004868
 8005a28:	200048c4 	.word	0x200048c4

08005a2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4a07      	ldr	r2, [pc, #28]	@ (8005a58 <vApplicationGetTimerTaskMemory+0x2c>)
 8005a3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	4a06      	ldr	r2, [pc, #24]	@ (8005a5c <vApplicationGetTimerTaskMemory+0x30>)
 8005a42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a4a:	601a      	str	r2, [r3, #0]
}
 8005a4c:	bf00      	nop
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	20004ac4 	.word	0x20004ac4
 8005a5c:	20004b20 	.word	0x20004b20

08005a60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f103 0208 	add.w	r2, r3, #8
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f103 0208 	add.w	r2, r3, #8
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f103 0208 	add.w	r2, r3, #8
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005aba:	b480      	push	{r7}
 8005abc:	b085      	sub	sp, #20
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	601a      	str	r2, [r3, #0]
}
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b02:	b480      	push	{r7}
 8005b04:	b085      	sub	sp, #20
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b18:	d103      	bne.n	8005b22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	e00c      	b.n	8005b3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3308      	adds	r3, #8
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	e002      	b.n	8005b30 <vListInsert+0x2e>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d2f6      	bcs.n	8005b2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	601a      	str	r2, [r3, #0]
}
 8005b68:	bf00      	nop
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6892      	ldr	r2, [r2, #8]
 8005b8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6852      	ldr	r2, [r2, #4]
 8005b94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d103      	bne.n	8005ba8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	1e5a      	subs	r2, r3, #1
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10b      	bne.n	8005bf4 <xQueueGenericReset+0x2c>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	60bb      	str	r3, [r7, #8]
}
 8005bee:	bf00      	nop
 8005bf0:	bf00      	nop
 8005bf2:	e7fd      	b.n	8005bf0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005bf4:	f002 f8a0 	bl	8007d38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c00:	68f9      	ldr	r1, [r7, #12]
 8005c02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005c04:	fb01 f303 	mul.w	r3, r1, r3
 8005c08:	441a      	add	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c24:	3b01      	subs	r3, #1
 8005c26:	68f9      	ldr	r1, [r7, #12]
 8005c28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005c2a:	fb01 f303 	mul.w	r3, r1, r3
 8005c2e:	441a      	add	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	22ff      	movs	r2, #255	@ 0xff
 8005c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	22ff      	movs	r2, #255	@ 0xff
 8005c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d114      	bne.n	8005c74 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d01a      	beq.n	8005c88 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3310      	adds	r3, #16
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 f91a 	bl	8006e90 <xTaskRemoveFromEventList>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d012      	beq.n	8005c88 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c62:	4b0d      	ldr	r3, [pc, #52]	@ (8005c98 <xQueueGenericReset+0xd0>)
 8005c64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	e009      	b.n	8005c88 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	3310      	adds	r3, #16
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7ff fef1 	bl	8005a60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3324      	adds	r3, #36	@ 0x24
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff feec 	bl	8005a60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c88:	f002 f888 	bl	8007d9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c8c:	2301      	movs	r3, #1
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	e000ed04 	.word	0xe000ed04

08005c9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08e      	sub	sp, #56	@ 0x38
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10b      	bne.n	8005cc8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	e7fd      	b.n	8005cc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10b      	bne.n	8005ce6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ce0:	bf00      	nop
 8005ce2:	bf00      	nop
 8005ce4:	e7fd      	b.n	8005ce2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <xQueueGenericCreateStatic+0x56>
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <xQueueGenericCreateStatic+0x5a>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e000      	b.n	8005cf8 <xQueueGenericCreateStatic+0x5c>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10b      	bne.n	8005d14 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	623b      	str	r3, [r7, #32]
}
 8005d0e:	bf00      	nop
 8005d10:	bf00      	nop
 8005d12:	e7fd      	b.n	8005d10 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d102      	bne.n	8005d20 <xQueueGenericCreateStatic+0x84>
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <xQueueGenericCreateStatic+0x88>
 8005d20:	2301      	movs	r3, #1
 8005d22:	e000      	b.n	8005d26 <xQueueGenericCreateStatic+0x8a>
 8005d24:	2300      	movs	r3, #0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10b      	bne.n	8005d42 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	61fb      	str	r3, [r7, #28]
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	e7fd      	b.n	8005d3e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d42:	2350      	movs	r3, #80	@ 0x50
 8005d44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2b50      	cmp	r3, #80	@ 0x50
 8005d4a:	d00b      	beq.n	8005d64 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	61bb      	str	r3, [r7, #24]
}
 8005d5e:	bf00      	nop
 8005d60:	bf00      	nop
 8005d62:	e7fd      	b.n	8005d60 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d64:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00d      	beq.n	8005d8c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d78:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	4613      	mov	r3, r2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f805 	bl	8005d96 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3730      	adds	r7, #48	@ 0x30
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b084      	sub	sp, #16
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	607a      	str	r2, [r7, #4]
 8005da2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d103      	bne.n	8005db2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	e002      	b.n	8005db8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	69b8      	ldr	r0, [r7, #24]
 8005dc8:	f7ff fefe 	bl	8005bc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	78fa      	ldrb	r2, [r7, #3]
 8005dd0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005dd4:	bf00      	nop
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08e      	sub	sp, #56	@ 0x38
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005dea:	2300      	movs	r3, #0
 8005dec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10b      	bne.n	8005e10 <xQueueGenericSend+0x34>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e0a:	bf00      	nop
 8005e0c:	bf00      	nop
 8005e0e:	e7fd      	b.n	8005e0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d103      	bne.n	8005e1e <xQueueGenericSend+0x42>
 8005e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <xQueueGenericSend+0x46>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <xQueueGenericSend+0x48>
 8005e22:	2300      	movs	r3, #0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10b      	bne.n	8005e40 <xQueueGenericSend+0x64>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e3a:	bf00      	nop
 8005e3c:	bf00      	nop
 8005e3e:	e7fd      	b.n	8005e3c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d103      	bne.n	8005e4e <xQueueGenericSend+0x72>
 8005e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <xQueueGenericSend+0x76>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e000      	b.n	8005e54 <xQueueGenericSend+0x78>
 8005e52:	2300      	movs	r3, #0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10b      	bne.n	8005e70 <xQueueGenericSend+0x94>
	__asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	623b      	str	r3, [r7, #32]
}
 8005e6a:	bf00      	nop
 8005e6c:	bf00      	nop
 8005e6e:	e7fd      	b.n	8005e6c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e70:	f001 f9f6 	bl	8007260 <xTaskGetSchedulerState>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d102      	bne.n	8005e80 <xQueueGenericSend+0xa4>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <xQueueGenericSend+0xa8>
 8005e80:	2301      	movs	r3, #1
 8005e82:	e000      	b.n	8005e86 <xQueueGenericSend+0xaa>
 8005e84:	2300      	movs	r3, #0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10b      	bne.n	8005ea2 <xQueueGenericSend+0xc6>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	61fb      	str	r3, [r7, #28]
}
 8005e9c:	bf00      	nop
 8005e9e:	bf00      	nop
 8005ea0:	e7fd      	b.n	8005e9e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ea2:	f001 ff49 	bl	8007d38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d302      	bcc.n	8005eb8 <xQueueGenericSend+0xdc>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d129      	bne.n	8005f0c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	68b9      	ldr	r1, [r7, #8]
 8005ebc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ebe:	f000 fa0f 	bl	80062e0 <prvCopyDataToQueue>
 8005ec2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d010      	beq.n	8005eee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ece:	3324      	adds	r3, #36	@ 0x24
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 ffdd 	bl	8006e90 <xTaskRemoveFromEventList>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d013      	beq.n	8005f04 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005edc:	4b3f      	ldr	r3, [pc, #252]	@ (8005fdc <xQueueGenericSend+0x200>)
 8005ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	e00a      	b.n	8005f04 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d007      	beq.n	8005f04 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ef4:	4b39      	ldr	r3, [pc, #228]	@ (8005fdc <xQueueGenericSend+0x200>)
 8005ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f04:	f001 ff4a 	bl	8007d9c <vPortExitCritical>
				return pdPASS;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e063      	b.n	8005fd4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d103      	bne.n	8005f1a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f12:	f001 ff43 	bl	8007d9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	e05c      	b.n	8005fd4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d106      	bne.n	8005f2e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f20:	f107 0314 	add.w	r3, r7, #20
 8005f24:	4618      	mov	r0, r3
 8005f26:	f001 f83f 	bl	8006fa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f2e:	f001 ff35 	bl	8007d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f32:	f000 fd87 	bl	8006a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f36:	f001 feff 	bl	8007d38 <vPortEnterCritical>
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f40:	b25b      	sxtb	r3, r3
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f46:	d103      	bne.n	8005f50 <xQueueGenericSend+0x174>
 8005f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f56:	b25b      	sxtb	r3, r3
 8005f58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f5c:	d103      	bne.n	8005f66 <xQueueGenericSend+0x18a>
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f66:	f001 ff19 	bl	8007d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f6a:	1d3a      	adds	r2, r7, #4
 8005f6c:	f107 0314 	add.w	r3, r7, #20
 8005f70:	4611      	mov	r1, r2
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 f82e 	bl	8006fd4 <xTaskCheckForTimeOut>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d124      	bne.n	8005fc8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f80:	f000 faa6 	bl	80064d0 <prvIsQueueFull>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d018      	beq.n	8005fbc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8c:	3310      	adds	r3, #16
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	4611      	mov	r1, r2
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 ff2a 	bl	8006dec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f9a:	f000 fa31 	bl	8006400 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f9e:	f000 fd5f 	bl	8006a60 <xTaskResumeAll>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f47f af7c 	bne.w	8005ea2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005faa:	4b0c      	ldr	r3, [pc, #48]	@ (8005fdc <xQueueGenericSend+0x200>)
 8005fac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	e772      	b.n	8005ea2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005fbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fbe:	f000 fa1f 	bl	8006400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fc2:	f000 fd4d 	bl	8006a60 <xTaskResumeAll>
 8005fc6:	e76c      	b.n	8005ea2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005fc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fca:	f000 fa19 	bl	8006400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fce:	f000 fd47 	bl	8006a60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005fd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3738      	adds	r7, #56	@ 0x38
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	e000ed04 	.word	0xe000ed04

08005fe0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b090      	sub	sp, #64	@ 0x40
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10b      	bne.n	8006010 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800600a:	bf00      	nop
 800600c:	bf00      	nop
 800600e:	e7fd      	b.n	800600c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d103      	bne.n	800601e <xQueueGenericSendFromISR+0x3e>
 8006016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <xQueueGenericSendFromISR+0x42>
 800601e:	2301      	movs	r3, #1
 8006020:	e000      	b.n	8006024 <xQueueGenericSendFromISR+0x44>
 8006022:	2300      	movs	r3, #0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10b      	bne.n	8006040 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800603a:	bf00      	nop
 800603c:	bf00      	nop
 800603e:	e7fd      	b.n	800603c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b02      	cmp	r3, #2
 8006044:	d103      	bne.n	800604e <xQueueGenericSendFromISR+0x6e>
 8006046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <xQueueGenericSendFromISR+0x72>
 800604e:	2301      	movs	r3, #1
 8006050:	e000      	b.n	8006054 <xQueueGenericSendFromISR+0x74>
 8006052:	2300      	movs	r3, #0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10b      	bne.n	8006070 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	623b      	str	r3, [r7, #32]
}
 800606a:	bf00      	nop
 800606c:	bf00      	nop
 800606e:	e7fd      	b.n	800606c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006070:	f001 ff42 	bl	8007ef8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006074:	f3ef 8211 	mrs	r2, BASEPRI
 8006078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	61fa      	str	r2, [r7, #28]
 800608a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800608c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800608e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006092:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006098:	429a      	cmp	r2, r3
 800609a:	d302      	bcc.n	80060a2 <xQueueGenericSendFromISR+0xc2>
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d12f      	bne.n	8006102 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80060b8:	f000 f912 	bl	80062e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80060c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060c4:	d112      	bne.n	80060ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d016      	beq.n	80060fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d0:	3324      	adds	r3, #36	@ 0x24
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 fedc 	bl	8006e90 <xTaskRemoveFromEventList>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00e      	beq.n	80060fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00b      	beq.n	80060fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	e007      	b.n	80060fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80060f0:	3301      	adds	r3, #1
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	b25a      	sxtb	r2, r3
 80060f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80060fc:	2301      	movs	r3, #1
 80060fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006100:	e001      	b.n	8006106 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006102:	2300      	movs	r3, #0
 8006104:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006108:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006110:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006114:	4618      	mov	r0, r3
 8006116:	3740      	adds	r7, #64	@ 0x40
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08c      	sub	sp, #48	@ 0x30
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006128:	2300      	movs	r3, #0
 800612a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10b      	bne.n	800614e <xQueueReceive+0x32>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	623b      	str	r3, [r7, #32]
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	e7fd      	b.n	800614a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d103      	bne.n	800615c <xQueueReceive+0x40>
 8006154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <xQueueReceive+0x44>
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <xQueueReceive+0x46>
 8006160:	2300      	movs	r3, #0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10b      	bne.n	800617e <xQueueReceive+0x62>
	__asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	61fb      	str	r3, [r7, #28]
}
 8006178:	bf00      	nop
 800617a:	bf00      	nop
 800617c:	e7fd      	b.n	800617a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800617e:	f001 f86f 	bl	8007260 <xTaskGetSchedulerState>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d102      	bne.n	800618e <xQueueReceive+0x72>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <xQueueReceive+0x76>
 800618e:	2301      	movs	r3, #1
 8006190:	e000      	b.n	8006194 <xQueueReceive+0x78>
 8006192:	2300      	movs	r3, #0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10b      	bne.n	80061b0 <xQueueReceive+0x94>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	61bb      	str	r3, [r7, #24]
}
 80061aa:	bf00      	nop
 80061ac:	bf00      	nop
 80061ae:	e7fd      	b.n	80061ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061b0:	f001 fdc2 	bl	8007d38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01f      	beq.n	8006200 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061c0:	68b9      	ldr	r1, [r7, #8]
 80061c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061c4:	f000 f8f6 	bl	80063b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ca:	1e5a      	subs	r2, r3, #1
 80061cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00f      	beq.n	80061f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	3310      	adds	r3, #16
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 fe57 	bl	8006e90 <xTaskRemoveFromEventList>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d007      	beq.n	80061f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061e8:	4b3c      	ldr	r3, [pc, #240]	@ (80062dc <xQueueReceive+0x1c0>)
 80061ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061f8:	f001 fdd0 	bl	8007d9c <vPortExitCritical>
				return pdPASS;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e069      	b.n	80062d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d103      	bne.n	800620e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006206:	f001 fdc9 	bl	8007d9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800620a:	2300      	movs	r3, #0
 800620c:	e062      	b.n	80062d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800620e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006210:	2b00      	cmp	r3, #0
 8006212:	d106      	bne.n	8006222 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006214:	f107 0310 	add.w	r3, r7, #16
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fec5 	bl	8006fa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800621e:	2301      	movs	r3, #1
 8006220:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006222:	f001 fdbb 	bl	8007d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006226:	f000 fc0d 	bl	8006a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800622a:	f001 fd85 	bl	8007d38 <vPortEnterCritical>
 800622e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006230:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006234:	b25b      	sxtb	r3, r3
 8006236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800623a:	d103      	bne.n	8006244 <xQueueReceive+0x128>
 800623c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006246:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800624a:	b25b      	sxtb	r3, r3
 800624c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006250:	d103      	bne.n	800625a <xQueueReceive+0x13e>
 8006252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800625a:	f001 fd9f 	bl	8007d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800625e:	1d3a      	adds	r2, r7, #4
 8006260:	f107 0310 	add.w	r3, r7, #16
 8006264:	4611      	mov	r1, r2
 8006266:	4618      	mov	r0, r3
 8006268:	f000 feb4 	bl	8006fd4 <xTaskCheckForTimeOut>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d123      	bne.n	80062ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006274:	f000 f916 	bl	80064a4 <prvIsQueueEmpty>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d017      	beq.n	80062ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800627e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006280:	3324      	adds	r3, #36	@ 0x24
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	4611      	mov	r1, r2
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fdb0 	bl	8006dec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800628c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800628e:	f000 f8b7 	bl	8006400 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006292:	f000 fbe5 	bl	8006a60 <xTaskResumeAll>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d189      	bne.n	80061b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800629c:	4b0f      	ldr	r3, [pc, #60]	@ (80062dc <xQueueReceive+0x1c0>)
 800629e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	e780      	b.n	80061b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062b0:	f000 f8a6 	bl	8006400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062b4:	f000 fbd4 	bl	8006a60 <xTaskResumeAll>
 80062b8:	e77a      	b.n	80061b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80062ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062bc:	f000 f8a0 	bl	8006400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062c0:	f000 fbce 	bl	8006a60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062c6:	f000 f8ed 	bl	80064a4 <prvIsQueueEmpty>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f43f af6f 	beq.w	80061b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3730      	adds	r7, #48	@ 0x30
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	e000ed04 	.word	0xe000ed04

080062e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062ec:	2300      	movs	r3, #0
 80062ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10d      	bne.n	800631a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d14d      	bne.n	80063a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	4618      	mov	r0, r3
 800630c:	f000 ffc6 	bl	800729c <xTaskPriorityDisinherit>
 8006310:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	609a      	str	r2, [r3, #8]
 8006318:	e043      	b.n	80063a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d119      	bne.n	8006354 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6858      	ldr	r0, [r3, #4]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006328:	461a      	mov	r2, r3
 800632a:	68b9      	ldr	r1, [r7, #8]
 800632c:	f00f fb59 	bl	80159e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006338:	441a      	add	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	429a      	cmp	r2, r3
 8006348:	d32b      	bcc.n	80063a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	605a      	str	r2, [r3, #4]
 8006352:	e026      	b.n	80063a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	68d8      	ldr	r0, [r3, #12]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635c:	461a      	mov	r2, r3
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	f00f fb3f 	bl	80159e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636c:	425b      	negs	r3, r3
 800636e:	441a      	add	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	68da      	ldr	r2, [r3, #12]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	429a      	cmp	r2, r3
 800637e:	d207      	bcs.n	8006390 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006388:	425b      	negs	r3, r3
 800638a:	441a      	add	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b02      	cmp	r3, #2
 8006394:	d105      	bne.n	80063a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	3b01      	subs	r3, #1
 80063a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80063aa:	697b      	ldr	r3, [r7, #20]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d018      	beq.n	80063f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68da      	ldr	r2, [r3, #12]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ce:	441a      	add	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d303      	bcc.n	80063e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68d9      	ldr	r1, [r3, #12]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f0:	461a      	mov	r2, r3
 80063f2:	6838      	ldr	r0, [r7, #0]
 80063f4:	f00f faf5 	bl	80159e2 <memcpy>
	}
}
 80063f8:	bf00      	nop
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006408:	f001 fc96 	bl	8007d38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006412:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006414:	e011      	b.n	800643a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641a:	2b00      	cmp	r3, #0
 800641c:	d012      	beq.n	8006444 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3324      	adds	r3, #36	@ 0x24
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fd34 	bl	8006e90 <xTaskRemoveFromEventList>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800642e:	f000 fe35 	bl	800709c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006432:	7bfb      	ldrb	r3, [r7, #15]
 8006434:	3b01      	subs	r3, #1
 8006436:	b2db      	uxtb	r3, r3
 8006438:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800643a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800643e:	2b00      	cmp	r3, #0
 8006440:	dce9      	bgt.n	8006416 <prvUnlockQueue+0x16>
 8006442:	e000      	b.n	8006446 <prvUnlockQueue+0x46>
					break;
 8006444:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	22ff      	movs	r2, #255	@ 0xff
 800644a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800644e:	f001 fca5 	bl	8007d9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006452:	f001 fc71 	bl	8007d38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800645c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800645e:	e011      	b.n	8006484 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d012      	beq.n	800648e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3310      	adds	r3, #16
 800646c:	4618      	mov	r0, r3
 800646e:	f000 fd0f 	bl	8006e90 <xTaskRemoveFromEventList>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006478:	f000 fe10 	bl	800709c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800647c:	7bbb      	ldrb	r3, [r7, #14]
 800647e:	3b01      	subs	r3, #1
 8006480:	b2db      	uxtb	r3, r3
 8006482:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006484:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006488:	2b00      	cmp	r3, #0
 800648a:	dce9      	bgt.n	8006460 <prvUnlockQueue+0x60>
 800648c:	e000      	b.n	8006490 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800648e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	22ff      	movs	r2, #255	@ 0xff
 8006494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006498:	f001 fc80 	bl	8007d9c <vPortExitCritical>
}
 800649c:	bf00      	nop
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064ac:	f001 fc44 	bl	8007d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d102      	bne.n	80064be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80064b8:	2301      	movs	r3, #1
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	e001      	b.n	80064c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064c2:	f001 fc6b 	bl	8007d9c <vPortExitCritical>

	return xReturn;
 80064c6:	68fb      	ldr	r3, [r7, #12]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064d8:	f001 fc2e 	bl	8007d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d102      	bne.n	80064ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064e8:	2301      	movs	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	e001      	b.n	80064f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064f2:	f001 fc53 	bl	8007d9c <vPortExitCritical>

	return xReturn;
 80064f6:	68fb      	ldr	r3, [r7, #12]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	e014      	b.n	800653a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006510:	4a0f      	ldr	r2, [pc, #60]	@ (8006550 <vQueueAddToRegistry+0x50>)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10b      	bne.n	8006534 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800651c:	490c      	ldr	r1, [pc, #48]	@ (8006550 <vQueueAddToRegistry+0x50>)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006526:	4a0a      	ldr	r2, [pc, #40]	@ (8006550 <vQueueAddToRegistry+0x50>)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	4413      	add	r3, r2
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006532:	e006      	b.n	8006542 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3301      	adds	r3, #1
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b07      	cmp	r3, #7
 800653e:	d9e7      	bls.n	8006510 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006540:	bf00      	nop
 8006542:	bf00      	nop
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	20004f20 	.word	0x20004f20

08006554 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006564:	f001 fbe8 	bl	8007d38 <vPortEnterCritical>
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800656e:	b25b      	sxtb	r3, r3
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006574:	d103      	bne.n	800657e <vQueueWaitForMessageRestricted+0x2a>
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006584:	b25b      	sxtb	r3, r3
 8006586:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800658a:	d103      	bne.n	8006594 <vQueueWaitForMessageRestricted+0x40>
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006594:	f001 fc02 	bl	8007d9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659c:	2b00      	cmp	r3, #0
 800659e:	d106      	bne.n	80065ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	3324      	adds	r3, #36	@ 0x24
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	68b9      	ldr	r1, [r7, #8]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fc45 	bl	8006e38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80065ae:	6978      	ldr	r0, [r7, #20]
 80065b0:	f7ff ff26 	bl	8006400 <prvUnlockQueue>
	}
 80065b4:	bf00      	nop
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08e      	sub	sp, #56	@ 0x38
 80065c0:	af04      	add	r7, sp, #16
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
 80065c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10b      	bne.n	80065e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	623b      	str	r3, [r7, #32]
}
 80065e2:	bf00      	nop
 80065e4:	bf00      	nop
 80065e6:	e7fd      	b.n	80065e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10b      	bne.n	8006606 <xTaskCreateStatic+0x4a>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	61fb      	str	r3, [r7, #28]
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	e7fd      	b.n	8006602 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006606:	235c      	movs	r3, #92	@ 0x5c
 8006608:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	2b5c      	cmp	r3, #92	@ 0x5c
 800660e:	d00b      	beq.n	8006628 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	61bb      	str	r3, [r7, #24]
}
 8006622:	bf00      	nop
 8006624:	bf00      	nop
 8006626:	e7fd      	b.n	8006624 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006628:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800662a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662c:	2b00      	cmp	r3, #0
 800662e:	d01e      	beq.n	800666e <xTaskCreateStatic+0xb2>
 8006630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006632:	2b00      	cmp	r3, #0
 8006634:	d01b      	beq.n	800666e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006638:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800663a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800663e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	2202      	movs	r2, #2
 8006644:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006648:	2300      	movs	r3, #0
 800664a:	9303      	str	r3, [sp, #12]
 800664c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664e:	9302      	str	r3, [sp, #8]
 8006650:	f107 0314 	add.w	r3, r7, #20
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 f850 	bl	8006706 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006666:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006668:	f000 f8de 	bl	8006828 <prvAddNewTaskToReadyList>
 800666c:	e001      	b.n	8006672 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800666e:	2300      	movs	r3, #0
 8006670:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006672:	697b      	ldr	r3, [r7, #20]
	}
 8006674:	4618      	mov	r0, r3
 8006676:	3728      	adds	r7, #40	@ 0x28
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08c      	sub	sp, #48	@ 0x30
 8006680:	af04      	add	r7, sp, #16
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	4613      	mov	r3, r2
 800668a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800668c:	88fb      	ldrh	r3, [r7, #6]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4618      	mov	r0, r3
 8006692:	f001 fc73 	bl	8007f7c <pvPortMalloc>
 8006696:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00e      	beq.n	80066bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800669e:	205c      	movs	r0, #92	@ 0x5c
 80066a0:	f001 fc6c 	bl	8007f7c <pvPortMalloc>
 80066a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80066b2:	e005      	b.n	80066c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066b4:	6978      	ldr	r0, [r7, #20]
 80066b6:	f001 fd2f 	bl	8008118 <vPortFree>
 80066ba:	e001      	b.n	80066c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066bc:	2300      	movs	r3, #0
 80066be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d017      	beq.n	80066f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066ce:	88fa      	ldrh	r2, [r7, #6]
 80066d0:	2300      	movs	r3, #0
 80066d2:	9303      	str	r3, [sp, #12]
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	9302      	str	r3, [sp, #8]
 80066d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066da:	9301      	str	r3, [sp, #4]
 80066dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	68b9      	ldr	r1, [r7, #8]
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 f80e 	bl	8006706 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066ea:	69f8      	ldr	r0, [r7, #28]
 80066ec:	f000 f89c 	bl	8006828 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066f0:	2301      	movs	r3, #1
 80066f2:	61bb      	str	r3, [r7, #24]
 80066f4:	e002      	b.n	80066fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066fc:	69bb      	ldr	r3, [r7, #24]
	}
 80066fe:	4618      	mov	r0, r3
 8006700:	3720      	adds	r7, #32
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b088      	sub	sp, #32
 800670a:	af00      	add	r7, sp, #0
 800670c:	60f8      	str	r0, [r7, #12]
 800670e:	60b9      	str	r1, [r7, #8]
 8006710:	607a      	str	r2, [r7, #4]
 8006712:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006716:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	461a      	mov	r2, r3
 800671e:	21a5      	movs	r1, #165	@ 0xa5
 8006720:	f00f f896 	bl	8015850 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006726:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800672e:	3b01      	subs	r3, #1
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	f023 0307 	bic.w	r3, r3, #7
 800673c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00b      	beq.n	8006760 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	617b      	str	r3, [r7, #20]
}
 800675a:	bf00      	nop
 800675c:	bf00      	nop
 800675e:	e7fd      	b.n	800675c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d01f      	beq.n	80067a6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006766:	2300      	movs	r3, #0
 8006768:	61fb      	str	r3, [r7, #28]
 800676a:	e012      	b.n	8006792 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	4413      	add	r3, r2
 8006772:	7819      	ldrb	r1, [r3, #0]
 8006774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	4413      	add	r3, r2
 800677a:	3334      	adds	r3, #52	@ 0x34
 800677c:	460a      	mov	r2, r1
 800677e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	4413      	add	r3, r2
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d006      	beq.n	800679a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	3301      	adds	r3, #1
 8006790:	61fb      	str	r3, [r7, #28]
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	2b0f      	cmp	r3, #15
 8006796:	d9e9      	bls.n	800676c <prvInitialiseNewTask+0x66>
 8006798:	e000      	b.n	800679c <prvInitialiseNewTask+0x96>
			{
				break;
 800679a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800679c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067a4:	e003      	b.n	80067ae <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b0:	2b37      	cmp	r3, #55	@ 0x37
 80067b2:	d901      	bls.n	80067b8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067b4:	2337      	movs	r3, #55	@ 0x37
 80067b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067c2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80067c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c6:	2200      	movs	r2, #0
 80067c8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067cc:	3304      	adds	r3, #4
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7ff f966 	bl	8005aa0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d6:	3318      	adds	r3, #24
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff f961 	bl	8005aa0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80067ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067f2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f6:	2200      	movs	r2, #0
 80067f8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	68f9      	ldr	r1, [r7, #12]
 8006806:	69b8      	ldr	r0, [r7, #24]
 8006808:	f001 f966 	bl	8007ad8 <pxPortInitialiseStack>
 800680c:	4602      	mov	r2, r0
 800680e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006810:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800681a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800681c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800681e:	bf00      	nop
 8006820:	3720      	adds	r7, #32
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006830:	f001 fa82 	bl	8007d38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006834:	4b2d      	ldr	r3, [pc, #180]	@ (80068ec <prvAddNewTaskToReadyList+0xc4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	3301      	adds	r3, #1
 800683a:	4a2c      	ldr	r2, [pc, #176]	@ (80068ec <prvAddNewTaskToReadyList+0xc4>)
 800683c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800683e:	4b2c      	ldr	r3, [pc, #176]	@ (80068f0 <prvAddNewTaskToReadyList+0xc8>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d109      	bne.n	800685a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006846:	4a2a      	ldr	r2, [pc, #168]	@ (80068f0 <prvAddNewTaskToReadyList+0xc8>)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800684c:	4b27      	ldr	r3, [pc, #156]	@ (80068ec <prvAddNewTaskToReadyList+0xc4>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d110      	bne.n	8006876 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006854:	f000 fc46 	bl	80070e4 <prvInitialiseTaskLists>
 8006858:	e00d      	b.n	8006876 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800685a:	4b26      	ldr	r3, [pc, #152]	@ (80068f4 <prvAddNewTaskToReadyList+0xcc>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006862:	4b23      	ldr	r3, [pc, #140]	@ (80068f0 <prvAddNewTaskToReadyList+0xc8>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686c:	429a      	cmp	r2, r3
 800686e:	d802      	bhi.n	8006876 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006870:	4a1f      	ldr	r2, [pc, #124]	@ (80068f0 <prvAddNewTaskToReadyList+0xc8>)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006876:	4b20      	ldr	r3, [pc, #128]	@ (80068f8 <prvAddNewTaskToReadyList+0xd0>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3301      	adds	r3, #1
 800687c:	4a1e      	ldr	r2, [pc, #120]	@ (80068f8 <prvAddNewTaskToReadyList+0xd0>)
 800687e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006880:	4b1d      	ldr	r3, [pc, #116]	@ (80068f8 <prvAddNewTaskToReadyList+0xd0>)
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800688c:	4b1b      	ldr	r3, [pc, #108]	@ (80068fc <prvAddNewTaskToReadyList+0xd4>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d903      	bls.n	800689c <prvAddNewTaskToReadyList+0x74>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006898:	4a18      	ldr	r2, [pc, #96]	@ (80068fc <prvAddNewTaskToReadyList+0xd4>)
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4a15      	ldr	r2, [pc, #84]	@ (8006900 <prvAddNewTaskToReadyList+0xd8>)
 80068aa:	441a      	add	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3304      	adds	r3, #4
 80068b0:	4619      	mov	r1, r3
 80068b2:	4610      	mov	r0, r2
 80068b4:	f7ff f901 	bl	8005aba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068b8:	f001 fa70 	bl	8007d9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068bc:	4b0d      	ldr	r3, [pc, #52]	@ (80068f4 <prvAddNewTaskToReadyList+0xcc>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00e      	beq.n	80068e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068c4:	4b0a      	ldr	r3, [pc, #40]	@ (80068f0 <prvAddNewTaskToReadyList+0xc8>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d207      	bcs.n	80068e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006904 <prvAddNewTaskToReadyList+0xdc>)
 80068d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068d8:	601a      	str	r2, [r3, #0]
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068e2:	bf00      	nop
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20005434 	.word	0x20005434
 80068f0:	20004f60 	.word	0x20004f60
 80068f4:	20005440 	.word	0x20005440
 80068f8:	20005450 	.word	0x20005450
 80068fc:	2000543c 	.word	0x2000543c
 8006900:	20004f64 	.word	0x20004f64
 8006904:	e000ed04 	.word	0xe000ed04

08006908 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d018      	beq.n	800694c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800691a:	4b14      	ldr	r3, [pc, #80]	@ (800696c <vTaskDelay+0x64>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00b      	beq.n	800693a <vTaskDelay+0x32>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	60bb      	str	r3, [r7, #8]
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop
 8006938:	e7fd      	b.n	8006936 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800693a:	f000 f883 	bl	8006a44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800693e:	2100      	movs	r1, #0
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fd1b 	bl	800737c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006946:	f000 f88b 	bl	8006a60 <xTaskResumeAll>
 800694a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d107      	bne.n	8006962 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006952:	4b07      	ldr	r3, [pc, #28]	@ (8006970 <vTaskDelay+0x68>)
 8006954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006962:	bf00      	nop
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	2000545c 	.word	0x2000545c
 8006970:	e000ed04 	.word	0xe000ed04

08006974 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08a      	sub	sp, #40	@ 0x28
 8006978:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800697e:	2300      	movs	r3, #0
 8006980:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006982:	463a      	mov	r2, r7
 8006984:	1d39      	adds	r1, r7, #4
 8006986:	f107 0308 	add.w	r3, r7, #8
 800698a:	4618      	mov	r0, r3
 800698c:	f7ff f834 	bl	80059f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	9202      	str	r2, [sp, #8]
 8006998:	9301      	str	r3, [sp, #4]
 800699a:	2300      	movs	r3, #0
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	2300      	movs	r3, #0
 80069a0:	460a      	mov	r2, r1
 80069a2:	4922      	ldr	r1, [pc, #136]	@ (8006a2c <vTaskStartScheduler+0xb8>)
 80069a4:	4822      	ldr	r0, [pc, #136]	@ (8006a30 <vTaskStartScheduler+0xbc>)
 80069a6:	f7ff fe09 	bl	80065bc <xTaskCreateStatic>
 80069aa:	4603      	mov	r3, r0
 80069ac:	4a21      	ldr	r2, [pc, #132]	@ (8006a34 <vTaskStartScheduler+0xc0>)
 80069ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069b0:	4b20      	ldr	r3, [pc, #128]	@ (8006a34 <vTaskStartScheduler+0xc0>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069b8:	2301      	movs	r3, #1
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	e001      	b.n	80069c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069be:	2300      	movs	r3, #0
 80069c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d102      	bne.n	80069ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80069c8:	f000 fd2c 	bl	8007424 <xTimerCreateTimerTask>
 80069cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d116      	bne.n	8006a02 <vTaskStartScheduler+0x8e>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	613b      	str	r3, [r7, #16]
}
 80069e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069e8:	4b13      	ldr	r3, [pc, #76]	@ (8006a38 <vTaskStartScheduler+0xc4>)
 80069ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80069ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069f0:	4b12      	ldr	r3, [pc, #72]	@ (8006a3c <vTaskStartScheduler+0xc8>)
 80069f2:	2201      	movs	r2, #1
 80069f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069f6:	4b12      	ldr	r3, [pc, #72]	@ (8006a40 <vTaskStartScheduler+0xcc>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069fc:	f001 f8f8 	bl	8007bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a00:	e00f      	b.n	8006a22 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a08:	d10b      	bne.n	8006a22 <vTaskStartScheduler+0xae>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	60fb      	str	r3, [r7, #12]
}
 8006a1c:	bf00      	nop
 8006a1e:	bf00      	nop
 8006a20:	e7fd      	b.n	8006a1e <vTaskStartScheduler+0xaa>
}
 8006a22:	bf00      	nop
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	0801683c 	.word	0x0801683c
 8006a30:	080070b5 	.word	0x080070b5
 8006a34:	20005458 	.word	0x20005458
 8006a38:	20005454 	.word	0x20005454
 8006a3c:	20005440 	.word	0x20005440
 8006a40:	20005438 	.word	0x20005438

08006a44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a44:	b480      	push	{r7}
 8006a46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a48:	4b04      	ldr	r3, [pc, #16]	@ (8006a5c <vTaskSuspendAll+0x18>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	4a03      	ldr	r2, [pc, #12]	@ (8006a5c <vTaskSuspendAll+0x18>)
 8006a50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a52:	bf00      	nop
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	2000545c 	.word	0x2000545c

08006a60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a66:	2300      	movs	r3, #0
 8006a68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a6e:	4b42      	ldr	r3, [pc, #264]	@ (8006b78 <xTaskResumeAll+0x118>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10b      	bne.n	8006a8e <xTaskResumeAll+0x2e>
	__asm volatile
 8006a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	603b      	str	r3, [r7, #0]
}
 8006a88:	bf00      	nop
 8006a8a:	bf00      	nop
 8006a8c:	e7fd      	b.n	8006a8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a8e:	f001 f953 	bl	8007d38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a92:	4b39      	ldr	r3, [pc, #228]	@ (8006b78 <xTaskResumeAll+0x118>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	4a37      	ldr	r2, [pc, #220]	@ (8006b78 <xTaskResumeAll+0x118>)
 8006a9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a9c:	4b36      	ldr	r3, [pc, #216]	@ (8006b78 <xTaskResumeAll+0x118>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d162      	bne.n	8006b6a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006aa4:	4b35      	ldr	r3, [pc, #212]	@ (8006b7c <xTaskResumeAll+0x11c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d05e      	beq.n	8006b6a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006aac:	e02f      	b.n	8006b0e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aae:	4b34      	ldr	r3, [pc, #208]	@ (8006b80 <xTaskResumeAll+0x120>)
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	3318      	adds	r3, #24
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7ff f85a 	bl	8005b74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff f855 	bl	8005b74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ace:	4b2d      	ldr	r3, [pc, #180]	@ (8006b84 <xTaskResumeAll+0x124>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d903      	bls.n	8006ade <xTaskResumeAll+0x7e>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ada:	4a2a      	ldr	r2, [pc, #168]	@ (8006b84 <xTaskResumeAll+0x124>)
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4a27      	ldr	r2, [pc, #156]	@ (8006b88 <xTaskResumeAll+0x128>)
 8006aec:	441a      	add	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3304      	adds	r3, #4
 8006af2:	4619      	mov	r1, r3
 8006af4:	4610      	mov	r0, r2
 8006af6:	f7fe ffe0 	bl	8005aba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006afe:	4b23      	ldr	r3, [pc, #140]	@ (8006b8c <xTaskResumeAll+0x12c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d302      	bcc.n	8006b0e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006b08:	4b21      	ldr	r3, [pc, #132]	@ (8006b90 <xTaskResumeAll+0x130>)
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8006b80 <xTaskResumeAll+0x120>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1cb      	bne.n	8006aae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b1c:	f000 fb80 	bl	8007220 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b20:	4b1c      	ldr	r3, [pc, #112]	@ (8006b94 <xTaskResumeAll+0x134>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d010      	beq.n	8006b4e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b2c:	f000 f846 	bl	8006bbc <xTaskIncrementTick>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006b36:	4b16      	ldr	r3, [pc, #88]	@ (8006b90 <xTaskResumeAll+0x130>)
 8006b38:	2201      	movs	r2, #1
 8006b3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1f1      	bne.n	8006b2c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006b48:	4b12      	ldr	r3, [pc, #72]	@ (8006b94 <xTaskResumeAll+0x134>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b4e:	4b10      	ldr	r3, [pc, #64]	@ (8006b90 <xTaskResumeAll+0x130>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d009      	beq.n	8006b6a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b56:	2301      	movs	r3, #1
 8006b58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b98 <xTaskResumeAll+0x138>)
 8006b5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b6a:	f001 f917 	bl	8007d9c <vPortExitCritical>

	return xAlreadyYielded;
 8006b6e:	68bb      	ldr	r3, [r7, #8]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	2000545c 	.word	0x2000545c
 8006b7c:	20005434 	.word	0x20005434
 8006b80:	200053f4 	.word	0x200053f4
 8006b84:	2000543c 	.word	0x2000543c
 8006b88:	20004f64 	.word	0x20004f64
 8006b8c:	20004f60 	.word	0x20004f60
 8006b90:	20005448 	.word	0x20005448
 8006b94:	20005444 	.word	0x20005444
 8006b98:	e000ed04 	.word	0xe000ed04

08006b9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ba2:	4b05      	ldr	r3, [pc, #20]	@ (8006bb8 <xTaskGetTickCount+0x1c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ba8:	687b      	ldr	r3, [r7, #4]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	20005438 	.word	0x20005438

08006bbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8006d04 <xTaskIncrementTick+0x148>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f040 8090 	bne.w	8006cf0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8006d08 <xTaskIncrementTick+0x14c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006bd8:	4a4b      	ldr	r2, [pc, #300]	@ (8006d08 <xTaskIncrementTick+0x14c>)
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d121      	bne.n	8006c28 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006be4:	4b49      	ldr	r3, [pc, #292]	@ (8006d0c <xTaskIncrementTick+0x150>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00b      	beq.n	8006c06 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	603b      	str	r3, [r7, #0]
}
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	e7fd      	b.n	8006c02 <xTaskIncrementTick+0x46>
 8006c06:	4b41      	ldr	r3, [pc, #260]	@ (8006d0c <xTaskIncrementTick+0x150>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	4b40      	ldr	r3, [pc, #256]	@ (8006d10 <xTaskIncrementTick+0x154>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a3e      	ldr	r2, [pc, #248]	@ (8006d0c <xTaskIncrementTick+0x150>)
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	4a3e      	ldr	r2, [pc, #248]	@ (8006d10 <xTaskIncrementTick+0x154>)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8006d14 <xTaskIncrementTick+0x158>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	4a3c      	ldr	r2, [pc, #240]	@ (8006d14 <xTaskIncrementTick+0x158>)
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	f000 fafc 	bl	8007220 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c28:	4b3b      	ldr	r3, [pc, #236]	@ (8006d18 <xTaskIncrementTick+0x15c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d349      	bcc.n	8006cc6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c32:	4b36      	ldr	r3, [pc, #216]	@ (8006d0c <xTaskIncrementTick+0x150>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d104      	bne.n	8006c46 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c3c:	4b36      	ldr	r3, [pc, #216]	@ (8006d18 <xTaskIncrementTick+0x15c>)
 8006c3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c42:	601a      	str	r2, [r3, #0]
					break;
 8006c44:	e03f      	b.n	8006cc6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c46:	4b31      	ldr	r3, [pc, #196]	@ (8006d0c <xTaskIncrementTick+0x150>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d203      	bcs.n	8006c66 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c5e:	4a2e      	ldr	r2, [pc, #184]	@ (8006d18 <xTaskIncrementTick+0x15c>)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c64:	e02f      	b.n	8006cc6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	3304      	adds	r3, #4
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe ff82 	bl	8005b74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d004      	beq.n	8006c82 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	3318      	adds	r3, #24
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fe ff79 	bl	8005b74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c86:	4b25      	ldr	r3, [pc, #148]	@ (8006d1c <xTaskIncrementTick+0x160>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d903      	bls.n	8006c96 <xTaskIncrementTick+0xda>
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c92:	4a22      	ldr	r2, [pc, #136]	@ (8006d1c <xTaskIncrementTick+0x160>)
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8006d20 <xTaskIncrementTick+0x164>)
 8006ca4:	441a      	add	r2, r3
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	3304      	adds	r3, #4
 8006caa:	4619      	mov	r1, r3
 8006cac:	4610      	mov	r0, r2
 8006cae:	f7fe ff04 	bl	8005aba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8006d24 <xTaskIncrementTick+0x168>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d3b8      	bcc.n	8006c32 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cc4:	e7b5      	b.n	8006c32 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cc6:	4b17      	ldr	r3, [pc, #92]	@ (8006d24 <xTaskIncrementTick+0x168>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ccc:	4914      	ldr	r1, [pc, #80]	@ (8006d20 <xTaskIncrementTick+0x164>)
 8006cce:	4613      	mov	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d901      	bls.n	8006ce2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ce2:	4b11      	ldr	r3, [pc, #68]	@ (8006d28 <xTaskIncrementTick+0x16c>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d007      	beq.n	8006cfa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006cea:	2301      	movs	r3, #1
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	e004      	b.n	8006cfa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8006d2c <xTaskIncrementTick+0x170>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	4a0d      	ldr	r2, [pc, #52]	@ (8006d2c <xTaskIncrementTick+0x170>)
 8006cf8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006cfa:	697b      	ldr	r3, [r7, #20]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3718      	adds	r7, #24
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	2000545c 	.word	0x2000545c
 8006d08:	20005438 	.word	0x20005438
 8006d0c:	200053ec 	.word	0x200053ec
 8006d10:	200053f0 	.word	0x200053f0
 8006d14:	2000544c 	.word	0x2000544c
 8006d18:	20005454 	.word	0x20005454
 8006d1c:	2000543c 	.word	0x2000543c
 8006d20:	20004f64 	.word	0x20004f64
 8006d24:	20004f60 	.word	0x20004f60
 8006d28:	20005448 	.word	0x20005448
 8006d2c:	20005444 	.word	0x20005444

08006d30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d36:	4b28      	ldr	r3, [pc, #160]	@ (8006dd8 <vTaskSwitchContext+0xa8>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d3e:	4b27      	ldr	r3, [pc, #156]	@ (8006ddc <vTaskSwitchContext+0xac>)
 8006d40:	2201      	movs	r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d44:	e042      	b.n	8006dcc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006d46:	4b25      	ldr	r3, [pc, #148]	@ (8006ddc <vTaskSwitchContext+0xac>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d4c:	4b24      	ldr	r3, [pc, #144]	@ (8006de0 <vTaskSwitchContext+0xb0>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	60fb      	str	r3, [r7, #12]
 8006d52:	e011      	b.n	8006d78 <vTaskSwitchContext+0x48>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10b      	bne.n	8006d72 <vTaskSwitchContext+0x42>
	__asm volatile
 8006d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5e:	f383 8811 	msr	BASEPRI, r3
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	607b      	str	r3, [r7, #4]
}
 8006d6c:	bf00      	nop
 8006d6e:	bf00      	nop
 8006d70:	e7fd      	b.n	8006d6e <vTaskSwitchContext+0x3e>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3b01      	subs	r3, #1
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	491a      	ldr	r1, [pc, #104]	@ (8006de4 <vTaskSwitchContext+0xb4>)
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	440b      	add	r3, r1
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d0e3      	beq.n	8006d54 <vTaskSwitchContext+0x24>
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4a13      	ldr	r2, [pc, #76]	@ (8006de4 <vTaskSwitchContext+0xb4>)
 8006d98:	4413      	add	r3, r2
 8006d9a:	60bb      	str	r3, [r7, #8]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	605a      	str	r2, [r3, #4]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	3308      	adds	r3, #8
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d104      	bne.n	8006dbc <vTaskSwitchContext+0x8c>
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	605a      	str	r2, [r3, #4]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	4a09      	ldr	r2, [pc, #36]	@ (8006de8 <vTaskSwitchContext+0xb8>)
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	4a06      	ldr	r2, [pc, #24]	@ (8006de0 <vTaskSwitchContext+0xb0>)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6013      	str	r3, [r2, #0]
}
 8006dcc:	bf00      	nop
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	2000545c 	.word	0x2000545c
 8006ddc:	20005448 	.word	0x20005448
 8006de0:	2000543c 	.word	0x2000543c
 8006de4:	20004f64 	.word	0x20004f64
 8006de8:	20004f60 	.word	0x20004f60

08006dec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10b      	bne.n	8006e14 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60fb      	str	r3, [r7, #12]
}
 8006e0e:	bf00      	nop
 8006e10:	bf00      	nop
 8006e12:	e7fd      	b.n	8006e10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e14:	4b07      	ldr	r3, [pc, #28]	@ (8006e34 <vTaskPlaceOnEventList+0x48>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3318      	adds	r3, #24
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7fe fe70 	bl	8005b02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e22:	2101      	movs	r1, #1
 8006e24:	6838      	ldr	r0, [r7, #0]
 8006e26:	f000 faa9 	bl	800737c <prvAddCurrentTaskToDelayedList>
}
 8006e2a:	bf00      	nop
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20004f60 	.word	0x20004f60

08006e38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10b      	bne.n	8006e62 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	617b      	str	r3, [r7, #20]
}
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	e7fd      	b.n	8006e5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e62:	4b0a      	ldr	r3, [pc, #40]	@ (8006e8c <vTaskPlaceOnEventListRestricted+0x54>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3318      	adds	r3, #24
 8006e68:	4619      	mov	r1, r3
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7fe fe25 	bl	8005aba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d002      	beq.n	8006e7c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006e76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e7a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	68b8      	ldr	r0, [r7, #8]
 8006e80:	f000 fa7c 	bl	800737c <prvAddCurrentTaskToDelayedList>
	}
 8006e84:	bf00      	nop
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20004f60 	.word	0x20004f60

08006e90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10b      	bne.n	8006ebe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eaa:	f383 8811 	msr	BASEPRI, r3
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	60fb      	str	r3, [r7, #12]
}
 8006eb8:	bf00      	nop
 8006eba:	bf00      	nop
 8006ebc:	e7fd      	b.n	8006eba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	3318      	adds	r3, #24
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe fe56 	bl	8005b74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8006f40 <xTaskRemoveFromEventList+0xb0>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d11d      	bne.n	8006f0c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fe fe4d 	bl	8005b74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ede:	4b19      	ldr	r3, [pc, #100]	@ (8006f44 <xTaskRemoveFromEventList+0xb4>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d903      	bls.n	8006eee <xTaskRemoveFromEventList+0x5e>
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eea:	4a16      	ldr	r2, [pc, #88]	@ (8006f44 <xTaskRemoveFromEventList+0xb4>)
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4a13      	ldr	r2, [pc, #76]	@ (8006f48 <xTaskRemoveFromEventList+0xb8>)
 8006efc:	441a      	add	r2, r3
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	3304      	adds	r3, #4
 8006f02:	4619      	mov	r1, r3
 8006f04:	4610      	mov	r0, r2
 8006f06:	f7fe fdd8 	bl	8005aba <vListInsertEnd>
 8006f0a:	e005      	b.n	8006f18 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	3318      	adds	r3, #24
 8006f10:	4619      	mov	r1, r3
 8006f12:	480e      	ldr	r0, [pc, #56]	@ (8006f4c <xTaskRemoveFromEventList+0xbc>)
 8006f14:	f7fe fdd1 	bl	8005aba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f50 <xTaskRemoveFromEventList+0xc0>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d905      	bls.n	8006f32 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f26:	2301      	movs	r3, #1
 8006f28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f54 <xTaskRemoveFromEventList+0xc4>)
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	e001      	b.n	8006f36 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006f32:	2300      	movs	r3, #0
 8006f34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f36:	697b      	ldr	r3, [r7, #20]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	2000545c 	.word	0x2000545c
 8006f44:	2000543c 	.word	0x2000543c
 8006f48:	20004f64 	.word	0x20004f64
 8006f4c:	200053f4 	.word	0x200053f4
 8006f50:	20004f60 	.word	0x20004f60
 8006f54:	20005448 	.word	0x20005448

08006f58 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10b      	bne.n	8006f7e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	60fb      	str	r3, [r7, #12]
}
 8006f78:	bf00      	nop
 8006f7a:	bf00      	nop
 8006f7c:	e7fd      	b.n	8006f7a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8006f7e:	f000 fedb 	bl	8007d38 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f82:	4b07      	ldr	r3, [pc, #28]	@ (8006fa0 <vTaskSetTimeOutState+0x48>)
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8006f8a:	4b06      	ldr	r3, [pc, #24]	@ (8006fa4 <vTaskSetTimeOutState+0x4c>)
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8006f92:	f000 ff03 	bl	8007d9c <vPortExitCritical>
}
 8006f96:	bf00      	nop
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	2000544c 	.word	0x2000544c
 8006fa4:	20005438 	.word	0x20005438

08006fa8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006fb0:	4b06      	ldr	r3, [pc, #24]	@ (8006fcc <vTaskInternalSetTimeOutState+0x24>)
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006fb8:	4b05      	ldr	r3, [pc, #20]	@ (8006fd0 <vTaskInternalSetTimeOutState+0x28>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	605a      	str	r2, [r3, #4]
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	2000544c 	.word	0x2000544c
 8006fd0:	20005438 	.word	0x20005438

08006fd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b088      	sub	sp, #32
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10b      	bne.n	8006ffc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	613b      	str	r3, [r7, #16]
}
 8006ff6:	bf00      	nop
 8006ff8:	bf00      	nop
 8006ffa:	e7fd      	b.n	8006ff8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10b      	bne.n	800701a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	60fb      	str	r3, [r7, #12]
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop
 8007018:	e7fd      	b.n	8007016 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800701a:	f000 fe8d 	bl	8007d38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800701e:	4b1d      	ldr	r3, [pc, #116]	@ (8007094 <xTaskCheckForTimeOut+0xc0>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007036:	d102      	bne.n	800703e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007038:	2300      	movs	r3, #0
 800703a:	61fb      	str	r3, [r7, #28]
 800703c:	e023      	b.n	8007086 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	4b15      	ldr	r3, [pc, #84]	@ (8007098 <xTaskCheckForTimeOut+0xc4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	d007      	beq.n	800705a <xTaskCheckForTimeOut+0x86>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	429a      	cmp	r2, r3
 8007052:	d302      	bcc.n	800705a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007054:	2301      	movs	r3, #1
 8007056:	61fb      	str	r3, [r7, #28]
 8007058:	e015      	b.n	8007086 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	429a      	cmp	r2, r3
 8007062:	d20b      	bcs.n	800707c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	1ad2      	subs	r2, r2, r3
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7ff ff99 	bl	8006fa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007076:	2300      	movs	r3, #0
 8007078:	61fb      	str	r3, [r7, #28]
 800707a:	e004      	b.n	8007086 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007082:	2301      	movs	r3, #1
 8007084:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007086:	f000 fe89 	bl	8007d9c <vPortExitCritical>

	return xReturn;
 800708a:	69fb      	ldr	r3, [r7, #28]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3720      	adds	r7, #32
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	20005438 	.word	0x20005438
 8007098:	2000544c 	.word	0x2000544c

0800709c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070a0:	4b03      	ldr	r3, [pc, #12]	@ (80070b0 <vTaskMissedYield+0x14>)
 80070a2:	2201      	movs	r2, #1
 80070a4:	601a      	str	r2, [r3, #0]
}
 80070a6:	bf00      	nop
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	20005448 	.word	0x20005448

080070b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070bc:	f000 f852 	bl	8007164 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070c0:	4b06      	ldr	r3, [pc, #24]	@ (80070dc <prvIdleTask+0x28>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d9f9      	bls.n	80070bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80070c8:	4b05      	ldr	r3, [pc, #20]	@ (80070e0 <prvIdleTask+0x2c>)
 80070ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80070d8:	e7f0      	b.n	80070bc <prvIdleTask+0x8>
 80070da:	bf00      	nop
 80070dc:	20004f64 	.word	0x20004f64
 80070e0:	e000ed04 	.word	0xe000ed04

080070e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070ea:	2300      	movs	r3, #0
 80070ec:	607b      	str	r3, [r7, #4]
 80070ee:	e00c      	b.n	800710a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	4613      	mov	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4a12      	ldr	r2, [pc, #72]	@ (8007144 <prvInitialiseTaskLists+0x60>)
 80070fc:	4413      	add	r3, r2
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fe fcae 	bl	8005a60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	3301      	adds	r3, #1
 8007108:	607b      	str	r3, [r7, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b37      	cmp	r3, #55	@ 0x37
 800710e:	d9ef      	bls.n	80070f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007110:	480d      	ldr	r0, [pc, #52]	@ (8007148 <prvInitialiseTaskLists+0x64>)
 8007112:	f7fe fca5 	bl	8005a60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007116:	480d      	ldr	r0, [pc, #52]	@ (800714c <prvInitialiseTaskLists+0x68>)
 8007118:	f7fe fca2 	bl	8005a60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800711c:	480c      	ldr	r0, [pc, #48]	@ (8007150 <prvInitialiseTaskLists+0x6c>)
 800711e:	f7fe fc9f 	bl	8005a60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007122:	480c      	ldr	r0, [pc, #48]	@ (8007154 <prvInitialiseTaskLists+0x70>)
 8007124:	f7fe fc9c 	bl	8005a60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007128:	480b      	ldr	r0, [pc, #44]	@ (8007158 <prvInitialiseTaskLists+0x74>)
 800712a:	f7fe fc99 	bl	8005a60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800712e:	4b0b      	ldr	r3, [pc, #44]	@ (800715c <prvInitialiseTaskLists+0x78>)
 8007130:	4a05      	ldr	r2, [pc, #20]	@ (8007148 <prvInitialiseTaskLists+0x64>)
 8007132:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007134:	4b0a      	ldr	r3, [pc, #40]	@ (8007160 <prvInitialiseTaskLists+0x7c>)
 8007136:	4a05      	ldr	r2, [pc, #20]	@ (800714c <prvInitialiseTaskLists+0x68>)
 8007138:	601a      	str	r2, [r3, #0]
}
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20004f64 	.word	0x20004f64
 8007148:	200053c4 	.word	0x200053c4
 800714c:	200053d8 	.word	0x200053d8
 8007150:	200053f4 	.word	0x200053f4
 8007154:	20005408 	.word	0x20005408
 8007158:	20005420 	.word	0x20005420
 800715c:	200053ec 	.word	0x200053ec
 8007160:	200053f0 	.word	0x200053f0

08007164 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800716a:	e019      	b.n	80071a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800716c:	f000 fde4 	bl	8007d38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007170:	4b10      	ldr	r3, [pc, #64]	@ (80071b4 <prvCheckTasksWaitingTermination+0x50>)
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3304      	adds	r3, #4
 800717c:	4618      	mov	r0, r3
 800717e:	f7fe fcf9 	bl	8005b74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007182:	4b0d      	ldr	r3, [pc, #52]	@ (80071b8 <prvCheckTasksWaitingTermination+0x54>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3b01      	subs	r3, #1
 8007188:	4a0b      	ldr	r2, [pc, #44]	@ (80071b8 <prvCheckTasksWaitingTermination+0x54>)
 800718a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800718c:	4b0b      	ldr	r3, [pc, #44]	@ (80071bc <prvCheckTasksWaitingTermination+0x58>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	3b01      	subs	r3, #1
 8007192:	4a0a      	ldr	r2, [pc, #40]	@ (80071bc <prvCheckTasksWaitingTermination+0x58>)
 8007194:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007196:	f000 fe01 	bl	8007d9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f810 	bl	80071c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071a0:	4b06      	ldr	r3, [pc, #24]	@ (80071bc <prvCheckTasksWaitingTermination+0x58>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1e1      	bne.n	800716c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071a8:	bf00      	nop
 80071aa:	bf00      	nop
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20005408 	.word	0x20005408
 80071b8:	20005434 	.word	0x20005434
 80071bc:	2000541c 	.word	0x2000541c

080071c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d108      	bne.n	80071e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 ff9e 	bl	8008118 <vPortFree>
				vPortFree( pxTCB );
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 ff9b 	bl	8008118 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80071e2:	e019      	b.n	8007218 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d103      	bne.n	80071f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 ff92 	bl	8008118 <vPortFree>
	}
 80071f4:	e010      	b.n	8007218 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d00b      	beq.n	8007218 <prvDeleteTCB+0x58>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	60fb      	str	r3, [r7, #12]
}
 8007212:	bf00      	nop
 8007214:	bf00      	nop
 8007216:	e7fd      	b.n	8007214 <prvDeleteTCB+0x54>
	}
 8007218:	bf00      	nop
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007226:	4b0c      	ldr	r3, [pc, #48]	@ (8007258 <prvResetNextTaskUnblockTime+0x38>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d104      	bne.n	800723a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007230:	4b0a      	ldr	r3, [pc, #40]	@ (800725c <prvResetNextTaskUnblockTime+0x3c>)
 8007232:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007236:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007238:	e008      	b.n	800724c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800723a:	4b07      	ldr	r3, [pc, #28]	@ (8007258 <prvResetNextTaskUnblockTime+0x38>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	4a04      	ldr	r2, [pc, #16]	@ (800725c <prvResetNextTaskUnblockTime+0x3c>)
 800724a:	6013      	str	r3, [r2, #0]
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	200053ec 	.word	0x200053ec
 800725c:	20005454 	.word	0x20005454

08007260 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007266:	4b0b      	ldr	r3, [pc, #44]	@ (8007294 <xTaskGetSchedulerState+0x34>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d102      	bne.n	8007274 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800726e:	2301      	movs	r3, #1
 8007270:	607b      	str	r3, [r7, #4]
 8007272:	e008      	b.n	8007286 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007274:	4b08      	ldr	r3, [pc, #32]	@ (8007298 <xTaskGetSchedulerState+0x38>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d102      	bne.n	8007282 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800727c:	2302      	movs	r3, #2
 800727e:	607b      	str	r3, [r7, #4]
 8007280:	e001      	b.n	8007286 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007282:	2300      	movs	r3, #0
 8007284:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007286:	687b      	ldr	r3, [r7, #4]
	}
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	20005440 	.word	0x20005440
 8007298:	2000545c 	.word	0x2000545c

0800729c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80072a8:	2300      	movs	r3, #0
 80072aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d058      	beq.n	8007364 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80072b2:	4b2f      	ldr	r3, [pc, #188]	@ (8007370 <xTaskPriorityDisinherit+0xd4>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d00b      	beq.n	80072d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	60fb      	str	r3, [r7, #12]
}
 80072ce:	bf00      	nop
 80072d0:	bf00      	nop
 80072d2:	e7fd      	b.n	80072d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10b      	bne.n	80072f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	60bb      	str	r3, [r7, #8]
}
 80072ee:	bf00      	nop
 80072f0:	bf00      	nop
 80072f2:	e7fd      	b.n	80072f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f8:	1e5a      	subs	r2, r3, #1
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007306:	429a      	cmp	r2, r3
 8007308:	d02c      	beq.n	8007364 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800730e:	2b00      	cmp	r3, #0
 8007310:	d128      	bne.n	8007364 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	3304      	adds	r3, #4
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe fc2c 	bl	8005b74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007328:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007334:	4b0f      	ldr	r3, [pc, #60]	@ (8007374 <xTaskPriorityDisinherit+0xd8>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	429a      	cmp	r2, r3
 800733a:	d903      	bls.n	8007344 <xTaskPriorityDisinherit+0xa8>
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007340:	4a0c      	ldr	r2, [pc, #48]	@ (8007374 <xTaskPriorityDisinherit+0xd8>)
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007348:	4613      	mov	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4a09      	ldr	r2, [pc, #36]	@ (8007378 <xTaskPriorityDisinherit+0xdc>)
 8007352:	441a      	add	r2, r3
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	3304      	adds	r3, #4
 8007358:	4619      	mov	r1, r3
 800735a:	4610      	mov	r0, r2
 800735c:	f7fe fbad 	bl	8005aba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007360:	2301      	movs	r3, #1
 8007362:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007364:	697b      	ldr	r3, [r7, #20]
	}
 8007366:	4618      	mov	r0, r3
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	20004f60 	.word	0x20004f60
 8007374:	2000543c 	.word	0x2000543c
 8007378:	20004f64 	.word	0x20004f64

0800737c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007386:	4b21      	ldr	r3, [pc, #132]	@ (800740c <prvAddCurrentTaskToDelayedList+0x90>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800738c:	4b20      	ldr	r3, [pc, #128]	@ (8007410 <prvAddCurrentTaskToDelayedList+0x94>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3304      	adds	r3, #4
 8007392:	4618      	mov	r0, r3
 8007394:	f7fe fbee 	bl	8005b74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800739e:	d10a      	bne.n	80073b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d007      	beq.n	80073b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073a6:	4b1a      	ldr	r3, [pc, #104]	@ (8007410 <prvAddCurrentTaskToDelayedList+0x94>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3304      	adds	r3, #4
 80073ac:	4619      	mov	r1, r3
 80073ae:	4819      	ldr	r0, [pc, #100]	@ (8007414 <prvAddCurrentTaskToDelayedList+0x98>)
 80073b0:	f7fe fb83 	bl	8005aba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073b4:	e026      	b.n	8007404 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4413      	add	r3, r2
 80073bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073be:	4b14      	ldr	r3, [pc, #80]	@ (8007410 <prvAddCurrentTaskToDelayedList+0x94>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d209      	bcs.n	80073e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073ce:	4b12      	ldr	r3, [pc, #72]	@ (8007418 <prvAddCurrentTaskToDelayedList+0x9c>)
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007410 <prvAddCurrentTaskToDelayedList+0x94>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3304      	adds	r3, #4
 80073d8:	4619      	mov	r1, r3
 80073da:	4610      	mov	r0, r2
 80073dc:	f7fe fb91 	bl	8005b02 <vListInsert>
}
 80073e0:	e010      	b.n	8007404 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073e2:	4b0e      	ldr	r3, [pc, #56]	@ (800741c <prvAddCurrentTaskToDelayedList+0xa0>)
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007410 <prvAddCurrentTaskToDelayedList+0x94>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3304      	adds	r3, #4
 80073ec:	4619      	mov	r1, r3
 80073ee:	4610      	mov	r0, r2
 80073f0:	f7fe fb87 	bl	8005b02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007420 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d202      	bcs.n	8007404 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80073fe:	4a08      	ldr	r2, [pc, #32]	@ (8007420 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	6013      	str	r3, [r2, #0]
}
 8007404:	bf00      	nop
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	20005438 	.word	0x20005438
 8007410:	20004f60 	.word	0x20004f60
 8007414:	20005420 	.word	0x20005420
 8007418:	200053f0 	.word	0x200053f0
 800741c:	200053ec 	.word	0x200053ec
 8007420:	20005454 	.word	0x20005454

08007424 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08a      	sub	sp, #40	@ 0x28
 8007428:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800742a:	2300      	movs	r3, #0
 800742c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800742e:	f000 fb13 	bl	8007a58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007432:	4b1d      	ldr	r3, [pc, #116]	@ (80074a8 <xTimerCreateTimerTask+0x84>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d021      	beq.n	800747e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800743a:	2300      	movs	r3, #0
 800743c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800743e:	2300      	movs	r3, #0
 8007440:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007442:	1d3a      	adds	r2, r7, #4
 8007444:	f107 0108 	add.w	r1, r7, #8
 8007448:	f107 030c 	add.w	r3, r7, #12
 800744c:	4618      	mov	r0, r3
 800744e:	f7fe faed 	bl	8005a2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007452:	6879      	ldr	r1, [r7, #4]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	9202      	str	r2, [sp, #8]
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	2302      	movs	r3, #2
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	2300      	movs	r3, #0
 8007462:	460a      	mov	r2, r1
 8007464:	4911      	ldr	r1, [pc, #68]	@ (80074ac <xTimerCreateTimerTask+0x88>)
 8007466:	4812      	ldr	r0, [pc, #72]	@ (80074b0 <xTimerCreateTimerTask+0x8c>)
 8007468:	f7ff f8a8 	bl	80065bc <xTaskCreateStatic>
 800746c:	4603      	mov	r3, r0
 800746e:	4a11      	ldr	r2, [pc, #68]	@ (80074b4 <xTimerCreateTimerTask+0x90>)
 8007470:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007472:	4b10      	ldr	r3, [pc, #64]	@ (80074b4 <xTimerCreateTimerTask+0x90>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800747a:	2301      	movs	r3, #1
 800747c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10b      	bne.n	800749c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	613b      	str	r3, [r7, #16]
}
 8007496:	bf00      	nop
 8007498:	bf00      	nop
 800749a:	e7fd      	b.n	8007498 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800749c:	697b      	ldr	r3, [r7, #20]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20005490 	.word	0x20005490
 80074ac:	08016844 	.word	0x08016844
 80074b0:	080075f1 	.word	0x080075f1
 80074b4:	20005494 	.word	0x20005494

080074b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b08a      	sub	sp, #40	@ 0x28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10b      	bne.n	80074e8 <xTimerGenericCommand+0x30>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	623b      	str	r3, [r7, #32]
}
 80074e2:	bf00      	nop
 80074e4:	bf00      	nop
 80074e6:	e7fd      	b.n	80074e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80074e8:	4b19      	ldr	r3, [pc, #100]	@ (8007550 <xTimerGenericCommand+0x98>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d02a      	beq.n	8007546 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2b05      	cmp	r3, #5
 8007500:	dc18      	bgt.n	8007534 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007502:	f7ff fead 	bl	8007260 <xTaskGetSchedulerState>
 8007506:	4603      	mov	r3, r0
 8007508:	2b02      	cmp	r3, #2
 800750a:	d109      	bne.n	8007520 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800750c:	4b10      	ldr	r3, [pc, #64]	@ (8007550 <xTimerGenericCommand+0x98>)
 800750e:	6818      	ldr	r0, [r3, #0]
 8007510:	f107 0110 	add.w	r1, r7, #16
 8007514:	2300      	movs	r3, #0
 8007516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007518:	f7fe fc60 	bl	8005ddc <xQueueGenericSend>
 800751c:	6278      	str	r0, [r7, #36]	@ 0x24
 800751e:	e012      	b.n	8007546 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007520:	4b0b      	ldr	r3, [pc, #44]	@ (8007550 <xTimerGenericCommand+0x98>)
 8007522:	6818      	ldr	r0, [r3, #0]
 8007524:	f107 0110 	add.w	r1, r7, #16
 8007528:	2300      	movs	r3, #0
 800752a:	2200      	movs	r2, #0
 800752c:	f7fe fc56 	bl	8005ddc <xQueueGenericSend>
 8007530:	6278      	str	r0, [r7, #36]	@ 0x24
 8007532:	e008      	b.n	8007546 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007534:	4b06      	ldr	r3, [pc, #24]	@ (8007550 <xTimerGenericCommand+0x98>)
 8007536:	6818      	ldr	r0, [r3, #0]
 8007538:	f107 0110 	add.w	r1, r7, #16
 800753c:	2300      	movs	r3, #0
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	f7fe fd4e 	bl	8005fe0 <xQueueGenericSendFromISR>
 8007544:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007548:	4618      	mov	r0, r3
 800754a:	3728      	adds	r7, #40	@ 0x28
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20005490 	.word	0x20005490

08007554 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af02      	add	r7, sp, #8
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800755e:	4b23      	ldr	r3, [pc, #140]	@ (80075ec <prvProcessExpiredTimer+0x98>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	3304      	adds	r3, #4
 800756c:	4618      	mov	r0, r3
 800756e:	f7fe fb01 	bl	8005b74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b00      	cmp	r3, #0
 800757e:	d023      	beq.n	80075c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	699a      	ldr	r2, [r3, #24]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	18d1      	adds	r1, r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	6978      	ldr	r0, [r7, #20]
 800758e:	f000 f8d5 	bl	800773c <prvInsertTimerInActiveList>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d020      	beq.n	80075da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007598:	2300      	movs	r3, #0
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	2300      	movs	r3, #0
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	2100      	movs	r1, #0
 80075a2:	6978      	ldr	r0, [r7, #20]
 80075a4:	f7ff ff88 	bl	80074b8 <xTimerGenericCommand>
 80075a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d114      	bne.n	80075da <prvProcessExpiredTimer+0x86>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	60fb      	str	r3, [r7, #12]
}
 80075c2:	bf00      	nop
 80075c4:	bf00      	nop
 80075c6:	e7fd      	b.n	80075c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075ce:	f023 0301 	bic.w	r3, r3, #1
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	6978      	ldr	r0, [r7, #20]
 80075e0:	4798      	blx	r3
}
 80075e2:	bf00      	nop
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20005488 	.word	0x20005488

080075f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075f8:	f107 0308 	add.w	r3, r7, #8
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 f859 	bl	80076b4 <prvGetNextExpireTime>
 8007602:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	4619      	mov	r1, r3
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 f805 	bl	8007618 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800760e:	f000 f8d7 	bl	80077c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007612:	bf00      	nop
 8007614:	e7f0      	b.n	80075f8 <prvTimerTask+0x8>
	...

08007618 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007622:	f7ff fa0f 	bl	8006a44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007626:	f107 0308 	add.w	r3, r7, #8
 800762a:	4618      	mov	r0, r3
 800762c:	f000 f866 	bl	80076fc <prvSampleTimeNow>
 8007630:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d130      	bne.n	800769a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10a      	bne.n	8007654 <prvProcessTimerOrBlockTask+0x3c>
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	429a      	cmp	r2, r3
 8007644:	d806      	bhi.n	8007654 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007646:	f7ff fa0b 	bl	8006a60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800764a:	68f9      	ldr	r1, [r7, #12]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7ff ff81 	bl	8007554 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007652:	e024      	b.n	800769e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d008      	beq.n	800766c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800765a:	4b13      	ldr	r3, [pc, #76]	@ (80076a8 <prvProcessTimerOrBlockTask+0x90>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <prvProcessTimerOrBlockTask+0x50>
 8007664:	2301      	movs	r3, #1
 8007666:	e000      	b.n	800766a <prvProcessTimerOrBlockTask+0x52>
 8007668:	2300      	movs	r3, #0
 800766a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800766c:	4b0f      	ldr	r3, [pc, #60]	@ (80076ac <prvProcessTimerOrBlockTask+0x94>)
 800766e:	6818      	ldr	r0, [r3, #0]
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	4619      	mov	r1, r3
 800767a:	f7fe ff6b 	bl	8006554 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800767e:	f7ff f9ef 	bl	8006a60 <xTaskResumeAll>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10a      	bne.n	800769e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007688:	4b09      	ldr	r3, [pc, #36]	@ (80076b0 <prvProcessTimerOrBlockTask+0x98>)
 800768a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	f3bf 8f6f 	isb	sy
}
 8007698:	e001      	b.n	800769e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800769a:	f7ff f9e1 	bl	8006a60 <xTaskResumeAll>
}
 800769e:	bf00      	nop
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	2000548c 	.word	0x2000548c
 80076ac:	20005490 	.word	0x20005490
 80076b0:	e000ed04 	.word	0xe000ed04

080076b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076bc:	4b0e      	ldr	r3, [pc, #56]	@ (80076f8 <prvGetNextExpireTime+0x44>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <prvGetNextExpireTime+0x16>
 80076c6:	2201      	movs	r2, #1
 80076c8:	e000      	b.n	80076cc <prvGetNextExpireTime+0x18>
 80076ca:	2200      	movs	r2, #0
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d105      	bne.n	80076e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076d8:	4b07      	ldr	r3, [pc, #28]	@ (80076f8 <prvGetNextExpireTime+0x44>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	60fb      	str	r3, [r7, #12]
 80076e2:	e001      	b.n	80076e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80076e8:	68fb      	ldr	r3, [r7, #12]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	20005488 	.word	0x20005488

080076fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007704:	f7ff fa4a 	bl	8006b9c <xTaskGetTickCount>
 8007708:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800770a:	4b0b      	ldr	r3, [pc, #44]	@ (8007738 <prvSampleTimeNow+0x3c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	429a      	cmp	r2, r3
 8007712:	d205      	bcs.n	8007720 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007714:	f000 f93a 	bl	800798c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	e002      	b.n	8007726 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007726:	4a04      	ldr	r2, [pc, #16]	@ (8007738 <prvSampleTimeNow+0x3c>)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800772c:	68fb      	ldr	r3, [r7, #12]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20005498 	.word	0x20005498

0800773c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
 8007748:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800774a:	2300      	movs	r3, #0
 800774c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	429a      	cmp	r2, r3
 8007760:	d812      	bhi.n	8007788 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	1ad2      	subs	r2, r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	429a      	cmp	r2, r3
 800776e:	d302      	bcc.n	8007776 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007770:	2301      	movs	r3, #1
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	e01b      	b.n	80077ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007776:	4b10      	ldr	r3, [pc, #64]	@ (80077b8 <prvInsertTimerInActiveList+0x7c>)
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3304      	adds	r3, #4
 800777e:	4619      	mov	r1, r3
 8007780:	4610      	mov	r0, r2
 8007782:	f7fe f9be 	bl	8005b02 <vListInsert>
 8007786:	e012      	b.n	80077ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	429a      	cmp	r2, r3
 800778e:	d206      	bcs.n	800779e <prvInsertTimerInActiveList+0x62>
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	429a      	cmp	r2, r3
 8007796:	d302      	bcc.n	800779e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007798:	2301      	movs	r3, #1
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	e007      	b.n	80077ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800779e:	4b07      	ldr	r3, [pc, #28]	@ (80077bc <prvInsertTimerInActiveList+0x80>)
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3304      	adds	r3, #4
 80077a6:	4619      	mov	r1, r3
 80077a8:	4610      	mov	r0, r2
 80077aa:	f7fe f9aa 	bl	8005b02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077ae:	697b      	ldr	r3, [r7, #20]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3718      	adds	r7, #24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	2000548c 	.word	0x2000548c
 80077bc:	20005488 	.word	0x20005488

080077c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b08e      	sub	sp, #56	@ 0x38
 80077c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077c6:	e0ce      	b.n	8007966 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	da19      	bge.n	8007802 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80077ce:	1d3b      	adds	r3, r7, #4
 80077d0:	3304      	adds	r3, #4
 80077d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80077d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10b      	bne.n	80077f2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	61fb      	str	r3, [r7, #28]
}
 80077ec:	bf00      	nop
 80077ee:	bf00      	nop
 80077f0:	e7fd      	b.n	80077ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80077f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077f8:	6850      	ldr	r0, [r2, #4]
 80077fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077fc:	6892      	ldr	r2, [r2, #8]
 80077fe:	4611      	mov	r1, r2
 8007800:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	f2c0 80ae 	blt.w	8007966 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800780e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d004      	beq.n	8007820 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007818:	3304      	adds	r3, #4
 800781a:	4618      	mov	r0, r3
 800781c:	f7fe f9aa 	bl	8005b74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007820:	463b      	mov	r3, r7
 8007822:	4618      	mov	r0, r3
 8007824:	f7ff ff6a 	bl	80076fc <prvSampleTimeNow>
 8007828:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b09      	cmp	r3, #9
 800782e:	f200 8097 	bhi.w	8007960 <prvProcessReceivedCommands+0x1a0>
 8007832:	a201      	add	r2, pc, #4	@ (adr r2, 8007838 <prvProcessReceivedCommands+0x78>)
 8007834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007838:	08007861 	.word	0x08007861
 800783c:	08007861 	.word	0x08007861
 8007840:	08007861 	.word	0x08007861
 8007844:	080078d7 	.word	0x080078d7
 8007848:	080078eb 	.word	0x080078eb
 800784c:	08007937 	.word	0x08007937
 8007850:	08007861 	.word	0x08007861
 8007854:	08007861 	.word	0x08007861
 8007858:	080078d7 	.word	0x080078d7
 800785c:	080078eb 	.word	0x080078eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007862:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007866:	f043 0301 	orr.w	r3, r3, #1
 800786a:	b2da      	uxtb	r2, r3
 800786c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	18d1      	adds	r1, r2, r3
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800787e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007880:	f7ff ff5c 	bl	800773c <prvInsertTimerInActiveList>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d06c      	beq.n	8007964 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800788a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007890:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007894:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007898:	f003 0304 	and.w	r3, r3, #4
 800789c:	2b00      	cmp	r3, #0
 800789e:	d061      	beq.n	8007964 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	441a      	add	r2, r3
 80078a8:	2300      	movs	r3, #0
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	2300      	movs	r3, #0
 80078ae:	2100      	movs	r1, #0
 80078b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078b2:	f7ff fe01 	bl	80074b8 <xTimerGenericCommand>
 80078b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d152      	bne.n	8007964 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	61bb      	str	r3, [r7, #24]
}
 80078d0:	bf00      	nop
 80078d2:	bf00      	nop
 80078d4:	e7fd      	b.n	80078d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078dc:	f023 0301 	bic.w	r3, r3, #1
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80078e8:	e03d      	b.n	8007966 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078f0:	f043 0301 	orr.w	r3, r3, #1
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007900:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10b      	bne.n	8007922 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	617b      	str	r3, [r7, #20]
}
 800791c:	bf00      	nop
 800791e:	bf00      	nop
 8007920:	e7fd      	b.n	800791e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007924:	699a      	ldr	r2, [r3, #24]
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	18d1      	adds	r1, r2, r3
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800792e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007930:	f7ff ff04 	bl	800773c <prvInsertTimerInActiveList>
					break;
 8007934:	e017      	b.n	8007966 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007938:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800793c:	f003 0302 	and.w	r3, r3, #2
 8007940:	2b00      	cmp	r3, #0
 8007942:	d103      	bne.n	800794c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007944:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007946:	f000 fbe7 	bl	8008118 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800794a:	e00c      	b.n	8007966 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800794c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007952:	f023 0301 	bic.w	r3, r3, #1
 8007956:	b2da      	uxtb	r2, r3
 8007958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800795e:	e002      	b.n	8007966 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007960:	bf00      	nop
 8007962:	e000      	b.n	8007966 <prvProcessReceivedCommands+0x1a6>
					break;
 8007964:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007966:	4b08      	ldr	r3, [pc, #32]	@ (8007988 <prvProcessReceivedCommands+0x1c8>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	1d39      	adds	r1, r7, #4
 800796c:	2200      	movs	r2, #0
 800796e:	4618      	mov	r0, r3
 8007970:	f7fe fbd4 	bl	800611c <xQueueReceive>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	f47f af26 	bne.w	80077c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800797c:	bf00      	nop
 800797e:	bf00      	nop
 8007980:	3730      	adds	r7, #48	@ 0x30
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	20005490 	.word	0x20005490

0800798c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007992:	e049      	b.n	8007a28 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007994:	4b2e      	ldr	r3, [pc, #184]	@ (8007a50 <prvSwitchTimerLists+0xc4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800799e:	4b2c      	ldr	r3, [pc, #176]	@ (8007a50 <prvSwitchTimerLists+0xc4>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3304      	adds	r3, #4
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7fe f8e1 	bl	8005b74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d02f      	beq.n	8007a28 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	4413      	add	r3, r2
 80079d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d90e      	bls.n	80079f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079e6:	4b1a      	ldr	r3, [pc, #104]	@ (8007a50 <prvSwitchTimerLists+0xc4>)
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	3304      	adds	r3, #4
 80079ee:	4619      	mov	r1, r3
 80079f0:	4610      	mov	r0, r2
 80079f2:	f7fe f886 	bl	8005b02 <vListInsert>
 80079f6:	e017      	b.n	8007a28 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079f8:	2300      	movs	r3, #0
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	2300      	movs	r3, #0
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	2100      	movs	r1, #0
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7ff fd58 	bl	80074b8 <xTimerGenericCommand>
 8007a08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10b      	bne.n	8007a28 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	603b      	str	r3, [r7, #0]
}
 8007a22:	bf00      	nop
 8007a24:	bf00      	nop
 8007a26:	e7fd      	b.n	8007a24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a28:	4b09      	ldr	r3, [pc, #36]	@ (8007a50 <prvSwitchTimerLists+0xc4>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1b0      	bne.n	8007994 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a32:	4b07      	ldr	r3, [pc, #28]	@ (8007a50 <prvSwitchTimerLists+0xc4>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a38:	4b06      	ldr	r3, [pc, #24]	@ (8007a54 <prvSwitchTimerLists+0xc8>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a04      	ldr	r2, [pc, #16]	@ (8007a50 <prvSwitchTimerLists+0xc4>)
 8007a3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a40:	4a04      	ldr	r2, [pc, #16]	@ (8007a54 <prvSwitchTimerLists+0xc8>)
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	6013      	str	r3, [r2, #0]
}
 8007a46:	bf00      	nop
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20005488 	.word	0x20005488
 8007a54:	2000548c 	.word	0x2000548c

08007a58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a5e:	f000 f96b 	bl	8007d38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a62:	4b15      	ldr	r3, [pc, #84]	@ (8007ab8 <prvCheckForValidListAndQueue+0x60>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d120      	bne.n	8007aac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a6a:	4814      	ldr	r0, [pc, #80]	@ (8007abc <prvCheckForValidListAndQueue+0x64>)
 8007a6c:	f7fd fff8 	bl	8005a60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a70:	4813      	ldr	r0, [pc, #76]	@ (8007ac0 <prvCheckForValidListAndQueue+0x68>)
 8007a72:	f7fd fff5 	bl	8005a60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a76:	4b13      	ldr	r3, [pc, #76]	@ (8007ac4 <prvCheckForValidListAndQueue+0x6c>)
 8007a78:	4a10      	ldr	r2, [pc, #64]	@ (8007abc <prvCheckForValidListAndQueue+0x64>)
 8007a7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a7c:	4b12      	ldr	r3, [pc, #72]	@ (8007ac8 <prvCheckForValidListAndQueue+0x70>)
 8007a7e:	4a10      	ldr	r2, [pc, #64]	@ (8007ac0 <prvCheckForValidListAndQueue+0x68>)
 8007a80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a82:	2300      	movs	r3, #0
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	4b11      	ldr	r3, [pc, #68]	@ (8007acc <prvCheckForValidListAndQueue+0x74>)
 8007a88:	4a11      	ldr	r2, [pc, #68]	@ (8007ad0 <prvCheckForValidListAndQueue+0x78>)
 8007a8a:	2110      	movs	r1, #16
 8007a8c:	200a      	movs	r0, #10
 8007a8e:	f7fe f905 	bl	8005c9c <xQueueGenericCreateStatic>
 8007a92:	4603      	mov	r3, r0
 8007a94:	4a08      	ldr	r2, [pc, #32]	@ (8007ab8 <prvCheckForValidListAndQueue+0x60>)
 8007a96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a98:	4b07      	ldr	r3, [pc, #28]	@ (8007ab8 <prvCheckForValidListAndQueue+0x60>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d005      	beq.n	8007aac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007aa0:	4b05      	ldr	r3, [pc, #20]	@ (8007ab8 <prvCheckForValidListAndQueue+0x60>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	490b      	ldr	r1, [pc, #44]	@ (8007ad4 <prvCheckForValidListAndQueue+0x7c>)
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fe fd2a 	bl	8006500 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007aac:	f000 f976 	bl	8007d9c <vPortExitCritical>
}
 8007ab0:	bf00      	nop
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	20005490 	.word	0x20005490
 8007abc:	20005460 	.word	0x20005460
 8007ac0:	20005474 	.word	0x20005474
 8007ac4:	20005488 	.word	0x20005488
 8007ac8:	2000548c 	.word	0x2000548c
 8007acc:	2000553c 	.word	0x2000553c
 8007ad0:	2000549c 	.word	0x2000549c
 8007ad4:	0801684c 	.word	0x0801684c

08007ad8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3b04      	subs	r3, #4
 8007ae8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3b04      	subs	r3, #4
 8007af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f023 0201 	bic.w	r2, r3, #1
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	3b04      	subs	r3, #4
 8007b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b08:	4a0c      	ldr	r2, [pc, #48]	@ (8007b3c <pxPortInitialiseStack+0x64>)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3b14      	subs	r3, #20
 8007b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3b04      	subs	r3, #4
 8007b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f06f 0202 	mvn.w	r2, #2
 8007b26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3b20      	subs	r3, #32
 8007b2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	08007b41 	.word	0x08007b41

08007b40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b4a:	4b13      	ldr	r3, [pc, #76]	@ (8007b98 <prvTaskExitError+0x58>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b52:	d00b      	beq.n	8007b6c <prvTaskExitError+0x2c>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	60fb      	str	r3, [r7, #12]
}
 8007b66:	bf00      	nop
 8007b68:	bf00      	nop
 8007b6a:	e7fd      	b.n	8007b68 <prvTaskExitError+0x28>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	60bb      	str	r3, [r7, #8]
}
 8007b7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b80:	bf00      	nop
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d0fc      	beq.n	8007b82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b88:	bf00      	nop
 8007b8a:	bf00      	nop
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	20000010 	.word	0x20000010
 8007b9c:	00000000 	.word	0x00000000

08007ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ba0:	4b07      	ldr	r3, [pc, #28]	@ (8007bc0 <pxCurrentTCBConst2>)
 8007ba2:	6819      	ldr	r1, [r3, #0]
 8007ba4:	6808      	ldr	r0, [r1, #0]
 8007ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007baa:	f380 8809 	msr	PSP, r0
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f04f 0000 	mov.w	r0, #0
 8007bb6:	f380 8811 	msr	BASEPRI, r0
 8007bba:	4770      	bx	lr
 8007bbc:	f3af 8000 	nop.w

08007bc0 <pxCurrentTCBConst2>:
 8007bc0:	20004f60 	.word	0x20004f60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop

08007bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007bc8:	4808      	ldr	r0, [pc, #32]	@ (8007bec <prvPortStartFirstTask+0x24>)
 8007bca:	6800      	ldr	r0, [r0, #0]
 8007bcc:	6800      	ldr	r0, [r0, #0]
 8007bce:	f380 8808 	msr	MSP, r0
 8007bd2:	f04f 0000 	mov.w	r0, #0
 8007bd6:	f380 8814 	msr	CONTROL, r0
 8007bda:	b662      	cpsie	i
 8007bdc:	b661      	cpsie	f
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	df00      	svc	0
 8007be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bea:	bf00      	nop
 8007bec:	e000ed08 	.word	0xe000ed08

08007bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007bf6:	4b47      	ldr	r3, [pc, #284]	@ (8007d14 <xPortStartScheduler+0x124>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a47      	ldr	r2, [pc, #284]	@ (8007d18 <xPortStartScheduler+0x128>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d10b      	bne.n	8007c18 <xPortStartScheduler+0x28>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	613b      	str	r3, [r7, #16]
}
 8007c12:	bf00      	nop
 8007c14:	bf00      	nop
 8007c16:	e7fd      	b.n	8007c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c18:	4b3e      	ldr	r3, [pc, #248]	@ (8007d14 <xPortStartScheduler+0x124>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a3f      	ldr	r2, [pc, #252]	@ (8007d1c <xPortStartScheduler+0x12c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d10b      	bne.n	8007c3a <xPortStartScheduler+0x4a>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	60fb      	str	r3, [r7, #12]
}
 8007c34:	bf00      	nop
 8007c36:	bf00      	nop
 8007c38:	e7fd      	b.n	8007c36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c3a:	4b39      	ldr	r3, [pc, #228]	@ (8007d20 <xPortStartScheduler+0x130>)
 8007c3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	22ff      	movs	r2, #255	@ 0xff
 8007c4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c54:	78fb      	ldrb	r3, [r7, #3]
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	4b31      	ldr	r3, [pc, #196]	@ (8007d24 <xPortStartScheduler+0x134>)
 8007c60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c62:	4b31      	ldr	r3, [pc, #196]	@ (8007d28 <xPortStartScheduler+0x138>)
 8007c64:	2207      	movs	r2, #7
 8007c66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c68:	e009      	b.n	8007c7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8007d28 <xPortStartScheduler+0x138>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	4a2d      	ldr	r2, [pc, #180]	@ (8007d28 <xPortStartScheduler+0x138>)
 8007c72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c74:	78fb      	ldrb	r3, [r7, #3]
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c7e:	78fb      	ldrb	r3, [r7, #3]
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c86:	2b80      	cmp	r3, #128	@ 0x80
 8007c88:	d0ef      	beq.n	8007c6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c8a:	4b27      	ldr	r3, [pc, #156]	@ (8007d28 <xPortStartScheduler+0x138>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f1c3 0307 	rsb	r3, r3, #7
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d00b      	beq.n	8007cae <xPortStartScheduler+0xbe>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	60bb      	str	r3, [r7, #8]
}
 8007ca8:	bf00      	nop
 8007caa:	bf00      	nop
 8007cac:	e7fd      	b.n	8007caa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cae:	4b1e      	ldr	r3, [pc, #120]	@ (8007d28 <xPortStartScheduler+0x138>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	021b      	lsls	r3, r3, #8
 8007cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8007d28 <xPortStartScheduler+0x138>)
 8007cb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8007d28 <xPortStartScheduler+0x138>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007cc0:	4a19      	ldr	r2, [pc, #100]	@ (8007d28 <xPortStartScheduler+0x138>)
 8007cc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ccc:	4b17      	ldr	r3, [pc, #92]	@ (8007d2c <xPortStartScheduler+0x13c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a16      	ldr	r2, [pc, #88]	@ (8007d2c <xPortStartScheduler+0x13c>)
 8007cd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007cd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cd8:	4b14      	ldr	r3, [pc, #80]	@ (8007d2c <xPortStartScheduler+0x13c>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a13      	ldr	r2, [pc, #76]	@ (8007d2c <xPortStartScheduler+0x13c>)
 8007cde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007ce2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ce4:	f000 f8da 	bl	8007e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ce8:	4b11      	ldr	r3, [pc, #68]	@ (8007d30 <xPortStartScheduler+0x140>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007cee:	f000 f8f9 	bl	8007ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cf2:	4b10      	ldr	r3, [pc, #64]	@ (8007d34 <xPortStartScheduler+0x144>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8007d34 <xPortStartScheduler+0x144>)
 8007cf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007cfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cfe:	f7ff ff63 	bl	8007bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d02:	f7ff f815 	bl	8006d30 <vTaskSwitchContext>
	prvTaskExitError();
 8007d06:	f7ff ff1b 	bl	8007b40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	e000ed00 	.word	0xe000ed00
 8007d18:	410fc271 	.word	0x410fc271
 8007d1c:	410fc270 	.word	0x410fc270
 8007d20:	e000e400 	.word	0xe000e400
 8007d24:	2000558c 	.word	0x2000558c
 8007d28:	20005590 	.word	0x20005590
 8007d2c:	e000ed20 	.word	0xe000ed20
 8007d30:	20000010 	.word	0x20000010
 8007d34:	e000ef34 	.word	0xe000ef34

08007d38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	607b      	str	r3, [r7, #4]
}
 8007d50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d52:	4b10      	ldr	r3, [pc, #64]	@ (8007d94 <vPortEnterCritical+0x5c>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3301      	adds	r3, #1
 8007d58:	4a0e      	ldr	r2, [pc, #56]	@ (8007d94 <vPortEnterCritical+0x5c>)
 8007d5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8007d94 <vPortEnterCritical+0x5c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d110      	bne.n	8007d86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d64:	4b0c      	ldr	r3, [pc, #48]	@ (8007d98 <vPortEnterCritical+0x60>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00b      	beq.n	8007d86 <vPortEnterCritical+0x4e>
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	603b      	str	r3, [r7, #0]
}
 8007d80:	bf00      	nop
 8007d82:	bf00      	nop
 8007d84:	e7fd      	b.n	8007d82 <vPortEnterCritical+0x4a>
	}
}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	20000010 	.word	0x20000010
 8007d98:	e000ed04 	.word	0xe000ed04

08007d9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007da2:	4b12      	ldr	r3, [pc, #72]	@ (8007dec <vPortExitCritical+0x50>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10b      	bne.n	8007dc2 <vPortExitCritical+0x26>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	607b      	str	r3, [r7, #4]
}
 8007dbc:	bf00      	nop
 8007dbe:	bf00      	nop
 8007dc0:	e7fd      	b.n	8007dbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8007dec <vPortExitCritical+0x50>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	4a08      	ldr	r2, [pc, #32]	@ (8007dec <vPortExitCritical+0x50>)
 8007dca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007dcc:	4b07      	ldr	r3, [pc, #28]	@ (8007dec <vPortExitCritical+0x50>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d105      	bne.n	8007de0 <vPortExitCritical+0x44>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	f383 8811 	msr	BASEPRI, r3
}
 8007dde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	20000010 	.word	0x20000010

08007df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007df0:	f3ef 8009 	mrs	r0, PSP
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	4b15      	ldr	r3, [pc, #84]	@ (8007e50 <pxCurrentTCBConst>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	f01e 0f10 	tst.w	lr, #16
 8007e00:	bf08      	it	eq
 8007e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0a:	6010      	str	r0, [r2, #0]
 8007e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007e14:	f380 8811 	msr	BASEPRI, r0
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f7fe ff86 	bl	8006d30 <vTaskSwitchContext>
 8007e24:	f04f 0000 	mov.w	r0, #0
 8007e28:	f380 8811 	msr	BASEPRI, r0
 8007e2c:	bc09      	pop	{r0, r3}
 8007e2e:	6819      	ldr	r1, [r3, #0]
 8007e30:	6808      	ldr	r0, [r1, #0]
 8007e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e36:	f01e 0f10 	tst.w	lr, #16
 8007e3a:	bf08      	it	eq
 8007e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e40:	f380 8809 	msr	PSP, r0
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	f3af 8000 	nop.w

08007e50 <pxCurrentTCBConst>:
 8007e50:	20004f60 	.word	0x20004f60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop

08007e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	607b      	str	r3, [r7, #4]
}
 8007e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e72:	f7fe fea3 	bl	8006bbc <xTaskIncrementTick>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e7c:	4b06      	ldr	r3, [pc, #24]	@ (8007e98 <xPortSysTickHandler+0x40>)
 8007e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	2300      	movs	r3, #0
 8007e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	f383 8811 	msr	BASEPRI, r3
}
 8007e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ed0 <vPortSetupTimerInterrupt+0x34>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ed4 <vPortSetupTimerInterrupt+0x38>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007eac:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed8 <vPortSetupTimerInterrupt+0x3c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8007edc <vPortSetupTimerInterrupt+0x40>)
 8007eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb6:	099b      	lsrs	r3, r3, #6
 8007eb8:	4a09      	ldr	r2, [pc, #36]	@ (8007ee0 <vPortSetupTimerInterrupt+0x44>)
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ebe:	4b04      	ldr	r3, [pc, #16]	@ (8007ed0 <vPortSetupTimerInterrupt+0x34>)
 8007ec0:	2207      	movs	r2, #7
 8007ec2:	601a      	str	r2, [r3, #0]
}
 8007ec4:	bf00      	nop
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	e000e010 	.word	0xe000e010
 8007ed4:	e000e018 	.word	0xe000e018
 8007ed8:	20000004 	.word	0x20000004
 8007edc:	10624dd3 	.word	0x10624dd3
 8007ee0:	e000e014 	.word	0xe000e014

08007ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ef4 <vPortEnableVFP+0x10>
 8007ee8:	6801      	ldr	r1, [r0, #0]
 8007eea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007eee:	6001      	str	r1, [r0, #0]
 8007ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ef2:	bf00      	nop
 8007ef4:	e000ed88 	.word	0xe000ed88

08007ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007efe:	f3ef 8305 	mrs	r3, IPSR
 8007f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b0f      	cmp	r3, #15
 8007f08:	d915      	bls.n	8007f36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f0a:	4a18      	ldr	r2, [pc, #96]	@ (8007f6c <vPortValidateInterruptPriority+0x74>)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4413      	add	r3, r2
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f14:	4b16      	ldr	r3, [pc, #88]	@ (8007f70 <vPortValidateInterruptPriority+0x78>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	7afa      	ldrb	r2, [r7, #11]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d20b      	bcs.n	8007f36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	607b      	str	r3, [r7, #4]
}
 8007f30:	bf00      	nop
 8007f32:	bf00      	nop
 8007f34:	e7fd      	b.n	8007f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f36:	4b0f      	ldr	r3, [pc, #60]	@ (8007f74 <vPortValidateInterruptPriority+0x7c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f78 <vPortValidateInterruptPriority+0x80>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d90b      	bls.n	8007f5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4a:	f383 8811 	msr	BASEPRI, r3
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f3bf 8f4f 	dsb	sy
 8007f56:	603b      	str	r3, [r7, #0]
}
 8007f58:	bf00      	nop
 8007f5a:	bf00      	nop
 8007f5c:	e7fd      	b.n	8007f5a <vPortValidateInterruptPriority+0x62>
	}
 8007f5e:	bf00      	nop
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	e000e3f0 	.word	0xe000e3f0
 8007f70:	2000558c 	.word	0x2000558c
 8007f74:	e000ed0c 	.word	0xe000ed0c
 8007f78:	20005590 	.word	0x20005590

08007f7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08a      	sub	sp, #40	@ 0x28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f84:	2300      	movs	r3, #0
 8007f86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f88:	f7fe fd5c 	bl	8006a44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f8c:	4b5c      	ldr	r3, [pc, #368]	@ (8008100 <pvPortMalloc+0x184>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f94:	f000 f924 	bl	80081e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f98:	4b5a      	ldr	r3, [pc, #360]	@ (8008104 <pvPortMalloc+0x188>)
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f040 8095 	bne.w	80080d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d01e      	beq.n	8007fea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007fac:	2208      	movs	r2, #8
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f003 0307 	and.w	r3, r3, #7
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d015      	beq.n	8007fea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f023 0307 	bic.w	r3, r3, #7
 8007fc4:	3308      	adds	r3, #8
 8007fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f003 0307 	and.w	r3, r3, #7
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00b      	beq.n	8007fea <pvPortMalloc+0x6e>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	617b      	str	r3, [r7, #20]
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop
 8007fe8:	e7fd      	b.n	8007fe6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d06f      	beq.n	80080d0 <pvPortMalloc+0x154>
 8007ff0:	4b45      	ldr	r3, [pc, #276]	@ (8008108 <pvPortMalloc+0x18c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d86a      	bhi.n	80080d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ffa:	4b44      	ldr	r3, [pc, #272]	@ (800810c <pvPortMalloc+0x190>)
 8007ffc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ffe:	4b43      	ldr	r3, [pc, #268]	@ (800810c <pvPortMalloc+0x190>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008004:	e004      	b.n	8008010 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008008:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800800a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	429a      	cmp	r2, r3
 8008018:	d903      	bls.n	8008022 <pvPortMalloc+0xa6>
 800801a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1f1      	bne.n	8008006 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008022:	4b37      	ldr	r3, [pc, #220]	@ (8008100 <pvPortMalloc+0x184>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008028:	429a      	cmp	r2, r3
 800802a:	d051      	beq.n	80080d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800802c:	6a3b      	ldr	r3, [r7, #32]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2208      	movs	r2, #8
 8008032:	4413      	add	r3, r2
 8008034:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800803e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	1ad2      	subs	r2, r2, r3
 8008046:	2308      	movs	r3, #8
 8008048:	005b      	lsls	r3, r3, #1
 800804a:	429a      	cmp	r2, r3
 800804c:	d920      	bls.n	8008090 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800804e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4413      	add	r3, r2
 8008054:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	f003 0307 	and.w	r3, r3, #7
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00b      	beq.n	8008078 <pvPortMalloc+0xfc>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	613b      	str	r3, [r7, #16]
}
 8008072:	bf00      	nop
 8008074:	bf00      	nop
 8008076:	e7fd      	b.n	8008074 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	1ad2      	subs	r2, r2, r3
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800808a:	69b8      	ldr	r0, [r7, #24]
 800808c:	f000 f90a 	bl	80082a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008090:	4b1d      	ldr	r3, [pc, #116]	@ (8008108 <pvPortMalloc+0x18c>)
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	4a1b      	ldr	r2, [pc, #108]	@ (8008108 <pvPortMalloc+0x18c>)
 800809c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800809e:	4b1a      	ldr	r3, [pc, #104]	@ (8008108 <pvPortMalloc+0x18c>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008110 <pvPortMalloc+0x194>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d203      	bcs.n	80080b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080aa:	4b17      	ldr	r3, [pc, #92]	@ (8008108 <pvPortMalloc+0x18c>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a18      	ldr	r2, [pc, #96]	@ (8008110 <pvPortMalloc+0x194>)
 80080b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b4:	685a      	ldr	r2, [r3, #4]
 80080b6:	4b13      	ldr	r3, [pc, #76]	@ (8008104 <pvPortMalloc+0x188>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	431a      	orrs	r2, r3
 80080bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80080c6:	4b13      	ldr	r3, [pc, #76]	@ (8008114 <pvPortMalloc+0x198>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3301      	adds	r3, #1
 80080cc:	4a11      	ldr	r2, [pc, #68]	@ (8008114 <pvPortMalloc+0x198>)
 80080ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080d0:	f7fe fcc6 	bl	8006a60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	f003 0307 	and.w	r3, r3, #7
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00b      	beq.n	80080f6 <pvPortMalloc+0x17a>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	60fb      	str	r3, [r7, #12]
}
 80080f0:	bf00      	nop
 80080f2:	bf00      	nop
 80080f4:	e7fd      	b.n	80080f2 <pvPortMalloc+0x176>
	return pvReturn;
 80080f6:	69fb      	ldr	r3, [r7, #28]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3728      	adds	r7, #40	@ 0x28
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	2000919c 	.word	0x2000919c
 8008104:	200091b0 	.word	0x200091b0
 8008108:	200091a0 	.word	0x200091a0
 800810c:	20009194 	.word	0x20009194
 8008110:	200091a4 	.word	0x200091a4
 8008114:	200091a8 	.word	0x200091a8

08008118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d04f      	beq.n	80081ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800812a:	2308      	movs	r3, #8
 800812c:	425b      	negs	r3, r3
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	4413      	add	r3, r2
 8008132:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	4b25      	ldr	r3, [pc, #148]	@ (80081d4 <vPortFree+0xbc>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4013      	ands	r3, r2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10b      	bne.n	800815e <vPortFree+0x46>
	__asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	60fb      	str	r3, [r7, #12]
}
 8008158:	bf00      	nop
 800815a:	bf00      	nop
 800815c:	e7fd      	b.n	800815a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00b      	beq.n	800817e <vPortFree+0x66>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	60bb      	str	r3, [r7, #8]
}
 8008178:	bf00      	nop
 800817a:	bf00      	nop
 800817c:	e7fd      	b.n	800817a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	685a      	ldr	r2, [r3, #4]
 8008182:	4b14      	ldr	r3, [pc, #80]	@ (80081d4 <vPortFree+0xbc>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4013      	ands	r3, r2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d01e      	beq.n	80081ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d11a      	bne.n	80081ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	4b0e      	ldr	r3, [pc, #56]	@ (80081d4 <vPortFree+0xbc>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	43db      	mvns	r3, r3
 800819e:	401a      	ands	r2, r3
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081a4:	f7fe fc4e 	bl	8006a44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	4b0a      	ldr	r3, [pc, #40]	@ (80081d8 <vPortFree+0xc0>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4413      	add	r3, r2
 80081b2:	4a09      	ldr	r2, [pc, #36]	@ (80081d8 <vPortFree+0xc0>)
 80081b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081b6:	6938      	ldr	r0, [r7, #16]
 80081b8:	f000 f874 	bl	80082a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80081bc:	4b07      	ldr	r3, [pc, #28]	@ (80081dc <vPortFree+0xc4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	3301      	adds	r3, #1
 80081c2:	4a06      	ldr	r2, [pc, #24]	@ (80081dc <vPortFree+0xc4>)
 80081c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80081c6:	f7fe fc4b 	bl	8006a60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081ca:	bf00      	nop
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	200091b0 	.word	0x200091b0
 80081d8:	200091a0 	.word	0x200091a0
 80081dc:	200091ac 	.word	0x200091ac

080081e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80081ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081ec:	4b27      	ldr	r3, [pc, #156]	@ (800828c <prvHeapInit+0xac>)
 80081ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f003 0307 	and.w	r3, r3, #7
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00c      	beq.n	8008214 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3307      	adds	r3, #7
 80081fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f023 0307 	bic.w	r3, r3, #7
 8008206:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	4a1f      	ldr	r2, [pc, #124]	@ (800828c <prvHeapInit+0xac>)
 8008210:	4413      	add	r3, r2
 8008212:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008218:	4a1d      	ldr	r2, [pc, #116]	@ (8008290 <prvHeapInit+0xb0>)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800821e:	4b1c      	ldr	r3, [pc, #112]	@ (8008290 <prvHeapInit+0xb0>)
 8008220:	2200      	movs	r2, #0
 8008222:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	4413      	add	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800822c:	2208      	movs	r2, #8
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	1a9b      	subs	r3, r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f023 0307 	bic.w	r3, r3, #7
 800823a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4a15      	ldr	r2, [pc, #84]	@ (8008294 <prvHeapInit+0xb4>)
 8008240:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008242:	4b14      	ldr	r3, [pc, #80]	@ (8008294 <prvHeapInit+0xb4>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2200      	movs	r2, #0
 8008248:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800824a:	4b12      	ldr	r3, [pc, #72]	@ (8008294 <prvHeapInit+0xb4>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	1ad2      	subs	r2, r2, r3
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008260:	4b0c      	ldr	r3, [pc, #48]	@ (8008294 <prvHeapInit+0xb4>)
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	4a0a      	ldr	r2, [pc, #40]	@ (8008298 <prvHeapInit+0xb8>)
 800826e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	4a09      	ldr	r2, [pc, #36]	@ (800829c <prvHeapInit+0xbc>)
 8008276:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008278:	4b09      	ldr	r3, [pc, #36]	@ (80082a0 <prvHeapInit+0xc0>)
 800827a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800827e:	601a      	str	r2, [r3, #0]
}
 8008280:	bf00      	nop
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	20005594 	.word	0x20005594
 8008290:	20009194 	.word	0x20009194
 8008294:	2000919c 	.word	0x2000919c
 8008298:	200091a4 	.word	0x200091a4
 800829c:	200091a0 	.word	0x200091a0
 80082a0:	200091b0 	.word	0x200091b0

080082a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082ac:	4b28      	ldr	r3, [pc, #160]	@ (8008350 <prvInsertBlockIntoFreeList+0xac>)
 80082ae:	60fb      	str	r3, [r7, #12]
 80082b0:	e002      	b.n	80082b8 <prvInsertBlockIntoFreeList+0x14>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	60fb      	str	r3, [r7, #12]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d8f7      	bhi.n	80082b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	4413      	add	r3, r2
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d108      	bne.n	80082e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	441a      	add	r2, r3
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	441a      	add	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d118      	bne.n	800832c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	4b15      	ldr	r3, [pc, #84]	@ (8008354 <prvInsertBlockIntoFreeList+0xb0>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	429a      	cmp	r2, r3
 8008304:	d00d      	beq.n	8008322 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685a      	ldr	r2, [r3, #4]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	441a      	add	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	e008      	b.n	8008334 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008322:	4b0c      	ldr	r3, [pc, #48]	@ (8008354 <prvInsertBlockIntoFreeList+0xb0>)
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	601a      	str	r2, [r3, #0]
 800832a:	e003      	b.n	8008334 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	429a      	cmp	r2, r3
 800833a:	d002      	beq.n	8008342 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008342:	bf00      	nop
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	20009194 	.word	0x20009194
 8008354:	2000919c 	.word	0x2000919c

08008358 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8008358:	4b04      	ldr	r3, [pc, #16]	@ (800836c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	b10a      	cbz	r2, 8008362 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800835e:	4803      	ldr	r0, [pc, #12]	@ (800836c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8008360:	4770      	bx	lr
 8008362:	4a03      	ldr	r2, [pc, #12]	@ (8008370 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 8008364:	4801      	ldr	r0, [pc, #4]	@ (800836c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8008366:	6812      	ldr	r2, [r2, #0]
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	4770      	bx	lr
 800836c:	2000001c 	.word	0x2000001c
 8008370:	200001d0 	.word	0x200001d0

08008374 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8008374:	4a02      	ldr	r2, [pc, #8]	@ (8008380 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 8008376:	4b03      	ldr	r3, [pc, #12]	@ (8008384 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 8008378:	6812      	ldr	r2, [r2, #0]
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	200001d0 	.word	0x200001d0
 8008384:	2000001c 	.word	0x2000001c

08008388 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 8008388:	f003 b9a4 	b.w	800b6d4 <geometry_msgs__msg__Twist__init>

0800838c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800838c:	f003 b9c6 	b.w	800b71c <geometry_msgs__msg__Twist__fini>

08008390 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8008390:	b510      	push	{r4, lr}
 8008392:	f000 f819 	bl	80083c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8008396:	4c07      	ldr	r4, [pc, #28]	@ (80083b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 8008398:	60e0      	str	r0, [r4, #12]
 800839a:	f000 f815 	bl	80083c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800839e:	4b06      	ldr	r3, [pc, #24]	@ (80083b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 80083a0:	64a0      	str	r0, [r4, #72]	@ 0x48
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	b10a      	cbz	r2, 80083aa <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 80083a6:	4804      	ldr	r0, [pc, #16]	@ (80083b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 80083a8:	bd10      	pop	{r4, pc}
 80083aa:	4a04      	ldr	r2, [pc, #16]	@ (80083bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 80083ac:	4802      	ldr	r0, [pc, #8]	@ (80083b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 80083ae:	6812      	ldr	r2, [r2, #0]
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	bd10      	pop	{r4, pc}
 80083b4:	20000028 	.word	0x20000028
 80083b8:	200000a0 	.word	0x200000a0
 80083bc:	200001d4 	.word	0x200001d4

080083c0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 80083c0:	f003 b9b8 	b.w	800b734 <geometry_msgs__msg__Vector3__init>

080083c4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 80083c4:	f003 b9ba 	b.w	800b73c <geometry_msgs__msg__Vector3__fini>

080083c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 80083c8:	4b04      	ldr	r3, [pc, #16]	@ (80083dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	b10a      	cbz	r2, 80083d2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 80083ce:	4803      	ldr	r0, [pc, #12]	@ (80083dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 80083d0:	4770      	bx	lr
 80083d2:	4a03      	ldr	r2, [pc, #12]	@ (80083e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 80083d4:	4801      	ldr	r0, [pc, #4]	@ (80083dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 80083d6:	6812      	ldr	r2, [r2, #0]
 80083d8:	601a      	str	r2, [r3, #0]
 80083da:	4770      	bx	lr
 80083dc:	20000160 	.word	0x20000160
 80083e0:	200001d4 	.word	0x200001d4

080083e4 <get_serialized_size_geometry_msgs__msg__Twist>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	4604      	mov	r4, r0
 80083e8:	b148      	cbz	r0, 80083fe <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 80083ea:	460d      	mov	r5, r1
 80083ec:	f000 f860 	bl	80084b0 <get_serialized_size_geometry_msgs__msg__Vector3>
 80083f0:	4606      	mov	r6, r0
 80083f2:	1829      	adds	r1, r5, r0
 80083f4:	f104 0018 	add.w	r0, r4, #24
 80083f8:	f000 f85a 	bl	80084b0 <get_serialized_size_geometry_msgs__msg__Vector3>
 80083fc:	4430      	add	r0, r6
 80083fe:	bd70      	pop	{r4, r5, r6, pc}

08008400 <_Twist__cdr_deserialize>:
 8008400:	b570      	push	{r4, r5, r6, lr}
 8008402:	460c      	mov	r4, r1
 8008404:	b189      	cbz	r1, 800842a <_Twist__cdr_deserialize+0x2a>
 8008406:	4605      	mov	r5, r0
 8008408:	f000 f8de 	bl	80085c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800840c:	6843      	ldr	r3, [r0, #4]
 800840e:	4621      	mov	r1, r4
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	4628      	mov	r0, r5
 8008414:	4798      	blx	r3
 8008416:	f000 f8d7 	bl	80085c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800841a:	6843      	ldr	r3, [r0, #4]
 800841c:	f104 0118 	add.w	r1, r4, #24
 8008420:	4628      	mov	r0, r5
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008428:	4718      	bx	r3
 800842a:	4608      	mov	r0, r1
 800842c:	bd70      	pop	{r4, r5, r6, pc}
 800842e:	bf00      	nop

08008430 <_Twist__cdr_serialize>:
 8008430:	b510      	push	{r4, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	9101      	str	r1, [sp, #4]
 8008436:	b190      	cbz	r0, 800845e <_Twist__cdr_serialize+0x2e>
 8008438:	4604      	mov	r4, r0
 800843a:	f000 f8c5 	bl	80085c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800843e:	6843      	ldr	r3, [r0, #4]
 8008440:	9901      	ldr	r1, [sp, #4]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	4620      	mov	r0, r4
 8008446:	4798      	blx	r3
 8008448:	f000 f8be 	bl	80085c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800844c:	6843      	ldr	r3, [r0, #4]
 800844e:	9901      	ldr	r1, [sp, #4]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f104 0018 	add.w	r0, r4, #24
 8008456:	b002      	add	sp, #8
 8008458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800845c:	4718      	bx	r3
 800845e:	b002      	add	sp, #8
 8008460:	bd10      	pop	{r4, pc}
 8008462:	bf00      	nop

08008464 <_Twist__get_serialized_size>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4604      	mov	r4, r0
 8008468:	b148      	cbz	r0, 800847e <_Twist__get_serialized_size+0x1a>
 800846a:	2100      	movs	r1, #0
 800846c:	f000 f820 	bl	80084b0 <get_serialized_size_geometry_msgs__msg__Vector3>
 8008470:	4605      	mov	r5, r0
 8008472:	4601      	mov	r1, r0
 8008474:	f104 0018 	add.w	r0, r4, #24
 8008478:	f000 f81a 	bl	80084b0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800847c:	4428      	add	r0, r5
 800847e:	bd38      	pop	{r3, r4, r5, pc}

08008480 <_Twist__max_serialized_size>:
 8008480:	b510      	push	{r4, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	2301      	movs	r3, #1
 8008486:	2100      	movs	r1, #0
 8008488:	f10d 0007 	add.w	r0, sp, #7
 800848c:	f88d 3007 	strb.w	r3, [sp, #7]
 8008490:	f000 f87e 	bl	8008590 <max_serialized_size_geometry_msgs__msg__Vector3>
 8008494:	4604      	mov	r4, r0
 8008496:	4601      	mov	r1, r0
 8008498:	f10d 0007 	add.w	r0, sp, #7
 800849c:	f000 f878 	bl	8008590 <max_serialized_size_geometry_msgs__msg__Vector3>
 80084a0:	4420      	add	r0, r4
 80084a2:	b002      	add	sp, #8
 80084a4:	bd10      	pop	{r4, pc}
 80084a6:	bf00      	nop

080084a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 80084a8:	4800      	ldr	r0, [pc, #0]	@ (80084ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 80084aa:	4770      	bx	lr
 80084ac:	2000016c 	.word	0x2000016c

080084b0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 80084b0:	b1b8      	cbz	r0, 80084e2 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 80084b2:	b538      	push	{r3, r4, r5, lr}
 80084b4:	460d      	mov	r5, r1
 80084b6:	4628      	mov	r0, r5
 80084b8:	2108      	movs	r1, #8
 80084ba:	f001 f9fd 	bl	80098b8 <ucdr_alignment>
 80084be:	f105 0308 	add.w	r3, r5, #8
 80084c2:	181c      	adds	r4, r3, r0
 80084c4:	2108      	movs	r1, #8
 80084c6:	4620      	mov	r0, r4
 80084c8:	f001 f9f6 	bl	80098b8 <ucdr_alignment>
 80084cc:	3008      	adds	r0, #8
 80084ce:	4404      	add	r4, r0
 80084d0:	2108      	movs	r1, #8
 80084d2:	4620      	mov	r0, r4
 80084d4:	f001 f9f0 	bl	80098b8 <ucdr_alignment>
 80084d8:	f1c5 0508 	rsb	r5, r5, #8
 80084dc:	4428      	add	r0, r5
 80084de:	4420      	add	r0, r4
 80084e0:	bd38      	pop	{r3, r4, r5, pc}
 80084e2:	4770      	bx	lr

080084e4 <_Vector3__cdr_deserialize>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	460c      	mov	r4, r1
 80084e8:	b171      	cbz	r1, 8008508 <_Vector3__cdr_deserialize+0x24>
 80084ea:	4605      	mov	r5, r0
 80084ec:	f001 f8c6 	bl	800967c <ucdr_deserialize_double>
 80084f0:	f104 0108 	add.w	r1, r4, #8
 80084f4:	4628      	mov	r0, r5
 80084f6:	f001 f8c1 	bl	800967c <ucdr_deserialize_double>
 80084fa:	f104 0110 	add.w	r1, r4, #16
 80084fe:	4628      	mov	r0, r5
 8008500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008504:	f001 b8ba 	b.w	800967c <ucdr_deserialize_double>
 8008508:	4608      	mov	r0, r1
 800850a:	bd38      	pop	{r3, r4, r5, pc}

0800850c <_Vector3__cdr_serialize>:
 800850c:	b198      	cbz	r0, 8008536 <_Vector3__cdr_serialize+0x2a>
 800850e:	b538      	push	{r3, r4, r5, lr}
 8008510:	ed90 0b00 	vldr	d0, [r0]
 8008514:	460d      	mov	r5, r1
 8008516:	4604      	mov	r4, r0
 8008518:	4608      	mov	r0, r1
 800851a:	f000 ffdf 	bl	80094dc <ucdr_serialize_double>
 800851e:	ed94 0b02 	vldr	d0, [r4, #8]
 8008522:	4628      	mov	r0, r5
 8008524:	f000 ffda 	bl	80094dc <ucdr_serialize_double>
 8008528:	ed94 0b04 	vldr	d0, [r4, #16]
 800852c:	4628      	mov	r0, r5
 800852e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008532:	f000 bfd3 	b.w	80094dc <ucdr_serialize_double>
 8008536:	4770      	bx	lr

08008538 <_Vector3__get_serialized_size>:
 8008538:	b198      	cbz	r0, 8008562 <_Vector3__get_serialized_size+0x2a>
 800853a:	b510      	push	{r4, lr}
 800853c:	2108      	movs	r1, #8
 800853e:	2000      	movs	r0, #0
 8008540:	f001 f9ba 	bl	80098b8 <ucdr_alignment>
 8008544:	f100 0408 	add.w	r4, r0, #8
 8008548:	2108      	movs	r1, #8
 800854a:	4620      	mov	r0, r4
 800854c:	f001 f9b4 	bl	80098b8 <ucdr_alignment>
 8008550:	3008      	adds	r0, #8
 8008552:	4404      	add	r4, r0
 8008554:	2108      	movs	r1, #8
 8008556:	4620      	mov	r0, r4
 8008558:	f001 f9ae 	bl	80098b8 <ucdr_alignment>
 800855c:	3008      	adds	r0, #8
 800855e:	4420      	add	r0, r4
 8008560:	bd10      	pop	{r4, pc}
 8008562:	4770      	bx	lr

08008564 <_Vector3__max_serialized_size>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	2108      	movs	r1, #8
 8008568:	2000      	movs	r0, #0
 800856a:	f001 f9a5 	bl	80098b8 <ucdr_alignment>
 800856e:	f100 0508 	add.w	r5, r0, #8
 8008572:	2108      	movs	r1, #8
 8008574:	4628      	mov	r0, r5
 8008576:	f001 f99f 	bl	80098b8 <ucdr_alignment>
 800857a:	f100 0408 	add.w	r4, r0, #8
 800857e:	442c      	add	r4, r5
 8008580:	2108      	movs	r1, #8
 8008582:	4620      	mov	r0, r4
 8008584:	f001 f998 	bl	80098b8 <ucdr_alignment>
 8008588:	3008      	adds	r0, #8
 800858a:	4420      	add	r0, r4
 800858c:	bd38      	pop	{r3, r4, r5, pc}
 800858e:	bf00      	nop

08008590 <max_serialized_size_geometry_msgs__msg__Vector3>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	2301      	movs	r3, #1
 8008594:	460c      	mov	r4, r1
 8008596:	7003      	strb	r3, [r0, #0]
 8008598:	2108      	movs	r1, #8
 800859a:	4620      	mov	r0, r4
 800859c:	f001 f98c 	bl	80098b8 <ucdr_alignment>
 80085a0:	f104 0508 	add.w	r5, r4, #8
 80085a4:	1946      	adds	r6, r0, r5
 80085a6:	2108      	movs	r1, #8
 80085a8:	4630      	mov	r0, r6
 80085aa:	f001 f985 	bl	80098b8 <ucdr_alignment>
 80085ae:	f100 0508 	add.w	r5, r0, #8
 80085b2:	4435      	add	r5, r6
 80085b4:	2108      	movs	r1, #8
 80085b6:	4628      	mov	r0, r5
 80085b8:	f001 f97e 	bl	80098b8 <ucdr_alignment>
 80085bc:	f1c4 0408 	rsb	r4, r4, #8
 80085c0:	4420      	add	r0, r4
 80085c2:	4428      	add	r0, r5
 80085c4:	bd70      	pop	{r4, r5, r6, pc}
 80085c6:	bf00      	nop

080085c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 80085c8:	4800      	ldr	r0, [pc, #0]	@ (80085cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 80085ca:	4770      	bx	lr
 80085cc:	20000194 	.word	0x20000194

080085d0 <ucdr_serialize_bool>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	460d      	mov	r5, r1
 80085d4:	2101      	movs	r1, #1
 80085d6:	4604      	mov	r4, r0
 80085d8:	f001 f922 	bl	8009820 <ucdr_check_final_buffer_behavior>
 80085dc:	b148      	cbz	r0, 80085f2 <ucdr_serialize_bool+0x22>
 80085de:	68a3      	ldr	r3, [r4, #8]
 80085e0:	701d      	strb	r5, [r3, #0]
 80085e2:	68a2      	ldr	r2, [r4, #8]
 80085e4:	6923      	ldr	r3, [r4, #16]
 80085e6:	2101      	movs	r1, #1
 80085e8:	440a      	add	r2, r1
 80085ea:	440b      	add	r3, r1
 80085ec:	60a2      	str	r2, [r4, #8]
 80085ee:	6123      	str	r3, [r4, #16]
 80085f0:	7561      	strb	r1, [r4, #21]
 80085f2:	7da0      	ldrb	r0, [r4, #22]
 80085f4:	f080 0001 	eor.w	r0, r0, #1
 80085f8:	bd38      	pop	{r3, r4, r5, pc}
 80085fa:	bf00      	nop

080085fc <ucdr_deserialize_bool>:
 80085fc:	b538      	push	{r3, r4, r5, lr}
 80085fe:	460d      	mov	r5, r1
 8008600:	2101      	movs	r1, #1
 8008602:	4604      	mov	r4, r0
 8008604:	f001 f90c 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8008608:	b160      	cbz	r0, 8008624 <ucdr_deserialize_bool+0x28>
 800860a:	68a2      	ldr	r2, [r4, #8]
 800860c:	6923      	ldr	r3, [r4, #16]
 800860e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008612:	3900      	subs	r1, #0
 8008614:	bf18      	it	ne
 8008616:	2101      	movne	r1, #1
 8008618:	7029      	strb	r1, [r5, #0]
 800861a:	3301      	adds	r3, #1
 800861c:	2101      	movs	r1, #1
 800861e:	60a2      	str	r2, [r4, #8]
 8008620:	6123      	str	r3, [r4, #16]
 8008622:	7561      	strb	r1, [r4, #21]
 8008624:	7da0      	ldrb	r0, [r4, #22]
 8008626:	f080 0001 	eor.w	r0, r0, #1
 800862a:	bd38      	pop	{r3, r4, r5, pc}

0800862c <ucdr_serialize_uint8_t>:
 800862c:	b538      	push	{r3, r4, r5, lr}
 800862e:	460d      	mov	r5, r1
 8008630:	2101      	movs	r1, #1
 8008632:	4604      	mov	r4, r0
 8008634:	f001 f8f4 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8008638:	b148      	cbz	r0, 800864e <ucdr_serialize_uint8_t+0x22>
 800863a:	68a3      	ldr	r3, [r4, #8]
 800863c:	701d      	strb	r5, [r3, #0]
 800863e:	68a2      	ldr	r2, [r4, #8]
 8008640:	6923      	ldr	r3, [r4, #16]
 8008642:	2101      	movs	r1, #1
 8008644:	440a      	add	r2, r1
 8008646:	440b      	add	r3, r1
 8008648:	60a2      	str	r2, [r4, #8]
 800864a:	6123      	str	r3, [r4, #16]
 800864c:	7561      	strb	r1, [r4, #21]
 800864e:	7da0      	ldrb	r0, [r4, #22]
 8008650:	f080 0001 	eor.w	r0, r0, #1
 8008654:	bd38      	pop	{r3, r4, r5, pc}
 8008656:	bf00      	nop

08008658 <ucdr_deserialize_uint8_t>:
 8008658:	b538      	push	{r3, r4, r5, lr}
 800865a:	460d      	mov	r5, r1
 800865c:	2101      	movs	r1, #1
 800865e:	4604      	mov	r4, r0
 8008660:	f001 f8de 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8008664:	b150      	cbz	r0, 800867c <ucdr_deserialize_uint8_t+0x24>
 8008666:	68a3      	ldr	r3, [r4, #8]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	702b      	strb	r3, [r5, #0]
 800866c:	68a2      	ldr	r2, [r4, #8]
 800866e:	6923      	ldr	r3, [r4, #16]
 8008670:	2101      	movs	r1, #1
 8008672:	440a      	add	r2, r1
 8008674:	440b      	add	r3, r1
 8008676:	60a2      	str	r2, [r4, #8]
 8008678:	6123      	str	r3, [r4, #16]
 800867a:	7561      	strb	r1, [r4, #21]
 800867c:	7da0      	ldrb	r0, [r4, #22]
 800867e:	f080 0001 	eor.w	r0, r0, #1
 8008682:	bd38      	pop	{r3, r4, r5, pc}

08008684 <ucdr_serialize_uint16_t>:
 8008684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008688:	b082      	sub	sp, #8
 800868a:	460b      	mov	r3, r1
 800868c:	2102      	movs	r1, #2
 800868e:	4604      	mov	r4, r0
 8008690:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008694:	f001 f918 	bl	80098c8 <ucdr_buffer_alignment>
 8008698:	4601      	mov	r1, r0
 800869a:	4620      	mov	r0, r4
 800869c:	7d67      	ldrb	r7, [r4, #21]
 800869e:	f001 f957 	bl	8009950 <ucdr_advance_buffer>
 80086a2:	2102      	movs	r1, #2
 80086a4:	4620      	mov	r0, r4
 80086a6:	f001 f8af 	bl	8009808 <ucdr_check_buffer_available_for>
 80086aa:	bb78      	cbnz	r0, 800870c <ucdr_serialize_uint16_t+0x88>
 80086ac:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80086b0:	42ab      	cmp	r3, r5
 80086b2:	d926      	bls.n	8008702 <ucdr_serialize_uint16_t+0x7e>
 80086b4:	1b5e      	subs	r6, r3, r5
 80086b6:	60a3      	str	r3, [r4, #8]
 80086b8:	6923      	ldr	r3, [r4, #16]
 80086ba:	f1c6 0802 	rsb	r8, r6, #2
 80086be:	4433      	add	r3, r6
 80086c0:	6123      	str	r3, [r4, #16]
 80086c2:	4641      	mov	r1, r8
 80086c4:	4620      	mov	r0, r4
 80086c6:	f001 f8ab 	bl	8009820 <ucdr_check_final_buffer_behavior>
 80086ca:	2800      	cmp	r0, #0
 80086cc:	d03b      	beq.n	8008746 <ucdr_serialize_uint16_t+0xc2>
 80086ce:	7d23      	ldrb	r3, [r4, #20]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d04a      	beq.n	800876a <ucdr_serialize_uint16_t+0xe6>
 80086d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80086d8:	702b      	strb	r3, [r5, #0]
 80086da:	2e00      	cmp	r6, #0
 80086dc:	d040      	beq.n	8008760 <ucdr_serialize_uint16_t+0xdc>
 80086de:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80086e2:	706b      	strb	r3, [r5, #1]
 80086e4:	6923      	ldr	r3, [r4, #16]
 80086e6:	68a2      	ldr	r2, [r4, #8]
 80086e8:	7da0      	ldrb	r0, [r4, #22]
 80086ea:	3302      	adds	r3, #2
 80086ec:	1b9e      	subs	r6, r3, r6
 80086ee:	4442      	add	r2, r8
 80086f0:	2302      	movs	r3, #2
 80086f2:	f080 0001 	eor.w	r0, r0, #1
 80086f6:	60a2      	str	r2, [r4, #8]
 80086f8:	6126      	str	r6, [r4, #16]
 80086fa:	7563      	strb	r3, [r4, #21]
 80086fc:	b002      	add	sp, #8
 80086fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008702:	2102      	movs	r1, #2
 8008704:	4620      	mov	r0, r4
 8008706:	f001 f88b 	bl	8009820 <ucdr_check_final_buffer_behavior>
 800870a:	b190      	cbz	r0, 8008732 <ucdr_serialize_uint16_t+0xae>
 800870c:	7d23      	ldrb	r3, [r4, #20]
 800870e:	2b01      	cmp	r3, #1
 8008710:	68a3      	ldr	r3, [r4, #8]
 8008712:	d014      	beq.n	800873e <ucdr_serialize_uint16_t+0xba>
 8008714:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008718:	701a      	strb	r2, [r3, #0]
 800871a:	68a3      	ldr	r3, [r4, #8]
 800871c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008720:	705a      	strb	r2, [r3, #1]
 8008722:	68a2      	ldr	r2, [r4, #8]
 8008724:	6923      	ldr	r3, [r4, #16]
 8008726:	3202      	adds	r2, #2
 8008728:	3302      	adds	r3, #2
 800872a:	2102      	movs	r1, #2
 800872c:	60a2      	str	r2, [r4, #8]
 800872e:	6123      	str	r3, [r4, #16]
 8008730:	7561      	strb	r1, [r4, #21]
 8008732:	7da0      	ldrb	r0, [r4, #22]
 8008734:	f080 0001 	eor.w	r0, r0, #1
 8008738:	b002      	add	sp, #8
 800873a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800873e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008742:	801a      	strh	r2, [r3, #0]
 8008744:	e7ed      	b.n	8008722 <ucdr_serialize_uint16_t+0x9e>
 8008746:	68a2      	ldr	r2, [r4, #8]
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	7da0      	ldrb	r0, [r4, #22]
 800874c:	7567      	strb	r7, [r4, #21]
 800874e:	1b92      	subs	r2, r2, r6
 8008750:	1b9b      	subs	r3, r3, r6
 8008752:	f080 0001 	eor.w	r0, r0, #1
 8008756:	60a2      	str	r2, [r4, #8]
 8008758:	6123      	str	r3, [r4, #16]
 800875a:	b002      	add	sp, #8
 800875c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008760:	68a3      	ldr	r3, [r4, #8]
 8008762:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008766:	701a      	strb	r2, [r3, #0]
 8008768:	e7bc      	b.n	80086e4 <ucdr_serialize_uint16_t+0x60>
 800876a:	4628      	mov	r0, r5
 800876c:	f10d 0506 	add.w	r5, sp, #6
 8008770:	4629      	mov	r1, r5
 8008772:	4632      	mov	r2, r6
 8008774:	f00d f935 	bl	80159e2 <memcpy>
 8008778:	68a0      	ldr	r0, [r4, #8]
 800877a:	4642      	mov	r2, r8
 800877c:	19a9      	adds	r1, r5, r6
 800877e:	f00d f930 	bl	80159e2 <memcpy>
 8008782:	e7af      	b.n	80086e4 <ucdr_serialize_uint16_t+0x60>

08008784 <ucdr_serialize_endian_uint16_t>:
 8008784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008788:	b083      	sub	sp, #12
 800878a:	460d      	mov	r5, r1
 800878c:	2102      	movs	r1, #2
 800878e:	4604      	mov	r4, r0
 8008790:	f8ad 2006 	strh.w	r2, [sp, #6]
 8008794:	f001 f898 	bl	80098c8 <ucdr_buffer_alignment>
 8008798:	4601      	mov	r1, r0
 800879a:	4620      	mov	r0, r4
 800879c:	f894 8015 	ldrb.w	r8, [r4, #21]
 80087a0:	f001 f8d6 	bl	8009950 <ucdr_advance_buffer>
 80087a4:	2102      	movs	r1, #2
 80087a6:	4620      	mov	r0, r4
 80087a8:	f001 f82e 	bl	8009808 <ucdr_check_buffer_available_for>
 80087ac:	bb70      	cbnz	r0, 800880c <ucdr_serialize_endian_uint16_t+0x88>
 80087ae:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80087b2:	42be      	cmp	r6, r7
 80087b4:	d925      	bls.n	8008802 <ucdr_serialize_endian_uint16_t+0x7e>
 80087b6:	6923      	ldr	r3, [r4, #16]
 80087b8:	60a6      	str	r6, [r4, #8]
 80087ba:	1bf6      	subs	r6, r6, r7
 80087bc:	4433      	add	r3, r6
 80087be:	f1c6 0902 	rsb	r9, r6, #2
 80087c2:	6123      	str	r3, [r4, #16]
 80087c4:	4649      	mov	r1, r9
 80087c6:	4620      	mov	r0, r4
 80087c8:	f001 f82a 	bl	8009820 <ucdr_check_final_buffer_behavior>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d039      	beq.n	8008844 <ucdr_serialize_endian_uint16_t+0xc0>
 80087d0:	2d01      	cmp	r5, #1
 80087d2:	d04a      	beq.n	800886a <ucdr_serialize_endian_uint16_t+0xe6>
 80087d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80087d8:	703b      	strb	r3, [r7, #0]
 80087da:	2e00      	cmp	r6, #0
 80087dc:	d040      	beq.n	8008860 <ucdr_serialize_endian_uint16_t+0xdc>
 80087de:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80087e2:	707b      	strb	r3, [r7, #1]
 80087e4:	6923      	ldr	r3, [r4, #16]
 80087e6:	68a2      	ldr	r2, [r4, #8]
 80087e8:	7da0      	ldrb	r0, [r4, #22]
 80087ea:	3302      	adds	r3, #2
 80087ec:	444a      	add	r2, r9
 80087ee:	1b9b      	subs	r3, r3, r6
 80087f0:	2102      	movs	r1, #2
 80087f2:	f080 0001 	eor.w	r0, r0, #1
 80087f6:	60a2      	str	r2, [r4, #8]
 80087f8:	6123      	str	r3, [r4, #16]
 80087fa:	7561      	strb	r1, [r4, #21]
 80087fc:	b003      	add	sp, #12
 80087fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008802:	2102      	movs	r1, #2
 8008804:	4620      	mov	r0, r4
 8008806:	f001 f80b 	bl	8009820 <ucdr_check_final_buffer_behavior>
 800880a:	b188      	cbz	r0, 8008830 <ucdr_serialize_endian_uint16_t+0xac>
 800880c:	2d01      	cmp	r5, #1
 800880e:	68a3      	ldr	r3, [r4, #8]
 8008810:	d014      	beq.n	800883c <ucdr_serialize_endian_uint16_t+0xb8>
 8008812:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008816:	701a      	strb	r2, [r3, #0]
 8008818:	68a3      	ldr	r3, [r4, #8]
 800881a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800881e:	705a      	strb	r2, [r3, #1]
 8008820:	68a2      	ldr	r2, [r4, #8]
 8008822:	6923      	ldr	r3, [r4, #16]
 8008824:	3202      	adds	r2, #2
 8008826:	3302      	adds	r3, #2
 8008828:	2102      	movs	r1, #2
 800882a:	60a2      	str	r2, [r4, #8]
 800882c:	6123      	str	r3, [r4, #16]
 800882e:	7561      	strb	r1, [r4, #21]
 8008830:	7da0      	ldrb	r0, [r4, #22]
 8008832:	f080 0001 	eor.w	r0, r0, #1
 8008836:	b003      	add	sp, #12
 8008838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800883c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008840:	801a      	strh	r2, [r3, #0]
 8008842:	e7ed      	b.n	8008820 <ucdr_serialize_endian_uint16_t+0x9c>
 8008844:	68a2      	ldr	r2, [r4, #8]
 8008846:	6923      	ldr	r3, [r4, #16]
 8008848:	7da0      	ldrb	r0, [r4, #22]
 800884a:	f884 8015 	strb.w	r8, [r4, #21]
 800884e:	1b92      	subs	r2, r2, r6
 8008850:	1b9b      	subs	r3, r3, r6
 8008852:	f080 0001 	eor.w	r0, r0, #1
 8008856:	60a2      	str	r2, [r4, #8]
 8008858:	6123      	str	r3, [r4, #16]
 800885a:	b003      	add	sp, #12
 800885c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008860:	68a3      	ldr	r3, [r4, #8]
 8008862:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008866:	701a      	strb	r2, [r3, #0]
 8008868:	e7bc      	b.n	80087e4 <ucdr_serialize_endian_uint16_t+0x60>
 800886a:	f10d 0506 	add.w	r5, sp, #6
 800886e:	4629      	mov	r1, r5
 8008870:	4632      	mov	r2, r6
 8008872:	4638      	mov	r0, r7
 8008874:	f00d f8b5 	bl	80159e2 <memcpy>
 8008878:	68a0      	ldr	r0, [r4, #8]
 800887a:	464a      	mov	r2, r9
 800887c:	19a9      	adds	r1, r5, r6
 800887e:	f00d f8b0 	bl	80159e2 <memcpy>
 8008882:	e7af      	b.n	80087e4 <ucdr_serialize_endian_uint16_t+0x60>

08008884 <ucdr_deserialize_uint16_t>:
 8008884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008888:	460d      	mov	r5, r1
 800888a:	2102      	movs	r1, #2
 800888c:	4604      	mov	r4, r0
 800888e:	f001 f81b 	bl	80098c8 <ucdr_buffer_alignment>
 8008892:	4601      	mov	r1, r0
 8008894:	4620      	mov	r0, r4
 8008896:	f894 8015 	ldrb.w	r8, [r4, #21]
 800889a:	f001 f859 	bl	8009950 <ucdr_advance_buffer>
 800889e:	2102      	movs	r1, #2
 80088a0:	4620      	mov	r0, r4
 80088a2:	f000 ffb1 	bl	8009808 <ucdr_check_buffer_available_for>
 80088a6:	bb60      	cbnz	r0, 8008902 <ucdr_deserialize_uint16_t+0x7e>
 80088a8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80088ac:	42be      	cmp	r6, r7
 80088ae:	d923      	bls.n	80088f8 <ucdr_deserialize_uint16_t+0x74>
 80088b0:	6923      	ldr	r3, [r4, #16]
 80088b2:	60a6      	str	r6, [r4, #8]
 80088b4:	1bf6      	subs	r6, r6, r7
 80088b6:	4433      	add	r3, r6
 80088b8:	f1c6 0902 	rsb	r9, r6, #2
 80088bc:	6123      	str	r3, [r4, #16]
 80088be:	4649      	mov	r1, r9
 80088c0:	4620      	mov	r0, r4
 80088c2:	f000 ffad 	bl	8009820 <ucdr_check_final_buffer_behavior>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d034      	beq.n	8008934 <ucdr_deserialize_uint16_t+0xb0>
 80088ca:	7d23      	ldrb	r3, [r4, #20]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d042      	beq.n	8008956 <ucdr_deserialize_uint16_t+0xd2>
 80088d0:	787b      	ldrb	r3, [r7, #1]
 80088d2:	702b      	strb	r3, [r5, #0]
 80088d4:	2e00      	cmp	r6, #0
 80088d6:	d03a      	beq.n	800894e <ucdr_deserialize_uint16_t+0xca>
 80088d8:	783b      	ldrb	r3, [r7, #0]
 80088da:	706b      	strb	r3, [r5, #1]
 80088dc:	6923      	ldr	r3, [r4, #16]
 80088de:	68a2      	ldr	r2, [r4, #8]
 80088e0:	7da0      	ldrb	r0, [r4, #22]
 80088e2:	2102      	movs	r1, #2
 80088e4:	3302      	adds	r3, #2
 80088e6:	444a      	add	r2, r9
 80088e8:	1b9b      	subs	r3, r3, r6
 80088ea:	7561      	strb	r1, [r4, #21]
 80088ec:	60a2      	str	r2, [r4, #8]
 80088ee:	6123      	str	r3, [r4, #16]
 80088f0:	f080 0001 	eor.w	r0, r0, #1
 80088f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088f8:	2102      	movs	r1, #2
 80088fa:	4620      	mov	r0, r4
 80088fc:	f000 ff90 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8008900:	b180      	cbz	r0, 8008924 <ucdr_deserialize_uint16_t+0xa0>
 8008902:	7d23      	ldrb	r3, [r4, #20]
 8008904:	2b01      	cmp	r3, #1
 8008906:	68a3      	ldr	r3, [r4, #8]
 8008908:	d011      	beq.n	800892e <ucdr_deserialize_uint16_t+0xaa>
 800890a:	785b      	ldrb	r3, [r3, #1]
 800890c:	702b      	strb	r3, [r5, #0]
 800890e:	68a3      	ldr	r3, [r4, #8]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	706b      	strb	r3, [r5, #1]
 8008914:	68a2      	ldr	r2, [r4, #8]
 8008916:	6923      	ldr	r3, [r4, #16]
 8008918:	3202      	adds	r2, #2
 800891a:	3302      	adds	r3, #2
 800891c:	2102      	movs	r1, #2
 800891e:	60a2      	str	r2, [r4, #8]
 8008920:	6123      	str	r3, [r4, #16]
 8008922:	7561      	strb	r1, [r4, #21]
 8008924:	7da0      	ldrb	r0, [r4, #22]
 8008926:	f080 0001 	eor.w	r0, r0, #1
 800892a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800892e:	881b      	ldrh	r3, [r3, #0]
 8008930:	802b      	strh	r3, [r5, #0]
 8008932:	e7ef      	b.n	8008914 <ucdr_deserialize_uint16_t+0x90>
 8008934:	68a2      	ldr	r2, [r4, #8]
 8008936:	6923      	ldr	r3, [r4, #16]
 8008938:	7da0      	ldrb	r0, [r4, #22]
 800893a:	f884 8015 	strb.w	r8, [r4, #21]
 800893e:	1b92      	subs	r2, r2, r6
 8008940:	1b9b      	subs	r3, r3, r6
 8008942:	60a2      	str	r2, [r4, #8]
 8008944:	6123      	str	r3, [r4, #16]
 8008946:	f080 0001 	eor.w	r0, r0, #1
 800894a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800894e:	68a3      	ldr	r3, [r4, #8]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	706b      	strb	r3, [r5, #1]
 8008954:	e7c2      	b.n	80088dc <ucdr_deserialize_uint16_t+0x58>
 8008956:	4639      	mov	r1, r7
 8008958:	4632      	mov	r2, r6
 800895a:	4628      	mov	r0, r5
 800895c:	f00d f841 	bl	80159e2 <memcpy>
 8008960:	68a1      	ldr	r1, [r4, #8]
 8008962:	464a      	mov	r2, r9
 8008964:	19a8      	adds	r0, r5, r6
 8008966:	f00d f83c 	bl	80159e2 <memcpy>
 800896a:	e7b7      	b.n	80088dc <ucdr_deserialize_uint16_t+0x58>

0800896c <ucdr_deserialize_endian_uint16_t>:
 800896c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008970:	460e      	mov	r6, r1
 8008972:	2102      	movs	r1, #2
 8008974:	4604      	mov	r4, r0
 8008976:	4615      	mov	r5, r2
 8008978:	f000 ffa6 	bl	80098c8 <ucdr_buffer_alignment>
 800897c:	4601      	mov	r1, r0
 800897e:	4620      	mov	r0, r4
 8008980:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008984:	f000 ffe4 	bl	8009950 <ucdr_advance_buffer>
 8008988:	2102      	movs	r1, #2
 800898a:	4620      	mov	r0, r4
 800898c:	f000 ff3c 	bl	8009808 <ucdr_check_buffer_available_for>
 8008990:	bb70      	cbnz	r0, 80089f0 <ucdr_deserialize_endian_uint16_t+0x84>
 8008992:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8008996:	4547      	cmp	r7, r8
 8008998:	d925      	bls.n	80089e6 <ucdr_deserialize_endian_uint16_t+0x7a>
 800899a:	6923      	ldr	r3, [r4, #16]
 800899c:	60a7      	str	r7, [r4, #8]
 800899e:	eba7 0708 	sub.w	r7, r7, r8
 80089a2:	443b      	add	r3, r7
 80089a4:	f1c7 0a02 	rsb	sl, r7, #2
 80089a8:	6123      	str	r3, [r4, #16]
 80089aa:	4651      	mov	r1, sl
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 ff37 	bl	8009820 <ucdr_check_final_buffer_behavior>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d034      	beq.n	8008a20 <ucdr_deserialize_endian_uint16_t+0xb4>
 80089b6:	2e01      	cmp	r6, #1
 80089b8:	d043      	beq.n	8008a42 <ucdr_deserialize_endian_uint16_t+0xd6>
 80089ba:	f898 3001 	ldrb.w	r3, [r8, #1]
 80089be:	702b      	strb	r3, [r5, #0]
 80089c0:	2f00      	cmp	r7, #0
 80089c2:	d03a      	beq.n	8008a3a <ucdr_deserialize_endian_uint16_t+0xce>
 80089c4:	f898 3000 	ldrb.w	r3, [r8]
 80089c8:	706b      	strb	r3, [r5, #1]
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	68a2      	ldr	r2, [r4, #8]
 80089ce:	7da0      	ldrb	r0, [r4, #22]
 80089d0:	2102      	movs	r1, #2
 80089d2:	3302      	adds	r3, #2
 80089d4:	4452      	add	r2, sl
 80089d6:	1bdb      	subs	r3, r3, r7
 80089d8:	7561      	strb	r1, [r4, #21]
 80089da:	60a2      	str	r2, [r4, #8]
 80089dc:	6123      	str	r3, [r4, #16]
 80089de:	f080 0001 	eor.w	r0, r0, #1
 80089e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e6:	2102      	movs	r1, #2
 80089e8:	4620      	mov	r0, r4
 80089ea:	f000 ff19 	bl	8009820 <ucdr_check_final_buffer_behavior>
 80089ee:	b178      	cbz	r0, 8008a10 <ucdr_deserialize_endian_uint16_t+0xa4>
 80089f0:	2e01      	cmp	r6, #1
 80089f2:	68a3      	ldr	r3, [r4, #8]
 80089f4:	d011      	beq.n	8008a1a <ucdr_deserialize_endian_uint16_t+0xae>
 80089f6:	785b      	ldrb	r3, [r3, #1]
 80089f8:	702b      	strb	r3, [r5, #0]
 80089fa:	68a3      	ldr	r3, [r4, #8]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	706b      	strb	r3, [r5, #1]
 8008a00:	68a2      	ldr	r2, [r4, #8]
 8008a02:	6923      	ldr	r3, [r4, #16]
 8008a04:	3202      	adds	r2, #2
 8008a06:	3302      	adds	r3, #2
 8008a08:	2102      	movs	r1, #2
 8008a0a:	60a2      	str	r2, [r4, #8]
 8008a0c:	6123      	str	r3, [r4, #16]
 8008a0e:	7561      	strb	r1, [r4, #21]
 8008a10:	7da0      	ldrb	r0, [r4, #22]
 8008a12:	f080 0001 	eor.w	r0, r0, #1
 8008a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a1a:	881b      	ldrh	r3, [r3, #0]
 8008a1c:	802b      	strh	r3, [r5, #0]
 8008a1e:	e7ef      	b.n	8008a00 <ucdr_deserialize_endian_uint16_t+0x94>
 8008a20:	68a2      	ldr	r2, [r4, #8]
 8008a22:	6923      	ldr	r3, [r4, #16]
 8008a24:	7da0      	ldrb	r0, [r4, #22]
 8008a26:	f884 9015 	strb.w	r9, [r4, #21]
 8008a2a:	1bd2      	subs	r2, r2, r7
 8008a2c:	1bdb      	subs	r3, r3, r7
 8008a2e:	60a2      	str	r2, [r4, #8]
 8008a30:	6123      	str	r3, [r4, #16]
 8008a32:	f080 0001 	eor.w	r0, r0, #1
 8008a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a3a:	68a3      	ldr	r3, [r4, #8]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	706b      	strb	r3, [r5, #1]
 8008a40:	e7c3      	b.n	80089ca <ucdr_deserialize_endian_uint16_t+0x5e>
 8008a42:	4641      	mov	r1, r8
 8008a44:	463a      	mov	r2, r7
 8008a46:	4628      	mov	r0, r5
 8008a48:	f00c ffcb 	bl	80159e2 <memcpy>
 8008a4c:	68a1      	ldr	r1, [r4, #8]
 8008a4e:	4652      	mov	r2, sl
 8008a50:	19e8      	adds	r0, r5, r7
 8008a52:	f00c ffc6 	bl	80159e2 <memcpy>
 8008a56:	e7b8      	b.n	80089ca <ucdr_deserialize_endian_uint16_t+0x5e>

08008a58 <ucdr_serialize_uint32_t>:
 8008a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5c:	b082      	sub	sp, #8
 8008a5e:	4604      	mov	r4, r0
 8008a60:	9101      	str	r1, [sp, #4]
 8008a62:	2104      	movs	r1, #4
 8008a64:	f000 ff30 	bl	80098c8 <ucdr_buffer_alignment>
 8008a68:	4601      	mov	r1, r0
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	7d67      	ldrb	r7, [r4, #21]
 8008a6e:	f000 ff6f 	bl	8009950 <ucdr_advance_buffer>
 8008a72:	2104      	movs	r1, #4
 8008a74:	4620      	mov	r0, r4
 8008a76:	f000 fec7 	bl	8009808 <ucdr_check_buffer_available_for>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d139      	bne.n	8008af2 <ucdr_serialize_uint32_t+0x9a>
 8008a7e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008a82:	42ab      	cmp	r3, r5
 8008a84:	d930      	bls.n	8008ae8 <ucdr_serialize_uint32_t+0x90>
 8008a86:	1b5e      	subs	r6, r3, r5
 8008a88:	60a3      	str	r3, [r4, #8]
 8008a8a:	6923      	ldr	r3, [r4, #16]
 8008a8c:	f1c6 0804 	rsb	r8, r6, #4
 8008a90:	4433      	add	r3, r6
 8008a92:	6123      	str	r3, [r4, #16]
 8008a94:	4641      	mov	r1, r8
 8008a96:	4620      	mov	r0, r4
 8008a98:	f000 fec2 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d04c      	beq.n	8008b3a <ucdr_serialize_uint32_t+0xe2>
 8008aa0:	7d23      	ldrb	r3, [r4, #20]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d063      	beq.n	8008b6e <ucdr_serialize_uint32_t+0x116>
 8008aa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008aaa:	702b      	strb	r3, [r5, #0]
 8008aac:	2e00      	cmp	r6, #0
 8008aae:	d051      	beq.n	8008b54 <ucdr_serialize_uint32_t+0xfc>
 8008ab0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008ab4:	706b      	strb	r3, [r5, #1]
 8008ab6:	2e01      	cmp	r6, #1
 8008ab8:	d050      	beq.n	8008b5c <ucdr_serialize_uint32_t+0x104>
 8008aba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008abe:	70ab      	strb	r3, [r5, #2]
 8008ac0:	2e02      	cmp	r6, #2
 8008ac2:	d04f      	beq.n	8008b64 <ucdr_serialize_uint32_t+0x10c>
 8008ac4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008ac8:	70eb      	strb	r3, [r5, #3]
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	68a2      	ldr	r2, [r4, #8]
 8008ace:	7da0      	ldrb	r0, [r4, #22]
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	1b9e      	subs	r6, r3, r6
 8008ad4:	4442      	add	r2, r8
 8008ad6:	2304      	movs	r3, #4
 8008ad8:	f080 0001 	eor.w	r0, r0, #1
 8008adc:	60a2      	str	r2, [r4, #8]
 8008ade:	6126      	str	r6, [r4, #16]
 8008ae0:	7563      	strb	r3, [r4, #21]
 8008ae2:	b002      	add	sp, #8
 8008ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae8:	2104      	movs	r1, #4
 8008aea:	4620      	mov	r0, r4
 8008aec:	f000 fe98 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8008af0:	b1d0      	cbz	r0, 8008b28 <ucdr_serialize_uint32_t+0xd0>
 8008af2:	7d23      	ldrb	r3, [r4, #20]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	68a3      	ldr	r3, [r4, #8]
 8008af8:	d01c      	beq.n	8008b34 <ucdr_serialize_uint32_t+0xdc>
 8008afa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008afe:	701a      	strb	r2, [r3, #0]
 8008b00:	68a3      	ldr	r3, [r4, #8]
 8008b02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008b06:	705a      	strb	r2, [r3, #1]
 8008b08:	68a3      	ldr	r3, [r4, #8]
 8008b0a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008b0e:	709a      	strb	r2, [r3, #2]
 8008b10:	68a3      	ldr	r3, [r4, #8]
 8008b12:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008b16:	70da      	strb	r2, [r3, #3]
 8008b18:	68a2      	ldr	r2, [r4, #8]
 8008b1a:	6923      	ldr	r3, [r4, #16]
 8008b1c:	3204      	adds	r2, #4
 8008b1e:	3304      	adds	r3, #4
 8008b20:	2104      	movs	r1, #4
 8008b22:	60a2      	str	r2, [r4, #8]
 8008b24:	6123      	str	r3, [r4, #16]
 8008b26:	7561      	strb	r1, [r4, #21]
 8008b28:	7da0      	ldrb	r0, [r4, #22]
 8008b2a:	f080 0001 	eor.w	r0, r0, #1
 8008b2e:	b002      	add	sp, #8
 8008b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b34:	9a01      	ldr	r2, [sp, #4]
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	e7ee      	b.n	8008b18 <ucdr_serialize_uint32_t+0xc0>
 8008b3a:	68a2      	ldr	r2, [r4, #8]
 8008b3c:	6923      	ldr	r3, [r4, #16]
 8008b3e:	7da0      	ldrb	r0, [r4, #22]
 8008b40:	7567      	strb	r7, [r4, #21]
 8008b42:	1b92      	subs	r2, r2, r6
 8008b44:	1b9b      	subs	r3, r3, r6
 8008b46:	f080 0001 	eor.w	r0, r0, #1
 8008b4a:	60a2      	str	r2, [r4, #8]
 8008b4c:	6123      	str	r3, [r4, #16]
 8008b4e:	b002      	add	sp, #8
 8008b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b54:	68a3      	ldr	r3, [r4, #8]
 8008b56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008b5a:	701a      	strb	r2, [r3, #0]
 8008b5c:	68a3      	ldr	r3, [r4, #8]
 8008b5e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008b62:	701a      	strb	r2, [r3, #0]
 8008b64:	68a3      	ldr	r3, [r4, #8]
 8008b66:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008b6a:	701a      	strb	r2, [r3, #0]
 8008b6c:	e7ad      	b.n	8008aca <ucdr_serialize_uint32_t+0x72>
 8008b6e:	4628      	mov	r0, r5
 8008b70:	ad01      	add	r5, sp, #4
 8008b72:	4629      	mov	r1, r5
 8008b74:	4632      	mov	r2, r6
 8008b76:	f00c ff34 	bl	80159e2 <memcpy>
 8008b7a:	68a0      	ldr	r0, [r4, #8]
 8008b7c:	4642      	mov	r2, r8
 8008b7e:	19a9      	adds	r1, r5, r6
 8008b80:	f00c ff2f 	bl	80159e2 <memcpy>
 8008b84:	e7a1      	b.n	8008aca <ucdr_serialize_uint32_t+0x72>
 8008b86:	bf00      	nop

08008b88 <ucdr_serialize_endian_uint32_t>:
 8008b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b8c:	b083      	sub	sp, #12
 8008b8e:	460d      	mov	r5, r1
 8008b90:	2104      	movs	r1, #4
 8008b92:	4604      	mov	r4, r0
 8008b94:	9201      	str	r2, [sp, #4]
 8008b96:	f000 fe97 	bl	80098c8 <ucdr_buffer_alignment>
 8008b9a:	4601      	mov	r1, r0
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008ba2:	f000 fed5 	bl	8009950 <ucdr_advance_buffer>
 8008ba6:	2104      	movs	r1, #4
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f000 fe2d 	bl	8009808 <ucdr_check_buffer_available_for>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d138      	bne.n	8008c24 <ucdr_serialize_endian_uint32_t+0x9c>
 8008bb2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008bb6:	42b7      	cmp	r7, r6
 8008bb8:	d92f      	bls.n	8008c1a <ucdr_serialize_endian_uint32_t+0x92>
 8008bba:	6923      	ldr	r3, [r4, #16]
 8008bbc:	60a7      	str	r7, [r4, #8]
 8008bbe:	1bbf      	subs	r7, r7, r6
 8008bc0:	443b      	add	r3, r7
 8008bc2:	f1c7 0904 	rsb	r9, r7, #4
 8008bc6:	6123      	str	r3, [r4, #16]
 8008bc8:	4649      	mov	r1, r9
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f000 fe28 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d04a      	beq.n	8008c6a <ucdr_serialize_endian_uint32_t+0xe2>
 8008bd4:	2d01      	cmp	r5, #1
 8008bd6:	d063      	beq.n	8008ca0 <ucdr_serialize_endian_uint32_t+0x118>
 8008bd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008bdc:	7033      	strb	r3, [r6, #0]
 8008bde:	2f00      	cmp	r7, #0
 8008be0:	d051      	beq.n	8008c86 <ucdr_serialize_endian_uint32_t+0xfe>
 8008be2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008be6:	7073      	strb	r3, [r6, #1]
 8008be8:	2f01      	cmp	r7, #1
 8008bea:	d050      	beq.n	8008c8e <ucdr_serialize_endian_uint32_t+0x106>
 8008bec:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008bf0:	70b3      	strb	r3, [r6, #2]
 8008bf2:	2f02      	cmp	r7, #2
 8008bf4:	d04f      	beq.n	8008c96 <ucdr_serialize_endian_uint32_t+0x10e>
 8008bf6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008bfa:	70f3      	strb	r3, [r6, #3]
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	68a2      	ldr	r2, [r4, #8]
 8008c00:	7da0      	ldrb	r0, [r4, #22]
 8008c02:	3304      	adds	r3, #4
 8008c04:	444a      	add	r2, r9
 8008c06:	1bdb      	subs	r3, r3, r7
 8008c08:	2104      	movs	r1, #4
 8008c0a:	f080 0001 	eor.w	r0, r0, #1
 8008c0e:	60a2      	str	r2, [r4, #8]
 8008c10:	6123      	str	r3, [r4, #16]
 8008c12:	7561      	strb	r1, [r4, #21]
 8008c14:	b003      	add	sp, #12
 8008c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c1a:	2104      	movs	r1, #4
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f000 fdff 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8008c22:	b1c8      	cbz	r0, 8008c58 <ucdr_serialize_endian_uint32_t+0xd0>
 8008c24:	2d01      	cmp	r5, #1
 8008c26:	68a3      	ldr	r3, [r4, #8]
 8008c28:	d01c      	beq.n	8008c64 <ucdr_serialize_endian_uint32_t+0xdc>
 8008c2a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008c2e:	701a      	strb	r2, [r3, #0]
 8008c30:	68a3      	ldr	r3, [r4, #8]
 8008c32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008c36:	705a      	strb	r2, [r3, #1]
 8008c38:	68a3      	ldr	r3, [r4, #8]
 8008c3a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008c3e:	709a      	strb	r2, [r3, #2]
 8008c40:	68a3      	ldr	r3, [r4, #8]
 8008c42:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008c46:	70da      	strb	r2, [r3, #3]
 8008c48:	68a2      	ldr	r2, [r4, #8]
 8008c4a:	6923      	ldr	r3, [r4, #16]
 8008c4c:	3204      	adds	r2, #4
 8008c4e:	3304      	adds	r3, #4
 8008c50:	2104      	movs	r1, #4
 8008c52:	60a2      	str	r2, [r4, #8]
 8008c54:	6123      	str	r3, [r4, #16]
 8008c56:	7561      	strb	r1, [r4, #21]
 8008c58:	7da0      	ldrb	r0, [r4, #22]
 8008c5a:	f080 0001 	eor.w	r0, r0, #1
 8008c5e:	b003      	add	sp, #12
 8008c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c64:	9a01      	ldr	r2, [sp, #4]
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	e7ee      	b.n	8008c48 <ucdr_serialize_endian_uint32_t+0xc0>
 8008c6a:	68a2      	ldr	r2, [r4, #8]
 8008c6c:	6923      	ldr	r3, [r4, #16]
 8008c6e:	7da0      	ldrb	r0, [r4, #22]
 8008c70:	f884 8015 	strb.w	r8, [r4, #21]
 8008c74:	1bd2      	subs	r2, r2, r7
 8008c76:	1bdb      	subs	r3, r3, r7
 8008c78:	f080 0001 	eor.w	r0, r0, #1
 8008c7c:	60a2      	str	r2, [r4, #8]
 8008c7e:	6123      	str	r3, [r4, #16]
 8008c80:	b003      	add	sp, #12
 8008c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c86:	68a3      	ldr	r3, [r4, #8]
 8008c88:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008c8c:	701a      	strb	r2, [r3, #0]
 8008c8e:	68a3      	ldr	r3, [r4, #8]
 8008c90:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008c94:	701a      	strb	r2, [r3, #0]
 8008c96:	68a3      	ldr	r3, [r4, #8]
 8008c98:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008c9c:	701a      	strb	r2, [r3, #0]
 8008c9e:	e7ad      	b.n	8008bfc <ucdr_serialize_endian_uint32_t+0x74>
 8008ca0:	ad01      	add	r5, sp, #4
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	463a      	mov	r2, r7
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	f00c fe9b 	bl	80159e2 <memcpy>
 8008cac:	68a0      	ldr	r0, [r4, #8]
 8008cae:	464a      	mov	r2, r9
 8008cb0:	19e9      	adds	r1, r5, r7
 8008cb2:	f00c fe96 	bl	80159e2 <memcpy>
 8008cb6:	e7a1      	b.n	8008bfc <ucdr_serialize_endian_uint32_t+0x74>

08008cb8 <ucdr_deserialize_uint32_t>:
 8008cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cbc:	460d      	mov	r5, r1
 8008cbe:	2104      	movs	r1, #4
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	f000 fe01 	bl	80098c8 <ucdr_buffer_alignment>
 8008cc6:	4601      	mov	r1, r0
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008cce:	f000 fe3f 	bl	8009950 <ucdr_advance_buffer>
 8008cd2:	2104      	movs	r1, #4
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f000 fd97 	bl	8009808 <ucdr_check_buffer_available_for>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d138      	bne.n	8008d50 <ucdr_deserialize_uint32_t+0x98>
 8008cde:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008ce2:	42b7      	cmp	r7, r6
 8008ce4:	d92f      	bls.n	8008d46 <ucdr_deserialize_uint32_t+0x8e>
 8008ce6:	6923      	ldr	r3, [r4, #16]
 8008ce8:	60a7      	str	r7, [r4, #8]
 8008cea:	1bbf      	subs	r7, r7, r6
 8008cec:	443b      	add	r3, r7
 8008cee:	f1c7 0904 	rsb	r9, r7, #4
 8008cf2:	6123      	str	r3, [r4, #16]
 8008cf4:	4649      	mov	r1, r9
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	f000 fd92 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d046      	beq.n	8008d8e <ucdr_deserialize_uint32_t+0xd6>
 8008d00:	7d23      	ldrb	r3, [r4, #20]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d05c      	beq.n	8008dc0 <ucdr_deserialize_uint32_t+0x108>
 8008d06:	78f3      	ldrb	r3, [r6, #3]
 8008d08:	702b      	strb	r3, [r5, #0]
 8008d0a:	2f00      	cmp	r7, #0
 8008d0c:	d04c      	beq.n	8008da8 <ucdr_deserialize_uint32_t+0xf0>
 8008d0e:	78b3      	ldrb	r3, [r6, #2]
 8008d10:	706b      	strb	r3, [r5, #1]
 8008d12:	2f01      	cmp	r7, #1
 8008d14:	f105 0302 	add.w	r3, r5, #2
 8008d18:	d04a      	beq.n	8008db0 <ucdr_deserialize_uint32_t+0xf8>
 8008d1a:	7873      	ldrb	r3, [r6, #1]
 8008d1c:	70ab      	strb	r3, [r5, #2]
 8008d1e:	2f02      	cmp	r7, #2
 8008d20:	f105 0303 	add.w	r3, r5, #3
 8008d24:	d048      	beq.n	8008db8 <ucdr_deserialize_uint32_t+0x100>
 8008d26:	7833      	ldrb	r3, [r6, #0]
 8008d28:	70eb      	strb	r3, [r5, #3]
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	68a2      	ldr	r2, [r4, #8]
 8008d2e:	7da0      	ldrb	r0, [r4, #22]
 8008d30:	2104      	movs	r1, #4
 8008d32:	3304      	adds	r3, #4
 8008d34:	444a      	add	r2, r9
 8008d36:	1bdb      	subs	r3, r3, r7
 8008d38:	7561      	strb	r1, [r4, #21]
 8008d3a:	60a2      	str	r2, [r4, #8]
 8008d3c:	6123      	str	r3, [r4, #16]
 8008d3e:	f080 0001 	eor.w	r0, r0, #1
 8008d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d46:	2104      	movs	r1, #4
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f000 fd69 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8008d4e:	b1b0      	cbz	r0, 8008d7e <ucdr_deserialize_uint32_t+0xc6>
 8008d50:	7d23      	ldrb	r3, [r4, #20]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	68a3      	ldr	r3, [r4, #8]
 8008d56:	d017      	beq.n	8008d88 <ucdr_deserialize_uint32_t+0xd0>
 8008d58:	78db      	ldrb	r3, [r3, #3]
 8008d5a:	702b      	strb	r3, [r5, #0]
 8008d5c:	68a3      	ldr	r3, [r4, #8]
 8008d5e:	789b      	ldrb	r3, [r3, #2]
 8008d60:	706b      	strb	r3, [r5, #1]
 8008d62:	68a3      	ldr	r3, [r4, #8]
 8008d64:	785b      	ldrb	r3, [r3, #1]
 8008d66:	70ab      	strb	r3, [r5, #2]
 8008d68:	68a3      	ldr	r3, [r4, #8]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	70eb      	strb	r3, [r5, #3]
 8008d6e:	68a2      	ldr	r2, [r4, #8]
 8008d70:	6923      	ldr	r3, [r4, #16]
 8008d72:	3204      	adds	r2, #4
 8008d74:	3304      	adds	r3, #4
 8008d76:	2104      	movs	r1, #4
 8008d78:	60a2      	str	r2, [r4, #8]
 8008d7a:	6123      	str	r3, [r4, #16]
 8008d7c:	7561      	strb	r1, [r4, #21]
 8008d7e:	7da0      	ldrb	r0, [r4, #22]
 8008d80:	f080 0001 	eor.w	r0, r0, #1
 8008d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	602b      	str	r3, [r5, #0]
 8008d8c:	e7ef      	b.n	8008d6e <ucdr_deserialize_uint32_t+0xb6>
 8008d8e:	68a2      	ldr	r2, [r4, #8]
 8008d90:	6923      	ldr	r3, [r4, #16]
 8008d92:	7da0      	ldrb	r0, [r4, #22]
 8008d94:	f884 8015 	strb.w	r8, [r4, #21]
 8008d98:	1bd2      	subs	r2, r2, r7
 8008d9a:	1bdb      	subs	r3, r3, r7
 8008d9c:	60a2      	str	r2, [r4, #8]
 8008d9e:	6123      	str	r3, [r4, #16]
 8008da0:	f080 0001 	eor.w	r0, r0, #1
 8008da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008da8:	68a3      	ldr	r3, [r4, #8]
 8008daa:	789b      	ldrb	r3, [r3, #2]
 8008dac:	706b      	strb	r3, [r5, #1]
 8008dae:	1cab      	adds	r3, r5, #2
 8008db0:	68a2      	ldr	r2, [r4, #8]
 8008db2:	7852      	ldrb	r2, [r2, #1]
 8008db4:	f803 2b01 	strb.w	r2, [r3], #1
 8008db8:	68a2      	ldr	r2, [r4, #8]
 8008dba:	7812      	ldrb	r2, [r2, #0]
 8008dbc:	701a      	strb	r2, [r3, #0]
 8008dbe:	e7b4      	b.n	8008d2a <ucdr_deserialize_uint32_t+0x72>
 8008dc0:	4631      	mov	r1, r6
 8008dc2:	463a      	mov	r2, r7
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	f00c fe0c 	bl	80159e2 <memcpy>
 8008dca:	68a1      	ldr	r1, [r4, #8]
 8008dcc:	464a      	mov	r2, r9
 8008dce:	19e8      	adds	r0, r5, r7
 8008dd0:	f00c fe07 	bl	80159e2 <memcpy>
 8008dd4:	e7a9      	b.n	8008d2a <ucdr_deserialize_uint32_t+0x72>
 8008dd6:	bf00      	nop

08008dd8 <ucdr_deserialize_endian_uint32_t>:
 8008dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ddc:	460e      	mov	r6, r1
 8008dde:	2104      	movs	r1, #4
 8008de0:	4604      	mov	r4, r0
 8008de2:	4615      	mov	r5, r2
 8008de4:	f000 fd70 	bl	80098c8 <ucdr_buffer_alignment>
 8008de8:	4601      	mov	r1, r0
 8008dea:	4620      	mov	r0, r4
 8008dec:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008df0:	f000 fdae 	bl	8009950 <ucdr_advance_buffer>
 8008df4:	2104      	movs	r1, #4
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 fd06 	bl	8009808 <ucdr_check_buffer_available_for>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d13c      	bne.n	8008e7a <ucdr_deserialize_endian_uint32_t+0xa2>
 8008e00:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8008e04:	42bb      	cmp	r3, r7
 8008e06:	d933      	bls.n	8008e70 <ucdr_deserialize_endian_uint32_t+0x98>
 8008e08:	eba3 0807 	sub.w	r8, r3, r7
 8008e0c:	60a3      	str	r3, [r4, #8]
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	f1c8 0a04 	rsb	sl, r8, #4
 8008e14:	4443      	add	r3, r8
 8008e16:	6123      	str	r3, [r4, #16]
 8008e18:	4651      	mov	r1, sl
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f000 fd00 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d048      	beq.n	8008eb6 <ucdr_deserialize_endian_uint32_t+0xde>
 8008e24:	2e01      	cmp	r6, #1
 8008e26:	d061      	beq.n	8008eec <ucdr_deserialize_endian_uint32_t+0x114>
 8008e28:	78fb      	ldrb	r3, [r7, #3]
 8008e2a:	702b      	strb	r3, [r5, #0]
 8008e2c:	f1b8 0f00 	cmp.w	r8, #0
 8008e30:	d050      	beq.n	8008ed4 <ucdr_deserialize_endian_uint32_t+0xfc>
 8008e32:	78bb      	ldrb	r3, [r7, #2]
 8008e34:	706b      	strb	r3, [r5, #1]
 8008e36:	f1b8 0f01 	cmp.w	r8, #1
 8008e3a:	f105 0302 	add.w	r3, r5, #2
 8008e3e:	d04d      	beq.n	8008edc <ucdr_deserialize_endian_uint32_t+0x104>
 8008e40:	787b      	ldrb	r3, [r7, #1]
 8008e42:	70ab      	strb	r3, [r5, #2]
 8008e44:	f1b8 0f02 	cmp.w	r8, #2
 8008e48:	f105 0303 	add.w	r3, r5, #3
 8008e4c:	d04a      	beq.n	8008ee4 <ucdr_deserialize_endian_uint32_t+0x10c>
 8008e4e:	783b      	ldrb	r3, [r7, #0]
 8008e50:	70eb      	strb	r3, [r5, #3]
 8008e52:	6923      	ldr	r3, [r4, #16]
 8008e54:	68a2      	ldr	r2, [r4, #8]
 8008e56:	7da0      	ldrb	r0, [r4, #22]
 8008e58:	2104      	movs	r1, #4
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	4452      	add	r2, sl
 8008e5e:	eba3 0308 	sub.w	r3, r3, r8
 8008e62:	7561      	strb	r1, [r4, #21]
 8008e64:	60a2      	str	r2, [r4, #8]
 8008e66:	6123      	str	r3, [r4, #16]
 8008e68:	f080 0001 	eor.w	r0, r0, #1
 8008e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e70:	2104      	movs	r1, #4
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 fcd4 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8008e78:	b1a8      	cbz	r0, 8008ea6 <ucdr_deserialize_endian_uint32_t+0xce>
 8008e7a:	2e01      	cmp	r6, #1
 8008e7c:	68a3      	ldr	r3, [r4, #8]
 8008e7e:	d017      	beq.n	8008eb0 <ucdr_deserialize_endian_uint32_t+0xd8>
 8008e80:	78db      	ldrb	r3, [r3, #3]
 8008e82:	702b      	strb	r3, [r5, #0]
 8008e84:	68a3      	ldr	r3, [r4, #8]
 8008e86:	789b      	ldrb	r3, [r3, #2]
 8008e88:	706b      	strb	r3, [r5, #1]
 8008e8a:	68a3      	ldr	r3, [r4, #8]
 8008e8c:	785b      	ldrb	r3, [r3, #1]
 8008e8e:	70ab      	strb	r3, [r5, #2]
 8008e90:	68a3      	ldr	r3, [r4, #8]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	70eb      	strb	r3, [r5, #3]
 8008e96:	68a2      	ldr	r2, [r4, #8]
 8008e98:	6923      	ldr	r3, [r4, #16]
 8008e9a:	3204      	adds	r2, #4
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	2104      	movs	r1, #4
 8008ea0:	60a2      	str	r2, [r4, #8]
 8008ea2:	6123      	str	r3, [r4, #16]
 8008ea4:	7561      	strb	r1, [r4, #21]
 8008ea6:	7da0      	ldrb	r0, [r4, #22]
 8008ea8:	f080 0001 	eor.w	r0, r0, #1
 8008eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	602b      	str	r3, [r5, #0]
 8008eb4:	e7ef      	b.n	8008e96 <ucdr_deserialize_endian_uint32_t+0xbe>
 8008eb6:	68a2      	ldr	r2, [r4, #8]
 8008eb8:	6923      	ldr	r3, [r4, #16]
 8008eba:	7da0      	ldrb	r0, [r4, #22]
 8008ebc:	f884 9015 	strb.w	r9, [r4, #21]
 8008ec0:	eba2 0208 	sub.w	r2, r2, r8
 8008ec4:	eba3 0308 	sub.w	r3, r3, r8
 8008ec8:	60a2      	str	r2, [r4, #8]
 8008eca:	6123      	str	r3, [r4, #16]
 8008ecc:	f080 0001 	eor.w	r0, r0, #1
 8008ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed4:	68a3      	ldr	r3, [r4, #8]
 8008ed6:	789b      	ldrb	r3, [r3, #2]
 8008ed8:	706b      	strb	r3, [r5, #1]
 8008eda:	1cab      	adds	r3, r5, #2
 8008edc:	68a2      	ldr	r2, [r4, #8]
 8008ede:	7852      	ldrb	r2, [r2, #1]
 8008ee0:	f803 2b01 	strb.w	r2, [r3], #1
 8008ee4:	68a2      	ldr	r2, [r4, #8]
 8008ee6:	7812      	ldrb	r2, [r2, #0]
 8008ee8:	701a      	strb	r2, [r3, #0]
 8008eea:	e7b2      	b.n	8008e52 <ucdr_deserialize_endian_uint32_t+0x7a>
 8008eec:	4639      	mov	r1, r7
 8008eee:	4642      	mov	r2, r8
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	f00c fd76 	bl	80159e2 <memcpy>
 8008ef6:	68a1      	ldr	r1, [r4, #8]
 8008ef8:	4652      	mov	r2, sl
 8008efa:	eb05 0008 	add.w	r0, r5, r8
 8008efe:	f00c fd70 	bl	80159e2 <memcpy>
 8008f02:	e7a6      	b.n	8008e52 <ucdr_deserialize_endian_uint32_t+0x7a>

08008f04 <ucdr_serialize_uint64_t>:
 8008f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f08:	2108      	movs	r1, #8
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	e9cd 2300 	strd	r2, r3, [sp]
 8008f12:	f000 fcd9 	bl	80098c8 <ucdr_buffer_alignment>
 8008f16:	4601      	mov	r1, r0
 8008f18:	4620      	mov	r0, r4
 8008f1a:	7d67      	ldrb	r7, [r4, #21]
 8008f1c:	f000 fd18 	bl	8009950 <ucdr_advance_buffer>
 8008f20:	2108      	movs	r1, #8
 8008f22:	4620      	mov	r0, r4
 8008f24:	f000 fc70 	bl	8009808 <ucdr_check_buffer_available_for>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d14e      	bne.n	8008fca <ucdr_serialize_uint64_t+0xc6>
 8008f2c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008f30:	42ab      	cmp	r3, r5
 8008f32:	d945      	bls.n	8008fc0 <ucdr_serialize_uint64_t+0xbc>
 8008f34:	1b5e      	subs	r6, r3, r5
 8008f36:	60a3      	str	r3, [r4, #8]
 8008f38:	6923      	ldr	r3, [r4, #16]
 8008f3a:	f1c6 0808 	rsb	r8, r6, #8
 8008f3e:	4433      	add	r3, r6
 8008f40:	6123      	str	r3, [r4, #16]
 8008f42:	4641      	mov	r1, r8
 8008f44:	4620      	mov	r0, r4
 8008f46:	f000 fc6b 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d074      	beq.n	8009038 <ucdr_serialize_uint64_t+0x134>
 8008f4e:	7d23      	ldrb	r3, [r4, #20]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	f000 809b 	beq.w	800908c <ucdr_serialize_uint64_t+0x188>
 8008f56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008f5a:	702b      	strb	r3, [r5, #0]
 8008f5c:	2e00      	cmp	r6, #0
 8008f5e:	d078      	beq.n	8009052 <ucdr_serialize_uint64_t+0x14e>
 8008f60:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008f64:	706b      	strb	r3, [r5, #1]
 8008f66:	2e01      	cmp	r6, #1
 8008f68:	d077      	beq.n	800905a <ucdr_serialize_uint64_t+0x156>
 8008f6a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008f6e:	70ab      	strb	r3, [r5, #2]
 8008f70:	2e02      	cmp	r6, #2
 8008f72:	d076      	beq.n	8009062 <ucdr_serialize_uint64_t+0x15e>
 8008f74:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008f78:	70eb      	strb	r3, [r5, #3]
 8008f7a:	2e03      	cmp	r6, #3
 8008f7c:	d075      	beq.n	800906a <ucdr_serialize_uint64_t+0x166>
 8008f7e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008f82:	712b      	strb	r3, [r5, #4]
 8008f84:	2e04      	cmp	r6, #4
 8008f86:	d074      	beq.n	8009072 <ucdr_serialize_uint64_t+0x16e>
 8008f88:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8008f8c:	716b      	strb	r3, [r5, #5]
 8008f8e:	2e05      	cmp	r6, #5
 8008f90:	d073      	beq.n	800907a <ucdr_serialize_uint64_t+0x176>
 8008f92:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8008f96:	71ab      	strb	r3, [r5, #6]
 8008f98:	2e06      	cmp	r6, #6
 8008f9a:	d072      	beq.n	8009082 <ucdr_serialize_uint64_t+0x17e>
 8008f9c:	f89d 3000 	ldrb.w	r3, [sp]
 8008fa0:	71eb      	strb	r3, [r5, #7]
 8008fa2:	6923      	ldr	r3, [r4, #16]
 8008fa4:	68a2      	ldr	r2, [r4, #8]
 8008fa6:	7da0      	ldrb	r0, [r4, #22]
 8008fa8:	3308      	adds	r3, #8
 8008faa:	1b9e      	subs	r6, r3, r6
 8008fac:	4442      	add	r2, r8
 8008fae:	2308      	movs	r3, #8
 8008fb0:	f080 0001 	eor.w	r0, r0, #1
 8008fb4:	60a2      	str	r2, [r4, #8]
 8008fb6:	6126      	str	r6, [r4, #16]
 8008fb8:	7563      	strb	r3, [r4, #21]
 8008fba:	b002      	add	sp, #8
 8008fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc0:	2108      	movs	r1, #8
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f000 fc2c 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8008fc8:	b350      	cbz	r0, 8009020 <ucdr_serialize_uint64_t+0x11c>
 8008fca:	7d23      	ldrb	r3, [r4, #20]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d02d      	beq.n	800902c <ucdr_serialize_uint64_t+0x128>
 8008fd0:	68a3      	ldr	r3, [r4, #8]
 8008fd2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008fd6:	701a      	strb	r2, [r3, #0]
 8008fd8:	68a3      	ldr	r3, [r4, #8]
 8008fda:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008fde:	705a      	strb	r2, [r3, #1]
 8008fe0:	68a3      	ldr	r3, [r4, #8]
 8008fe2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008fe6:	709a      	strb	r2, [r3, #2]
 8008fe8:	68a3      	ldr	r3, [r4, #8]
 8008fea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008fee:	70da      	strb	r2, [r3, #3]
 8008ff0:	68a3      	ldr	r3, [r4, #8]
 8008ff2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008ff6:	711a      	strb	r2, [r3, #4]
 8008ff8:	68a3      	ldr	r3, [r4, #8]
 8008ffa:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008ffe:	715a      	strb	r2, [r3, #5]
 8009000:	68a3      	ldr	r3, [r4, #8]
 8009002:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009006:	719a      	strb	r2, [r3, #6]
 8009008:	68a3      	ldr	r3, [r4, #8]
 800900a:	f89d 2000 	ldrb.w	r2, [sp]
 800900e:	71da      	strb	r2, [r3, #7]
 8009010:	68a2      	ldr	r2, [r4, #8]
 8009012:	6923      	ldr	r3, [r4, #16]
 8009014:	3208      	adds	r2, #8
 8009016:	3308      	adds	r3, #8
 8009018:	2108      	movs	r1, #8
 800901a:	60a2      	str	r2, [r4, #8]
 800901c:	6123      	str	r3, [r4, #16]
 800901e:	7561      	strb	r1, [r4, #21]
 8009020:	7da0      	ldrb	r0, [r4, #22]
 8009022:	f080 0001 	eor.w	r0, r0, #1
 8009026:	b002      	add	sp, #8
 8009028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800902c:	466b      	mov	r3, sp
 800902e:	cb03      	ldmia	r3!, {r0, r1}
 8009030:	68a3      	ldr	r3, [r4, #8]
 8009032:	6018      	str	r0, [r3, #0]
 8009034:	6059      	str	r1, [r3, #4]
 8009036:	e7eb      	b.n	8009010 <ucdr_serialize_uint64_t+0x10c>
 8009038:	68a2      	ldr	r2, [r4, #8]
 800903a:	6923      	ldr	r3, [r4, #16]
 800903c:	7da0      	ldrb	r0, [r4, #22]
 800903e:	7567      	strb	r7, [r4, #21]
 8009040:	1b92      	subs	r2, r2, r6
 8009042:	1b9b      	subs	r3, r3, r6
 8009044:	f080 0001 	eor.w	r0, r0, #1
 8009048:	60a2      	str	r2, [r4, #8]
 800904a:	6123      	str	r3, [r4, #16]
 800904c:	b002      	add	sp, #8
 800904e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009052:	68a3      	ldr	r3, [r4, #8]
 8009054:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009058:	701a      	strb	r2, [r3, #0]
 800905a:	68a3      	ldr	r3, [r4, #8]
 800905c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009060:	701a      	strb	r2, [r3, #0]
 8009062:	68a3      	ldr	r3, [r4, #8]
 8009064:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009068:	701a      	strb	r2, [r3, #0]
 800906a:	68a3      	ldr	r3, [r4, #8]
 800906c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009070:	701a      	strb	r2, [r3, #0]
 8009072:	68a3      	ldr	r3, [r4, #8]
 8009074:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009078:	701a      	strb	r2, [r3, #0]
 800907a:	68a3      	ldr	r3, [r4, #8]
 800907c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009080:	701a      	strb	r2, [r3, #0]
 8009082:	68a3      	ldr	r3, [r4, #8]
 8009084:	f89d 2000 	ldrb.w	r2, [sp]
 8009088:	701a      	strb	r2, [r3, #0]
 800908a:	e78a      	b.n	8008fa2 <ucdr_serialize_uint64_t+0x9e>
 800908c:	4628      	mov	r0, r5
 800908e:	466d      	mov	r5, sp
 8009090:	4629      	mov	r1, r5
 8009092:	4632      	mov	r2, r6
 8009094:	f00c fca5 	bl	80159e2 <memcpy>
 8009098:	68a0      	ldr	r0, [r4, #8]
 800909a:	4642      	mov	r2, r8
 800909c:	19a9      	adds	r1, r5, r6
 800909e:	f00c fca0 	bl	80159e2 <memcpy>
 80090a2:	e77e      	b.n	8008fa2 <ucdr_serialize_uint64_t+0x9e>

080090a4 <ucdr_serialize_int16_t>:
 80090a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a8:	b082      	sub	sp, #8
 80090aa:	460b      	mov	r3, r1
 80090ac:	2102      	movs	r1, #2
 80090ae:	4604      	mov	r4, r0
 80090b0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80090b4:	f000 fc08 	bl	80098c8 <ucdr_buffer_alignment>
 80090b8:	4601      	mov	r1, r0
 80090ba:	4620      	mov	r0, r4
 80090bc:	7d67      	ldrb	r7, [r4, #21]
 80090be:	f000 fc47 	bl	8009950 <ucdr_advance_buffer>
 80090c2:	2102      	movs	r1, #2
 80090c4:	4620      	mov	r0, r4
 80090c6:	f000 fb9f 	bl	8009808 <ucdr_check_buffer_available_for>
 80090ca:	bb78      	cbnz	r0, 800912c <ucdr_serialize_int16_t+0x88>
 80090cc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80090d0:	42ab      	cmp	r3, r5
 80090d2:	d926      	bls.n	8009122 <ucdr_serialize_int16_t+0x7e>
 80090d4:	1b5e      	subs	r6, r3, r5
 80090d6:	60a3      	str	r3, [r4, #8]
 80090d8:	6923      	ldr	r3, [r4, #16]
 80090da:	f1c6 0802 	rsb	r8, r6, #2
 80090de:	4433      	add	r3, r6
 80090e0:	6123      	str	r3, [r4, #16]
 80090e2:	4641      	mov	r1, r8
 80090e4:	4620      	mov	r0, r4
 80090e6:	f000 fb9b 	bl	8009820 <ucdr_check_final_buffer_behavior>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d03b      	beq.n	8009166 <ucdr_serialize_int16_t+0xc2>
 80090ee:	7d23      	ldrb	r3, [r4, #20]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d04a      	beq.n	800918a <ucdr_serialize_int16_t+0xe6>
 80090f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80090f8:	702b      	strb	r3, [r5, #0]
 80090fa:	2e00      	cmp	r6, #0
 80090fc:	d040      	beq.n	8009180 <ucdr_serialize_int16_t+0xdc>
 80090fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009102:	706b      	strb	r3, [r5, #1]
 8009104:	6923      	ldr	r3, [r4, #16]
 8009106:	68a2      	ldr	r2, [r4, #8]
 8009108:	7da0      	ldrb	r0, [r4, #22]
 800910a:	3302      	adds	r3, #2
 800910c:	1b9e      	subs	r6, r3, r6
 800910e:	4442      	add	r2, r8
 8009110:	2302      	movs	r3, #2
 8009112:	f080 0001 	eor.w	r0, r0, #1
 8009116:	60a2      	str	r2, [r4, #8]
 8009118:	6126      	str	r6, [r4, #16]
 800911a:	7563      	strb	r3, [r4, #21]
 800911c:	b002      	add	sp, #8
 800911e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009122:	2102      	movs	r1, #2
 8009124:	4620      	mov	r0, r4
 8009126:	f000 fb7b 	bl	8009820 <ucdr_check_final_buffer_behavior>
 800912a:	b190      	cbz	r0, 8009152 <ucdr_serialize_int16_t+0xae>
 800912c:	7d23      	ldrb	r3, [r4, #20]
 800912e:	2b01      	cmp	r3, #1
 8009130:	68a3      	ldr	r3, [r4, #8]
 8009132:	d014      	beq.n	800915e <ucdr_serialize_int16_t+0xba>
 8009134:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009138:	701a      	strb	r2, [r3, #0]
 800913a:	68a3      	ldr	r3, [r4, #8]
 800913c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009140:	705a      	strb	r2, [r3, #1]
 8009142:	68a2      	ldr	r2, [r4, #8]
 8009144:	6923      	ldr	r3, [r4, #16]
 8009146:	3202      	adds	r2, #2
 8009148:	3302      	adds	r3, #2
 800914a:	2102      	movs	r1, #2
 800914c:	60a2      	str	r2, [r4, #8]
 800914e:	6123      	str	r3, [r4, #16]
 8009150:	7561      	strb	r1, [r4, #21]
 8009152:	7da0      	ldrb	r0, [r4, #22]
 8009154:	f080 0001 	eor.w	r0, r0, #1
 8009158:	b002      	add	sp, #8
 800915a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800915e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009162:	801a      	strh	r2, [r3, #0]
 8009164:	e7ed      	b.n	8009142 <ucdr_serialize_int16_t+0x9e>
 8009166:	68a2      	ldr	r2, [r4, #8]
 8009168:	6923      	ldr	r3, [r4, #16]
 800916a:	7da0      	ldrb	r0, [r4, #22]
 800916c:	7567      	strb	r7, [r4, #21]
 800916e:	1b92      	subs	r2, r2, r6
 8009170:	1b9b      	subs	r3, r3, r6
 8009172:	f080 0001 	eor.w	r0, r0, #1
 8009176:	60a2      	str	r2, [r4, #8]
 8009178:	6123      	str	r3, [r4, #16]
 800917a:	b002      	add	sp, #8
 800917c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009180:	68a3      	ldr	r3, [r4, #8]
 8009182:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009186:	701a      	strb	r2, [r3, #0]
 8009188:	e7bc      	b.n	8009104 <ucdr_serialize_int16_t+0x60>
 800918a:	4628      	mov	r0, r5
 800918c:	f10d 0506 	add.w	r5, sp, #6
 8009190:	4629      	mov	r1, r5
 8009192:	4632      	mov	r2, r6
 8009194:	f00c fc25 	bl	80159e2 <memcpy>
 8009198:	68a0      	ldr	r0, [r4, #8]
 800919a:	4642      	mov	r2, r8
 800919c:	19a9      	adds	r1, r5, r6
 800919e:	f00c fc20 	bl	80159e2 <memcpy>
 80091a2:	e7af      	b.n	8009104 <ucdr_serialize_int16_t+0x60>

080091a4 <ucdr_deserialize_int16_t>:
 80091a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091a8:	460d      	mov	r5, r1
 80091aa:	2102      	movs	r1, #2
 80091ac:	4604      	mov	r4, r0
 80091ae:	f000 fb8b 	bl	80098c8 <ucdr_buffer_alignment>
 80091b2:	4601      	mov	r1, r0
 80091b4:	4620      	mov	r0, r4
 80091b6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80091ba:	f000 fbc9 	bl	8009950 <ucdr_advance_buffer>
 80091be:	2102      	movs	r1, #2
 80091c0:	4620      	mov	r0, r4
 80091c2:	f000 fb21 	bl	8009808 <ucdr_check_buffer_available_for>
 80091c6:	bb60      	cbnz	r0, 8009222 <ucdr_deserialize_int16_t+0x7e>
 80091c8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80091cc:	42be      	cmp	r6, r7
 80091ce:	d923      	bls.n	8009218 <ucdr_deserialize_int16_t+0x74>
 80091d0:	6923      	ldr	r3, [r4, #16]
 80091d2:	60a6      	str	r6, [r4, #8]
 80091d4:	1bf6      	subs	r6, r6, r7
 80091d6:	4433      	add	r3, r6
 80091d8:	f1c6 0902 	rsb	r9, r6, #2
 80091dc:	6123      	str	r3, [r4, #16]
 80091de:	4649      	mov	r1, r9
 80091e0:	4620      	mov	r0, r4
 80091e2:	f000 fb1d 	bl	8009820 <ucdr_check_final_buffer_behavior>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	d034      	beq.n	8009254 <ucdr_deserialize_int16_t+0xb0>
 80091ea:	7d23      	ldrb	r3, [r4, #20]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d042      	beq.n	8009276 <ucdr_deserialize_int16_t+0xd2>
 80091f0:	787b      	ldrb	r3, [r7, #1]
 80091f2:	702b      	strb	r3, [r5, #0]
 80091f4:	2e00      	cmp	r6, #0
 80091f6:	d03a      	beq.n	800926e <ucdr_deserialize_int16_t+0xca>
 80091f8:	783b      	ldrb	r3, [r7, #0]
 80091fa:	706b      	strb	r3, [r5, #1]
 80091fc:	6923      	ldr	r3, [r4, #16]
 80091fe:	68a2      	ldr	r2, [r4, #8]
 8009200:	7da0      	ldrb	r0, [r4, #22]
 8009202:	2102      	movs	r1, #2
 8009204:	3302      	adds	r3, #2
 8009206:	444a      	add	r2, r9
 8009208:	1b9b      	subs	r3, r3, r6
 800920a:	7561      	strb	r1, [r4, #21]
 800920c:	60a2      	str	r2, [r4, #8]
 800920e:	6123      	str	r3, [r4, #16]
 8009210:	f080 0001 	eor.w	r0, r0, #1
 8009214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009218:	2102      	movs	r1, #2
 800921a:	4620      	mov	r0, r4
 800921c:	f000 fb00 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8009220:	b180      	cbz	r0, 8009244 <ucdr_deserialize_int16_t+0xa0>
 8009222:	7d23      	ldrb	r3, [r4, #20]
 8009224:	2b01      	cmp	r3, #1
 8009226:	68a3      	ldr	r3, [r4, #8]
 8009228:	d011      	beq.n	800924e <ucdr_deserialize_int16_t+0xaa>
 800922a:	785b      	ldrb	r3, [r3, #1]
 800922c:	702b      	strb	r3, [r5, #0]
 800922e:	68a3      	ldr	r3, [r4, #8]
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	706b      	strb	r3, [r5, #1]
 8009234:	68a2      	ldr	r2, [r4, #8]
 8009236:	6923      	ldr	r3, [r4, #16]
 8009238:	3202      	adds	r2, #2
 800923a:	3302      	adds	r3, #2
 800923c:	2102      	movs	r1, #2
 800923e:	60a2      	str	r2, [r4, #8]
 8009240:	6123      	str	r3, [r4, #16]
 8009242:	7561      	strb	r1, [r4, #21]
 8009244:	7da0      	ldrb	r0, [r4, #22]
 8009246:	f080 0001 	eor.w	r0, r0, #1
 800924a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800924e:	881b      	ldrh	r3, [r3, #0]
 8009250:	802b      	strh	r3, [r5, #0]
 8009252:	e7ef      	b.n	8009234 <ucdr_deserialize_int16_t+0x90>
 8009254:	68a2      	ldr	r2, [r4, #8]
 8009256:	6923      	ldr	r3, [r4, #16]
 8009258:	7da0      	ldrb	r0, [r4, #22]
 800925a:	f884 8015 	strb.w	r8, [r4, #21]
 800925e:	1b92      	subs	r2, r2, r6
 8009260:	1b9b      	subs	r3, r3, r6
 8009262:	60a2      	str	r2, [r4, #8]
 8009264:	6123      	str	r3, [r4, #16]
 8009266:	f080 0001 	eor.w	r0, r0, #1
 800926a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800926e:	68a3      	ldr	r3, [r4, #8]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	706b      	strb	r3, [r5, #1]
 8009274:	e7c2      	b.n	80091fc <ucdr_deserialize_int16_t+0x58>
 8009276:	4639      	mov	r1, r7
 8009278:	4632      	mov	r2, r6
 800927a:	4628      	mov	r0, r5
 800927c:	f00c fbb1 	bl	80159e2 <memcpy>
 8009280:	68a1      	ldr	r1, [r4, #8]
 8009282:	464a      	mov	r2, r9
 8009284:	19a8      	adds	r0, r5, r6
 8009286:	f00c fbac 	bl	80159e2 <memcpy>
 800928a:	e7b7      	b.n	80091fc <ucdr_deserialize_int16_t+0x58>

0800928c <ucdr_serialize_int32_t>:
 800928c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009290:	b082      	sub	sp, #8
 8009292:	4604      	mov	r4, r0
 8009294:	9101      	str	r1, [sp, #4]
 8009296:	2104      	movs	r1, #4
 8009298:	f000 fb16 	bl	80098c8 <ucdr_buffer_alignment>
 800929c:	4601      	mov	r1, r0
 800929e:	4620      	mov	r0, r4
 80092a0:	7d67      	ldrb	r7, [r4, #21]
 80092a2:	f000 fb55 	bl	8009950 <ucdr_advance_buffer>
 80092a6:	2104      	movs	r1, #4
 80092a8:	4620      	mov	r0, r4
 80092aa:	f000 faad 	bl	8009808 <ucdr_check_buffer_available_for>
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d139      	bne.n	8009326 <ucdr_serialize_int32_t+0x9a>
 80092b2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80092b6:	42ab      	cmp	r3, r5
 80092b8:	d930      	bls.n	800931c <ucdr_serialize_int32_t+0x90>
 80092ba:	1b5e      	subs	r6, r3, r5
 80092bc:	60a3      	str	r3, [r4, #8]
 80092be:	6923      	ldr	r3, [r4, #16]
 80092c0:	f1c6 0804 	rsb	r8, r6, #4
 80092c4:	4433      	add	r3, r6
 80092c6:	6123      	str	r3, [r4, #16]
 80092c8:	4641      	mov	r1, r8
 80092ca:	4620      	mov	r0, r4
 80092cc:	f000 faa8 	bl	8009820 <ucdr_check_final_buffer_behavior>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d04c      	beq.n	800936e <ucdr_serialize_int32_t+0xe2>
 80092d4:	7d23      	ldrb	r3, [r4, #20]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d063      	beq.n	80093a2 <ucdr_serialize_int32_t+0x116>
 80092da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80092de:	702b      	strb	r3, [r5, #0]
 80092e0:	2e00      	cmp	r6, #0
 80092e2:	d051      	beq.n	8009388 <ucdr_serialize_int32_t+0xfc>
 80092e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80092e8:	706b      	strb	r3, [r5, #1]
 80092ea:	2e01      	cmp	r6, #1
 80092ec:	d050      	beq.n	8009390 <ucdr_serialize_int32_t+0x104>
 80092ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80092f2:	70ab      	strb	r3, [r5, #2]
 80092f4:	2e02      	cmp	r6, #2
 80092f6:	d04f      	beq.n	8009398 <ucdr_serialize_int32_t+0x10c>
 80092f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80092fc:	70eb      	strb	r3, [r5, #3]
 80092fe:	6923      	ldr	r3, [r4, #16]
 8009300:	68a2      	ldr	r2, [r4, #8]
 8009302:	7da0      	ldrb	r0, [r4, #22]
 8009304:	3304      	adds	r3, #4
 8009306:	1b9e      	subs	r6, r3, r6
 8009308:	4442      	add	r2, r8
 800930a:	2304      	movs	r3, #4
 800930c:	f080 0001 	eor.w	r0, r0, #1
 8009310:	60a2      	str	r2, [r4, #8]
 8009312:	6126      	str	r6, [r4, #16]
 8009314:	7563      	strb	r3, [r4, #21]
 8009316:	b002      	add	sp, #8
 8009318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800931c:	2104      	movs	r1, #4
 800931e:	4620      	mov	r0, r4
 8009320:	f000 fa7e 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8009324:	b1d0      	cbz	r0, 800935c <ucdr_serialize_int32_t+0xd0>
 8009326:	7d23      	ldrb	r3, [r4, #20]
 8009328:	2b01      	cmp	r3, #1
 800932a:	68a3      	ldr	r3, [r4, #8]
 800932c:	d01c      	beq.n	8009368 <ucdr_serialize_int32_t+0xdc>
 800932e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009332:	701a      	strb	r2, [r3, #0]
 8009334:	68a3      	ldr	r3, [r4, #8]
 8009336:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800933a:	705a      	strb	r2, [r3, #1]
 800933c:	68a3      	ldr	r3, [r4, #8]
 800933e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009342:	709a      	strb	r2, [r3, #2]
 8009344:	68a3      	ldr	r3, [r4, #8]
 8009346:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800934a:	70da      	strb	r2, [r3, #3]
 800934c:	68a2      	ldr	r2, [r4, #8]
 800934e:	6923      	ldr	r3, [r4, #16]
 8009350:	3204      	adds	r2, #4
 8009352:	3304      	adds	r3, #4
 8009354:	2104      	movs	r1, #4
 8009356:	60a2      	str	r2, [r4, #8]
 8009358:	6123      	str	r3, [r4, #16]
 800935a:	7561      	strb	r1, [r4, #21]
 800935c:	7da0      	ldrb	r0, [r4, #22]
 800935e:	f080 0001 	eor.w	r0, r0, #1
 8009362:	b002      	add	sp, #8
 8009364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009368:	9a01      	ldr	r2, [sp, #4]
 800936a:	601a      	str	r2, [r3, #0]
 800936c:	e7ee      	b.n	800934c <ucdr_serialize_int32_t+0xc0>
 800936e:	68a2      	ldr	r2, [r4, #8]
 8009370:	6923      	ldr	r3, [r4, #16]
 8009372:	7da0      	ldrb	r0, [r4, #22]
 8009374:	7567      	strb	r7, [r4, #21]
 8009376:	1b92      	subs	r2, r2, r6
 8009378:	1b9b      	subs	r3, r3, r6
 800937a:	f080 0001 	eor.w	r0, r0, #1
 800937e:	60a2      	str	r2, [r4, #8]
 8009380:	6123      	str	r3, [r4, #16]
 8009382:	b002      	add	sp, #8
 8009384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009388:	68a3      	ldr	r3, [r4, #8]
 800938a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800938e:	701a      	strb	r2, [r3, #0]
 8009390:	68a3      	ldr	r3, [r4, #8]
 8009392:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009396:	701a      	strb	r2, [r3, #0]
 8009398:	68a3      	ldr	r3, [r4, #8]
 800939a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800939e:	701a      	strb	r2, [r3, #0]
 80093a0:	e7ad      	b.n	80092fe <ucdr_serialize_int32_t+0x72>
 80093a2:	4628      	mov	r0, r5
 80093a4:	ad01      	add	r5, sp, #4
 80093a6:	4629      	mov	r1, r5
 80093a8:	4632      	mov	r2, r6
 80093aa:	f00c fb1a 	bl	80159e2 <memcpy>
 80093ae:	68a0      	ldr	r0, [r4, #8]
 80093b0:	4642      	mov	r2, r8
 80093b2:	19a9      	adds	r1, r5, r6
 80093b4:	f00c fb15 	bl	80159e2 <memcpy>
 80093b8:	e7a1      	b.n	80092fe <ucdr_serialize_int32_t+0x72>
 80093ba:	bf00      	nop

080093bc <ucdr_deserialize_int32_t>:
 80093bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093c0:	460d      	mov	r5, r1
 80093c2:	2104      	movs	r1, #4
 80093c4:	4604      	mov	r4, r0
 80093c6:	f000 fa7f 	bl	80098c8 <ucdr_buffer_alignment>
 80093ca:	4601      	mov	r1, r0
 80093cc:	4620      	mov	r0, r4
 80093ce:	f894 8015 	ldrb.w	r8, [r4, #21]
 80093d2:	f000 fabd 	bl	8009950 <ucdr_advance_buffer>
 80093d6:	2104      	movs	r1, #4
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 fa15 	bl	8009808 <ucdr_check_buffer_available_for>
 80093de:	2800      	cmp	r0, #0
 80093e0:	d138      	bne.n	8009454 <ucdr_deserialize_int32_t+0x98>
 80093e2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80093e6:	42b7      	cmp	r7, r6
 80093e8:	d92f      	bls.n	800944a <ucdr_deserialize_int32_t+0x8e>
 80093ea:	6923      	ldr	r3, [r4, #16]
 80093ec:	60a7      	str	r7, [r4, #8]
 80093ee:	1bbf      	subs	r7, r7, r6
 80093f0:	443b      	add	r3, r7
 80093f2:	f1c7 0904 	rsb	r9, r7, #4
 80093f6:	6123      	str	r3, [r4, #16]
 80093f8:	4649      	mov	r1, r9
 80093fa:	4620      	mov	r0, r4
 80093fc:	f000 fa10 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8009400:	2800      	cmp	r0, #0
 8009402:	d046      	beq.n	8009492 <ucdr_deserialize_int32_t+0xd6>
 8009404:	7d23      	ldrb	r3, [r4, #20]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d05c      	beq.n	80094c4 <ucdr_deserialize_int32_t+0x108>
 800940a:	78f3      	ldrb	r3, [r6, #3]
 800940c:	702b      	strb	r3, [r5, #0]
 800940e:	2f00      	cmp	r7, #0
 8009410:	d04c      	beq.n	80094ac <ucdr_deserialize_int32_t+0xf0>
 8009412:	78b3      	ldrb	r3, [r6, #2]
 8009414:	706b      	strb	r3, [r5, #1]
 8009416:	2f01      	cmp	r7, #1
 8009418:	f105 0302 	add.w	r3, r5, #2
 800941c:	d04a      	beq.n	80094b4 <ucdr_deserialize_int32_t+0xf8>
 800941e:	7873      	ldrb	r3, [r6, #1]
 8009420:	70ab      	strb	r3, [r5, #2]
 8009422:	2f02      	cmp	r7, #2
 8009424:	f105 0303 	add.w	r3, r5, #3
 8009428:	d048      	beq.n	80094bc <ucdr_deserialize_int32_t+0x100>
 800942a:	7833      	ldrb	r3, [r6, #0]
 800942c:	70eb      	strb	r3, [r5, #3]
 800942e:	6923      	ldr	r3, [r4, #16]
 8009430:	68a2      	ldr	r2, [r4, #8]
 8009432:	7da0      	ldrb	r0, [r4, #22]
 8009434:	2104      	movs	r1, #4
 8009436:	3304      	adds	r3, #4
 8009438:	444a      	add	r2, r9
 800943a:	1bdb      	subs	r3, r3, r7
 800943c:	7561      	strb	r1, [r4, #21]
 800943e:	60a2      	str	r2, [r4, #8]
 8009440:	6123      	str	r3, [r4, #16]
 8009442:	f080 0001 	eor.w	r0, r0, #1
 8009446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800944a:	2104      	movs	r1, #4
 800944c:	4620      	mov	r0, r4
 800944e:	f000 f9e7 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8009452:	b1b0      	cbz	r0, 8009482 <ucdr_deserialize_int32_t+0xc6>
 8009454:	7d23      	ldrb	r3, [r4, #20]
 8009456:	2b01      	cmp	r3, #1
 8009458:	68a3      	ldr	r3, [r4, #8]
 800945a:	d017      	beq.n	800948c <ucdr_deserialize_int32_t+0xd0>
 800945c:	78db      	ldrb	r3, [r3, #3]
 800945e:	702b      	strb	r3, [r5, #0]
 8009460:	68a3      	ldr	r3, [r4, #8]
 8009462:	789b      	ldrb	r3, [r3, #2]
 8009464:	706b      	strb	r3, [r5, #1]
 8009466:	68a3      	ldr	r3, [r4, #8]
 8009468:	785b      	ldrb	r3, [r3, #1]
 800946a:	70ab      	strb	r3, [r5, #2]
 800946c:	68a3      	ldr	r3, [r4, #8]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	70eb      	strb	r3, [r5, #3]
 8009472:	68a2      	ldr	r2, [r4, #8]
 8009474:	6923      	ldr	r3, [r4, #16]
 8009476:	3204      	adds	r2, #4
 8009478:	3304      	adds	r3, #4
 800947a:	2104      	movs	r1, #4
 800947c:	60a2      	str	r2, [r4, #8]
 800947e:	6123      	str	r3, [r4, #16]
 8009480:	7561      	strb	r1, [r4, #21]
 8009482:	7da0      	ldrb	r0, [r4, #22]
 8009484:	f080 0001 	eor.w	r0, r0, #1
 8009488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	602b      	str	r3, [r5, #0]
 8009490:	e7ef      	b.n	8009472 <ucdr_deserialize_int32_t+0xb6>
 8009492:	68a2      	ldr	r2, [r4, #8]
 8009494:	6923      	ldr	r3, [r4, #16]
 8009496:	7da0      	ldrb	r0, [r4, #22]
 8009498:	f884 8015 	strb.w	r8, [r4, #21]
 800949c:	1bd2      	subs	r2, r2, r7
 800949e:	1bdb      	subs	r3, r3, r7
 80094a0:	60a2      	str	r2, [r4, #8]
 80094a2:	6123      	str	r3, [r4, #16]
 80094a4:	f080 0001 	eor.w	r0, r0, #1
 80094a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ac:	68a3      	ldr	r3, [r4, #8]
 80094ae:	789b      	ldrb	r3, [r3, #2]
 80094b0:	706b      	strb	r3, [r5, #1]
 80094b2:	1cab      	adds	r3, r5, #2
 80094b4:	68a2      	ldr	r2, [r4, #8]
 80094b6:	7852      	ldrb	r2, [r2, #1]
 80094b8:	f803 2b01 	strb.w	r2, [r3], #1
 80094bc:	68a2      	ldr	r2, [r4, #8]
 80094be:	7812      	ldrb	r2, [r2, #0]
 80094c0:	701a      	strb	r2, [r3, #0]
 80094c2:	e7b4      	b.n	800942e <ucdr_deserialize_int32_t+0x72>
 80094c4:	4631      	mov	r1, r6
 80094c6:	463a      	mov	r2, r7
 80094c8:	4628      	mov	r0, r5
 80094ca:	f00c fa8a 	bl	80159e2 <memcpy>
 80094ce:	68a1      	ldr	r1, [r4, #8]
 80094d0:	464a      	mov	r2, r9
 80094d2:	19e8      	adds	r0, r5, r7
 80094d4:	f00c fa85 	bl	80159e2 <memcpy>
 80094d8:	e7a9      	b.n	800942e <ucdr_deserialize_int32_t+0x72>
 80094da:	bf00      	nop

080094dc <ucdr_serialize_double>:
 80094dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e0:	2108      	movs	r1, #8
 80094e2:	b082      	sub	sp, #8
 80094e4:	4604      	mov	r4, r0
 80094e6:	ed8d 0b00 	vstr	d0, [sp]
 80094ea:	f000 f9ed 	bl	80098c8 <ucdr_buffer_alignment>
 80094ee:	4601      	mov	r1, r0
 80094f0:	4620      	mov	r0, r4
 80094f2:	7d67      	ldrb	r7, [r4, #21]
 80094f4:	f000 fa2c 	bl	8009950 <ucdr_advance_buffer>
 80094f8:	2108      	movs	r1, #8
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 f984 	bl	8009808 <ucdr_check_buffer_available_for>
 8009500:	2800      	cmp	r0, #0
 8009502:	d14e      	bne.n	80095a2 <ucdr_serialize_double+0xc6>
 8009504:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009508:	42ab      	cmp	r3, r5
 800950a:	d945      	bls.n	8009598 <ucdr_serialize_double+0xbc>
 800950c:	1b5e      	subs	r6, r3, r5
 800950e:	60a3      	str	r3, [r4, #8]
 8009510:	6923      	ldr	r3, [r4, #16]
 8009512:	f1c6 0808 	rsb	r8, r6, #8
 8009516:	4433      	add	r3, r6
 8009518:	6123      	str	r3, [r4, #16]
 800951a:	4641      	mov	r1, r8
 800951c:	4620      	mov	r0, r4
 800951e:	f000 f97f 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8009522:	2800      	cmp	r0, #0
 8009524:	d074      	beq.n	8009610 <ucdr_serialize_double+0x134>
 8009526:	7d23      	ldrb	r3, [r4, #20]
 8009528:	2b01      	cmp	r3, #1
 800952a:	f000 809b 	beq.w	8009664 <ucdr_serialize_double+0x188>
 800952e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009532:	702b      	strb	r3, [r5, #0]
 8009534:	2e00      	cmp	r6, #0
 8009536:	d078      	beq.n	800962a <ucdr_serialize_double+0x14e>
 8009538:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800953c:	706b      	strb	r3, [r5, #1]
 800953e:	2e01      	cmp	r6, #1
 8009540:	d077      	beq.n	8009632 <ucdr_serialize_double+0x156>
 8009542:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009546:	70ab      	strb	r3, [r5, #2]
 8009548:	2e02      	cmp	r6, #2
 800954a:	d076      	beq.n	800963a <ucdr_serialize_double+0x15e>
 800954c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009550:	70eb      	strb	r3, [r5, #3]
 8009552:	2e03      	cmp	r6, #3
 8009554:	d075      	beq.n	8009642 <ucdr_serialize_double+0x166>
 8009556:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800955a:	712b      	strb	r3, [r5, #4]
 800955c:	2e04      	cmp	r6, #4
 800955e:	d074      	beq.n	800964a <ucdr_serialize_double+0x16e>
 8009560:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009564:	716b      	strb	r3, [r5, #5]
 8009566:	2e05      	cmp	r6, #5
 8009568:	d073      	beq.n	8009652 <ucdr_serialize_double+0x176>
 800956a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800956e:	71ab      	strb	r3, [r5, #6]
 8009570:	2e06      	cmp	r6, #6
 8009572:	d072      	beq.n	800965a <ucdr_serialize_double+0x17e>
 8009574:	f89d 3000 	ldrb.w	r3, [sp]
 8009578:	71eb      	strb	r3, [r5, #7]
 800957a:	6923      	ldr	r3, [r4, #16]
 800957c:	68a2      	ldr	r2, [r4, #8]
 800957e:	7da0      	ldrb	r0, [r4, #22]
 8009580:	3308      	adds	r3, #8
 8009582:	1b9e      	subs	r6, r3, r6
 8009584:	4442      	add	r2, r8
 8009586:	2308      	movs	r3, #8
 8009588:	f080 0001 	eor.w	r0, r0, #1
 800958c:	60a2      	str	r2, [r4, #8]
 800958e:	6126      	str	r6, [r4, #16]
 8009590:	7563      	strb	r3, [r4, #21]
 8009592:	b002      	add	sp, #8
 8009594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009598:	2108      	movs	r1, #8
 800959a:	4620      	mov	r0, r4
 800959c:	f000 f940 	bl	8009820 <ucdr_check_final_buffer_behavior>
 80095a0:	b350      	cbz	r0, 80095f8 <ucdr_serialize_double+0x11c>
 80095a2:	7d23      	ldrb	r3, [r4, #20]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d02d      	beq.n	8009604 <ucdr_serialize_double+0x128>
 80095a8:	68a3      	ldr	r3, [r4, #8]
 80095aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80095ae:	701a      	strb	r2, [r3, #0]
 80095b0:	68a3      	ldr	r3, [r4, #8]
 80095b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80095b6:	705a      	strb	r2, [r3, #1]
 80095b8:	68a3      	ldr	r3, [r4, #8]
 80095ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80095be:	709a      	strb	r2, [r3, #2]
 80095c0:	68a3      	ldr	r3, [r4, #8]
 80095c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80095c6:	70da      	strb	r2, [r3, #3]
 80095c8:	68a3      	ldr	r3, [r4, #8]
 80095ca:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80095ce:	711a      	strb	r2, [r3, #4]
 80095d0:	68a3      	ldr	r3, [r4, #8]
 80095d2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80095d6:	715a      	strb	r2, [r3, #5]
 80095d8:	68a3      	ldr	r3, [r4, #8]
 80095da:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80095de:	719a      	strb	r2, [r3, #6]
 80095e0:	68a3      	ldr	r3, [r4, #8]
 80095e2:	f89d 2000 	ldrb.w	r2, [sp]
 80095e6:	71da      	strb	r2, [r3, #7]
 80095e8:	68a2      	ldr	r2, [r4, #8]
 80095ea:	6923      	ldr	r3, [r4, #16]
 80095ec:	3208      	adds	r2, #8
 80095ee:	3308      	adds	r3, #8
 80095f0:	2108      	movs	r1, #8
 80095f2:	60a2      	str	r2, [r4, #8]
 80095f4:	6123      	str	r3, [r4, #16]
 80095f6:	7561      	strb	r1, [r4, #21]
 80095f8:	7da0      	ldrb	r0, [r4, #22]
 80095fa:	f080 0001 	eor.w	r0, r0, #1
 80095fe:	b002      	add	sp, #8
 8009600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009604:	466b      	mov	r3, sp
 8009606:	cb03      	ldmia	r3!, {r0, r1}
 8009608:	68a3      	ldr	r3, [r4, #8]
 800960a:	6018      	str	r0, [r3, #0]
 800960c:	6059      	str	r1, [r3, #4]
 800960e:	e7eb      	b.n	80095e8 <ucdr_serialize_double+0x10c>
 8009610:	68a2      	ldr	r2, [r4, #8]
 8009612:	6923      	ldr	r3, [r4, #16]
 8009614:	7da0      	ldrb	r0, [r4, #22]
 8009616:	7567      	strb	r7, [r4, #21]
 8009618:	1b92      	subs	r2, r2, r6
 800961a:	1b9b      	subs	r3, r3, r6
 800961c:	f080 0001 	eor.w	r0, r0, #1
 8009620:	60a2      	str	r2, [r4, #8]
 8009622:	6123      	str	r3, [r4, #16]
 8009624:	b002      	add	sp, #8
 8009626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800962a:	68a3      	ldr	r3, [r4, #8]
 800962c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009630:	701a      	strb	r2, [r3, #0]
 8009632:	68a3      	ldr	r3, [r4, #8]
 8009634:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009638:	701a      	strb	r2, [r3, #0]
 800963a:	68a3      	ldr	r3, [r4, #8]
 800963c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009640:	701a      	strb	r2, [r3, #0]
 8009642:	68a3      	ldr	r3, [r4, #8]
 8009644:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009648:	701a      	strb	r2, [r3, #0]
 800964a:	68a3      	ldr	r3, [r4, #8]
 800964c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009650:	701a      	strb	r2, [r3, #0]
 8009652:	68a3      	ldr	r3, [r4, #8]
 8009654:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009658:	701a      	strb	r2, [r3, #0]
 800965a:	68a3      	ldr	r3, [r4, #8]
 800965c:	f89d 2000 	ldrb.w	r2, [sp]
 8009660:	701a      	strb	r2, [r3, #0]
 8009662:	e78a      	b.n	800957a <ucdr_serialize_double+0x9e>
 8009664:	4628      	mov	r0, r5
 8009666:	466d      	mov	r5, sp
 8009668:	4629      	mov	r1, r5
 800966a:	4632      	mov	r2, r6
 800966c:	f00c f9b9 	bl	80159e2 <memcpy>
 8009670:	68a0      	ldr	r0, [r4, #8]
 8009672:	4642      	mov	r2, r8
 8009674:	19a9      	adds	r1, r5, r6
 8009676:	f00c f9b4 	bl	80159e2 <memcpy>
 800967a:	e77e      	b.n	800957a <ucdr_serialize_double+0x9e>

0800967c <ucdr_deserialize_double>:
 800967c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009680:	460d      	mov	r5, r1
 8009682:	2108      	movs	r1, #8
 8009684:	4604      	mov	r4, r0
 8009686:	f000 f91f 	bl	80098c8 <ucdr_buffer_alignment>
 800968a:	4601      	mov	r1, r0
 800968c:	4620      	mov	r0, r4
 800968e:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009692:	f000 f95d 	bl	8009950 <ucdr_advance_buffer>
 8009696:	2108      	movs	r1, #8
 8009698:	4620      	mov	r0, r4
 800969a:	f000 f8b5 	bl	8009808 <ucdr_check_buffer_available_for>
 800969e:	2800      	cmp	r0, #0
 80096a0:	d151      	bne.n	8009746 <ucdr_deserialize_double+0xca>
 80096a2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80096a6:	42be      	cmp	r6, r7
 80096a8:	d948      	bls.n	800973c <ucdr_deserialize_double+0xc0>
 80096aa:	6923      	ldr	r3, [r4, #16]
 80096ac:	60a6      	str	r6, [r4, #8]
 80096ae:	1bf6      	subs	r6, r6, r7
 80096b0:	4433      	add	r3, r6
 80096b2:	f1c6 0808 	rsb	r8, r6, #8
 80096b6:	6123      	str	r3, [r4, #16]
 80096b8:	4641      	mov	r1, r8
 80096ba:	4620      	mov	r0, r4
 80096bc:	f000 f8b0 	bl	8009820 <ucdr_check_final_buffer_behavior>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d06d      	beq.n	80097a0 <ucdr_deserialize_double+0x124>
 80096c4:	7d23      	ldrb	r3, [r4, #20]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	f000 8093 	beq.w	80097f2 <ucdr_deserialize_double+0x176>
 80096cc:	79fb      	ldrb	r3, [r7, #7]
 80096ce:	702b      	strb	r3, [r5, #0]
 80096d0:	2e00      	cmp	r6, #0
 80096d2:	d072      	beq.n	80097ba <ucdr_deserialize_double+0x13e>
 80096d4:	79bb      	ldrb	r3, [r7, #6]
 80096d6:	706b      	strb	r3, [r5, #1]
 80096d8:	2e01      	cmp	r6, #1
 80096da:	f105 0302 	add.w	r3, r5, #2
 80096de:	d070      	beq.n	80097c2 <ucdr_deserialize_double+0x146>
 80096e0:	797b      	ldrb	r3, [r7, #5]
 80096e2:	70ab      	strb	r3, [r5, #2]
 80096e4:	2e02      	cmp	r6, #2
 80096e6:	f105 0303 	add.w	r3, r5, #3
 80096ea:	d06e      	beq.n	80097ca <ucdr_deserialize_double+0x14e>
 80096ec:	793b      	ldrb	r3, [r7, #4]
 80096ee:	70eb      	strb	r3, [r5, #3]
 80096f0:	2e03      	cmp	r6, #3
 80096f2:	f105 0304 	add.w	r3, r5, #4
 80096f6:	d06c      	beq.n	80097d2 <ucdr_deserialize_double+0x156>
 80096f8:	78fb      	ldrb	r3, [r7, #3]
 80096fa:	712b      	strb	r3, [r5, #4]
 80096fc:	2e04      	cmp	r6, #4
 80096fe:	f105 0305 	add.w	r3, r5, #5
 8009702:	d06a      	beq.n	80097da <ucdr_deserialize_double+0x15e>
 8009704:	78bb      	ldrb	r3, [r7, #2]
 8009706:	716b      	strb	r3, [r5, #5]
 8009708:	2e05      	cmp	r6, #5
 800970a:	f105 0306 	add.w	r3, r5, #6
 800970e:	d068      	beq.n	80097e2 <ucdr_deserialize_double+0x166>
 8009710:	787b      	ldrb	r3, [r7, #1]
 8009712:	71ab      	strb	r3, [r5, #6]
 8009714:	2e06      	cmp	r6, #6
 8009716:	f105 0307 	add.w	r3, r5, #7
 800971a:	d066      	beq.n	80097ea <ucdr_deserialize_double+0x16e>
 800971c:	783b      	ldrb	r3, [r7, #0]
 800971e:	71eb      	strb	r3, [r5, #7]
 8009720:	6923      	ldr	r3, [r4, #16]
 8009722:	68a2      	ldr	r2, [r4, #8]
 8009724:	7da0      	ldrb	r0, [r4, #22]
 8009726:	3308      	adds	r3, #8
 8009728:	1b9e      	subs	r6, r3, r6
 800972a:	2308      	movs	r3, #8
 800972c:	4442      	add	r2, r8
 800972e:	7563      	strb	r3, [r4, #21]
 8009730:	60a2      	str	r2, [r4, #8]
 8009732:	6126      	str	r6, [r4, #16]
 8009734:	f080 0001 	eor.w	r0, r0, #1
 8009738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800973c:	2108      	movs	r1, #8
 800973e:	4620      	mov	r0, r4
 8009740:	f000 f86e 	bl	8009820 <ucdr_check_final_buffer_behavior>
 8009744:	b310      	cbz	r0, 800978c <ucdr_deserialize_double+0x110>
 8009746:	7d23      	ldrb	r3, [r4, #20]
 8009748:	2b01      	cmp	r3, #1
 800974a:	68a3      	ldr	r3, [r4, #8]
 800974c:	d023      	beq.n	8009796 <ucdr_deserialize_double+0x11a>
 800974e:	79db      	ldrb	r3, [r3, #7]
 8009750:	702b      	strb	r3, [r5, #0]
 8009752:	68a3      	ldr	r3, [r4, #8]
 8009754:	799b      	ldrb	r3, [r3, #6]
 8009756:	706b      	strb	r3, [r5, #1]
 8009758:	68a3      	ldr	r3, [r4, #8]
 800975a:	795b      	ldrb	r3, [r3, #5]
 800975c:	70ab      	strb	r3, [r5, #2]
 800975e:	68a3      	ldr	r3, [r4, #8]
 8009760:	791b      	ldrb	r3, [r3, #4]
 8009762:	70eb      	strb	r3, [r5, #3]
 8009764:	68a3      	ldr	r3, [r4, #8]
 8009766:	78db      	ldrb	r3, [r3, #3]
 8009768:	712b      	strb	r3, [r5, #4]
 800976a:	68a3      	ldr	r3, [r4, #8]
 800976c:	789b      	ldrb	r3, [r3, #2]
 800976e:	716b      	strb	r3, [r5, #5]
 8009770:	68a3      	ldr	r3, [r4, #8]
 8009772:	785b      	ldrb	r3, [r3, #1]
 8009774:	71ab      	strb	r3, [r5, #6]
 8009776:	68a3      	ldr	r3, [r4, #8]
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	71eb      	strb	r3, [r5, #7]
 800977c:	68a2      	ldr	r2, [r4, #8]
 800977e:	6923      	ldr	r3, [r4, #16]
 8009780:	3208      	adds	r2, #8
 8009782:	3308      	adds	r3, #8
 8009784:	2108      	movs	r1, #8
 8009786:	60a2      	str	r2, [r4, #8]
 8009788:	6123      	str	r3, [r4, #16]
 800978a:	7561      	strb	r1, [r4, #21]
 800978c:	7da0      	ldrb	r0, [r4, #22]
 800978e:	f080 0001 	eor.w	r0, r0, #1
 8009792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	606b      	str	r3, [r5, #4]
 800979c:	602a      	str	r2, [r5, #0]
 800979e:	e7ed      	b.n	800977c <ucdr_deserialize_double+0x100>
 80097a0:	68a2      	ldr	r2, [r4, #8]
 80097a2:	6923      	ldr	r3, [r4, #16]
 80097a4:	7da0      	ldrb	r0, [r4, #22]
 80097a6:	f884 9015 	strb.w	r9, [r4, #21]
 80097aa:	1b92      	subs	r2, r2, r6
 80097ac:	1b9b      	subs	r3, r3, r6
 80097ae:	60a2      	str	r2, [r4, #8]
 80097b0:	6123      	str	r3, [r4, #16]
 80097b2:	f080 0001 	eor.w	r0, r0, #1
 80097b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ba:	68a3      	ldr	r3, [r4, #8]
 80097bc:	799b      	ldrb	r3, [r3, #6]
 80097be:	706b      	strb	r3, [r5, #1]
 80097c0:	1cab      	adds	r3, r5, #2
 80097c2:	68a2      	ldr	r2, [r4, #8]
 80097c4:	7952      	ldrb	r2, [r2, #5]
 80097c6:	f803 2b01 	strb.w	r2, [r3], #1
 80097ca:	68a2      	ldr	r2, [r4, #8]
 80097cc:	7912      	ldrb	r2, [r2, #4]
 80097ce:	f803 2b01 	strb.w	r2, [r3], #1
 80097d2:	68a2      	ldr	r2, [r4, #8]
 80097d4:	78d2      	ldrb	r2, [r2, #3]
 80097d6:	f803 2b01 	strb.w	r2, [r3], #1
 80097da:	68a2      	ldr	r2, [r4, #8]
 80097dc:	7892      	ldrb	r2, [r2, #2]
 80097de:	f803 2b01 	strb.w	r2, [r3], #1
 80097e2:	68a2      	ldr	r2, [r4, #8]
 80097e4:	7852      	ldrb	r2, [r2, #1]
 80097e6:	f803 2b01 	strb.w	r2, [r3], #1
 80097ea:	68a2      	ldr	r2, [r4, #8]
 80097ec:	7812      	ldrb	r2, [r2, #0]
 80097ee:	701a      	strb	r2, [r3, #0]
 80097f0:	e796      	b.n	8009720 <ucdr_deserialize_double+0xa4>
 80097f2:	4639      	mov	r1, r7
 80097f4:	4632      	mov	r2, r6
 80097f6:	4628      	mov	r0, r5
 80097f8:	f00c f8f3 	bl	80159e2 <memcpy>
 80097fc:	68a1      	ldr	r1, [r4, #8]
 80097fe:	4642      	mov	r2, r8
 8009800:	19a8      	adds	r0, r5, r6
 8009802:	f00c f8ee 	bl	80159e2 <memcpy>
 8009806:	e78b      	b.n	8009720 <ucdr_deserialize_double+0xa4>

08009808 <ucdr_check_buffer_available_for>:
 8009808:	7d83      	ldrb	r3, [r0, #22]
 800980a:	b93b      	cbnz	r3, 800981c <ucdr_check_buffer_available_for+0x14>
 800980c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8009810:	4419      	add	r1, r3
 8009812:	4288      	cmp	r0, r1
 8009814:	bf34      	ite	cc
 8009816:	2000      	movcc	r0, #0
 8009818:	2001      	movcs	r0, #1
 800981a:	4770      	bx	lr
 800981c:	2000      	movs	r0, #0
 800981e:	4770      	bx	lr

08009820 <ucdr_check_final_buffer_behavior>:
 8009820:	7d83      	ldrb	r3, [r0, #22]
 8009822:	b943      	cbnz	r3, 8009836 <ucdr_check_final_buffer_behavior+0x16>
 8009824:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8009828:	4291      	cmp	r1, r2
 800982a:	b510      	push	{r4, lr}
 800982c:	4604      	mov	r4, r0
 800982e:	d205      	bcs.n	800983c <ucdr_check_final_buffer_behavior+0x1c>
 8009830:	2301      	movs	r3, #1
 8009832:	4618      	mov	r0, r3
 8009834:	bd10      	pop	{r4, pc}
 8009836:	2300      	movs	r3, #0
 8009838:	4618      	mov	r0, r3
 800983a:	4770      	bx	lr
 800983c:	6982      	ldr	r2, [r0, #24]
 800983e:	b13a      	cbz	r2, 8009850 <ucdr_check_final_buffer_behavior+0x30>
 8009840:	69c1      	ldr	r1, [r0, #28]
 8009842:	4790      	blx	r2
 8009844:	f080 0301 	eor.w	r3, r0, #1
 8009848:	b2db      	uxtb	r3, r3
 800984a:	75a0      	strb	r0, [r4, #22]
 800984c:	4618      	mov	r0, r3
 800984e:	bd10      	pop	{r4, pc}
 8009850:	2001      	movs	r0, #1
 8009852:	75a0      	strb	r0, [r4, #22]
 8009854:	e7fa      	b.n	800984c <ucdr_check_final_buffer_behavior+0x2c>
 8009856:	bf00      	nop

08009858 <ucdr_set_on_full_buffer_callback>:
 8009858:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop

08009860 <ucdr_init_buffer_origin_offset_endian>:
 8009860:	b410      	push	{r4}
 8009862:	9c01      	ldr	r4, [sp, #4]
 8009864:	6001      	str	r1, [r0, #0]
 8009866:	440a      	add	r2, r1
 8009868:	6042      	str	r2, [r0, #4]
 800986a:	190a      	adds	r2, r1, r4
 800986c:	441c      	add	r4, r3
 800986e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8009872:	6082      	str	r2, [r0, #8]
 8009874:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009878:	7503      	strb	r3, [r0, #20]
 800987a:	2200      	movs	r2, #0
 800987c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8009880:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009884:	7542      	strb	r2, [r0, #21]
 8009886:	7582      	strb	r2, [r0, #22]
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop

0800988c <ucdr_init_buffer_origin_offset>:
 800988c:	b510      	push	{r4, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	9c04      	ldr	r4, [sp, #16]
 8009892:	9400      	str	r4, [sp, #0]
 8009894:	2401      	movs	r4, #1
 8009896:	9401      	str	r4, [sp, #4]
 8009898:	f7ff ffe2 	bl	8009860 <ucdr_init_buffer_origin_offset_endian>
 800989c:	b002      	add	sp, #8
 800989e:	bd10      	pop	{r4, pc}

080098a0 <ucdr_init_buffer_origin>:
 80098a0:	b510      	push	{r4, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	2400      	movs	r4, #0
 80098a6:	9400      	str	r4, [sp, #0]
 80098a8:	f7ff fff0 	bl	800988c <ucdr_init_buffer_origin_offset>
 80098ac:	b002      	add	sp, #8
 80098ae:	bd10      	pop	{r4, pc}

080098b0 <ucdr_init_buffer>:
 80098b0:	2300      	movs	r3, #0
 80098b2:	f7ff bff5 	b.w	80098a0 <ucdr_init_buffer_origin>
 80098b6:	bf00      	nop

080098b8 <ucdr_alignment>:
 80098b8:	fbb0 f3f1 	udiv	r3, r0, r1
 80098bc:	fb03 0011 	mls	r0, r3, r1, r0
 80098c0:	1a08      	subs	r0, r1, r0
 80098c2:	3901      	subs	r1, #1
 80098c4:	4008      	ands	r0, r1
 80098c6:	4770      	bx	lr

080098c8 <ucdr_buffer_alignment>:
 80098c8:	7d43      	ldrb	r3, [r0, #21]
 80098ca:	428b      	cmp	r3, r1
 80098cc:	d208      	bcs.n	80098e0 <ucdr_buffer_alignment+0x18>
 80098ce:	6900      	ldr	r0, [r0, #16]
 80098d0:	fbb0 f3f1 	udiv	r3, r0, r1
 80098d4:	fb01 0013 	mls	r0, r1, r3, r0
 80098d8:	1a08      	subs	r0, r1, r0
 80098da:	3901      	subs	r1, #1
 80098dc:	4008      	ands	r0, r1
 80098de:	4770      	bx	lr
 80098e0:	2000      	movs	r0, #0
 80098e2:	4770      	bx	lr

080098e4 <ucdr_align_to>:
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	4604      	mov	r4, r0
 80098e8:	460d      	mov	r5, r1
 80098ea:	f7ff ffed 	bl	80098c8 <ucdr_buffer_alignment>
 80098ee:	68a3      	ldr	r3, [r4, #8]
 80098f0:	6921      	ldr	r1, [r4, #16]
 80098f2:	7565      	strb	r5, [r4, #21]
 80098f4:	181a      	adds	r2, r3, r0
 80098f6:	6863      	ldr	r3, [r4, #4]
 80098f8:	4293      	cmp	r3, r2
 80098fa:	4408      	add	r0, r1
 80098fc:	bf28      	it	cs
 80098fe:	4613      	movcs	r3, r2
 8009900:	6120      	str	r0, [r4, #16]
 8009902:	60a3      	str	r3, [r4, #8]
 8009904:	bd38      	pop	{r3, r4, r5, pc}
 8009906:	bf00      	nop

08009908 <ucdr_buffer_length>:
 8009908:	6882      	ldr	r2, [r0, #8]
 800990a:	6800      	ldr	r0, [r0, #0]
 800990c:	1a10      	subs	r0, r2, r0
 800990e:	4770      	bx	lr

08009910 <ucdr_buffer_remaining>:
 8009910:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8009914:	1a10      	subs	r0, r2, r0
 8009916:	4770      	bx	lr

08009918 <ucdr_check_final_buffer_behavior_array>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	7d83      	ldrb	r3, [r0, #22]
 800991c:	b963      	cbnz	r3, 8009938 <ucdr_check_final_buffer_behavior_array+0x20>
 800991e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8009922:	429a      	cmp	r2, r3
 8009924:	4604      	mov	r4, r0
 8009926:	460d      	mov	r5, r1
 8009928:	d308      	bcc.n	800993c <ucdr_check_final_buffer_behavior_array+0x24>
 800992a:	b139      	cbz	r1, 800993c <ucdr_check_final_buffer_behavior_array+0x24>
 800992c:	6983      	ldr	r3, [r0, #24]
 800992e:	b163      	cbz	r3, 800994a <ucdr_check_final_buffer_behavior_array+0x32>
 8009930:	69c1      	ldr	r1, [r0, #28]
 8009932:	4798      	blx	r3
 8009934:	75a0      	strb	r0, [r4, #22]
 8009936:	b108      	cbz	r0, 800993c <ucdr_check_final_buffer_behavior_array+0x24>
 8009938:	2000      	movs	r0, #0
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	4620      	mov	r0, r4
 800993e:	f7ff ffe7 	bl	8009910 <ucdr_buffer_remaining>
 8009942:	42a8      	cmp	r0, r5
 8009944:	bf28      	it	cs
 8009946:	4628      	movcs	r0, r5
 8009948:	bd38      	pop	{r3, r4, r5, pc}
 800994a:	2301      	movs	r3, #1
 800994c:	7583      	strb	r3, [r0, #22]
 800994e:	e7f3      	b.n	8009938 <ucdr_check_final_buffer_behavior_array+0x20>

08009950 <ucdr_advance_buffer>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4604      	mov	r4, r0
 8009954:	460d      	mov	r5, r1
 8009956:	f7ff ff57 	bl	8009808 <ucdr_check_buffer_available_for>
 800995a:	b178      	cbz	r0, 800997c <ucdr_advance_buffer+0x2c>
 800995c:	6923      	ldr	r3, [r4, #16]
 800995e:	68a2      	ldr	r2, [r4, #8]
 8009960:	442b      	add	r3, r5
 8009962:	6123      	str	r3, [r4, #16]
 8009964:	2301      	movs	r3, #1
 8009966:	442a      	add	r2, r5
 8009968:	7563      	strb	r3, [r4, #21]
 800996a:	60a2      	str	r2, [r4, #8]
 800996c:	bd38      	pop	{r3, r4, r5, pc}
 800996e:	68a2      	ldr	r2, [r4, #8]
 8009970:	6923      	ldr	r3, [r4, #16]
 8009972:	4402      	add	r2, r0
 8009974:	4403      	add	r3, r0
 8009976:	1a2d      	subs	r5, r5, r0
 8009978:	60a2      	str	r2, [r4, #8]
 800997a:	6123      	str	r3, [r4, #16]
 800997c:	4629      	mov	r1, r5
 800997e:	2201      	movs	r2, #1
 8009980:	4620      	mov	r0, r4
 8009982:	f7ff ffc9 	bl	8009918 <ucdr_check_final_buffer_behavior_array>
 8009986:	2800      	cmp	r0, #0
 8009988:	d1f1      	bne.n	800996e <ucdr_advance_buffer+0x1e>
 800998a:	2301      	movs	r3, #1
 800998c:	7563      	strb	r3, [r4, #21]
 800998e:	bd38      	pop	{r3, r4, r5, pc}

08009990 <rcl_get_zero_initialized_publisher>:
 8009990:	4b01      	ldr	r3, [pc, #4]	@ (8009998 <rcl_get_zero_initialized_publisher+0x8>)
 8009992:	6818      	ldr	r0, [r3, #0]
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	08016a74 	.word	0x08016a74

0800999c <rcl_publisher_init>:
 800999c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099a0:	b088      	sub	sp, #32
 80099a2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80099a4:	2d00      	cmp	r5, #0
 80099a6:	d069      	beq.n	8009a7c <rcl_publisher_init+0xe0>
 80099a8:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 80099ac:	4604      	mov	r4, r0
 80099ae:	4648      	mov	r0, r9
 80099b0:	460e      	mov	r6, r1
 80099b2:	4690      	mov	r8, r2
 80099b4:	461f      	mov	r7, r3
 80099b6:	f001 f847 	bl	800aa48 <rcutils_allocator_is_valid>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	d05e      	beq.n	8009a7c <rcl_publisher_init+0xe0>
 80099be:	2c00      	cmp	r4, #0
 80099c0:	d05c      	beq.n	8009a7c <rcl_publisher_init+0xe0>
 80099c2:	f8d4 a000 	ldr.w	sl, [r4]
 80099c6:	f1ba 0f00 	cmp.w	sl, #0
 80099ca:	d004      	beq.n	80099d6 <rcl_publisher_init+0x3a>
 80099cc:	2764      	movs	r7, #100	@ 0x64
 80099ce:	4638      	mov	r0, r7
 80099d0:	b008      	add	sp, #32
 80099d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d6:	4630      	mov	r0, r6
 80099d8:	f005 f9bc 	bl	800ed54 <rcl_node_is_valid>
 80099dc:	2800      	cmp	r0, #0
 80099de:	d052      	beq.n	8009a86 <rcl_publisher_init+0xea>
 80099e0:	f1b8 0f00 	cmp.w	r8, #0
 80099e4:	d04a      	beq.n	8009a7c <rcl_publisher_init+0xe0>
 80099e6:	2f00      	cmp	r7, #0
 80099e8:	d048      	beq.n	8009a7c <rcl_publisher_init+0xe0>
 80099ea:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80099ee:	aa07      	add	r2, sp, #28
 80099f0:	9205      	str	r2, [sp, #20]
 80099f2:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 80099f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80099fa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80099fe:	f8cd a01c 	str.w	sl, [sp, #28]
 8009a02:	4639      	mov	r1, r7
 8009a04:	e899 000c 	ldmia.w	r9, {r2, r3}
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f005 f9f7 	bl	800edfc <rcl_node_resolve_name>
 8009a0e:	4607      	mov	r7, r0
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d14f      	bne.n	8009ab4 <rcl_publisher_init+0x118>
 8009a14:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8009a16:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009a18:	20c8      	movs	r0, #200	@ 0xc8
 8009a1a:	4798      	blx	r3
 8009a1c:	6020      	str	r0, [r4, #0]
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d04e      	beq.n	8009ac0 <rcl_publisher_init+0x124>
 8009a22:	4630      	mov	r0, r6
 8009a24:	f005 f9b8 	bl	800ed98 <rcl_node_get_rmw_handle>
 8009a28:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	9a07      	ldr	r2, [sp, #28]
 8009a30:	6827      	ldr	r7, [r4, #0]
 8009a32:	462b      	mov	r3, r5
 8009a34:	4641      	mov	r1, r8
 8009a36:	f001 f915 	bl	800ac64 <rmw_create_publisher>
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 8009a40:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8009a44:	b370      	cbz	r0, 8009aa4 <rcl_publisher_init+0x108>
 8009a46:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8009a4a:	f001 f9e9 	bl	800ae20 <rmw_publisher_get_actual_qos>
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	4607      	mov	r7, r0
 8009a52:	b9d0      	cbnz	r0, 8009a8a <rcl_publisher_init+0xee>
 8009a54:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 8009a58:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	2270      	movs	r2, #112	@ 0x70
 8009a60:	4618      	mov	r0, r3
 8009a62:	f00b ffbe 	bl	80159e2 <memcpy>
 8009a66:	6832      	ldr	r2, [r6, #0]
 8009a68:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8009a6c:	9807      	ldr	r0, [sp, #28]
 8009a6e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8009a70:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009a72:	4798      	blx	r3
 8009a74:	4638      	mov	r0, r7
 8009a76:	b008      	add	sp, #32
 8009a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a7c:	270b      	movs	r7, #11
 8009a7e:	4638      	mov	r0, r7
 8009a80:	b008      	add	sp, #32
 8009a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a86:	27c8      	movs	r7, #200	@ 0xc8
 8009a88:	e7a1      	b.n	80099ce <rcl_publisher_init+0x32>
 8009a8a:	b18b      	cbz	r3, 8009ab0 <rcl_publisher_init+0x114>
 8009a8c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8009a90:	b142      	cbz	r2, 8009aa4 <rcl_publisher_init+0x108>
 8009a92:	4630      	mov	r0, r6
 8009a94:	f005 f980 	bl	800ed98 <rcl_node_get_rmw_handle>
 8009a98:	6823      	ldr	r3, [r4, #0]
 8009a9a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8009a9e:	f001 f9cf 	bl	800ae40 <rmw_destroy_publisher>
 8009aa2:	6823      	ldr	r3, [r4, #0]
 8009aa4:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8009aa6:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	4790      	blx	r2
 8009aac:	2300      	movs	r3, #0
 8009aae:	6023      	str	r3, [r4, #0]
 8009ab0:	2701      	movs	r7, #1
 8009ab2:	e7db      	b.n	8009a6c <rcl_publisher_init+0xd0>
 8009ab4:	2867      	cmp	r0, #103	@ 0x67
 8009ab6:	d0d9      	beq.n	8009a6c <rcl_publisher_init+0xd0>
 8009ab8:	2869      	cmp	r0, #105	@ 0x69
 8009aba:	d003      	beq.n	8009ac4 <rcl_publisher_init+0x128>
 8009abc:	280a      	cmp	r0, #10
 8009abe:	d1f7      	bne.n	8009ab0 <rcl_publisher_init+0x114>
 8009ac0:	270a      	movs	r7, #10
 8009ac2:	e7d3      	b.n	8009a6c <rcl_publisher_init+0xd0>
 8009ac4:	2767      	movs	r7, #103	@ 0x67
 8009ac6:	e7d1      	b.n	8009a6c <rcl_publisher_init+0xd0>

08009ac8 <rcl_publisher_get_default_options>:
 8009ac8:	b570      	push	{r4, r5, r6, lr}
 8009aca:	4d14      	ldr	r5, [pc, #80]	@ (8009b1c <rcl_publisher_get_default_options+0x54>)
 8009acc:	4914      	ldr	r1, [pc, #80]	@ (8009b20 <rcl_publisher_get_default_options+0x58>)
 8009ace:	b088      	sub	sp, #32
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	2250      	movs	r2, #80	@ 0x50
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	f00b ff84 	bl	80159e2 <memcpy>
 8009ada:	a802      	add	r0, sp, #8
 8009adc:	f000 ffa6 	bl	800aa2c <rcutils_get_default_allocator>
 8009ae0:	f10d 0c08 	add.w	ip, sp, #8
 8009ae4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009ae8:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8009aec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009af0:	466e      	mov	r6, sp
 8009af2:	f8dc 3000 	ldr.w	r3, [ip]
 8009af6:	f8ce 3000 	str.w	r3, [lr]
 8009afa:	4630      	mov	r0, r6
 8009afc:	f001 f834 	bl	800ab68 <rmw_get_default_publisher_options>
 8009b00:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009b04:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8009b08:	e883 0003 	stmia.w	r3, {r0, r1}
 8009b0c:	2270      	movs	r2, #112	@ 0x70
 8009b0e:	4629      	mov	r1, r5
 8009b10:	4620      	mov	r0, r4
 8009b12:	f00b ff66 	bl	80159e2 <memcpy>
 8009b16:	4620      	mov	r0, r4
 8009b18:	b008      	add	sp, #32
 8009b1a:	bd70      	pop	{r4, r5, r6, pc}
 8009b1c:	200091b8 	.word	0x200091b8
 8009b20:	08016a78 	.word	0x08016a78

08009b24 <rcl_publish>:
 8009b24:	b1f8      	cbz	r0, 8009b66 <rcl_publish+0x42>
 8009b26:	6803      	ldr	r3, [r0, #0]
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	b1b3      	cbz	r3, 8009b5c <rcl_publish+0x38>
 8009b2e:	4616      	mov	r6, r2
 8009b30:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8009b34:	b192      	cbz	r2, 8009b5c <rcl_publish+0x38>
 8009b36:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8009b3a:	460d      	mov	r5, r1
 8009b3c:	f004 fd30 	bl	800e5a0 <rcl_context_is_valid>
 8009b40:	b160      	cbz	r0, 8009b5c <rcl_publish+0x38>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8009b48:	b140      	cbz	r0, 8009b5c <rcl_publish+0x38>
 8009b4a:	b155      	cbz	r5, 8009b62 <rcl_publish+0x3e>
 8009b4c:	4632      	mov	r2, r6
 8009b4e:	4629      	mov	r1, r5
 8009b50:	f001 f828 	bl	800aba4 <rmw_publish>
 8009b54:	3800      	subs	r0, #0
 8009b56:	bf18      	it	ne
 8009b58:	2001      	movne	r0, #1
 8009b5a:	bd70      	pop	{r4, r5, r6, pc}
 8009b5c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8009b60:	bd70      	pop	{r4, r5, r6, pc}
 8009b62:	200b      	movs	r0, #11
 8009b64:	bd70      	pop	{r4, r5, r6, pc}
 8009b66:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8009b6a:	4770      	bx	lr

08009b6c <rcl_publisher_is_valid>:
 8009b6c:	b1a0      	cbz	r0, 8009b98 <rcl_publisher_is_valid+0x2c>
 8009b6e:	6803      	ldr	r3, [r0, #0]
 8009b70:	b510      	push	{r4, lr}
 8009b72:	4604      	mov	r4, r0
 8009b74:	b173      	cbz	r3, 8009b94 <rcl_publisher_is_valid+0x28>
 8009b76:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8009b7a:	b15a      	cbz	r2, 8009b94 <rcl_publisher_is_valid+0x28>
 8009b7c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8009b80:	f004 fd0e 	bl	800e5a0 <rcl_context_is_valid>
 8009b84:	b130      	cbz	r0, 8009b94 <rcl_publisher_is_valid+0x28>
 8009b86:	6823      	ldr	r3, [r4, #0]
 8009b88:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8009b8c:	3800      	subs	r0, #0
 8009b8e:	bf18      	it	ne
 8009b90:	2001      	movne	r0, #1
 8009b92:	bd10      	pop	{r4, pc}
 8009b94:	2000      	movs	r0, #0
 8009b96:	bd10      	pop	{r4, pc}
 8009b98:	2000      	movs	r0, #0
 8009b9a:	4770      	bx	lr

08009b9c <rcl_publisher_is_valid_except_context>:
 8009b9c:	b130      	cbz	r0, 8009bac <rcl_publisher_is_valid_except_context+0x10>
 8009b9e:	6800      	ldr	r0, [r0, #0]
 8009ba0:	b120      	cbz	r0, 8009bac <rcl_publisher_is_valid_except_context+0x10>
 8009ba2:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8009ba6:	3800      	subs	r0, #0
 8009ba8:	bf18      	it	ne
 8009baa:	2001      	movne	r0, #1
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop

08009bb0 <_rclc_check_for_new_data>:
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d046      	beq.n	8009c42 <_rclc_check_for_new_data+0x92>
 8009bb4:	b510      	push	{r4, lr}
 8009bb6:	7802      	ldrb	r2, [r0, #0]
 8009bb8:	b084      	sub	sp, #16
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2a0a      	cmp	r2, #10
 8009bbe:	d842      	bhi.n	8009c46 <_rclc_check_for_new_data+0x96>
 8009bc0:	e8df f002 	tbb	[pc, r2]
 8009bc4:	14181212 	.word	0x14181212
 8009bc8:	06060614 	.word	0x06060614
 8009bcc:	2e1a      	.short	0x2e1a
 8009bce:	16          	.byte	0x16
 8009bcf:	00          	.byte	0x00
 8009bd0:	6a0a      	ldr	r2, [r1, #32]
 8009bd2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009bd4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009bd8:	2000      	movs	r0, #0
 8009bda:	1a12      	subs	r2, r2, r0
 8009bdc:	bf18      	it	ne
 8009bde:	2201      	movne	r2, #1
 8009be0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8009be4:	b004      	add	sp, #16
 8009be6:	bd10      	pop	{r4, pc}
 8009be8:	680a      	ldr	r2, [r1, #0]
 8009bea:	e7f2      	b.n	8009bd2 <_rclc_check_for_new_data+0x22>
 8009bec:	698a      	ldr	r2, [r1, #24]
 8009bee:	e7f0      	b.n	8009bd2 <_rclc_check_for_new_data+0x22>
 8009bf0:	688a      	ldr	r2, [r1, #8]
 8009bf2:	e7ee      	b.n	8009bd2 <_rclc_check_for_new_data+0x22>
 8009bf4:	690a      	ldr	r2, [r1, #16]
 8009bf6:	e7ec      	b.n	8009bd2 <_rclc_check_for_new_data+0x22>
 8009bf8:	685c      	ldr	r4, [r3, #4]
 8009bfa:	4608      	mov	r0, r1
 8009bfc:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8009c00:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 8009c04:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 8009c08:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8009c12:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8009c16:	f104 0110 	add.w	r1, r4, #16
 8009c1a:	f006 fdbd 	bl	8010798 <rcl_action_client_wait_set_get_entities_ready>
 8009c1e:	e7e1      	b.n	8009be4 <_rclc_check_for_new_data+0x34>
 8009c20:	685c      	ldr	r4, [r3, #4]
 8009c22:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 8009c26:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 8009c2a:	e9cd 3200 	strd	r3, r2, [sp]
 8009c2e:	4608      	mov	r0, r1
 8009c30:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8009c34:	f104 0220 	add.w	r2, r4, #32
 8009c38:	f104 0110 	add.w	r1, r4, #16
 8009c3c:	f006 ffc4 	bl	8010bc8 <rcl_action_server_wait_set_get_entities_ready>
 8009c40:	e7d0      	b.n	8009be4 <_rclc_check_for_new_data+0x34>
 8009c42:	200b      	movs	r0, #11
 8009c44:	4770      	bx	lr
 8009c46:	2001      	movs	r0, #1
 8009c48:	e7cc      	b.n	8009be4 <_rclc_check_for_new_data+0x34>
 8009c4a:	bf00      	nop

08009c4c <_rclc_take_new_data>:
 8009c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c4e:	b09b      	sub	sp, #108	@ 0x6c
 8009c50:	2800      	cmp	r0, #0
 8009c52:	f000 8088 	beq.w	8009d66 <_rclc_take_new_data+0x11a>
 8009c56:	7803      	ldrb	r3, [r0, #0]
 8009c58:	4604      	mov	r4, r0
 8009c5a:	2b0a      	cmp	r3, #10
 8009c5c:	f200 8167 	bhi.w	8009f2e <_rclc_take_new_data+0x2e2>
 8009c60:	e8df f003 	tbb	[pc, r3]
 8009c64:	44152d2d 	.word	0x44152d2d
 8009c68:	19191944 	.word	0x19191944
 8009c6c:	065a      	.short	0x065a
 8009c6e:	15          	.byte	0x15
 8009c6f:	00          	.byte	0x00
 8009c70:	6840      	ldr	r0, [r0, #4]
 8009c72:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f040 80b2 	bne.w	8009de0 <_rclc_take_new_data+0x194>
 8009c7c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f040 80e4 	bne.w	8009e4e <_rclc_take_new_data+0x202>
 8009c86:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d16f      	bne.n	8009d6e <_rclc_take_new_data+0x122>
 8009c8e:	2500      	movs	r5, #0
 8009c90:	4628      	mov	r0, r5
 8009c92:	b01b      	add	sp, #108	@ 0x6c
 8009c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c96:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009c98:	6a0b      	ldr	r3, [r1, #32]
 8009c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d0f5      	beq.n	8009c8e <_rclc_take_new_data+0x42>
 8009ca2:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009ca6:	f104 0110 	add.w	r1, r4, #16
 8009caa:	f005 fa51 	bl	800f150 <rcl_take_request>
 8009cae:	4605      	mov	r5, r0
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	d0ec      	beq.n	8009c8e <_rclc_take_new_data+0x42>
 8009cb4:	f240 2359 	movw	r3, #601	@ 0x259
 8009cb8:	4298      	cmp	r0, r3
 8009cba:	d013      	beq.n	8009ce4 <_rclc_take_new_data+0x98>
 8009cbc:	e029      	b.n	8009d12 <_rclc_take_new_data+0xc6>
 8009cbe:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009cc0:	680b      	ldr	r3, [r1, #0]
 8009cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d0e1      	beq.n	8009c8e <_rclc_take_new_data+0x42>
 8009cca:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009cce:	2300      	movs	r3, #0
 8009cd0:	aa0a      	add	r2, sp, #40	@ 0x28
 8009cd2:	f005 fb7b 	bl	800f3cc <rcl_take>
 8009cd6:	4605      	mov	r5, r0
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d0d9      	beq.n	8009c90 <_rclc_take_new_data+0x44>
 8009cdc:	f240 1391 	movw	r3, #401	@ 0x191
 8009ce0:	4298      	cmp	r0, r3
 8009ce2:	d116      	bne.n	8009d12 <_rclc_take_new_data+0xc6>
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8009cea:	e7d1      	b.n	8009c90 <_rclc_take_new_data+0x44>
 8009cec:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009cee:	698b      	ldr	r3, [r1, #24]
 8009cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d0ca      	beq.n	8009c8e <_rclc_take_new_data+0x42>
 8009cf8:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009cfc:	f104 0110 	add.w	r1, r4, #16
 8009d00:	f004 fbde 	bl	800e4c0 <rcl_take_response>
 8009d04:	4605      	mov	r5, r0
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d0c1      	beq.n	8009c8e <_rclc_take_new_data+0x42>
 8009d0a:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8009d0e:	4298      	cmp	r0, r3
 8009d10:	d0be      	beq.n	8009c90 <_rclc_take_new_data+0x44>
 8009d12:	f000 febd 	bl	800aa90 <rcutils_reset_error>
 8009d16:	e7bb      	b.n	8009c90 <_rclc_take_new_data+0x44>
 8009d18:	6840      	ldr	r0, [r0, #4]
 8009d1a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d17d      	bne.n	8009e1e <_rclc_take_new_data+0x1d2>
 8009d22:	69c3      	ldr	r3, [r0, #28]
 8009d24:	b11b      	cbz	r3, 8009d2e <_rclc_take_new_data+0xe2>
 8009d26:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d144      	bne.n	8009db8 <_rclc_take_new_data+0x16c>
 8009d2e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f040 80ac 	bne.w	8009e90 <_rclc_take_new_data+0x244>
 8009d38:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d0a6      	beq.n	8009c8e <_rclc_take_new_data+0x42>
 8009d40:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8009d42:	a90a      	add	r1, sp, #40	@ 0x28
 8009d44:	3010      	adds	r0, #16
 8009d46:	f006 fbff 	bl	8010548 <rcl_action_take_result_response>
 8009d4a:	4605      	mov	r5, r0
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d1e0      	bne.n	8009d12 <_rclc_take_new_data+0xc6>
 8009d50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009d54:	6860      	ldr	r0, [r4, #4]
 8009d56:	f007 f85b 	bl	8010e10 <rclc_action_find_handle_by_result_request_sequence_number>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d098      	beq.n	8009c90 <_rclc_take_new_data+0x44>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8009d64:	e794      	b.n	8009c90 <_rclc_take_new_data+0x44>
 8009d66:	250b      	movs	r5, #11
 8009d68:	4628      	mov	r0, r5
 8009d6a:	b01b      	add	sp, #108	@ 0x6c
 8009d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d6e:	ae04      	add	r6, sp, #16
 8009d70:	aa0a      	add	r2, sp, #40	@ 0x28
 8009d72:	3010      	adds	r0, #16
 8009d74:	4631      	mov	r1, r6
 8009d76:	f006 fe5b 	bl	8010a30 <rcl_action_take_cancel_request>
 8009d7a:	4605      	mov	r5, r0
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d1c8      	bne.n	8009d12 <_rclc_take_new_data+0xc6>
 8009d80:	6860      	ldr	r0, [r4, #4]
 8009d82:	a90a      	add	r1, sp, #40	@ 0x28
 8009d84:	f007 f802 	bl	8010d8c <rclc_action_find_goal_handle_by_uuid>
 8009d88:	4607      	mov	r7, r0
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	f000 80bb 	beq.w	8009f06 <_rclc_take_new_data+0x2ba>
 8009d90:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009d94:	2101      	movs	r1, #1
 8009d96:	f006 ff83 	bl	8010ca0 <rcl_action_transition_goal_state>
 8009d9a:	2803      	cmp	r0, #3
 8009d9c:	4684      	mov	ip, r0
 8009d9e:	f040 80a7 	bne.w	8009ef0 <_rclc_take_new_data+0x2a4>
 8009da2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009da4:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8009da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009daa:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009dae:	e884 0003 	stmia.w	r4, {r0, r1}
 8009db2:	f887 c008 	strb.w	ip, [r7, #8]
 8009db6:	e76b      	b.n	8009c90 <_rclc_take_new_data+0x44>
 8009db8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009dba:	3010      	adds	r0, #16
 8009dbc:	f006 fc44 	bl	8010648 <rcl_action_take_feedback>
 8009dc0:	4605      	mov	r5, r0
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	d1a5      	bne.n	8009d12 <_rclc_take_new_data+0xc6>
 8009dc6:	6860      	ldr	r0, [r4, #4]
 8009dc8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009dca:	f006 ffdf 	bl	8010d8c <rclc_action_find_goal_handle_by_uuid>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	f000 80a3 	beq.w	8009f1c <_rclc_take_new_data+0x2d0>
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	6860      	ldr	r0, [r4, #4]
 8009dda:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8009dde:	e7a6      	b.n	8009d2e <_rclc_take_new_data+0xe2>
 8009de0:	f006 ffae 	bl	8010d40 <rclc_action_take_goal_handle>
 8009de4:	4606      	mov	r6, r0
 8009de6:	6860      	ldr	r0, [r4, #4]
 8009de8:	2e00      	cmp	r6, #0
 8009dea:	f43f af47 	beq.w	8009c7c <_rclc_take_new_data+0x30>
 8009dee:	6070      	str	r0, [r6, #4]
 8009df0:	69f2      	ldr	r2, [r6, #28]
 8009df2:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8009df6:	3010      	adds	r0, #16
 8009df8:	f006 fd62 	bl	80108c0 <rcl_action_take_goal_request>
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	f040 808e 	bne.w	8009f20 <_rclc_take_new_data+0x2d4>
 8009e04:	69f7      	ldr	r7, [r6, #28]
 8009e06:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009e08:	7235      	strb	r5, [r6, #8]
 8009e0a:	f8c6 0009 	str.w	r0, [r6, #9]
 8009e0e:	f8c6 100d 	str.w	r1, [r6, #13]
 8009e12:	6860      	ldr	r0, [r4, #4]
 8009e14:	f8c6 2011 	str.w	r2, [r6, #17]
 8009e18:	f8c6 3015 	str.w	r3, [r6, #21]
 8009e1c:	e72e      	b.n	8009c7c <_rclc_take_new_data+0x30>
 8009e1e:	aa04      	add	r2, sp, #16
 8009e20:	a90a      	add	r1, sp, #40	@ 0x28
 8009e22:	3010      	adds	r0, #16
 8009e24:	f006 fb18 	bl	8010458 <rcl_action_take_goal_response>
 8009e28:	4605      	mov	r5, r0
 8009e2a:	2800      	cmp	r0, #0
 8009e2c:	f47f af71 	bne.w	8009d12 <_rclc_take_new_data+0xc6>
 8009e30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009e34:	6860      	ldr	r0, [r4, #4]
 8009e36:	f006 ffd9 	bl	8010dec <rclc_action_find_handle_by_goal_request_sequence_number>
 8009e3a:	b130      	cbz	r0, 8009e4a <_rclc_take_new_data+0x1fe>
 8009e3c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009e40:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009e44:	2201      	movs	r2, #1
 8009e46:	f880 2020 	strb.w	r2, [r0, #32]
 8009e4a:	6860      	ldr	r0, [r4, #4]
 8009e4c:	e769      	b.n	8009d22 <_rclc_take_new_data+0xd6>
 8009e4e:	aa04      	add	r2, sp, #16
 8009e50:	3010      	adds	r0, #16
 8009e52:	a90a      	add	r1, sp, #40	@ 0x28
 8009e54:	f006 fdac 	bl	80109b0 <rcl_action_take_result_request>
 8009e58:	4605      	mov	r5, r0
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	f47f af59 	bne.w	8009d12 <_rclc_take_new_data+0xc6>
 8009e60:	6860      	ldr	r0, [r4, #4]
 8009e62:	a904      	add	r1, sp, #16
 8009e64:	f006 ff92 	bl	8010d8c <rclc_action_find_goal_handle_by_uuid>
 8009e68:	4607      	mov	r7, r0
 8009e6a:	b160      	cbz	r0, 8009e86 <_rclc_take_new_data+0x23a>
 8009e6c:	ad0a      	add	r5, sp, #40	@ 0x28
 8009e6e:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8009e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e74:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009e76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009e7a:	f04f 0c02 	mov.w	ip, #2
 8009e7e:	e886 0003 	stmia.w	r6, {r0, r1}
 8009e82:	f887 c008 	strb.w	ip, [r7, #8]
 8009e86:	6860      	ldr	r0, [r4, #4]
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8009e8e:	e6fa      	b.n	8009c86 <_rclc_take_new_data+0x3a>
 8009e90:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8009e94:	a90a      	add	r1, sp, #40	@ 0x28
 8009e96:	3010      	adds	r0, #16
 8009e98:	f006 fb96 	bl	80105c8 <rcl_action_take_cancel_response>
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	f47f af37 	bne.w	8009d12 <_rclc_take_new_data+0xc6>
 8009ea4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009ea8:	6860      	ldr	r0, [r4, #4]
 8009eaa:	f006 ffc3 	bl	8010e34 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8009eae:	4606      	mov	r6, r0
 8009eb0:	6860      	ldr	r0, [r4, #4]
 8009eb2:	2e00      	cmp	r6, #0
 8009eb4:	f43f af40 	beq.w	8009d38 <_rclc_take_new_data+0xec>
 8009eb8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009eba:	2701      	movs	r7, #1
 8009ebc:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f43f af3a 	beq.w	8009d38 <_rclc_take_new_data+0xec>
 8009ec4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009ec6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009eca:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009ece:	f006 ff5d 	bl	8010d8c <rclc_action_find_goal_handle_by_uuid>
 8009ed2:	b138      	cbz	r0, 8009ee4 <_rclc_take_new_data+0x298>
 8009ed4:	6860      	ldr	r0, [r4, #4]
 8009ed6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009ed8:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8009edc:	3501      	adds	r5, #1
 8009ede:	42ab      	cmp	r3, r5
 8009ee0:	d8f0      	bhi.n	8009ec4 <_rclc_take_new_data+0x278>
 8009ee2:	e729      	b.n	8009d38 <_rclc_take_new_data+0xec>
 8009ee4:	6860      	ldr	r0, [r4, #4]
 8009ee6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009ee8:	3501      	adds	r5, #1
 8009eea:	42ab      	cmp	r3, r5
 8009eec:	d8ea      	bhi.n	8009ec4 <_rclc_take_new_data+0x278>
 8009eee:	e723      	b.n	8009d38 <_rclc_take_new_data+0xec>
 8009ef0:	ab06      	add	r3, sp, #24
 8009ef2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009ef4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009ef8:	2103      	movs	r1, #3
 8009efa:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009efe:	6860      	ldr	r0, [r4, #4]
 8009f00:	f007 f80e 	bl	8010f20 <rclc_action_server_goal_cancel_reject>
 8009f04:	e6c4      	b.n	8009c90 <_rclc_take_new_data+0x44>
 8009f06:	ab06      	add	r3, sp, #24
 8009f08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009f0a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009f0e:	2102      	movs	r1, #2
 8009f10:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009f14:	6860      	ldr	r0, [r4, #4]
 8009f16:	f007 f803 	bl	8010f20 <rclc_action_server_goal_cancel_reject>
 8009f1a:	e6b9      	b.n	8009c90 <_rclc_take_new_data+0x44>
 8009f1c:	6860      	ldr	r0, [r4, #4]
 8009f1e:	e706      	b.n	8009d2e <_rclc_take_new_data+0xe2>
 8009f20:	6860      	ldr	r0, [r4, #4]
 8009f22:	4631      	mov	r1, r6
 8009f24:	f006 ff1c 	bl	8010d60 <rclc_action_remove_used_goal_handle>
 8009f28:	f000 fdb2 	bl	800aa90 <rcutils_reset_error>
 8009f2c:	e6b0      	b.n	8009c90 <_rclc_take_new_data+0x44>
 8009f2e:	2501      	movs	r5, #1
 8009f30:	e6ae      	b.n	8009c90 <_rclc_take_new_data+0x44>
 8009f32:	bf00      	nop

08009f34 <_rclc_execute.part.0>:
 8009f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f36:	7803      	ldrb	r3, [r0, #0]
 8009f38:	b087      	sub	sp, #28
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	2b0a      	cmp	r3, #10
 8009f3e:	f200 8136 	bhi.w	800a1ae <_rclc_execute.part.0+0x27a>
 8009f42:	e8df f003 	tbb	[pc, r3]
 8009f46:	435e      	.short	0x435e
 8009f48:	06a1664f 	.word	0x06a1664f
 8009f4c:	6c1e0606 	.word	0x6c1e0606
 8009f50:	59          	.byte	0x59
 8009f51:	00          	.byte	0x00
 8009f52:	2b06      	cmp	r3, #6
 8009f54:	f000 8122 	beq.w	800a19c <_rclc_execute.part.0+0x268>
 8009f58:	2b07      	cmp	r3, #7
 8009f5a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009f5c:	f040 8118 	bne.w	800a190 <_rclc_execute.part.0+0x25c>
 8009f60:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8009f64:	6880      	ldr	r0, [r0, #8]
 8009f66:	4798      	blx	r3
 8009f68:	f104 0110 	add.w	r1, r4, #16
 8009f6c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009f6e:	6860      	ldr	r0, [r4, #4]
 8009f70:	f005 f92e 	bl	800f1d0 <rcl_send_response>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d033      	beq.n	8009fe0 <_rclc_execute.part.0+0xac>
 8009f78:	9005      	str	r0, [sp, #20]
 8009f7a:	f000 fd89 	bl	800aa90 <rcutils_reset_error>
 8009f7e:	9805      	ldr	r0, [sp, #20]
 8009f80:	e02e      	b.n	8009fe0 <_rclc_execute.part.0+0xac>
 8009f82:	6840      	ldr	r0, [r0, #4]
 8009f84:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f000 8086 	beq.w	800a09a <_rclc_execute.part.0+0x166>
 8009f8e:	2600      	movs	r6, #0
 8009f90:	2701      	movs	r7, #1
 8009f92:	e004      	b.n	8009f9e <_rclc_execute.part.0+0x6a>
 8009f94:	f006 feae 	bl	8010cf4 <rclc_action_send_result_request>
 8009f98:	b998      	cbnz	r0, 8009fc2 <_rclc_execute.part.0+0x8e>
 8009f9a:	722f      	strb	r7, [r5, #8]
 8009f9c:	6860      	ldr	r0, [r4, #4]
 8009f9e:	f006 ff5b 	bl	8010e58 <rclc_action_find_first_handle_with_goal_response>
 8009fa2:	4605      	mov	r5, r0
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d077      	beq.n	800a098 <_rclc_execute.part.0+0x164>
 8009fa8:	6863      	ldr	r3, [r4, #4]
 8009faa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8009fb2:	f885 6020 	strb.w	r6, [r5, #32]
 8009fb6:	4798      	blx	r3
 8009fb8:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1e8      	bne.n	8009f94 <_rclc_execute.part.0+0x60>
 8009fc2:	6860      	ldr	r0, [r4, #4]
 8009fc4:	4629      	mov	r1, r5
 8009fc6:	f006 fecb 	bl	8010d60 <rclc_action_remove_used_goal_handle>
 8009fca:	e7e7      	b.n	8009f9c <_rclc_execute.part.0+0x68>
 8009fcc:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009fd0:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 8009fd4:	2d00      	cmp	r5, #0
 8009fd6:	f000 80c9 	beq.w	800a16c <_rclc_execute.part.0+0x238>
 8009fda:	6880      	ldr	r0, [r0, #8]
 8009fdc:	4798      	blx	r3
 8009fde:	2000      	movs	r0, #0
 8009fe0:	b007      	add	sp, #28
 8009fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fe4:	6840      	ldr	r0, [r0, #4]
 8009fe6:	f005 faf5 	bl	800f5d4 <rcl_timer_call>
 8009fea:	f240 3321 	movw	r3, #801	@ 0x321
 8009fee:	4298      	cmp	r0, r3
 8009ff0:	d004      	beq.n	8009ffc <_rclc_execute.part.0+0xc8>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	d0f4      	beq.n	8009fe0 <_rclc_execute.part.0+0xac>
 8009ff6:	e7bf      	b.n	8009f78 <_rclc_execute.part.0+0x44>
 8009ff8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009ffa:	4798      	blx	r3
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	b007      	add	sp, #28
 800a000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a002:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800a006:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a008:	b925      	cbnz	r5, 800a014 <_rclc_execute.part.0+0xe0>
 800a00a:	4628      	mov	r0, r5
 800a00c:	4798      	blx	r3
 800a00e:	4628      	mov	r0, r5
 800a010:	e7e6      	b.n	8009fe0 <_rclc_execute.part.0+0xac>
 800a012:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a014:	68a0      	ldr	r0, [r4, #8]
 800a016:	4798      	blx	r3
 800a018:	2000      	movs	r0, #0
 800a01a:	b007      	add	sp, #28
 800a01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a01e:	6840      	ldr	r0, [r0, #4]
 800a020:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800a024:	bb3b      	cbnz	r3, 800a076 <_rclc_execute.part.0+0x142>
 800a026:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d07b      	beq.n	800a126 <_rclc_execute.part.0+0x1f2>
 800a02e:	f640 0634 	movw	r6, #2100	@ 0x834
 800a032:	2701      	movs	r7, #1
 800a034:	e007      	b.n	800a046 <_rclc_execute.part.0+0x112>
 800a036:	4628      	mov	r0, r5
 800a038:	f006 ff26 	bl	8010e88 <rclc_action_server_response_goal_request>
 800a03c:	6860      	ldr	r0, [r4, #4]
 800a03e:	4629      	mov	r1, r5
 800a040:	f006 fe8e 	bl	8010d60 <rclc_action_remove_used_goal_handle>
 800a044:	6860      	ldr	r0, [r4, #4]
 800a046:	2100      	movs	r1, #0
 800a048:	f006 feb8 	bl	8010dbc <rclc_action_find_first_handle_by_status>
 800a04c:	4605      	mov	r5, r0
 800a04e:	2800      	cmp	r0, #0
 800a050:	d066      	beq.n	800a120 <_rclc_execute.part.0+0x1ec>
 800a052:	6863      	ldr	r3, [r4, #4]
 800a054:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a056:	699b      	ldr	r3, [r3, #24]
 800a058:	4798      	blx	r3
 800a05a:	42b0      	cmp	r0, r6
 800a05c:	f04f 0100 	mov.w	r1, #0
 800a060:	d1e9      	bne.n	800a036 <_rclc_execute.part.0+0x102>
 800a062:	2101      	movs	r1, #1
 800a064:	4628      	mov	r0, r5
 800a066:	f006 ff0f 	bl	8010e88 <rclc_action_server_response_goal_request>
 800a06a:	722f      	strb	r7, [r5, #8]
 800a06c:	e7ea      	b.n	800a044 <_rclc_execute.part.0+0x110>
 800a06e:	6848      	ldr	r0, [r1, #4]
 800a070:	f006 fe76 	bl	8010d60 <rclc_action_remove_used_goal_handle>
 800a074:	6860      	ldr	r0, [r4, #4]
 800a076:	f006 fead 	bl	8010dd4 <rclc_action_find_first_terminated_handle>
 800a07a:	4601      	mov	r1, r0
 800a07c:	2800      	cmp	r0, #0
 800a07e:	d1f6      	bne.n	800a06e <_rclc_execute.part.0+0x13a>
 800a080:	6860      	ldr	r0, [r4, #4]
 800a082:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800a086:	e7ce      	b.n	800a026 <_rclc_execute.part.0+0xf2>
 800a088:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a08a:	6880      	ldr	r0, [r0, #8]
 800a08c:	f104 0110 	add.w	r1, r4, #16
 800a090:	4798      	blx	r3
 800a092:	2000      	movs	r0, #0
 800a094:	b007      	add	sp, #28
 800a096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a098:	6860      	ldr	r0, [r4, #4]
 800a09a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a09e:	b18b      	cbz	r3, 800a0c4 <_rclc_execute.part.0+0x190>
 800a0a0:	68c5      	ldr	r5, [r0, #12]
 800a0a2:	b32d      	cbz	r5, 800a0f0 <_rclc_execute.part.0+0x1bc>
 800a0a4:	2600      	movs	r6, #0
 800a0a6:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800a0aa:	b143      	cbz	r3, 800a0be <_rclc_execute.part.0+0x18a>
 800a0ac:	69c3      	ldr	r3, [r0, #28]
 800a0ae:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800a0b2:	b123      	cbz	r3, 800a0be <_rclc_execute.part.0+0x18a>
 800a0b4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a0b6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	4798      	blx	r3
 800a0bc:	6860      	ldr	r0, [r4, #4]
 800a0be:	682d      	ldr	r5, [r5, #0]
 800a0c0:	2d00      	cmp	r5, #0
 800a0c2:	d1f0      	bne.n	800a0a6 <_rclc_execute.part.0+0x172>
 800a0c4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a0c8:	b193      	cbz	r3, 800a0f0 <_rclc_execute.part.0+0x1bc>
 800a0ca:	68c5      	ldr	r5, [r0, #12]
 800a0cc:	b185      	cbz	r5, 800a0f0 <_rclc_execute.part.0+0x1bc>
 800a0ce:	2600      	movs	r6, #0
 800a0d0:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800a0d4:	b14b      	cbz	r3, 800a0ea <_rclc_execute.part.0+0x1b6>
 800a0d6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800a0d8:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800a0dc:	b12b      	cbz	r3, 800a0ea <_rclc_execute.part.0+0x1b6>
 800a0de:	4628      	mov	r0, r5
 800a0e0:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800a0e4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a0e6:	4798      	blx	r3
 800a0e8:	6860      	ldr	r0, [r4, #4]
 800a0ea:	682d      	ldr	r5, [r5, #0]
 800a0ec:	2d00      	cmp	r5, #0
 800a0ee:	d1ef      	bne.n	800a0d0 <_rclc_execute.part.0+0x19c>
 800a0f0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d081      	beq.n	8009ffc <_rclc_execute.part.0+0xc8>
 800a0f8:	2700      	movs	r7, #0
 800a0fa:	e00b      	b.n	800a114 <_rclc_execute.part.0+0x1e0>
 800a0fc:	6863      	ldr	r3, [r4, #4]
 800a0fe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a100:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a102:	6a1e      	ldr	r6, [r3, #32]
 800a104:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800a108:	47b0      	blx	r6
 800a10a:	6860      	ldr	r0, [r4, #4]
 800a10c:	4629      	mov	r1, r5
 800a10e:	f006 fe27 	bl	8010d60 <rclc_action_remove_used_goal_handle>
 800a112:	6860      	ldr	r0, [r4, #4]
 800a114:	f006 feac 	bl	8010e70 <rclc_action_find_first_handle_with_result_response>
 800a118:	4605      	mov	r5, r0
 800a11a:	2800      	cmp	r0, #0
 800a11c:	d1ee      	bne.n	800a0fc <_rclc_execute.part.0+0x1c8>
 800a11e:	e76d      	b.n	8009ffc <_rclc_execute.part.0+0xc8>
 800a120:	6860      	ldr	r0, [r4, #4]
 800a122:	f880 5020 	strb.w	r5, [r0, #32]
 800a126:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	f43f af66 	beq.w	8009ffc <_rclc_execute.part.0+0xc8>
 800a130:	68c5      	ldr	r5, [r0, #12]
 800a132:	b1b5      	cbz	r5, 800a162 <_rclc_execute.part.0+0x22e>
 800a134:	2602      	movs	r6, #2
 800a136:	e001      	b.n	800a13c <_rclc_execute.part.0+0x208>
 800a138:	682d      	ldr	r5, [r5, #0]
 800a13a:	b195      	cbz	r5, 800a162 <_rclc_execute.part.0+0x22e>
 800a13c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800a140:	2b03      	cmp	r3, #3
 800a142:	d1f9      	bne.n	800a138 <_rclc_execute.part.0+0x204>
 800a144:	69c3      	ldr	r3, [r0, #28]
 800a146:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a148:	4628      	mov	r0, r5
 800a14a:	4798      	blx	r3
 800a14c:	4603      	mov	r3, r0
 800a14e:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800a152:	4628      	mov	r0, r5
 800a154:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800a158:	b163      	cbz	r3, 800a174 <_rclc_execute.part.0+0x240>
 800a15a:	f006 feb5 	bl	8010ec8 <rclc_action_server_goal_cancel_accept>
 800a15e:	6860      	ldr	r0, [r4, #4]
 800a160:	e7ea      	b.n	800a138 <_rclc_execute.part.0+0x204>
 800a162:	2300      	movs	r3, #0
 800a164:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800a168:	4618      	mov	r0, r3
 800a16a:	e739      	b.n	8009fe0 <_rclc_execute.part.0+0xac>
 800a16c:	4628      	mov	r0, r5
 800a16e:	4798      	blx	r3
 800a170:	4628      	mov	r0, r5
 800a172:	e735      	b.n	8009fe0 <_rclc_execute.part.0+0xac>
 800a174:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a176:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a17a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800a17e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a182:	6860      	ldr	r0, [r4, #4]
 800a184:	2101      	movs	r1, #1
 800a186:	f006 fecb 	bl	8010f20 <rclc_action_server_goal_cancel_reject>
 800a18a:	722e      	strb	r6, [r5, #8]
 800a18c:	6860      	ldr	r0, [r4, #4]
 800a18e:	e7d3      	b.n	800a138 <_rclc_execute.part.0+0x204>
 800a190:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a192:	6880      	ldr	r0, [r0, #8]
 800a194:	4798      	blx	r3
 800a196:	f104 0110 	add.w	r1, r4, #16
 800a19a:	e6e7      	b.n	8009f6c <_rclc_execute.part.0+0x38>
 800a19c:	f100 0110 	add.w	r1, r0, #16
 800a1a0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a1a2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800a1a4:	6880      	ldr	r0, [r0, #8]
 800a1a6:	9105      	str	r1, [sp, #20]
 800a1a8:	4798      	blx	r3
 800a1aa:	9905      	ldr	r1, [sp, #20]
 800a1ac:	e6de      	b.n	8009f6c <_rclc_execute.part.0+0x38>
 800a1ae:	2001      	movs	r0, #1
 800a1b0:	e716      	b.n	8009fe0 <_rclc_execute.part.0+0xac>
 800a1b2:	bf00      	nop

0800a1b4 <rclc_executor_trigger_any>:
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	d03f      	beq.n	800a238 <rclc_executor_trigger_any+0x84>
 800a1b8:	2900      	cmp	r1, #0
 800a1ba:	d03e      	beq.n	800a23a <rclc_executor_trigger_any+0x86>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d037      	beq.n	800a238 <rclc_executor_trigger_any+0x84>
 800a1c8:	b430      	push	{r4, r5}
 800a1ca:	f893 c000 	ldrb.w	ip, [r3]
 800a1ce:	f1bc 0f08 	cmp.w	ip, #8
 800a1d2:	d11e      	bne.n	800a212 <rclc_executor_trigger_any+0x5e>
 800a1d4:	685c      	ldr	r4, [r3, #4]
 800a1d6:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800a1d8:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800a1dc:	d105      	bne.n	800a1ea <rclc_executor_trigger_any+0x36>
 800a1de:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800a1e2:	b910      	cbnz	r0, 800a1ea <rclc_executor_trigger_any+0x36>
 800a1e4:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800a1e8:	b128      	cbz	r0, 800a1f6 <rclc_executor_trigger_any+0x42>
 800a1ea:	bc30      	pop	{r4, r5}
 800a1ec:	4770      	bx	lr
 800a1ee:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	d1f9      	bne.n	800a1ea <rclc_executor_trigger_any+0x36>
 800a1f6:	3201      	adds	r2, #1
 800a1f8:	4291      	cmp	r1, r2
 800a1fa:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800a1fe:	d018      	beq.n	800a232 <rclc_executor_trigger_any+0x7e>
 800a200:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800a204:	2800      	cmp	r0, #0
 800a206:	d0f0      	beq.n	800a1ea <rclc_executor_trigger_any+0x36>
 800a208:	f893 c000 	ldrb.w	ip, [r3]
 800a20c:	f1bc 0f08 	cmp.w	ip, #8
 800a210:	d0e0      	beq.n	800a1d4 <rclc_executor_trigger_any+0x20>
 800a212:	f1bc 0f09 	cmp.w	ip, #9
 800a216:	d1ea      	bne.n	800a1ee <rclc_executor_trigger_any+0x3a>
 800a218:	685c      	ldr	r4, [r3, #4]
 800a21a:	6a25      	ldr	r5, [r4, #32]
 800a21c:	2d00      	cmp	r5, #0
 800a21e:	d1e4      	bne.n	800a1ea <rclc_executor_trigger_any+0x36>
 800a220:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800a224:	2800      	cmp	r0, #0
 800a226:	d1e0      	bne.n	800a1ea <rclc_executor_trigger_any+0x36>
 800a228:	3201      	adds	r2, #1
 800a22a:	4291      	cmp	r1, r2
 800a22c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800a230:	d1e6      	bne.n	800a200 <rclc_executor_trigger_any+0x4c>
 800a232:	2000      	movs	r0, #0
 800a234:	bc30      	pop	{r4, r5}
 800a236:	4770      	bx	lr
 800a238:	4770      	bx	lr
 800a23a:	4608      	mov	r0, r1
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop

0800a240 <rclc_executor_get_zero_initialized_executor>:
 800a240:	b510      	push	{r4, lr}
 800a242:	4903      	ldr	r1, [pc, #12]	@ (800a250 <rclc_executor_get_zero_initialized_executor+0x10>)
 800a244:	4604      	mov	r4, r0
 800a246:	2288      	movs	r2, #136	@ 0x88
 800a248:	f00b fbcb 	bl	80159e2 <memcpy>
 800a24c:	4620      	mov	r0, r4
 800a24e:	bd10      	pop	{r4, pc}
 800a250:	08016ac8 	.word	0x08016ac8
 800a254:	00000000 	.word	0x00000000

0800a258 <rclc_executor_init>:
 800a258:	2800      	cmp	r0, #0
 800a25a:	d05f      	beq.n	800a31c <rclc_executor_init+0xc4>
 800a25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a260:	460c      	mov	r4, r1
 800a262:	b0b0      	sub	sp, #192	@ 0xc0
 800a264:	2900      	cmp	r1, #0
 800a266:	d051      	beq.n	800a30c <rclc_executor_init+0xb4>
 800a268:	4605      	mov	r5, r0
 800a26a:	4618      	mov	r0, r3
 800a26c:	4616      	mov	r6, r2
 800a26e:	461f      	mov	r7, r3
 800a270:	f000 fbea 	bl	800aa48 <rcutils_allocator_is_valid>
 800a274:	2800      	cmp	r0, #0
 800a276:	d049      	beq.n	800a30c <rclc_executor_init+0xb4>
 800a278:	2e00      	cmp	r6, #0
 800a27a:	d047      	beq.n	800a30c <rclc_executor_init+0xb4>
 800a27c:	492c      	ldr	r1, [pc, #176]	@ (800a330 <rclc_executor_init+0xd8>)
 800a27e:	2288      	movs	r2, #136	@ 0x88
 800a280:	a80e      	add	r0, sp, #56	@ 0x38
 800a282:	f00b fbae 	bl	80159e2 <memcpy>
 800a286:	a90e      	add	r1, sp, #56	@ 0x38
 800a288:	2288      	movs	r2, #136	@ 0x88
 800a28a:	4628      	mov	r0, r5
 800a28c:	f00b fba9 	bl	80159e2 <memcpy>
 800a290:	602c      	str	r4, [r5, #0]
 800a292:	4668      	mov	r0, sp
 800a294:	60ae      	str	r6, [r5, #8]
 800a296:	466c      	mov	r4, sp
 800a298:	f005 fb0e 	bl	800f8b8 <rcl_get_zero_initialized_wait_set>
 800a29c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a29e:	f105 0c14 	add.w	ip, r5, #20
 800a2a2:	f8d7 8000 	ldr.w	r8, [r7]
 800a2a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a2aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a2b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a2b6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800a328 <rclc_executor_init+0xd0>
 800a2ba:	6823      	ldr	r3, [r4, #0]
 800a2bc:	f8cc 3000 	str.w	r3, [ip]
 800a2c0:	6939      	ldr	r1, [r7, #16]
 800a2c2:	612f      	str	r7, [r5, #16]
 800a2c4:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800a2c8:	01b0      	lsls	r0, r6, #6
 800a2ca:	47c0      	blx	r8
 800a2cc:	6068      	str	r0, [r5, #4]
 800a2ce:	b338      	cbz	r0, 800a320 <rclc_executor_init+0xc8>
 800a2d0:	2400      	movs	r4, #0
 800a2d2:	e000      	b.n	800a2d6 <rclc_executor_init+0x7e>
 800a2d4:	6868      	ldr	r0, [r5, #4]
 800a2d6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800a2da:	4631      	mov	r1, r6
 800a2dc:	3401      	adds	r4, #1
 800a2de:	f000 fa6b 	bl	800a7b8 <rclc_executor_handle_init>
 800a2e2:	42a6      	cmp	r6, r4
 800a2e4:	d1f6      	bne.n	800a2d4 <rclc_executor_init+0x7c>
 800a2e6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800a2ea:	f000 fa5b 	bl	800a7a4 <rclc_executor_handle_counters_zero_init>
 800a2ee:	4a11      	ldr	r2, [pc, #68]	@ (800a334 <rclc_executor_init+0xdc>)
 800a2f0:	686b      	ldr	r3, [r5, #4]
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800a2f8:	b163      	cbz	r3, 800a314 <rclc_executor_init+0xbc>
 800a2fa:	692b      	ldr	r3, [r5, #16]
 800a2fc:	b153      	cbz	r3, 800a314 <rclc_executor_init+0xbc>
 800a2fe:	68ab      	ldr	r3, [r5, #8]
 800a300:	b143      	cbz	r3, 800a314 <rclc_executor_init+0xbc>
 800a302:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800a306:	b030      	add	sp, #192	@ 0xc0
 800a308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a30c:	200b      	movs	r0, #11
 800a30e:	b030      	add	sp, #192	@ 0xc0
 800a310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a314:	4618      	mov	r0, r3
 800a316:	b030      	add	sp, #192	@ 0xc0
 800a318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a31c:	200b      	movs	r0, #11
 800a31e:	4770      	bx	lr
 800a320:	200a      	movs	r0, #10
 800a322:	e7f4      	b.n	800a30e <rclc_executor_init+0xb6>
 800a324:	f3af 8000 	nop.w
 800a328:	3b9aca00 	.word	0x3b9aca00
 800a32c:	00000000 	.word	0x00000000
 800a330:	08016ac8 	.word	0x08016ac8
 800a334:	0800a1b5 	.word	0x0800a1b5

0800a338 <rclc_executor_add_subscription>:
 800a338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800a33e:	b338      	cbz	r0, 800a390 <rclc_executor_add_subscription+0x58>
 800a340:	b331      	cbz	r1, 800a390 <rclc_executor_add_subscription+0x58>
 800a342:	b32a      	cbz	r2, 800a390 <rclc_executor_add_subscription+0x58>
 800a344:	b323      	cbz	r3, 800a390 <rclc_executor_add_subscription+0x58>
 800a346:	4604      	mov	r4, r0
 800a348:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800a34c:	42a8      	cmp	r0, r5
 800a34e:	d301      	bcc.n	800a354 <rclc_executor_add_subscription+0x1c>
 800a350:	2001      	movs	r0, #1
 800a352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a354:	6866      	ldr	r6, [r4, #4]
 800a356:	0187      	lsls	r7, r0, #6
 800a358:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800a35c:	2500      	movs	r5, #0
 800a35e:	55f5      	strb	r5, [r6, r7]
 800a360:	3001      	adds	r0, #1
 800a362:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800a366:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800a36a:	2301      	movs	r3, #1
 800a36c:	f104 0514 	add.w	r5, r4, #20
 800a370:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800a374:	f88c e001 	strb.w	lr, [ip, #1]
 800a378:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800a37c:	60e0      	str	r0, [r4, #12]
 800a37e:	4628      	mov	r0, r5
 800a380:	f005 faae 	bl	800f8e0 <rcl_wait_set_is_valid>
 800a384:	b930      	cbnz	r0, 800a394 <rclc_executor_add_subscription+0x5c>
 800a386:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800a388:	3301      	adds	r3, #1
 800a38a:	2000      	movs	r0, #0
 800a38c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a390:	200b      	movs	r0, #11
 800a392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a394:	4628      	mov	r0, r5
 800a396:	f005 faa9 	bl	800f8ec <rcl_wait_set_fini>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d0f3      	beq.n	800a386 <rclc_executor_add_subscription+0x4e>
 800a39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a3a0 <rclc_executor_prepare>:
 800a3a0:	2800      	cmp	r0, #0
 800a3a2:	d044      	beq.n	800a42e <rclc_executor_prepare+0x8e>
 800a3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3a6:	f100 0514 	add.w	r5, r0, #20
 800a3aa:	b09b      	sub	sp, #108	@ 0x6c
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	f005 fa96 	bl	800f8e0 <rcl_wait_set_is_valid>
 800a3b4:	b110      	cbz	r0, 800a3bc <rclc_executor_prepare+0x1c>
 800a3b6:	2000      	movs	r0, #0
 800a3b8:	b01b      	add	sp, #108	@ 0x6c
 800a3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3bc:	4628      	mov	r0, r5
 800a3be:	f005 fa95 	bl	800f8ec <rcl_wait_set_fini>
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	d130      	bne.n	800a428 <rclc_executor_prepare+0x88>
 800a3c6:	a80c      	add	r0, sp, #48	@ 0x30
 800a3c8:	f005 fa76 	bl	800f8b8 <rcl_get_zero_initialized_wait_set>
 800a3cc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800a3d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a3d4:	46ae      	mov	lr, r5
 800a3d6:	6927      	ldr	r7, [r4, #16]
 800a3d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a3dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a3e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a3e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a3e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a3ec:	f8dc 3000 	ldr.w	r3, [ip]
 800a3f0:	f8ce 3000 	str.w	r3, [lr]
 800a3f4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a3f6:	ae04      	add	r6, sp, #16
 800a3f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	6822      	ldr	r2, [r4, #0]
 800a3fe:	6033      	str	r3, [r6, #0]
 800a400:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a402:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800a404:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800a408:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800a40c:	e9cd 2100 	strd	r2, r1, [sp]
 800a410:	4628      	mov	r0, r5
 800a412:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800a414:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a416:	f005 fd67 	bl	800fee8 <rcl_wait_set_init>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d0cc      	beq.n	800a3b8 <rclc_executor_prepare+0x18>
 800a41e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a420:	f000 fb36 	bl	800aa90 <rcutils_reset_error>
 800a424:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a426:	e7c7      	b.n	800a3b8 <rclc_executor_prepare+0x18>
 800a428:	f000 fb32 	bl	800aa90 <rcutils_reset_error>
 800a42c:	e7cb      	b.n	800a3c6 <rclc_executor_prepare+0x26>
 800a42e:	200b      	movs	r0, #11
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop

0800a434 <rclc_executor_spin_some.part.0>:
 800a434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a438:	f100 0614 	add.w	r6, r0, #20
 800a43c:	b083      	sub	sp, #12
 800a43e:	4691      	mov	r9, r2
 800a440:	4698      	mov	r8, r3
 800a442:	4605      	mov	r5, r0
 800a444:	f7ff ffac 	bl	800a3a0 <rclc_executor_prepare>
 800a448:	4630      	mov	r0, r6
 800a44a:	f005 fb1b 	bl	800fa84 <rcl_wait_set_clear>
 800a44e:	4607      	mov	r7, r0
 800a450:	2800      	cmp	r0, #0
 800a452:	f040 80ed 	bne.w	800a630 <rclc_executor_spin_some.part.0+0x1fc>
 800a456:	68ab      	ldr	r3, [r5, #8]
 800a458:	4604      	mov	r4, r0
 800a45a:	b303      	cbz	r3, 800a49e <rclc_executor_spin_some.part.0+0x6a>
 800a45c:	6869      	ldr	r1, [r5, #4]
 800a45e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800a462:	01a2      	lsls	r2, r4, #6
 800a464:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800a468:	b1cb      	cbz	r3, 800a49e <rclc_executor_spin_some.part.0+0x6a>
 800a46a:	5c8b      	ldrb	r3, [r1, r2]
 800a46c:	2b0a      	cmp	r3, #10
 800a46e:	f200 80d8 	bhi.w	800a622 <rclc_executor_spin_some.part.0+0x1ee>
 800a472:	e8df f003 	tbb	[pc, r3]
 800a476:	9c9c      	.short	0x9c9c
 800a478:	068c8ca7 	.word	0x068c8ca7
 800a47c:	bdc90606 	.word	0xbdc90606
 800a480:	b2          	.byte	0xb2
 800a481:	00          	.byte	0x00
 800a482:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a486:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a48a:	4630      	mov	r0, r6
 800a48c:	f005 fe42 	bl	8010114 <rcl_wait_set_add_service>
 800a490:	2800      	cmp	r0, #0
 800a492:	f040 8086 	bne.w	800a5a2 <rclc_executor_spin_some.part.0+0x16e>
 800a496:	68ab      	ldr	r3, [r5, #8]
 800a498:	3401      	adds	r4, #1
 800a49a:	429c      	cmp	r4, r3
 800a49c:	d3de      	bcc.n	800a45c <rclc_executor_spin_some.part.0+0x28>
 800a49e:	4643      	mov	r3, r8
 800a4a0:	464a      	mov	r2, r9
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	f005 fe64 	bl	8010170 <rcl_wait>
 800a4a8:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f000 80c7 	beq.w	800a640 <rclc_executor_spin_some.part.0+0x20c>
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	f040 80b5 	bne.w	800a622 <rclc_executor_spin_some.part.0+0x1ee>
 800a4b8:	68ab      	ldr	r3, [r5, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f000 8159 	beq.w	800a772 <rclc_executor_spin_some.part.0+0x33e>
 800a4c0:	2400      	movs	r4, #0
 800a4c2:	46a0      	mov	r8, r4
 800a4c4:	f240 1991 	movw	r9, #401	@ 0x191
 800a4c8:	e00a      	b.n	800a4e0 <rclc_executor_spin_some.part.0+0xac>
 800a4ca:	f7ff fb71 	bl	8009bb0 <_rclc_check_for_new_data>
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	b110      	cbz	r0, 800a4d8 <rclc_executor_spin_some.part.0+0xa4>
 800a4d2:	4548      	cmp	r0, r9
 800a4d4:	f040 80b2 	bne.w	800a63c <rclc_executor_spin_some.part.0+0x208>
 800a4d8:	68ab      	ldr	r3, [r5, #8]
 800a4da:	4598      	cmp	r8, r3
 800a4dc:	f080 8126 	bcs.w	800a72c <rclc_executor_spin_some.part.0+0x2f8>
 800a4e0:	686a      	ldr	r2, [r5, #4]
 800a4e2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a4e6:	4631      	mov	r1, r6
 800a4e8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800a4ec:	f108 0801 	add.w	r8, r8, #1
 800a4f0:	f1bc 0f00 	cmp.w	ip, #0
 800a4f4:	d1e9      	bne.n	800a4ca <rclc_executor_spin_some.part.0+0x96>
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	4610      	mov	r0, r2
 800a4fa:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800a4fe:	4798      	blx	r3
 800a500:	2800      	cmp	r0, #0
 800a502:	f000 809b 	beq.w	800a63c <rclc_executor_spin_some.part.0+0x208>
 800a506:	68ab      	ldr	r3, [r5, #8]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f000 8097 	beq.w	800a63c <rclc_executor_spin_some.part.0+0x208>
 800a50e:	f04f 0800 	mov.w	r8, #0
 800a512:	f240 1991 	movw	r9, #401	@ 0x191
 800a516:	e009      	b.n	800a52c <rclc_executor_spin_some.part.0+0xf8>
 800a518:	f7ff fb98 	bl	8009c4c <_rclc_take_new_data>
 800a51c:	4604      	mov	r4, r0
 800a51e:	b110      	cbz	r0, 800a526 <rclc_executor_spin_some.part.0+0xf2>
 800a520:	4548      	cmp	r0, r9
 800a522:	f040 808b 	bne.w	800a63c <rclc_executor_spin_some.part.0+0x208>
 800a526:	68ab      	ldr	r3, [r5, #8]
 800a528:	4598      	cmp	r8, r3
 800a52a:	d209      	bcs.n	800a540 <rclc_executor_spin_some.part.0+0x10c>
 800a52c:	6868      	ldr	r0, [r5, #4]
 800a52e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a532:	4631      	mov	r1, r6
 800a534:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800a538:	f108 0801 	add.w	r8, r8, #1
 800a53c:	2a00      	cmp	r2, #0
 800a53e:	d1eb      	bne.n	800a518 <rclc_executor_spin_some.part.0+0xe4>
 800a540:	2600      	movs	r6, #0
 800a542:	b97b      	cbnz	r3, 800a564 <rclc_executor_spin_some.part.0+0x130>
 800a544:	e07a      	b.n	800a63c <rclc_executor_spin_some.part.0+0x208>
 800a546:	f812 200c 	ldrb.w	r2, [r2, ip]
 800a54a:	2a08      	cmp	r2, #8
 800a54c:	f000 80fd 	beq.w	800a74a <rclc_executor_spin_some.part.0+0x316>
 800a550:	2a09      	cmp	r2, #9
 800a552:	f000 80ef 	beq.w	800a734 <rclc_executor_spin_some.part.0+0x300>
 800a556:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800a55a:	b98a      	cbnz	r2, 800a580 <rclc_executor_spin_some.part.0+0x14c>
 800a55c:	3601      	adds	r6, #1
 800a55e:	429e      	cmp	r6, r3
 800a560:	d262      	bcs.n	800a628 <rclc_executor_spin_some.part.0+0x1f4>
 800a562:	2400      	movs	r4, #0
 800a564:	686a      	ldr	r2, [r5, #4]
 800a566:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800a56a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800a56e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800a572:	2900      	cmp	r1, #0
 800a574:	d062      	beq.n	800a63c <rclc_executor_spin_some.part.0+0x208>
 800a576:	7841      	ldrb	r1, [r0, #1]
 800a578:	2900      	cmp	r1, #0
 800a57a:	d0e4      	beq.n	800a546 <rclc_executor_spin_some.part.0+0x112>
 800a57c:	2901      	cmp	r1, #1
 800a57e:	d1ed      	bne.n	800a55c <rclc_executor_spin_some.part.0+0x128>
 800a580:	f7ff fcd8 	bl	8009f34 <_rclc_execute.part.0>
 800a584:	2800      	cmp	r0, #0
 800a586:	f040 80b6 	bne.w	800a6f6 <rclc_executor_spin_some.part.0+0x2c2>
 800a58a:	68ab      	ldr	r3, [r5, #8]
 800a58c:	e7e6      	b.n	800a55c <rclc_executor_spin_some.part.0+0x128>
 800a58e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a592:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a596:	4630      	mov	r0, r6
 800a598:	f005 fd90 	bl	80100bc <rcl_wait_set_add_client>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	f43f af7a 	beq.w	800a496 <rclc_executor_spin_some.part.0+0x62>
 800a5a2:	9001      	str	r0, [sp, #4]
 800a5a4:	f000 fa74 	bl	800aa90 <rcutils_reset_error>
 800a5a8:	9801      	ldr	r0, [sp, #4]
 800a5aa:	4607      	mov	r7, r0
 800a5ac:	e03c      	b.n	800a628 <rclc_executor_spin_some.part.0+0x1f4>
 800a5ae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a5b2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	f005 fa38 	bl	800fa2c <rcl_wait_set_add_subscription>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	f43f af6a 	beq.w	800a496 <rclc_executor_spin_some.part.0+0x62>
 800a5c2:	e7ee      	b.n	800a5a2 <rclc_executor_spin_some.part.0+0x16e>
 800a5c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a5c8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f005 fd45 	bl	801005c <rcl_wait_set_add_timer>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	f43f af5f 	beq.w	800a496 <rclc_executor_spin_some.part.0+0x62>
 800a5d8:	e7e3      	b.n	800a5a2 <rclc_executor_spin_some.part.0+0x16e>
 800a5da:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a5de:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	f005 fd0e 	bl	8010004 <rcl_wait_set_add_guard_condition>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	f43f af54 	beq.w	800a496 <rclc_executor_spin_some.part.0+0x62>
 800a5ee:	e7d8      	b.n	800a5a2 <rclc_executor_spin_some.part.0+0x16e>
 800a5f0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a5f4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a5f8:	3110      	adds	r1, #16
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	f006 fa90 	bl	8010b20 <rcl_action_wait_set_add_action_server>
 800a600:	2800      	cmp	r0, #0
 800a602:	f43f af48 	beq.w	800a496 <rclc_executor_spin_some.part.0+0x62>
 800a606:	e7cc      	b.n	800a5a2 <rclc_executor_spin_some.part.0+0x16e>
 800a608:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a60c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a610:	3110      	adds	r1, #16
 800a612:	2300      	movs	r3, #0
 800a614:	4630      	mov	r0, r6
 800a616:	f006 f85b 	bl	80106d0 <rcl_action_wait_set_add_action_client>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	f43f af3b 	beq.w	800a496 <rclc_executor_spin_some.part.0+0x62>
 800a620:	e7bf      	b.n	800a5a2 <rclc_executor_spin_some.part.0+0x16e>
 800a622:	f000 fa35 	bl	800aa90 <rcutils_reset_error>
 800a626:	2701      	movs	r7, #1
 800a628:	4638      	mov	r0, r7
 800a62a:	b003      	add	sp, #12
 800a62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a630:	f000 fa2e 	bl	800aa90 <rcutils_reset_error>
 800a634:	4638      	mov	r0, r7
 800a636:	b003      	add	sp, #12
 800a638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a63c:	4627      	mov	r7, r4
 800a63e:	e7f3      	b.n	800a628 <rclc_executor_spin_some.part.0+0x1f4>
 800a640:	68ab      	ldr	r3, [r5, #8]
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 8092 	beq.w	800a76c <rclc_executor_spin_some.part.0+0x338>
 800a648:	2400      	movs	r4, #0
 800a64a:	46a0      	mov	r8, r4
 800a64c:	f240 1991 	movw	r9, #401	@ 0x191
 800a650:	e008      	b.n	800a664 <rclc_executor_spin_some.part.0+0x230>
 800a652:	f7ff faad 	bl	8009bb0 <_rclc_check_for_new_data>
 800a656:	4604      	mov	r4, r0
 800a658:	b108      	cbz	r0, 800a65e <rclc_executor_spin_some.part.0+0x22a>
 800a65a:	4548      	cmp	r0, r9
 800a65c:	d1ee      	bne.n	800a63c <rclc_executor_spin_some.part.0+0x208>
 800a65e:	68ab      	ldr	r3, [r5, #8]
 800a660:	4598      	cmp	r8, r3
 800a662:	d265      	bcs.n	800a730 <rclc_executor_spin_some.part.0+0x2fc>
 800a664:	686a      	ldr	r2, [r5, #4]
 800a666:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a66a:	4631      	mov	r1, r6
 800a66c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800a670:	f108 0801 	add.w	r8, r8, #1
 800a674:	f1bc 0f00 	cmp.w	ip, #0
 800a678:	d1eb      	bne.n	800a652 <rclc_executor_spin_some.part.0+0x21e>
 800a67a:	4619      	mov	r1, r3
 800a67c:	4610      	mov	r0, r2
 800a67e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800a682:	4798      	blx	r3
 800a684:	2800      	cmp	r0, #0
 800a686:	d0d9      	beq.n	800a63c <rclc_executor_spin_some.part.0+0x208>
 800a688:	68ab      	ldr	r3, [r5, #8]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d0d6      	beq.n	800a63c <rclc_executor_spin_some.part.0+0x208>
 800a68e:	f04f 0800 	mov.w	r8, #0
 800a692:	f240 1991 	movw	r9, #401	@ 0x191
 800a696:	f240 2a59 	movw	sl, #601	@ 0x259
 800a69a:	e00e      	b.n	800a6ba <rclc_executor_spin_some.part.0+0x286>
 800a69c:	f813 300b 	ldrb.w	r3, [r3, fp]
 800a6a0:	2b08      	cmp	r3, #8
 800a6a2:	d033      	beq.n	800a70c <rclc_executor_spin_some.part.0+0x2d8>
 800a6a4:	2b09      	cmp	r3, #9
 800a6a6:	d028      	beq.n	800a6fa <rclc_executor_spin_some.part.0+0x2c6>
 800a6a8:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800a6ac:	b9fb      	cbnz	r3, 800a6ee <rclc_executor_spin_some.part.0+0x2ba>
 800a6ae:	68ab      	ldr	r3, [r5, #8]
 800a6b0:	f108 0801 	add.w	r8, r8, #1
 800a6b4:	4598      	cmp	r8, r3
 800a6b6:	d2b7      	bcs.n	800a628 <rclc_executor_spin_some.part.0+0x1f4>
 800a6b8:	2400      	movs	r4, #0
 800a6ba:	6868      	ldr	r0, [r5, #4]
 800a6bc:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a6c0:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800a6c4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d0b7      	beq.n	800a63c <rclc_executor_spin_some.part.0+0x208>
 800a6cc:	4631      	mov	r1, r6
 800a6ce:	f7ff fabd 	bl	8009c4c <_rclc_take_new_data>
 800a6d2:	b118      	cbz	r0, 800a6dc <rclc_executor_spin_some.part.0+0x2a8>
 800a6d4:	4548      	cmp	r0, r9
 800a6d6:	d001      	beq.n	800a6dc <rclc_executor_spin_some.part.0+0x2a8>
 800a6d8:	4550      	cmp	r0, sl
 800a6da:	d10c      	bne.n	800a6f6 <rclc_executor_spin_some.part.0+0x2c2>
 800a6dc:	686b      	ldr	r3, [r5, #4]
 800a6de:	eb13 000b 	adds.w	r0, r3, fp
 800a6e2:	d021      	beq.n	800a728 <rclc_executor_spin_some.part.0+0x2f4>
 800a6e4:	7842      	ldrb	r2, [r0, #1]
 800a6e6:	2a00      	cmp	r2, #0
 800a6e8:	d0d8      	beq.n	800a69c <rclc_executor_spin_some.part.0+0x268>
 800a6ea:	2a01      	cmp	r2, #1
 800a6ec:	d1df      	bne.n	800a6ae <rclc_executor_spin_some.part.0+0x27a>
 800a6ee:	f7ff fc21 	bl	8009f34 <_rclc_execute.part.0>
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	d0db      	beq.n	800a6ae <rclc_executor_spin_some.part.0+0x27a>
 800a6f6:	4607      	mov	r7, r0
 800a6f8:	e796      	b.n	800a628 <rclc_executor_spin_some.part.0+0x1f4>
 800a6fa:	6843      	ldr	r3, [r0, #4]
 800a6fc:	6a1a      	ldr	r2, [r3, #32]
 800a6fe:	2a00      	cmp	r2, #0
 800a700:	d1f5      	bne.n	800a6ee <rclc_executor_spin_some.part.0+0x2ba>
 800a702:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a706:	2b00      	cmp	r3, #0
 800a708:	d0d1      	beq.n	800a6ae <rclc_executor_spin_some.part.0+0x27a>
 800a70a:	e7f0      	b.n	800a6ee <rclc_executor_spin_some.part.0+0x2ba>
 800a70c:	6843      	ldr	r3, [r0, #4]
 800a70e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a710:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800a714:	d1eb      	bne.n	800a6ee <rclc_executor_spin_some.part.0+0x2ba>
 800a716:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a71a:	2a00      	cmp	r2, #0
 800a71c:	d1e7      	bne.n	800a6ee <rclc_executor_spin_some.part.0+0x2ba>
 800a71e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a722:	2b00      	cmp	r3, #0
 800a724:	d0c3      	beq.n	800a6ae <rclc_executor_spin_some.part.0+0x27a>
 800a726:	e7e2      	b.n	800a6ee <rclc_executor_spin_some.part.0+0x2ba>
 800a728:	270b      	movs	r7, #11
 800a72a:	e77d      	b.n	800a628 <rclc_executor_spin_some.part.0+0x1f4>
 800a72c:	686a      	ldr	r2, [r5, #4]
 800a72e:	e6e2      	b.n	800a4f6 <rclc_executor_spin_some.part.0+0xc2>
 800a730:	686a      	ldr	r2, [r5, #4]
 800a732:	e7a2      	b.n	800a67a <rclc_executor_spin_some.part.0+0x246>
 800a734:	6842      	ldr	r2, [r0, #4]
 800a736:	6a11      	ldr	r1, [r2, #32]
 800a738:	2900      	cmp	r1, #0
 800a73a:	f47f af21 	bne.w	800a580 <rclc_executor_spin_some.part.0+0x14c>
 800a73e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800a742:	2a00      	cmp	r2, #0
 800a744:	f43f af0a 	beq.w	800a55c <rclc_executor_spin_some.part.0+0x128>
 800a748:	e71a      	b.n	800a580 <rclc_executor_spin_some.part.0+0x14c>
 800a74a:	6842      	ldr	r2, [r0, #4]
 800a74c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800a74e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800a752:	f47f af15 	bne.w	800a580 <rclc_executor_spin_some.part.0+0x14c>
 800a756:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800a75a:	2900      	cmp	r1, #0
 800a75c:	f47f af10 	bne.w	800a580 <rclc_executor_spin_some.part.0+0x14c>
 800a760:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800a764:	2a00      	cmp	r2, #0
 800a766:	f43f aef9 	beq.w	800a55c <rclc_executor_spin_some.part.0+0x128>
 800a76a:	e709      	b.n	800a580 <rclc_executor_spin_some.part.0+0x14c>
 800a76c:	686a      	ldr	r2, [r5, #4]
 800a76e:	461c      	mov	r4, r3
 800a770:	e783      	b.n	800a67a <rclc_executor_spin_some.part.0+0x246>
 800a772:	686a      	ldr	r2, [r5, #4]
 800a774:	461c      	mov	r4, r3
 800a776:	e6be      	b.n	800a4f6 <rclc_executor_spin_some.part.0+0xc2>

0800a778 <rclc_executor_spin_some>:
 800a778:	b190      	cbz	r0, 800a7a0 <rclc_executor_spin_some+0x28>
 800a77a:	b570      	push	{r4, r5, r6, lr}
 800a77c:	4604      	mov	r4, r0
 800a77e:	6800      	ldr	r0, [r0, #0]
 800a780:	4616      	mov	r6, r2
 800a782:	461d      	mov	r5, r3
 800a784:	f003 ff0c 	bl	800e5a0 <rcl_context_is_valid>
 800a788:	b130      	cbz	r0, 800a798 <rclc_executor_spin_some+0x20>
 800a78a:	4632      	mov	r2, r6
 800a78c:	462b      	mov	r3, r5
 800a78e:	4620      	mov	r0, r4
 800a790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a794:	f7ff be4e 	b.w	800a434 <rclc_executor_spin_some.part.0>
 800a798:	f000 f97a 	bl	800aa90 <rcutils_reset_error>
 800a79c:	2001      	movs	r0, #1
 800a79e:	bd70      	pop	{r4, r5, r6, pc}
 800a7a0:	200b      	movs	r0, #11
 800a7a2:	4770      	bx	lr

0800a7a4 <rclc_executor_handle_counters_zero_init>:
 800a7a4:	b130      	cbz	r0, 800a7b4 <rclc_executor_handle_counters_zero_init+0x10>
 800a7a6:	b508      	push	{r3, lr}
 800a7a8:	2220      	movs	r2, #32
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	f00b f850 	bl	8015850 <memset>
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	bd08      	pop	{r3, pc}
 800a7b4:	200b      	movs	r0, #11
 800a7b6:	4770      	bx	lr

0800a7b8 <rclc_executor_handle_init>:
 800a7b8:	b168      	cbz	r0, 800a7d6 <rclc_executor_handle_init+0x1e>
 800a7ba:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800a7e0 <rclc_executor_handle_init+0x28>
 800a7be:	2300      	movs	r3, #0
 800a7c0:	220b      	movs	r2, #11
 800a7c2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800a7c6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a7ca:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800a7ce:	8002      	strh	r2, [r0, #0]
 800a7d0:	8703      	strh	r3, [r0, #56]	@ 0x38
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	4770      	bx	lr
 800a7d6:	200b      	movs	r0, #11
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	f3af 8000 	nop.w
	...

0800a7e8 <rclc_support_init>:
 800a7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ec:	b086      	sub	sp, #24
 800a7ee:	b3b8      	cbz	r0, 800a860 <rclc_support_init+0x78>
 800a7f0:	461c      	mov	r4, r3
 800a7f2:	b3ab      	cbz	r3, 800a860 <rclc_support_init+0x78>
 800a7f4:	460f      	mov	r7, r1
 800a7f6:	4690      	mov	r8, r2
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	f004 f83b 	bl	800e874 <rcl_get_zero_initialized_init_options>
 800a7fe:	f104 030c 	add.w	r3, r4, #12
 800a802:	9005      	str	r0, [sp, #20]
 800a804:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a808:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a80c:	a805      	add	r0, sp, #20
 800a80e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a812:	f004 f831 	bl	800e878 <rcl_init_options_init>
 800a816:	4605      	mov	r5, r0
 800a818:	b9e0      	cbnz	r0, 800a854 <rclc_support_init+0x6c>
 800a81a:	ad02      	add	r5, sp, #8
 800a81c:	4628      	mov	r0, r5
 800a81e:	f003 feb5 	bl	800e58c <rcl_get_zero_initialized_context>
 800a822:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a826:	4633      	mov	r3, r6
 800a828:	e886 0003 	stmia.w	r6, {r0, r1}
 800a82c:	aa05      	add	r2, sp, #20
 800a82e:	4641      	mov	r1, r8
 800a830:	4638      	mov	r0, r7
 800a832:	f003 ff1b 	bl	800e66c <rcl_init>
 800a836:	4605      	mov	r5, r0
 800a838:	b9b8      	cbnz	r0, 800a86a <rclc_support_init+0x82>
 800a83a:	60b4      	str	r4, [r6, #8]
 800a83c:	4622      	mov	r2, r4
 800a83e:	f106 010c 	add.w	r1, r6, #12
 800a842:	2003      	movs	r0, #3
 800a844:	f004 fe42 	bl	800f4cc <rcl_clock_init>
 800a848:	4605      	mov	r5, r0
 800a84a:	b970      	cbnz	r0, 800a86a <rclc_support_init+0x82>
 800a84c:	a805      	add	r0, sp, #20
 800a84e:	f004 f879 	bl	800e944 <rcl_init_options_fini>
 800a852:	b108      	cbz	r0, 800a858 <rclc_support_init+0x70>
 800a854:	f000 f91c 	bl	800aa90 <rcutils_reset_error>
 800a858:	4628      	mov	r0, r5
 800a85a:	b006      	add	sp, #24
 800a85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a860:	250b      	movs	r5, #11
 800a862:	4628      	mov	r0, r5
 800a864:	b006      	add	sp, #24
 800a866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a86a:	f000 f911 	bl	800aa90 <rcutils_reset_error>
 800a86e:	a805      	add	r0, sp, #20
 800a870:	f004 f868 	bl	800e944 <rcl_init_options_fini>
 800a874:	2800      	cmp	r0, #0
 800a876:	d0ef      	beq.n	800a858 <rclc_support_init+0x70>
 800a878:	e7ec      	b.n	800a854 <rclc_support_init+0x6c>
 800a87a:	bf00      	nop

0800a87c <rclc_node_init_default>:
 800a87c:	b3b8      	cbz	r0, 800a8ee <rclc_node_init_default+0x72>
 800a87e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a882:	460d      	mov	r5, r1
 800a884:	b0a1      	sub	sp, #132	@ 0x84
 800a886:	b329      	cbz	r1, 800a8d4 <rclc_node_init_default+0x58>
 800a888:	4616      	mov	r6, r2
 800a88a:	b31a      	cbz	r2, 800a8d4 <rclc_node_init_default+0x58>
 800a88c:	461f      	mov	r7, r3
 800a88e:	b30b      	cbz	r3, 800a8d4 <rclc_node_init_default+0x58>
 800a890:	f10d 0810 	add.w	r8, sp, #16
 800a894:	4604      	mov	r4, r0
 800a896:	4640      	mov	r0, r8
 800a898:	f004 f90c 	bl	800eab4 <rcl_get_zero_initialized_node>
 800a89c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a8a0:	f10d 0918 	add.w	r9, sp, #24
 800a8a4:	e884 0003 	stmia.w	r4, {r0, r1}
 800a8a8:	4648      	mov	r0, r9
 800a8aa:	f004 fa7b 	bl	800eda4 <rcl_node_get_default_options>
 800a8ae:	4640      	mov	r0, r8
 800a8b0:	f004 f900 	bl	800eab4 <rcl_get_zero_initialized_node>
 800a8b4:	f8cd 9000 	str.w	r9, [sp]
 800a8b8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a8bc:	463b      	mov	r3, r7
 800a8be:	e884 0003 	stmia.w	r4, {r0, r1}
 800a8c2:	4632      	mov	r2, r6
 800a8c4:	4629      	mov	r1, r5
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f004 f8fe 	bl	800eac8 <rcl_node_init>
 800a8cc:	b930      	cbnz	r0, 800a8dc <rclc_node_init_default+0x60>
 800a8ce:	b021      	add	sp, #132	@ 0x84
 800a8d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8d4:	200b      	movs	r0, #11
 800a8d6:	b021      	add	sp, #132	@ 0x84
 800a8d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8dc:	9003      	str	r0, [sp, #12]
 800a8de:	f000 f8d7 	bl	800aa90 <rcutils_reset_error>
 800a8e2:	f000 f8d5 	bl	800aa90 <rcutils_reset_error>
 800a8e6:	9803      	ldr	r0, [sp, #12]
 800a8e8:	b021      	add	sp, #132	@ 0x84
 800a8ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8ee:	200b      	movs	r0, #11
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop

0800a8f4 <rclc_publisher_init_default>:
 800a8f4:	b368      	cbz	r0, 800a952 <rclc_publisher_init_default+0x5e>
 800a8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8fa:	460d      	mov	r5, r1
 800a8fc:	b0a0      	sub	sp, #128	@ 0x80
 800a8fe:	b321      	cbz	r1, 800a94a <rclc_publisher_init_default+0x56>
 800a900:	4616      	mov	r6, r2
 800a902:	b312      	cbz	r2, 800a94a <rclc_publisher_init_default+0x56>
 800a904:	461f      	mov	r7, r3
 800a906:	b303      	cbz	r3, 800a94a <rclc_publisher_init_default+0x56>
 800a908:	4604      	mov	r4, r0
 800a90a:	f7ff f841 	bl	8009990 <rcl_get_zero_initialized_publisher>
 800a90e:	f10d 0810 	add.w	r8, sp, #16
 800a912:	6020      	str	r0, [r4, #0]
 800a914:	4640      	mov	r0, r8
 800a916:	f7ff f8d7 	bl	8009ac8 <rcl_publisher_get_default_options>
 800a91a:	490f      	ldr	r1, [pc, #60]	@ (800a958 <rclc_publisher_init_default+0x64>)
 800a91c:	2250      	movs	r2, #80	@ 0x50
 800a91e:	4640      	mov	r0, r8
 800a920:	f00b f85f 	bl	80159e2 <memcpy>
 800a924:	f8cd 8000 	str.w	r8, [sp]
 800a928:	463b      	mov	r3, r7
 800a92a:	4632      	mov	r2, r6
 800a92c:	4629      	mov	r1, r5
 800a92e:	4620      	mov	r0, r4
 800a930:	f7ff f834 	bl	800999c <rcl_publisher_init>
 800a934:	b910      	cbnz	r0, 800a93c <rclc_publisher_init_default+0x48>
 800a936:	b020      	add	sp, #128	@ 0x80
 800a938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a93c:	9003      	str	r0, [sp, #12]
 800a93e:	f000 f8a7 	bl	800aa90 <rcutils_reset_error>
 800a942:	9803      	ldr	r0, [sp, #12]
 800a944:	b020      	add	sp, #128	@ 0x80
 800a946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a94a:	200b      	movs	r0, #11
 800a94c:	b020      	add	sp, #128	@ 0x80
 800a94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a952:	200b      	movs	r0, #11
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	08016b50 	.word	0x08016b50

0800a95c <rclc_subscription_init_default>:
 800a95c:	b368      	cbz	r0, 800a9ba <rclc_subscription_init_default+0x5e>
 800a95e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a962:	460d      	mov	r5, r1
 800a964:	b0a0      	sub	sp, #128	@ 0x80
 800a966:	b321      	cbz	r1, 800a9b2 <rclc_subscription_init_default+0x56>
 800a968:	4616      	mov	r6, r2
 800a96a:	b312      	cbz	r2, 800a9b2 <rclc_subscription_init_default+0x56>
 800a96c:	461f      	mov	r7, r3
 800a96e:	b303      	cbz	r3, 800a9b2 <rclc_subscription_init_default+0x56>
 800a970:	4604      	mov	r4, r0
 800a972:	f004 fc4f 	bl	800f214 <rcl_get_zero_initialized_subscription>
 800a976:	f10d 0810 	add.w	r8, sp, #16
 800a97a:	6020      	str	r0, [r4, #0]
 800a97c:	4640      	mov	r0, r8
 800a97e:	f004 fcf7 	bl	800f370 <rcl_subscription_get_default_options>
 800a982:	490f      	ldr	r1, [pc, #60]	@ (800a9c0 <rclc_subscription_init_default+0x64>)
 800a984:	2250      	movs	r2, #80	@ 0x50
 800a986:	4640      	mov	r0, r8
 800a988:	f00b f82b 	bl	80159e2 <memcpy>
 800a98c:	f8cd 8000 	str.w	r8, [sp]
 800a990:	463b      	mov	r3, r7
 800a992:	4632      	mov	r2, r6
 800a994:	4629      	mov	r1, r5
 800a996:	4620      	mov	r0, r4
 800a998:	f004 fc42 	bl	800f220 <rcl_subscription_init>
 800a99c:	b910      	cbnz	r0, 800a9a4 <rclc_subscription_init_default+0x48>
 800a99e:	b020      	add	sp, #128	@ 0x80
 800a9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9a4:	9003      	str	r0, [sp, #12]
 800a9a6:	f000 f873 	bl	800aa90 <rcutils_reset_error>
 800a9aa:	9803      	ldr	r0, [sp, #12]
 800a9ac:	b020      	add	sp, #128	@ 0x80
 800a9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9b2:	200b      	movs	r0, #11
 800a9b4:	b020      	add	sp, #128	@ 0x80
 800a9b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ba:	200b      	movs	r0, #11
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	08016ba0 	.word	0x08016ba0

0800a9c4 <__default_zero_allocate>:
 800a9c4:	f00a bb5a 	b.w	801507c <calloc>

0800a9c8 <__default_reallocate>:
 800a9c8:	f00a bce6 	b.w	8015398 <realloc>

0800a9cc <__default_deallocate>:
 800a9cc:	f00a bbc2 	b.w	8015154 <free>

0800a9d0 <__default_allocate>:
 800a9d0:	f00a bbb8 	b.w	8015144 <malloc>

0800a9d4 <rcutils_get_zero_initialized_allocator>:
 800a9d4:	b510      	push	{r4, lr}
 800a9d6:	4c05      	ldr	r4, [pc, #20]	@ (800a9ec <rcutils_get_zero_initialized_allocator+0x18>)
 800a9d8:	4686      	mov	lr, r0
 800a9da:	4684      	mov	ip, r0
 800a9dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	f8cc 3000 	str.w	r3, [ip]
 800a9e8:	4670      	mov	r0, lr
 800a9ea:	bd10      	pop	{r4, pc}
 800a9ec:	08016bf0 	.word	0x08016bf0

0800a9f0 <rcutils_set_default_allocator>:
 800a9f0:	b1a8      	cbz	r0, 800aa1e <rcutils_set_default_allocator+0x2e>
 800a9f2:	6802      	ldr	r2, [r0, #0]
 800a9f4:	b1a2      	cbz	r2, 800aa20 <rcutils_set_default_allocator+0x30>
 800a9f6:	6841      	ldr	r1, [r0, #4]
 800a9f8:	b1a1      	cbz	r1, 800aa24 <rcutils_set_default_allocator+0x34>
 800a9fa:	b410      	push	{r4}
 800a9fc:	68c4      	ldr	r4, [r0, #12]
 800a9fe:	b164      	cbz	r4, 800aa1a <rcutils_set_default_allocator+0x2a>
 800aa00:	6880      	ldr	r0, [r0, #8]
 800aa02:	b138      	cbz	r0, 800aa14 <rcutils_set_default_allocator+0x24>
 800aa04:	4b08      	ldr	r3, [pc, #32]	@ (800aa28 <rcutils_set_default_allocator+0x38>)
 800aa06:	601a      	str	r2, [r3, #0]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800aa0e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800aa12:	2001      	movs	r0, #1
 800aa14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa18:	4770      	bx	lr
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	e7fa      	b.n	800aa14 <rcutils_set_default_allocator+0x24>
 800aa1e:	4770      	bx	lr
 800aa20:	4610      	mov	r0, r2
 800aa22:	4770      	bx	lr
 800aa24:	4608      	mov	r0, r1
 800aa26:	4770      	bx	lr
 800aa28:	200001bc 	.word	0x200001bc

0800aa2c <rcutils_get_default_allocator>:
 800aa2c:	b510      	push	{r4, lr}
 800aa2e:	4c05      	ldr	r4, [pc, #20]	@ (800aa44 <rcutils_get_default_allocator+0x18>)
 800aa30:	4686      	mov	lr, r0
 800aa32:	4684      	mov	ip, r0
 800aa34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	f8cc 3000 	str.w	r3, [ip]
 800aa40:	4670      	mov	r0, lr
 800aa42:	bd10      	pop	{r4, pc}
 800aa44:	200001bc 	.word	0x200001bc

0800aa48 <rcutils_allocator_is_valid>:
 800aa48:	b158      	cbz	r0, 800aa62 <rcutils_allocator_is_valid+0x1a>
 800aa4a:	6803      	ldr	r3, [r0, #0]
 800aa4c:	b143      	cbz	r3, 800aa60 <rcutils_allocator_is_valid+0x18>
 800aa4e:	6843      	ldr	r3, [r0, #4]
 800aa50:	b133      	cbz	r3, 800aa60 <rcutils_allocator_is_valid+0x18>
 800aa52:	68c3      	ldr	r3, [r0, #12]
 800aa54:	b123      	cbz	r3, 800aa60 <rcutils_allocator_is_valid+0x18>
 800aa56:	6880      	ldr	r0, [r0, #8]
 800aa58:	3800      	subs	r0, #0
 800aa5a:	bf18      	it	ne
 800aa5c:	2001      	movne	r0, #1
 800aa5e:	4770      	bx	lr
 800aa60:	4618      	mov	r0, r3
 800aa62:	4770      	bx	lr

0800aa64 <rcutils_get_error_string>:
 800aa64:	4b06      	ldr	r3, [pc, #24]	@ (800aa80 <rcutils_get_error_string+0x1c>)
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	b13b      	cbz	r3, 800aa7a <rcutils_get_error_string+0x16>
 800aa6a:	4b06      	ldr	r3, [pc, #24]	@ (800aa84 <rcutils_get_error_string+0x20>)
 800aa6c:	781a      	ldrb	r2, [r3, #0]
 800aa6e:	b90a      	cbnz	r2, 800aa74 <rcutils_get_error_string+0x10>
 800aa70:	2201      	movs	r2, #1
 800aa72:	701a      	strb	r2, [r3, #0]
 800aa74:	4b04      	ldr	r3, [pc, #16]	@ (800aa88 <rcutils_get_error_string+0x24>)
 800aa76:	7818      	ldrb	r0, [r3, #0]
 800aa78:	4770      	bx	lr
 800aa7a:	4b04      	ldr	r3, [pc, #16]	@ (800aa8c <rcutils_get_error_string+0x28>)
 800aa7c:	7818      	ldrb	r0, [r3, #0]
 800aa7e:	4770      	bx	lr
 800aa80:	20009228 	.word	0x20009228
 800aa84:	20009241 	.word	0x20009241
 800aa88:	20009240 	.word	0x20009240
 800aa8c:	08016c04 	.word	0x08016c04

0800aa90 <rcutils_reset_error>:
 800aa90:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800aab0 <rcutils_reset_error+0x20>
 800aa94:	4a08      	ldr	r2, [pc, #32]	@ (800aab8 <rcutils_reset_error+0x28>)
 800aa96:	4809      	ldr	r0, [pc, #36]	@ (800aabc <rcutils_reset_error+0x2c>)
 800aa98:	4909      	ldr	r1, [pc, #36]	@ (800aac0 <rcutils_reset_error+0x30>)
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	8013      	strh	r3, [r2, #0]
 800aa9e:	ed82 7b02 	vstr	d7, [r2, #8]
 800aaa2:	4a08      	ldr	r2, [pc, #32]	@ (800aac4 <rcutils_reset_error+0x34>)
 800aaa4:	7003      	strb	r3, [r0, #0]
 800aaa6:	700b      	strb	r3, [r1, #0]
 800aaa8:	7013      	strb	r3, [r2, #0]
 800aaaa:	4770      	bx	lr
 800aaac:	f3af 8000 	nop.w
	...
 800aab8:	20009230 	.word	0x20009230
 800aabc:	20009241 	.word	0x20009241
 800aac0:	20009240 	.word	0x20009240
 800aac4:	20009228 	.word	0x20009228

0800aac8 <rcutils_system_time_now>:
 800aac8:	b308      	cbz	r0, 800ab0e <rcutils_system_time_now+0x46>
 800aaca:	b570      	push	{r4, r5, r6, lr}
 800aacc:	b084      	sub	sp, #16
 800aace:	4604      	mov	r4, r0
 800aad0:	4669      	mov	r1, sp
 800aad2:	2001      	movs	r0, #1
 800aad4:	f7f6 fe48 	bl	8001768 <clock_gettime>
 800aad8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800aadc:	2d00      	cmp	r5, #0
 800aade:	db13      	blt.n	800ab08 <rcutils_system_time_now+0x40>
 800aae0:	9902      	ldr	r1, [sp, #8]
 800aae2:	2900      	cmp	r1, #0
 800aae4:	db0d      	blt.n	800ab02 <rcutils_system_time_now+0x3a>
 800aae6:	4e0b      	ldr	r6, [pc, #44]	@ (800ab14 <rcutils_system_time_now+0x4c>)
 800aae8:	fba3 3206 	umull	r3, r2, r3, r6
 800aaec:	185b      	adds	r3, r3, r1
 800aaee:	fb06 2205 	mla	r2, r6, r5, r2
 800aaf2:	f04f 0000 	mov.w	r0, #0
 800aaf6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800aafa:	e9c4 3200 	strd	r3, r2, [r4]
 800aafe:	b004      	add	sp, #16
 800ab00:	bd70      	pop	{r4, r5, r6, pc}
 800ab02:	ea53 0205 	orrs.w	r2, r3, r5
 800ab06:	d1ee      	bne.n	800aae6 <rcutils_system_time_now+0x1e>
 800ab08:	2002      	movs	r0, #2
 800ab0a:	b004      	add	sp, #16
 800ab0c:	bd70      	pop	{r4, r5, r6, pc}
 800ab0e:	200b      	movs	r0, #11
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	3b9aca00 	.word	0x3b9aca00

0800ab18 <rcutils_steady_time_now>:
 800ab18:	b308      	cbz	r0, 800ab5e <rcutils_steady_time_now+0x46>
 800ab1a:	b570      	push	{r4, r5, r6, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	4604      	mov	r4, r0
 800ab20:	4669      	mov	r1, sp
 800ab22:	2000      	movs	r0, #0
 800ab24:	f7f6 fe20 	bl	8001768 <clock_gettime>
 800ab28:	e9dd 3500 	ldrd	r3, r5, [sp]
 800ab2c:	2d00      	cmp	r5, #0
 800ab2e:	db13      	blt.n	800ab58 <rcutils_steady_time_now+0x40>
 800ab30:	9902      	ldr	r1, [sp, #8]
 800ab32:	2900      	cmp	r1, #0
 800ab34:	db0d      	blt.n	800ab52 <rcutils_steady_time_now+0x3a>
 800ab36:	4e0b      	ldr	r6, [pc, #44]	@ (800ab64 <rcutils_steady_time_now+0x4c>)
 800ab38:	fba3 3206 	umull	r3, r2, r3, r6
 800ab3c:	185b      	adds	r3, r3, r1
 800ab3e:	fb06 2205 	mla	r2, r6, r5, r2
 800ab42:	f04f 0000 	mov.w	r0, #0
 800ab46:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800ab4a:	e9c4 3200 	strd	r3, r2, [r4]
 800ab4e:	b004      	add	sp, #16
 800ab50:	bd70      	pop	{r4, r5, r6, pc}
 800ab52:	ea53 0205 	orrs.w	r2, r3, r5
 800ab56:	d1ee      	bne.n	800ab36 <rcutils_steady_time_now+0x1e>
 800ab58:	2002      	movs	r0, #2
 800ab5a:	b004      	add	sp, #16
 800ab5c:	bd70      	pop	{r4, r5, r6, pc}
 800ab5e:	200b      	movs	r0, #11
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	3b9aca00 	.word	0x3b9aca00

0800ab68 <rmw_get_default_publisher_options>:
 800ab68:	2200      	movs	r2, #0
 800ab6a:	6002      	str	r2, [r0, #0]
 800ab6c:	7102      	strb	r2, [r0, #4]
 800ab6e:	4770      	bx	lr

0800ab70 <rmw_uros_set_custom_transport>:
 800ab70:	b470      	push	{r4, r5, r6}
 800ab72:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ab76:	b162      	cbz	r2, 800ab92 <rmw_uros_set_custom_transport+0x22>
 800ab78:	b15b      	cbz	r3, 800ab92 <rmw_uros_set_custom_transport+0x22>
 800ab7a:	b155      	cbz	r5, 800ab92 <rmw_uros_set_custom_transport+0x22>
 800ab7c:	b14e      	cbz	r6, 800ab92 <rmw_uros_set_custom_transport+0x22>
 800ab7e:	4c06      	ldr	r4, [pc, #24]	@ (800ab98 <rmw_uros_set_custom_transport+0x28>)
 800ab80:	7020      	strb	r0, [r4, #0]
 800ab82:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ab86:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ab8a:	6166      	str	r6, [r4, #20]
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	bc70      	pop	{r4, r5, r6}
 800ab90:	4770      	bx	lr
 800ab92:	200b      	movs	r0, #11
 800ab94:	bc70      	pop	{r4, r5, r6}
 800ab96:	4770      	bx	lr
 800ab98:	20009244 	.word	0x20009244

0800ab9c <flush_session>:
 800ab9c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800ab9e:	f001 bcdf 	b.w	800c560 <uxr_run_session_until_confirm_delivery>
 800aba2:	bf00      	nop

0800aba4 <rmw_publish>:
 800aba4:	2800      	cmp	r0, #0
 800aba6:	d053      	beq.n	800ac50 <rmw_publish+0xac>
 800aba8:	b570      	push	{r4, r5, r6, lr}
 800abaa:	460d      	mov	r5, r1
 800abac:	b08e      	sub	sp, #56	@ 0x38
 800abae:	2900      	cmp	r1, #0
 800abb0:	d04b      	beq.n	800ac4a <rmw_publish+0xa6>
 800abb2:	4604      	mov	r4, r0
 800abb4:	6800      	ldr	r0, [r0, #0]
 800abb6:	f000 fced 	bl	800b594 <is_uxrce_rmw_identifier_valid>
 800abba:	2800      	cmp	r0, #0
 800abbc:	d045      	beq.n	800ac4a <rmw_publish+0xa6>
 800abbe:	6866      	ldr	r6, [r4, #4]
 800abc0:	2e00      	cmp	r6, #0
 800abc2:	d042      	beq.n	800ac4a <rmw_publish+0xa6>
 800abc4:	69b4      	ldr	r4, [r6, #24]
 800abc6:	4628      	mov	r0, r5
 800abc8:	6923      	ldr	r3, [r4, #16]
 800abca:	4798      	blx	r3
 800abcc:	69f3      	ldr	r3, [r6, #28]
 800abce:	9005      	str	r0, [sp, #20]
 800abd0:	b113      	cbz	r3, 800abd8 <rmw_publish+0x34>
 800abd2:	a805      	add	r0, sp, #20
 800abd4:	4798      	blx	r3
 800abd6:	9805      	ldr	r0, [sp, #20]
 800abd8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	9000      	str	r0, [sp, #0]
 800abe0:	6972      	ldr	r2, [r6, #20]
 800abe2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800abe4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800abe8:	ab06      	add	r3, sp, #24
 800abea:	f002 faa5 	bl	800d138 <uxr_prepare_output_stream>
 800abee:	b1d8      	cbz	r0, 800ac28 <rmw_publish+0x84>
 800abf0:	68a3      	ldr	r3, [r4, #8]
 800abf2:	a906      	add	r1, sp, #24
 800abf4:	4628      	mov	r0, r5
 800abf6:	4798      	blx	r3
 800abf8:	6a33      	ldr	r3, [r6, #32]
 800abfa:	4604      	mov	r4, r0
 800abfc:	b10b      	cbz	r3, 800ac02 <rmw_publish+0x5e>
 800abfe:	a806      	add	r0, sp, #24
 800ac00:	4798      	blx	r3
 800ac02:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ac0c:	d022      	beq.n	800ac54 <rmw_publish+0xb0>
 800ac0e:	6918      	ldr	r0, [r3, #16]
 800ac10:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800ac12:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ac16:	f001 fca3 	bl	800c560 <uxr_run_session_until_confirm_delivery>
 800ac1a:	4020      	ands	r0, r4
 800ac1c:	b2c4      	uxtb	r4, r0
 800ac1e:	f084 0001 	eor.w	r0, r4, #1
 800ac22:	b2c0      	uxtb	r0, r0
 800ac24:	b00e      	add	sp, #56	@ 0x38
 800ac26:	bd70      	pop	{r4, r5, r6, pc}
 800ac28:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ac2c:	6918      	ldr	r0, [r3, #16]
 800ac2e:	9b05      	ldr	r3, [sp, #20]
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	4b0b      	ldr	r3, [pc, #44]	@ (800ac60 <rmw_publish+0xbc>)
 800ac34:	9301      	str	r3, [sp, #4]
 800ac36:	9602      	str	r6, [sp, #8]
 800ac38:	6972      	ldr	r2, [r6, #20]
 800ac3a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800ac3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ac40:	ab06      	add	r3, sp, #24
 800ac42:	f002 faa9 	bl	800d198 <uxr_prepare_output_stream_fragmented>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	d1d2      	bne.n	800abf0 <rmw_publish+0x4c>
 800ac4a:	2001      	movs	r0, #1
 800ac4c:	b00e      	add	sp, #56	@ 0x38
 800ac4e:	bd70      	pop	{r4, r5, r6, pc}
 800ac50:	2001      	movs	r0, #1
 800ac52:	4770      	bx	lr
 800ac54:	6918      	ldr	r0, [r3, #16]
 800ac56:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ac5a:	f001 f8c1 	bl	800bde0 <uxr_flash_output_streams>
 800ac5e:	e7de      	b.n	800ac1e <rmw_publish+0x7a>
 800ac60:	0800ab9d 	.word	0x0800ab9d

0800ac64 <rmw_create_publisher>:
 800ac64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac68:	b087      	sub	sp, #28
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	f000 80cc 	beq.w	800ae08 <rmw_create_publisher+0x1a4>
 800ac70:	460e      	mov	r6, r1
 800ac72:	2900      	cmp	r1, #0
 800ac74:	f000 80c8 	beq.w	800ae08 <rmw_create_publisher+0x1a4>
 800ac78:	4604      	mov	r4, r0
 800ac7a:	6800      	ldr	r0, [r0, #0]
 800ac7c:	4615      	mov	r5, r2
 800ac7e:	4698      	mov	r8, r3
 800ac80:	f000 fc88 	bl	800b594 <is_uxrce_rmw_identifier_valid>
 800ac84:	2800      	cmp	r0, #0
 800ac86:	f000 80bf 	beq.w	800ae08 <rmw_create_publisher+0x1a4>
 800ac8a:	2d00      	cmp	r5, #0
 800ac8c:	f000 80bc 	beq.w	800ae08 <rmw_create_publisher+0x1a4>
 800ac90:	782b      	ldrb	r3, [r5, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	f000 80b8 	beq.w	800ae08 <rmw_create_publisher+0x1a4>
 800ac98:	f1b8 0f00 	cmp.w	r8, #0
 800ac9c:	f000 80b4 	beq.w	800ae08 <rmw_create_publisher+0x1a4>
 800aca0:	485c      	ldr	r0, [pc, #368]	@ (800ae14 <rmw_create_publisher+0x1b0>)
 800aca2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800aca6:	f006 febb 	bl	8011a20 <get_memory>
 800acaa:	2800      	cmp	r0, #0
 800acac:	f000 80ac 	beq.w	800ae08 <rmw_create_publisher+0x1a4>
 800acb0:	6884      	ldr	r4, [r0, #8]
 800acb2:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800acb6:	f006 ff1b 	bl	8011af0 <rmw_get_implementation_identifier>
 800acba:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800acbe:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800acc2:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800acc6:	4628      	mov	r0, r5
 800acc8:	f7f5 fa94 	bl	80001f4 <strlen>
 800accc:	3001      	adds	r0, #1
 800acce:	283c      	cmp	r0, #60	@ 0x3c
 800acd0:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800acd4:	f200 8091 	bhi.w	800adfa <rmw_create_publisher+0x196>
 800acd8:	4a4f      	ldr	r2, [pc, #316]	@ (800ae18 <rmw_create_publisher+0x1b4>)
 800acda:	462b      	mov	r3, r5
 800acdc:	213c      	movs	r1, #60	@ 0x3c
 800acde:	4650      	mov	r0, sl
 800ace0:	f00a fcdc 	bl	801569c <sniprintf>
 800ace4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ace8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800acea:	4641      	mov	r1, r8
 800acec:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800acf0:	2250      	movs	r2, #80	@ 0x50
 800acf2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800acf6:	f00a fe74 	bl	80159e2 <memcpy>
 800acfa:	f898 3008 	ldrb.w	r3, [r8, #8]
 800acfe:	4947      	ldr	r1, [pc, #284]	@ (800ae1c <rmw_create_publisher+0x1b8>)
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad06:	bf0c      	ite	eq
 800ad08:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800ad0c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800ad10:	67a3      	str	r3, [r4, #120]	@ 0x78
 800ad12:	2300      	movs	r3, #0
 800ad14:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ad18:	4630      	mov	r0, r6
 800ad1a:	f000 fc49 	bl	800b5b0 <get_message_typesupport_handle>
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	d06b      	beq.n	800adfa <rmw_create_publisher+0x196>
 800ad22:	6842      	ldr	r2, [r0, #4]
 800ad24:	61a2      	str	r2, [r4, #24]
 800ad26:	2a00      	cmp	r2, #0
 800ad28:	d067      	beq.n	800adfa <rmw_create_publisher+0x196>
 800ad2a:	4629      	mov	r1, r5
 800ad2c:	4643      	mov	r3, r8
 800ad2e:	4648      	mov	r0, r9
 800ad30:	f007 f944 	bl	8011fbc <create_topic>
 800ad34:	6260      	str	r0, [r4, #36]	@ 0x24
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d063      	beq.n	800ae02 <rmw_create_publisher+0x19e>
 800ad3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad42:	2103      	movs	r1, #3
 800ad44:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800ad48:	1c42      	adds	r2, r0, #1
 800ad4a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800ad4e:	f000 fef9 	bl	800bb44 <uxr_object_id>
 800ad52:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800ad56:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad5a:	6120      	str	r0, [r4, #16]
 800ad5c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800ad60:	6910      	ldr	r0, [r2, #16]
 800ad62:	2506      	movs	r5, #6
 800ad64:	9500      	str	r5, [sp, #0]
 800ad66:	6819      	ldr	r1, [r3, #0]
 800ad68:	6922      	ldr	r2, [r4, #16]
 800ad6a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ad6e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ad72:	f000 fd99 	bl	800b8a8 <uxr_buffer_create_publisher_bin>
 800ad76:	4602      	mov	r2, r0
 800ad78:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ad7c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ad80:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ad84:	f000 fb86 	bl	800b494 <run_xrce_session>
 800ad88:	b3b8      	cbz	r0, 800adfa <rmw_create_publisher+0x196>
 800ad8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad92:	2105      	movs	r1, #5
 800ad94:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800ad98:	1c42      	adds	r2, r0, #1
 800ad9a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800ad9e:	f000 fed1 	bl	800bb44 <uxr_object_id>
 800ada2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ada6:	6160      	str	r0, [r4, #20]
 800ada8:	691e      	ldr	r6, [r3, #16]
 800adaa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adae:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800adb2:	f10d 0a10 	add.w	sl, sp, #16
 800adb6:	4641      	mov	r1, r8
 800adb8:	4650      	mov	r0, sl
 800adba:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800adbe:	f000 fb85 	bl	800b4cc <convert_qos_profile>
 800adc2:	9503      	str	r5, [sp, #12]
 800adc4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800adc8:	9001      	str	r0, [sp, #4]
 800adca:	f8ad 1008 	strh.w	r1, [sp, #8]
 800adce:	f8db 3010 	ldr.w	r3, [fp, #16]
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800add8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800addc:	f8d8 1000 	ldr.w	r1, [r8]
 800ade0:	4630      	mov	r0, r6
 800ade2:	f000 fdc1 	bl	800b968 <uxr_buffer_create_datawriter_bin>
 800ade6:	4602      	mov	r2, r0
 800ade8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800adec:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800adf0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800adf4:	f000 fb4e 	bl	800b494 <run_xrce_session>
 800adf8:	b938      	cbnz	r0, 800ae0a <rmw_create_publisher+0x1a6>
 800adfa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800adfc:	b108      	cbz	r0, 800ae02 <rmw_create_publisher+0x19e>
 800adfe:	f000 fa47 	bl	800b290 <rmw_uxrce_fini_topic_memory>
 800ae02:	4638      	mov	r0, r7
 800ae04:	f000 f9ec 	bl	800b1e0 <rmw_uxrce_fini_publisher_memory>
 800ae08:	2700      	movs	r7, #0
 800ae0a:	4638      	mov	r0, r7
 800ae0c:	b007      	add	sp, #28
 800ae0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae12:	bf00      	nop
 800ae14:	2000db3c 	.word	0x2000db3c
 800ae18:	08016c18 	.word	0x08016c18
 800ae1c:	080169a8 	.word	0x080169a8

0800ae20 <rmw_publisher_get_actual_qos>:
 800ae20:	b150      	cbz	r0, 800ae38 <rmw_publisher_get_actual_qos+0x18>
 800ae22:	b508      	push	{r3, lr}
 800ae24:	460b      	mov	r3, r1
 800ae26:	b149      	cbz	r1, 800ae3c <rmw_publisher_get_actual_qos+0x1c>
 800ae28:	6841      	ldr	r1, [r0, #4]
 800ae2a:	2250      	movs	r2, #80	@ 0x50
 800ae2c:	3128      	adds	r1, #40	@ 0x28
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f00a fdd7 	bl	80159e2 <memcpy>
 800ae34:	2000      	movs	r0, #0
 800ae36:	bd08      	pop	{r3, pc}
 800ae38:	200b      	movs	r0, #11
 800ae3a:	4770      	bx	lr
 800ae3c:	200b      	movs	r0, #11
 800ae3e:	bd08      	pop	{r3, pc}

0800ae40 <rmw_destroy_publisher>:
 800ae40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae42:	b128      	cbz	r0, 800ae50 <rmw_destroy_publisher+0x10>
 800ae44:	4604      	mov	r4, r0
 800ae46:	6800      	ldr	r0, [r0, #0]
 800ae48:	460d      	mov	r5, r1
 800ae4a:	f000 fba3 	bl	800b594 <is_uxrce_rmw_identifier_valid>
 800ae4e:	b910      	cbnz	r0, 800ae56 <rmw_destroy_publisher+0x16>
 800ae50:	2401      	movs	r4, #1
 800ae52:	4620      	mov	r0, r4
 800ae54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae56:	6863      	ldr	r3, [r4, #4]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d0f9      	beq.n	800ae50 <rmw_destroy_publisher+0x10>
 800ae5c:	2d00      	cmp	r5, #0
 800ae5e:	d0f7      	beq.n	800ae50 <rmw_destroy_publisher+0x10>
 800ae60:	6828      	ldr	r0, [r5, #0]
 800ae62:	f000 fb97 	bl	800b594 <is_uxrce_rmw_identifier_valid>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d0f2      	beq.n	800ae50 <rmw_destroy_publisher+0x10>
 800ae6a:	686c      	ldr	r4, [r5, #4]
 800ae6c:	2c00      	cmp	r4, #0
 800ae6e:	d0ef      	beq.n	800ae50 <rmw_destroy_publisher+0x10>
 800ae70:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ae72:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800ae76:	f007 f8f1 	bl	801205c <destroy_topic>
 800ae7a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ae7e:	6962      	ldr	r2, [r4, #20]
 800ae80:	6918      	ldr	r0, [r3, #16]
 800ae82:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ae86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ae8a:	6819      	ldr	r1, [r3, #0]
 800ae8c:	f000 fc58 	bl	800b740 <uxr_buffer_delete_entity>
 800ae90:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ae94:	6922      	ldr	r2, [r4, #16]
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	6809      	ldr	r1, [r1, #0]
 800aea0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800aea4:	f000 fc4c 	bl	800b740 <uxr_buffer_delete_entity>
 800aea8:	693e      	ldr	r6, [r7, #16]
 800aeaa:	4622      	mov	r2, r4
 800aeac:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800aeb0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	f000 faec 	bl	800b494 <run_xrce_session>
 800aebc:	693e      	ldr	r6, [r7, #16]
 800aebe:	4622      	mov	r2, r4
 800aec0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800aec4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800aec8:	4604      	mov	r4, r0
 800aeca:	4630      	mov	r0, r6
 800aecc:	f000 fae2 	bl	800b494 <run_xrce_session>
 800aed0:	b12c      	cbz	r4, 800aede <rmw_destroy_publisher+0x9e>
 800aed2:	b120      	cbz	r0, 800aede <rmw_destroy_publisher+0x9e>
 800aed4:	2400      	movs	r4, #0
 800aed6:	4628      	mov	r0, r5
 800aed8:	f000 f982 	bl	800b1e0 <rmw_uxrce_fini_publisher_memory>
 800aedc:	e7b9      	b.n	800ae52 <rmw_destroy_publisher+0x12>
 800aede:	2402      	movs	r4, #2
 800aee0:	e7f9      	b.n	800aed6 <rmw_destroy_publisher+0x96>
 800aee2:	bf00      	nop

0800aee4 <rmw_uxrce_init_service_memory>:
 800aee4:	b1e2      	cbz	r2, 800af20 <rmw_uxrce_init_service_memory+0x3c>
 800aee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeea:	7b05      	ldrb	r5, [r0, #12]
 800aeec:	4606      	mov	r6, r0
 800aeee:	b9ad      	cbnz	r5, 800af1c <rmw_uxrce_init_service_memory+0x38>
 800aef0:	23c8      	movs	r3, #200	@ 0xc8
 800aef2:	e9c0 5500 	strd	r5, r5, [r0]
 800aef6:	6083      	str	r3, [r0, #8]
 800aef8:	f240 1301 	movw	r3, #257	@ 0x101
 800aefc:	4617      	mov	r7, r2
 800aefe:	8183      	strh	r3, [r0, #12]
 800af00:	460c      	mov	r4, r1
 800af02:	46a8      	mov	r8, r5
 800af04:	4621      	mov	r1, r4
 800af06:	4630      	mov	r0, r6
 800af08:	3501      	adds	r5, #1
 800af0a:	f006 fd99 	bl	8011a40 <put_memory>
 800af0e:	42af      	cmp	r7, r5
 800af10:	60a4      	str	r4, [r4, #8]
 800af12:	f884 800c 	strb.w	r8, [r4, #12]
 800af16:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800af1a:	d1f3      	bne.n	800af04 <rmw_uxrce_init_service_memory+0x20>
 800af1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop

0800af24 <rmw_uxrce_init_client_memory>:
 800af24:	b1e2      	cbz	r2, 800af60 <rmw_uxrce_init_client_memory+0x3c>
 800af26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af2a:	7b05      	ldrb	r5, [r0, #12]
 800af2c:	4606      	mov	r6, r0
 800af2e:	b9ad      	cbnz	r5, 800af5c <rmw_uxrce_init_client_memory+0x38>
 800af30:	23c8      	movs	r3, #200	@ 0xc8
 800af32:	e9c0 5500 	strd	r5, r5, [r0]
 800af36:	6083      	str	r3, [r0, #8]
 800af38:	f240 1301 	movw	r3, #257	@ 0x101
 800af3c:	4617      	mov	r7, r2
 800af3e:	8183      	strh	r3, [r0, #12]
 800af40:	460c      	mov	r4, r1
 800af42:	46a8      	mov	r8, r5
 800af44:	4621      	mov	r1, r4
 800af46:	4630      	mov	r0, r6
 800af48:	3501      	adds	r5, #1
 800af4a:	f006 fd79 	bl	8011a40 <put_memory>
 800af4e:	42af      	cmp	r7, r5
 800af50:	60a4      	str	r4, [r4, #8]
 800af52:	f884 800c 	strb.w	r8, [r4, #12]
 800af56:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800af5a:	d1f3      	bne.n	800af44 <rmw_uxrce_init_client_memory+0x20>
 800af5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop

0800af64 <rmw_uxrce_init_publisher_memory>:
 800af64:	b1e2      	cbz	r2, 800afa0 <rmw_uxrce_init_publisher_memory+0x3c>
 800af66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af6a:	7b05      	ldrb	r5, [r0, #12]
 800af6c:	4606      	mov	r6, r0
 800af6e:	b9ad      	cbnz	r5, 800af9c <rmw_uxrce_init_publisher_memory+0x38>
 800af70:	23d8      	movs	r3, #216	@ 0xd8
 800af72:	e9c0 5500 	strd	r5, r5, [r0]
 800af76:	6083      	str	r3, [r0, #8]
 800af78:	f240 1301 	movw	r3, #257	@ 0x101
 800af7c:	4617      	mov	r7, r2
 800af7e:	8183      	strh	r3, [r0, #12]
 800af80:	460c      	mov	r4, r1
 800af82:	46a8      	mov	r8, r5
 800af84:	4621      	mov	r1, r4
 800af86:	4630      	mov	r0, r6
 800af88:	3501      	adds	r5, #1
 800af8a:	f006 fd59 	bl	8011a40 <put_memory>
 800af8e:	42af      	cmp	r7, r5
 800af90:	60a4      	str	r4, [r4, #8]
 800af92:	f884 800c 	strb.w	r8, [r4, #12]
 800af96:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800af9a:	d1f3      	bne.n	800af84 <rmw_uxrce_init_publisher_memory+0x20>
 800af9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop

0800afa4 <rmw_uxrce_init_subscription_memory>:
 800afa4:	b1e2      	cbz	r2, 800afe0 <rmw_uxrce_init_subscription_memory+0x3c>
 800afa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afaa:	7b05      	ldrb	r5, [r0, #12]
 800afac:	4606      	mov	r6, r0
 800afae:	b9ad      	cbnz	r5, 800afdc <rmw_uxrce_init_subscription_memory+0x38>
 800afb0:	23d8      	movs	r3, #216	@ 0xd8
 800afb2:	e9c0 5500 	strd	r5, r5, [r0]
 800afb6:	6083      	str	r3, [r0, #8]
 800afb8:	f240 1301 	movw	r3, #257	@ 0x101
 800afbc:	4617      	mov	r7, r2
 800afbe:	8183      	strh	r3, [r0, #12]
 800afc0:	460c      	mov	r4, r1
 800afc2:	46a8      	mov	r8, r5
 800afc4:	4621      	mov	r1, r4
 800afc6:	4630      	mov	r0, r6
 800afc8:	3501      	adds	r5, #1
 800afca:	f006 fd39 	bl	8011a40 <put_memory>
 800afce:	42af      	cmp	r7, r5
 800afd0:	60a4      	str	r4, [r4, #8]
 800afd2:	f884 800c 	strb.w	r8, [r4, #12]
 800afd6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800afda:	d1f3      	bne.n	800afc4 <rmw_uxrce_init_subscription_memory+0x20>
 800afdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop

0800afe4 <rmw_uxrce_init_node_memory>:
 800afe4:	b1e2      	cbz	r2, 800b020 <rmw_uxrce_init_node_memory+0x3c>
 800afe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afea:	7b05      	ldrb	r5, [r0, #12]
 800afec:	4606      	mov	r6, r0
 800afee:	b9ad      	cbnz	r5, 800b01c <rmw_uxrce_init_node_memory+0x38>
 800aff0:	23a4      	movs	r3, #164	@ 0xa4
 800aff2:	e9c0 5500 	strd	r5, r5, [r0]
 800aff6:	6083      	str	r3, [r0, #8]
 800aff8:	f240 1301 	movw	r3, #257	@ 0x101
 800affc:	4617      	mov	r7, r2
 800affe:	8183      	strh	r3, [r0, #12]
 800b000:	460c      	mov	r4, r1
 800b002:	46a8      	mov	r8, r5
 800b004:	4621      	mov	r1, r4
 800b006:	4630      	mov	r0, r6
 800b008:	3501      	adds	r5, #1
 800b00a:	f006 fd19 	bl	8011a40 <put_memory>
 800b00e:	42af      	cmp	r7, r5
 800b010:	60a4      	str	r4, [r4, #8]
 800b012:	f884 800c 	strb.w	r8, [r4, #12]
 800b016:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800b01a:	d1f3      	bne.n	800b004 <rmw_uxrce_init_node_memory+0x20>
 800b01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop

0800b024 <rmw_uxrce_init_session_memory>:
 800b024:	b1ea      	cbz	r2, 800b062 <rmw_uxrce_init_session_memory+0x3e>
 800b026:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b02a:	7b05      	ldrb	r5, [r0, #12]
 800b02c:	4606      	mov	r6, r0
 800b02e:	b9b5      	cbnz	r5, 800b05e <rmw_uxrce_init_session_memory+0x3a>
 800b030:	e9c0 5500 	strd	r5, r5, [r0]
 800b034:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800b038:	f240 1301 	movw	r3, #257	@ 0x101
 800b03c:	4617      	mov	r7, r2
 800b03e:	f8c0 8008 	str.w	r8, [r0, #8]
 800b042:	460c      	mov	r4, r1
 800b044:	8183      	strh	r3, [r0, #12]
 800b046:	46a9      	mov	r9, r5
 800b048:	4621      	mov	r1, r4
 800b04a:	4630      	mov	r0, r6
 800b04c:	3501      	adds	r5, #1
 800b04e:	f006 fcf7 	bl	8011a40 <put_memory>
 800b052:	42af      	cmp	r7, r5
 800b054:	60a4      	str	r4, [r4, #8]
 800b056:	f884 900c 	strb.w	r9, [r4, #12]
 800b05a:	4444      	add	r4, r8
 800b05c:	d1f4      	bne.n	800b048 <rmw_uxrce_init_session_memory+0x24>
 800b05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b062:	4770      	bx	lr

0800b064 <rmw_uxrce_init_topic_memory>:
 800b064:	b1e2      	cbz	r2, 800b0a0 <rmw_uxrce_init_topic_memory+0x3c>
 800b066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b06a:	7b05      	ldrb	r5, [r0, #12]
 800b06c:	4606      	mov	r6, r0
 800b06e:	b9ad      	cbnz	r5, 800b09c <rmw_uxrce_init_topic_memory+0x38>
 800b070:	231c      	movs	r3, #28
 800b072:	e9c0 5500 	strd	r5, r5, [r0]
 800b076:	6083      	str	r3, [r0, #8]
 800b078:	f240 1301 	movw	r3, #257	@ 0x101
 800b07c:	4617      	mov	r7, r2
 800b07e:	8183      	strh	r3, [r0, #12]
 800b080:	460c      	mov	r4, r1
 800b082:	46a8      	mov	r8, r5
 800b084:	4621      	mov	r1, r4
 800b086:	4630      	mov	r0, r6
 800b088:	3501      	adds	r5, #1
 800b08a:	f006 fcd9 	bl	8011a40 <put_memory>
 800b08e:	42af      	cmp	r7, r5
 800b090:	60a4      	str	r4, [r4, #8]
 800b092:	f884 800c 	strb.w	r8, [r4, #12]
 800b096:	f104 041c 	add.w	r4, r4, #28
 800b09a:	d1f3      	bne.n	800b084 <rmw_uxrce_init_topic_memory+0x20>
 800b09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop

0800b0a4 <rmw_uxrce_init_static_input_buffer_memory>:
 800b0a4:	b1ea      	cbz	r2, 800b0e2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800b0a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0aa:	7b05      	ldrb	r5, [r0, #12]
 800b0ac:	4606      	mov	r6, r0
 800b0ae:	b9b5      	cbnz	r5, 800b0de <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800b0b0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800b0b4:	e9c0 5500 	strd	r5, r5, [r0]
 800b0b8:	6083      	str	r3, [r0, #8]
 800b0ba:	f240 1301 	movw	r3, #257	@ 0x101
 800b0be:	4617      	mov	r7, r2
 800b0c0:	8183      	strh	r3, [r0, #12]
 800b0c2:	460c      	mov	r4, r1
 800b0c4:	46a8      	mov	r8, r5
 800b0c6:	4621      	mov	r1, r4
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	3501      	adds	r5, #1
 800b0cc:	f006 fcb8 	bl	8011a40 <put_memory>
 800b0d0:	42af      	cmp	r7, r5
 800b0d2:	60a4      	str	r4, [r4, #8]
 800b0d4:	f884 800c 	strb.w	r8, [r4, #12]
 800b0d8:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800b0dc:	d1f3      	bne.n	800b0c6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800b0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0e2:	4770      	bx	lr

0800b0e4 <rmw_uxrce_init_init_options_impl_memory>:
 800b0e4:	b1e2      	cbz	r2, 800b120 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800b0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ea:	7b05      	ldrb	r5, [r0, #12]
 800b0ec:	4606      	mov	r6, r0
 800b0ee:	b9ad      	cbnz	r5, 800b11c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800b0f0:	232c      	movs	r3, #44	@ 0x2c
 800b0f2:	e9c0 5500 	strd	r5, r5, [r0]
 800b0f6:	6083      	str	r3, [r0, #8]
 800b0f8:	f240 1301 	movw	r3, #257	@ 0x101
 800b0fc:	4617      	mov	r7, r2
 800b0fe:	8183      	strh	r3, [r0, #12]
 800b100:	460c      	mov	r4, r1
 800b102:	46a8      	mov	r8, r5
 800b104:	4621      	mov	r1, r4
 800b106:	4630      	mov	r0, r6
 800b108:	3501      	adds	r5, #1
 800b10a:	f006 fc99 	bl	8011a40 <put_memory>
 800b10e:	42af      	cmp	r7, r5
 800b110:	60a4      	str	r4, [r4, #8]
 800b112:	f884 800c 	strb.w	r8, [r4, #12]
 800b116:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800b11a:	d1f3      	bne.n	800b104 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800b11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop

0800b124 <rmw_uxrce_init_wait_set_memory>:
 800b124:	b1e2      	cbz	r2, 800b160 <rmw_uxrce_init_wait_set_memory+0x3c>
 800b126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b12a:	7b05      	ldrb	r5, [r0, #12]
 800b12c:	4606      	mov	r6, r0
 800b12e:	b9ad      	cbnz	r5, 800b15c <rmw_uxrce_init_wait_set_memory+0x38>
 800b130:	231c      	movs	r3, #28
 800b132:	e9c0 5500 	strd	r5, r5, [r0]
 800b136:	6083      	str	r3, [r0, #8]
 800b138:	f240 1301 	movw	r3, #257	@ 0x101
 800b13c:	4617      	mov	r7, r2
 800b13e:	8183      	strh	r3, [r0, #12]
 800b140:	460c      	mov	r4, r1
 800b142:	46a8      	mov	r8, r5
 800b144:	4621      	mov	r1, r4
 800b146:	4630      	mov	r0, r6
 800b148:	3501      	adds	r5, #1
 800b14a:	f006 fc79 	bl	8011a40 <put_memory>
 800b14e:	42af      	cmp	r7, r5
 800b150:	60a4      	str	r4, [r4, #8]
 800b152:	f884 800c 	strb.w	r8, [r4, #12]
 800b156:	f104 041c 	add.w	r4, r4, #28
 800b15a:	d1f3      	bne.n	800b144 <rmw_uxrce_init_wait_set_memory+0x20>
 800b15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop

0800b164 <rmw_uxrce_init_guard_condition_memory>:
 800b164:	b1e2      	cbz	r2, 800b1a0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800b166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b16a:	7b05      	ldrb	r5, [r0, #12]
 800b16c:	4606      	mov	r6, r0
 800b16e:	b9ad      	cbnz	r5, 800b19c <rmw_uxrce_init_guard_condition_memory+0x38>
 800b170:	2320      	movs	r3, #32
 800b172:	e9c0 5500 	strd	r5, r5, [r0]
 800b176:	6083      	str	r3, [r0, #8]
 800b178:	f240 1301 	movw	r3, #257	@ 0x101
 800b17c:	4617      	mov	r7, r2
 800b17e:	8183      	strh	r3, [r0, #12]
 800b180:	460c      	mov	r4, r1
 800b182:	46a8      	mov	r8, r5
 800b184:	4621      	mov	r1, r4
 800b186:	4630      	mov	r0, r6
 800b188:	3501      	adds	r5, #1
 800b18a:	f006 fc59 	bl	8011a40 <put_memory>
 800b18e:	42af      	cmp	r7, r5
 800b190:	60a4      	str	r4, [r4, #8]
 800b192:	f884 800c 	strb.w	r8, [r4, #12]
 800b196:	f104 0420 	add.w	r4, r4, #32
 800b19a:	d1f3      	bne.n	800b184 <rmw_uxrce_init_guard_condition_memory+0x20>
 800b19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop

0800b1a4 <rmw_uxrce_fini_session_memory>:
 800b1a4:	4601      	mov	r1, r0
 800b1a6:	4801      	ldr	r0, [pc, #4]	@ (800b1ac <rmw_uxrce_fini_session_memory+0x8>)
 800b1a8:	f006 bc4a 	b.w	8011a40 <put_memory>
 800b1ac:	2000db5c 	.word	0x2000db5c

0800b1b0 <rmw_uxrce_fini_node_memory>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	6800      	ldr	r0, [r0, #0]
 800b1b6:	b128      	cbz	r0, 800b1c4 <rmw_uxrce_fini_node_memory+0x14>
 800b1b8:	4b07      	ldr	r3, [pc, #28]	@ (800b1d8 <rmw_uxrce_fini_node_memory+0x28>)
 800b1ba:	6819      	ldr	r1, [r3, #0]
 800b1bc:	f7f5 f810 	bl	80001e0 <strcmp>
 800b1c0:	b940      	cbnz	r0, 800b1d4 <rmw_uxrce_fini_node_memory+0x24>
 800b1c2:	6020      	str	r0, [r4, #0]
 800b1c4:	6861      	ldr	r1, [r4, #4]
 800b1c6:	b129      	cbz	r1, 800b1d4 <rmw_uxrce_fini_node_memory+0x24>
 800b1c8:	2500      	movs	r5, #0
 800b1ca:	4804      	ldr	r0, [pc, #16]	@ (800b1dc <rmw_uxrce_fini_node_memory+0x2c>)
 800b1cc:	610d      	str	r5, [r1, #16]
 800b1ce:	f006 fc37 	bl	8011a40 <put_memory>
 800b1d2:	6065      	str	r5, [r4, #4]
 800b1d4:	bd38      	pop	{r3, r4, r5, pc}
 800b1d6:	bf00      	nop
 800b1d8:	0801732c 	.word	0x0801732c
 800b1dc:	2000db2c 	.word	0x2000db2c

0800b1e0 <rmw_uxrce_fini_publisher_memory>:
 800b1e0:	b510      	push	{r4, lr}
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	6800      	ldr	r0, [r0, #0]
 800b1e6:	b128      	cbz	r0, 800b1f4 <rmw_uxrce_fini_publisher_memory+0x14>
 800b1e8:	4b06      	ldr	r3, [pc, #24]	@ (800b204 <rmw_uxrce_fini_publisher_memory+0x24>)
 800b1ea:	6819      	ldr	r1, [r3, #0]
 800b1ec:	f7f4 fff8 	bl	80001e0 <strcmp>
 800b1f0:	b938      	cbnz	r0, 800b202 <rmw_uxrce_fini_publisher_memory+0x22>
 800b1f2:	6020      	str	r0, [r4, #0]
 800b1f4:	6861      	ldr	r1, [r4, #4]
 800b1f6:	b121      	cbz	r1, 800b202 <rmw_uxrce_fini_publisher_memory+0x22>
 800b1f8:	4803      	ldr	r0, [pc, #12]	@ (800b208 <rmw_uxrce_fini_publisher_memory+0x28>)
 800b1fa:	f006 fc21 	bl	8011a40 <put_memory>
 800b1fe:	2300      	movs	r3, #0
 800b200:	6063      	str	r3, [r4, #4]
 800b202:	bd10      	pop	{r4, pc}
 800b204:	0801732c 	.word	0x0801732c
 800b208:	2000db3c 	.word	0x2000db3c

0800b20c <rmw_uxrce_fini_subscription_memory>:
 800b20c:	b510      	push	{r4, lr}
 800b20e:	4604      	mov	r4, r0
 800b210:	6800      	ldr	r0, [r0, #0]
 800b212:	b128      	cbz	r0, 800b220 <rmw_uxrce_fini_subscription_memory+0x14>
 800b214:	4b06      	ldr	r3, [pc, #24]	@ (800b230 <rmw_uxrce_fini_subscription_memory+0x24>)
 800b216:	6819      	ldr	r1, [r3, #0]
 800b218:	f7f4 ffe2 	bl	80001e0 <strcmp>
 800b21c:	b938      	cbnz	r0, 800b22e <rmw_uxrce_fini_subscription_memory+0x22>
 800b21e:	6020      	str	r0, [r4, #0]
 800b220:	6861      	ldr	r1, [r4, #4]
 800b222:	b121      	cbz	r1, 800b22e <rmw_uxrce_fini_subscription_memory+0x22>
 800b224:	4803      	ldr	r0, [pc, #12]	@ (800b234 <rmw_uxrce_fini_subscription_memory+0x28>)
 800b226:	f006 fc0b 	bl	8011a40 <put_memory>
 800b22a:	2300      	movs	r3, #0
 800b22c:	6063      	str	r3, [r4, #4]
 800b22e:	bd10      	pop	{r4, pc}
 800b230:	0801732c 	.word	0x0801732c
 800b234:	2000db7c 	.word	0x2000db7c

0800b238 <rmw_uxrce_fini_service_memory>:
 800b238:	b510      	push	{r4, lr}
 800b23a:	4604      	mov	r4, r0
 800b23c:	6800      	ldr	r0, [r0, #0]
 800b23e:	b128      	cbz	r0, 800b24c <rmw_uxrce_fini_service_memory+0x14>
 800b240:	4b06      	ldr	r3, [pc, #24]	@ (800b25c <rmw_uxrce_fini_service_memory+0x24>)
 800b242:	6819      	ldr	r1, [r3, #0]
 800b244:	f7f4 ffcc 	bl	80001e0 <strcmp>
 800b248:	b938      	cbnz	r0, 800b25a <rmw_uxrce_fini_service_memory+0x22>
 800b24a:	6020      	str	r0, [r4, #0]
 800b24c:	6861      	ldr	r1, [r4, #4]
 800b24e:	b121      	cbz	r1, 800b25a <rmw_uxrce_fini_service_memory+0x22>
 800b250:	4803      	ldr	r0, [pc, #12]	@ (800b260 <rmw_uxrce_fini_service_memory+0x28>)
 800b252:	f006 fbf5 	bl	8011a40 <put_memory>
 800b256:	2300      	movs	r3, #0
 800b258:	6063      	str	r3, [r4, #4]
 800b25a:	bd10      	pop	{r4, pc}
 800b25c:	0801732c 	.word	0x0801732c
 800b260:	2000db4c 	.word	0x2000db4c

0800b264 <rmw_uxrce_fini_client_memory>:
 800b264:	b510      	push	{r4, lr}
 800b266:	4604      	mov	r4, r0
 800b268:	6800      	ldr	r0, [r0, #0]
 800b26a:	b128      	cbz	r0, 800b278 <rmw_uxrce_fini_client_memory+0x14>
 800b26c:	4b06      	ldr	r3, [pc, #24]	@ (800b288 <rmw_uxrce_fini_client_memory+0x24>)
 800b26e:	6819      	ldr	r1, [r3, #0]
 800b270:	f7f4 ffb6 	bl	80001e0 <strcmp>
 800b274:	b938      	cbnz	r0, 800b286 <rmw_uxrce_fini_client_memory+0x22>
 800b276:	6020      	str	r0, [r4, #0]
 800b278:	6861      	ldr	r1, [r4, #4]
 800b27a:	b121      	cbz	r1, 800b286 <rmw_uxrce_fini_client_memory+0x22>
 800b27c:	4803      	ldr	r0, [pc, #12]	@ (800b28c <rmw_uxrce_fini_client_memory+0x28>)
 800b27e:	f006 fbdf 	bl	8011a40 <put_memory>
 800b282:	2300      	movs	r3, #0
 800b284:	6063      	str	r3, [r4, #4]
 800b286:	bd10      	pop	{r4, pc}
 800b288:	0801732c 	.word	0x0801732c
 800b28c:	20009260 	.word	0x20009260

0800b290 <rmw_uxrce_fini_topic_memory>:
 800b290:	b510      	push	{r4, lr}
 800b292:	4604      	mov	r4, r0
 800b294:	4621      	mov	r1, r4
 800b296:	4803      	ldr	r0, [pc, #12]	@ (800b2a4 <rmw_uxrce_fini_topic_memory+0x14>)
 800b298:	f006 fbd2 	bl	8011a40 <put_memory>
 800b29c:	2300      	movs	r3, #0
 800b29e:	61a3      	str	r3, [r4, #24]
 800b2a0:	bd10      	pop	{r4, pc}
 800b2a2:	bf00      	nop
 800b2a4:	2000db8c 	.word	0x2000db8c

0800b2a8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800b2a8:	b082      	sub	sp, #8
 800b2aa:	b530      	push	{r4, r5, lr}
 800b2ac:	4925      	ldr	r1, [pc, #148]	@ (800b344 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800b2ae:	680d      	ldr	r5, [r1, #0]
 800b2b0:	ac03      	add	r4, sp, #12
 800b2b2:	e884 000c 	stmia.w	r4, {r2, r3}
 800b2b6:	461c      	mov	r4, r3
 800b2b8:	2d00      	cmp	r5, #0
 800b2ba:	d041      	beq.n	800b340 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800b2bc:	462b      	mov	r3, r5
 800b2be:	2100      	movs	r1, #0
 800b2c0:	689a      	ldr	r2, [r3, #8]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800b2c8:	4290      	cmp	r0, r2
 800b2ca:	bf08      	it	eq
 800b2cc:	3101      	addeq	r1, #1
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d1f6      	bne.n	800b2c0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800b2d2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b2d6:	2b02      	cmp	r3, #2
 800b2d8:	d029      	beq.n	800b32e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b2da:	d907      	bls.n	800b2ec <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b2dc:	2b03      	cmp	r3, #3
 800b2de:	d005      	beq.n	800b2ec <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2e6:	4608      	mov	r0, r1
 800b2e8:	b002      	add	sp, #8
 800b2ea:	4770      	bx	lr
 800b2ec:	b314      	cbz	r4, 800b334 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b2ee:	428c      	cmp	r4, r1
 800b2f0:	d820      	bhi.n	800b334 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b2f2:	2d00      	cmp	r5, #0
 800b2f4:	d0f4      	beq.n	800b2e0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800b2fc:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800b300:	e002      	b.n	800b308 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800b302:	686d      	ldr	r5, [r5, #4]
 800b304:	2d00      	cmp	r5, #0
 800b306:	d0ec      	beq.n	800b2e2 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800b308:	68ab      	ldr	r3, [r5, #8]
 800b30a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800b30e:	4290      	cmp	r0, r2
 800b310:	d1f7      	bne.n	800b302 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b312:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800b316:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800b31a:	4562      	cmp	r2, ip
 800b31c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b320:	eb73 0e04 	sbcs.w	lr, r3, r4
 800b324:	daed      	bge.n	800b302 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b326:	4694      	mov	ip, r2
 800b328:	461c      	mov	r4, r3
 800b32a:	4629      	mov	r1, r5
 800b32c:	e7e9      	b.n	800b302 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b32e:	b10c      	cbz	r4, 800b334 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b330:	428c      	cmp	r4, r1
 800b332:	d9d5      	bls.n	800b2e0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b338:	4802      	ldr	r0, [pc, #8]	@ (800b344 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800b33a:	b002      	add	sp, #8
 800b33c:	f006 bb70 	b.w	8011a20 <get_memory>
 800b340:	4629      	mov	r1, r5
 800b342:	e7c6      	b.n	800b2d2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800b344:	2000db6c 	.word	0x2000db6c

0800b348 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800b348:	4b11      	ldr	r3, [pc, #68]	@ (800b390 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	b530      	push	{r4, r5, lr}
 800b34e:	b1e3      	cbz	r3, 800b38a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800b350:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800b354:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800b358:	2400      	movs	r4, #0
 800b35a:	e001      	b.n	800b360 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	b193      	cbz	r3, 800b386 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800b360:	689a      	ldr	r2, [r3, #8]
 800b362:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800b366:	4288      	cmp	r0, r1
 800b368:	d1f8      	bne.n	800b35c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b36a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800b36e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800b372:	4571      	cmp	r1, lr
 800b374:	eb72 050c 	sbcs.w	r5, r2, ip
 800b378:	daf0      	bge.n	800b35c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b37a:	461c      	mov	r4, r3
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	468e      	mov	lr, r1
 800b380:	4694      	mov	ip, r2
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1ec      	bne.n	800b360 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b386:	4620      	mov	r0, r4
 800b388:	bd30      	pop	{r4, r5, pc}
 800b38a:	461c      	mov	r4, r3
 800b38c:	4620      	mov	r0, r4
 800b38e:	bd30      	pop	{r4, r5, pc}
 800b390:	2000db6c 	.word	0x2000db6c
 800b394:	00000000 	.word	0x00000000

0800b398 <rmw_uxrce_clean_expired_static_input_buffer>:
 800b398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39c:	4b3c      	ldr	r3, [pc, #240]	@ (800b490 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b39e:	ed2d 8b06 	vpush	{d8-d10}
 800b3a2:	681f      	ldr	r7, [r3, #0]
 800b3a4:	b08d      	sub	sp, #52	@ 0x34
 800b3a6:	f007 fc79 	bl	8012c9c <rmw_uros_epoch_nanos>
 800b3aa:	2f00      	cmp	r7, #0
 800b3ac:	d05d      	beq.n	800b46a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b3ae:	46b8      	mov	r8, r7
 800b3b0:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800b478 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800b3b4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b3b8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800b3bc:	2b04      	cmp	r3, #4
 800b3be:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800b480 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800b3c2:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800b488 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800b3c6:	4681      	mov	r9, r0
 800b3c8:	468a      	mov	sl, r1
 800b3ca:	ac04      	add	r4, sp, #16
 800b3cc:	d03f      	beq.n	800b44e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b3ce:	2b05      	cmp	r3, #5
 800b3d0:	d044      	beq.n	800b45c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800b3d2:	2b03      	cmp	r3, #3
 800b3d4:	d03b      	beq.n	800b44e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b3d6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b3da:	ed8d ab06 	vstr	d10, [sp, #24]
 800b3de:	ed8d 8b08 	vstr	d8, [sp, #32]
 800b3e2:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800b3e6:	ab08      	add	r3, sp, #32
 800b3e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b3ea:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b3ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b3f2:	f006 f949 	bl	8011688 <rmw_time_equal>
 800b3f6:	b118      	cbz	r0, 800b400 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800b3f8:	ed8d 9b04 	vstr	d9, [sp, #16]
 800b3fc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b400:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b404:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800b408:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800b40c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800b410:	f006 f98e 	bl	8011730 <rmw_time_total_nsec>
 800b414:	1830      	adds	r0, r6, r0
 800b416:	eb47 0101 	adc.w	r1, r7, r1
 800b41a:	4548      	cmp	r0, r9
 800b41c:	eb71 030a 	sbcs.w	r3, r1, sl
 800b420:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800b424:	db05      	blt.n	800b432 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800b426:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800b42a:	4591      	cmp	r9, r2
 800b42c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800b430:	da03      	bge.n	800b43a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800b432:	4817      	ldr	r0, [pc, #92]	@ (800b490 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b434:	4641      	mov	r1, r8
 800b436:	f006 fb03 	bl	8011a40 <put_memory>
 800b43a:	f1bb 0f00 	cmp.w	fp, #0
 800b43e:	d014      	beq.n	800b46a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b440:	46d8      	mov	r8, fp
 800b442:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b446:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800b44a:	2b04      	cmp	r3, #4
 800b44c:	d1bf      	bne.n	800b3ce <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800b44e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800b452:	3340      	adds	r3, #64	@ 0x40
 800b454:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b456:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b45a:	e7c0      	b.n	800b3de <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b45c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800b460:	3348      	adds	r3, #72	@ 0x48
 800b462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b468:	e7b9      	b.n	800b3de <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b46a:	b00d      	add	sp, #52	@ 0x34
 800b46c:	ecbd 8b06 	vpop	{d8-d10}
 800b470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b474:	f3af 8000 	nop.w
	...
 800b480:	00000001 	.word	0x00000001
 800b484:	00000000 	.word	0x00000000
 800b488:	0000001e 	.word	0x0000001e
 800b48c:	00000000 	.word	0x00000000
 800b490:	2000db6c 	.word	0x2000db6c

0800b494 <run_xrce_session>:
 800b494:	b510      	push	{r4, lr}
 800b496:	788c      	ldrb	r4, [r1, #2]
 800b498:	b086      	sub	sp, #24
 800b49a:	2c01      	cmp	r4, #1
 800b49c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b4a0:	d00c      	beq.n	800b4bc <run_xrce_session+0x28>
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	9300      	str	r3, [sp, #0]
 800b4a8:	f10d 020e 	add.w	r2, sp, #14
 800b4ac:	f10d 0317 	add.w	r3, sp, #23
 800b4b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b4b4:	f001 f87a 	bl	800c5ac <uxr_run_session_until_all_status>
 800b4b8:	b006      	add	sp, #24
 800b4ba:	bd10      	pop	{r4, pc}
 800b4bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b4c0:	f000 fc8e 	bl	800bde0 <uxr_flash_output_streams>
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	b006      	add	sp, #24
 800b4c8:	bd10      	pop	{r4, pc}
 800b4ca:	bf00      	nop

0800b4cc <convert_qos_profile>:
 800b4cc:	7a4a      	ldrb	r2, [r1, #9]
 800b4ce:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b4d2:	2a02      	cmp	r2, #2
 800b4d4:	bf18      	it	ne
 800b4d6:	2200      	movne	r2, #0
 800b4d8:	7002      	strb	r2, [r0, #0]
 800b4da:	780a      	ldrb	r2, [r1, #0]
 800b4dc:	8889      	ldrh	r1, [r1, #4]
 800b4de:	8081      	strh	r1, [r0, #4]
 800b4e0:	f1ac 0c02 	sub.w	ip, ip, #2
 800b4e4:	f1a2 0202 	sub.w	r2, r2, #2
 800b4e8:	fabc fc8c 	clz	ip, ip
 800b4ec:	fab2 f282 	clz	r2, r2
 800b4f0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800b4f4:	0952      	lsrs	r2, r2, #5
 800b4f6:	f880 c001 	strb.w	ip, [r0, #1]
 800b4fa:	7082      	strb	r2, [r0, #2]
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop

0800b500 <generate_type_name>:
 800b500:	b530      	push	{r4, r5, lr}
 800b502:	2300      	movs	r3, #0
 800b504:	700b      	strb	r3, [r1, #0]
 800b506:	6803      	ldr	r3, [r0, #0]
 800b508:	b087      	sub	sp, #28
 800b50a:	4614      	mov	r4, r2
 800b50c:	b1d3      	cbz	r3, 800b544 <generate_type_name+0x44>
 800b50e:	4a0f      	ldr	r2, [pc, #60]	@ (800b54c <generate_type_name+0x4c>)
 800b510:	4615      	mov	r5, r2
 800b512:	9203      	str	r2, [sp, #12]
 800b514:	9500      	str	r5, [sp, #0]
 800b516:	6842      	ldr	r2, [r0, #4]
 800b518:	480d      	ldr	r0, [pc, #52]	@ (800b550 <generate_type_name+0x50>)
 800b51a:	9001      	str	r0, [sp, #4]
 800b51c:	4608      	mov	r0, r1
 800b51e:	490d      	ldr	r1, [pc, #52]	@ (800b554 <generate_type_name+0x54>)
 800b520:	9204      	str	r2, [sp, #16]
 800b522:	9105      	str	r1, [sp, #20]
 800b524:	9102      	str	r1, [sp, #8]
 800b526:	4a0c      	ldr	r2, [pc, #48]	@ (800b558 <generate_type_name+0x58>)
 800b528:	4621      	mov	r1, r4
 800b52a:	f00a f8b7 	bl	801569c <sniprintf>
 800b52e:	2800      	cmp	r0, #0
 800b530:	db05      	blt.n	800b53e <generate_type_name+0x3e>
 800b532:	4284      	cmp	r4, r0
 800b534:	bfd4      	ite	le
 800b536:	2000      	movle	r0, #0
 800b538:	2001      	movgt	r0, #1
 800b53a:	b007      	add	sp, #28
 800b53c:	bd30      	pop	{r4, r5, pc}
 800b53e:	2000      	movs	r0, #0
 800b540:	b007      	add	sp, #28
 800b542:	bd30      	pop	{r4, r5, pc}
 800b544:	4b05      	ldr	r3, [pc, #20]	@ (800b55c <generate_type_name+0x5c>)
 800b546:	4a01      	ldr	r2, [pc, #4]	@ (800b54c <generate_type_name+0x4c>)
 800b548:	461d      	mov	r5, r3
 800b54a:	e7e2      	b.n	800b512 <generate_type_name+0x12>
 800b54c:	08016c08 	.word	0x08016c08
 800b550:	08016c20 	.word	0x08016c20
 800b554:	08016c1c 	.word	0x08016c1c
 800b558:	08016c0c 	.word	0x08016c0c
 800b55c:	08017104 	.word	0x08017104

0800b560 <generate_topic_name>:
 800b560:	b510      	push	{r4, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	4614      	mov	r4, r2
 800b566:	9000      	str	r0, [sp, #0]
 800b568:	4b08      	ldr	r3, [pc, #32]	@ (800b58c <generate_topic_name+0x2c>)
 800b56a:	4a09      	ldr	r2, [pc, #36]	@ (800b590 <generate_topic_name+0x30>)
 800b56c:	4608      	mov	r0, r1
 800b56e:	4621      	mov	r1, r4
 800b570:	f00a f894 	bl	801569c <sniprintf>
 800b574:	2800      	cmp	r0, #0
 800b576:	db05      	blt.n	800b584 <generate_topic_name+0x24>
 800b578:	4284      	cmp	r4, r0
 800b57a:	bfd4      	ite	le
 800b57c:	2000      	movle	r0, #0
 800b57e:	2001      	movgt	r0, #1
 800b580:	b002      	add	sp, #8
 800b582:	bd10      	pop	{r4, pc}
 800b584:	2000      	movs	r0, #0
 800b586:	b002      	add	sp, #8
 800b588:	bd10      	pop	{r4, pc}
 800b58a:	bf00      	nop
 800b58c:	08016c2c 	.word	0x08016c2c
 800b590:	08016c24 	.word	0x08016c24

0800b594 <is_uxrce_rmw_identifier_valid>:
 800b594:	b510      	push	{r4, lr}
 800b596:	4604      	mov	r4, r0
 800b598:	b140      	cbz	r0, 800b5ac <is_uxrce_rmw_identifier_valid+0x18>
 800b59a:	f006 faa9 	bl	8011af0 <rmw_get_implementation_identifier>
 800b59e:	4601      	mov	r1, r0
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f7f4 fe1d 	bl	80001e0 <strcmp>
 800b5a6:	fab0 f080 	clz	r0, r0
 800b5aa:	0940      	lsrs	r0, r0, #5
 800b5ac:	bd10      	pop	{r4, pc}
 800b5ae:	bf00      	nop

0800b5b0 <get_message_typesupport_handle>:
 800b5b0:	6883      	ldr	r3, [r0, #8]
 800b5b2:	4718      	bx	r3

0800b5b4 <get_message_typesupport_handle_function>:
 800b5b4:	b510      	push	{r4, lr}
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	6800      	ldr	r0, [r0, #0]
 800b5ba:	f7f4 fe11 	bl	80001e0 <strcmp>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	bf0c      	ite	eq
 800b5c2:	4620      	moveq	r0, r4
 800b5c4:	2000      	movne	r0, #0
 800b5c6:	bd10      	pop	{r4, pc}

0800b5c8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800b5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5cc:	6805      	ldr	r5, [r0, #0]
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	460e      	mov	r6, r1
 800b5d4:	f7f4 fe04 	bl	80001e0 <strcmp>
 800b5d8:	b1c8      	cbz	r0, 800b60e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800b5da:	4b11      	ldr	r3, [pc, #68]	@ (800b620 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	429d      	cmp	r5, r3
 800b5e0:	d112      	bne.n	800b608 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800b5e2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800b5e6:	f8d8 4000 	ldr.w	r4, [r8]
 800b5ea:	b16c      	cbz	r4, 800b608 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800b5ec:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b5f0:	2700      	movs	r7, #0
 800b5f2:	3d04      	subs	r5, #4
 800b5f4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800b5f8:	4631      	mov	r1, r6
 800b5fa:	f7f4 fdf1 	bl	80001e0 <strcmp>
 800b5fe:	00bb      	lsls	r3, r7, #2
 800b600:	b140      	cbz	r0, 800b614 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800b602:	3701      	adds	r7, #1
 800b604:	42bc      	cmp	r4, r7
 800b606:	d1f5      	bne.n	800b5f4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800b608:	2000      	movs	r0, #0
 800b60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b60e:	4620      	mov	r0, r4
 800b610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b614:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b61c:	58d3      	ldr	r3, [r2, r3]
 800b61e:	4718      	bx	r3
 800b620:	200001d0 	.word	0x200001d0

0800b624 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b624:	4b04      	ldr	r3, [pc, #16]	@ (800b638 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	b10a      	cbz	r2, 800b62e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800b62a:	4803      	ldr	r0, [pc, #12]	@ (800b638 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b62c:	4770      	bx	lr
 800b62e:	4a03      	ldr	r2, [pc, #12]	@ (800b63c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800b630:	4801      	ldr	r0, [pc, #4]	@ (800b638 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b632:	6812      	ldr	r2, [r2, #0]
 800b634:	601a      	str	r2, [r3, #0]
 800b636:	4770      	bx	lr
 800b638:	200001e0 	.word	0x200001e0
 800b63c:	200001d0 	.word	0x200001d0

0800b640 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b640:	4a02      	ldr	r2, [pc, #8]	@ (800b64c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800b642:	4b03      	ldr	r3, [pc, #12]	@ (800b650 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800b644:	6812      	ldr	r2, [r2, #0]
 800b646:	601a      	str	r2, [r3, #0]
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	200001d0 	.word	0x200001d0
 800b650:	200001e0 	.word	0x200001e0

0800b654 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800b654:	f007 bb30 	b.w	8012cb8 <std_msgs__msg__Int32__init>

0800b658 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800b658:	f007 bb32 	b.w	8012cc0 <std_msgs__msg__Int32__fini>

0800b65c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b65c:	4b04      	ldr	r3, [pc, #16]	@ (800b670 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	b10a      	cbz	r2, 800b666 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800b662:	4803      	ldr	r0, [pc, #12]	@ (800b670 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b664:	4770      	bx	lr
 800b666:	4a03      	ldr	r2, [pc, #12]	@ (800b674 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800b668:	4801      	ldr	r0, [pc, #4]	@ (800b670 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b66a:	6812      	ldr	r2, [r2, #0]
 800b66c:	601a      	str	r2, [r3, #0]
 800b66e:	4770      	bx	lr
 800b670:	20000228 	.word	0x20000228
 800b674:	200001d4 	.word	0x200001d4

0800b678 <_Int32__max_serialized_size>:
 800b678:	b508      	push	{r3, lr}
 800b67a:	2104      	movs	r1, #4
 800b67c:	2000      	movs	r0, #0
 800b67e:	f7fe f91b 	bl	80098b8 <ucdr_alignment>
 800b682:	3004      	adds	r0, #4
 800b684:	bd08      	pop	{r3, pc}
 800b686:	bf00      	nop

0800b688 <_Int32__cdr_deserialize>:
 800b688:	b109      	cbz	r1, 800b68e <_Int32__cdr_deserialize+0x6>
 800b68a:	f7fd be97 	b.w	80093bc <ucdr_deserialize_int32_t>
 800b68e:	4608      	mov	r0, r1
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop

0800b694 <get_serialized_size_std_msgs__msg__Int32>:
 800b694:	b138      	cbz	r0, 800b6a6 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800b696:	b508      	push	{r3, lr}
 800b698:	460b      	mov	r3, r1
 800b69a:	4618      	mov	r0, r3
 800b69c:	2104      	movs	r1, #4
 800b69e:	f7fe f90b 	bl	80098b8 <ucdr_alignment>
 800b6a2:	3004      	adds	r0, #4
 800b6a4:	bd08      	pop	{r3, pc}
 800b6a6:	4770      	bx	lr

0800b6a8 <_Int32__cdr_serialize>:
 800b6a8:	460a      	mov	r2, r1
 800b6aa:	b118      	cbz	r0, 800b6b4 <_Int32__cdr_serialize+0xc>
 800b6ac:	6801      	ldr	r1, [r0, #0]
 800b6ae:	4610      	mov	r0, r2
 800b6b0:	f7fd bdec 	b.w	800928c <ucdr_serialize_int32_t>
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop

0800b6b8 <_Int32__get_serialized_size>:
 800b6b8:	b130      	cbz	r0, 800b6c8 <_Int32__get_serialized_size+0x10>
 800b6ba:	b508      	push	{r3, lr}
 800b6bc:	2104      	movs	r1, #4
 800b6be:	2000      	movs	r0, #0
 800b6c0:	f7fe f8fa 	bl	80098b8 <ucdr_alignment>
 800b6c4:	3004      	adds	r0, #4
 800b6c6:	bd08      	pop	{r3, pc}
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop

0800b6cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b6cc:	4800      	ldr	r0, [pc, #0]	@ (800b6d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800b6ce:	4770      	bx	lr
 800b6d0:	20000234 	.word	0x20000234

0800b6d4 <geometry_msgs__msg__Twist__init>:
 800b6d4:	b570      	push	{r4, r5, r6, lr}
 800b6d6:	4605      	mov	r5, r0
 800b6d8:	b1a8      	cbz	r0, 800b706 <geometry_msgs__msg__Twist__init+0x32>
 800b6da:	f000 f82b 	bl	800b734 <geometry_msgs__msg__Vector3__init>
 800b6de:	4604      	mov	r4, r0
 800b6e0:	b140      	cbz	r0, 800b6f4 <geometry_msgs__msg__Twist__init+0x20>
 800b6e2:	f105 0618 	add.w	r6, r5, #24
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	f000 f824 	bl	800b734 <geometry_msgs__msg__Vector3__init>
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	b168      	cbz	r0, 800b70c <geometry_msgs__msg__Twist__init+0x38>
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	bd70      	pop	{r4, r5, r6, pc}
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	f000 f821 	bl	800b73c <geometry_msgs__msg__Vector3__fini>
 800b6fa:	f105 0018 	add.w	r0, r5, #24
 800b6fe:	f000 f81d 	bl	800b73c <geometry_msgs__msg__Vector3__fini>
 800b702:	4620      	mov	r0, r4
 800b704:	bd70      	pop	{r4, r5, r6, pc}
 800b706:	4604      	mov	r4, r0
 800b708:	4620      	mov	r0, r4
 800b70a:	bd70      	pop	{r4, r5, r6, pc}
 800b70c:	4628      	mov	r0, r5
 800b70e:	f000 f815 	bl	800b73c <geometry_msgs__msg__Vector3__fini>
 800b712:	4630      	mov	r0, r6
 800b714:	f000 f812 	bl	800b73c <geometry_msgs__msg__Vector3__fini>
 800b718:	e7ea      	b.n	800b6f0 <geometry_msgs__msg__Twist__init+0x1c>
 800b71a:	bf00      	nop

0800b71c <geometry_msgs__msg__Twist__fini>:
 800b71c:	b148      	cbz	r0, 800b732 <geometry_msgs__msg__Twist__fini+0x16>
 800b71e:	b510      	push	{r4, lr}
 800b720:	4604      	mov	r4, r0
 800b722:	f000 f80b 	bl	800b73c <geometry_msgs__msg__Vector3__fini>
 800b726:	f104 0018 	add.w	r0, r4, #24
 800b72a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b72e:	f000 b805 	b.w	800b73c <geometry_msgs__msg__Vector3__fini>
 800b732:	4770      	bx	lr

0800b734 <geometry_msgs__msg__Vector3__init>:
 800b734:	3800      	subs	r0, #0
 800b736:	bf18      	it	ne
 800b738:	2001      	movne	r0, #1
 800b73a:	4770      	bx	lr

0800b73c <geometry_msgs__msg__Vector3__fini>:
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop

0800b740 <uxr_buffer_delete_entity>:
 800b740:	b510      	push	{r4, lr}
 800b742:	2300      	movs	r3, #0
 800b744:	b08e      	sub	sp, #56	@ 0x38
 800b746:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b74a:	2303      	movs	r3, #3
 800b74c:	9300      	str	r3, [sp, #0]
 800b74e:	2204      	movs	r2, #4
 800b750:	ab06      	add	r3, sp, #24
 800b752:	4604      	mov	r4, r0
 800b754:	9103      	str	r1, [sp, #12]
 800b756:	f001 f951 	bl	800c9fc <uxr_prepare_stream_to_write_submessage>
 800b75a:	b918      	cbnz	r0, 800b764 <uxr_buffer_delete_entity+0x24>
 800b75c:	4604      	mov	r4, r0
 800b75e:	4620      	mov	r0, r4
 800b760:	b00e      	add	sp, #56	@ 0x38
 800b762:	bd10      	pop	{r4, pc}
 800b764:	9902      	ldr	r1, [sp, #8]
 800b766:	aa05      	add	r2, sp, #20
 800b768:	4620      	mov	r0, r4
 800b76a:	f001 fa7d 	bl	800cc68 <uxr_init_base_object_request>
 800b76e:	a905      	add	r1, sp, #20
 800b770:	4604      	mov	r4, r0
 800b772:	a806      	add	r0, sp, #24
 800b774:	f002 fcce 	bl	800e114 <uxr_serialize_DELETE_Payload>
 800b778:	4620      	mov	r0, r4
 800b77a:	b00e      	add	sp, #56	@ 0x38
 800b77c:	bd10      	pop	{r4, pc}
 800b77e:	bf00      	nop

0800b780 <uxr_common_create_entity>:
 800b780:	b510      	push	{r4, lr}
 800b782:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800b786:	b08c      	sub	sp, #48	@ 0x30
 800b788:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b78c:	f1bc 0f01 	cmp.w	ip, #1
 800b790:	bf0c      	ite	eq
 800b792:	f003 0201 	andeq.w	r2, r3, #1
 800b796:	2200      	movne	r2, #0
 800b798:	330e      	adds	r3, #14
 800b79a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800b79e:	9101      	str	r1, [sp, #4]
 800b7a0:	441a      	add	r2, r3
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	9300      	str	r3, [sp, #0]
 800b7a6:	9903      	ldr	r1, [sp, #12]
 800b7a8:	ab04      	add	r3, sp, #16
 800b7aa:	b292      	uxth	r2, r2
 800b7ac:	4604      	mov	r4, r0
 800b7ae:	f001 f925 	bl	800c9fc <uxr_prepare_stream_to_write_submessage>
 800b7b2:	b918      	cbnz	r0, 800b7bc <uxr_common_create_entity+0x3c>
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	b00c      	add	sp, #48	@ 0x30
 800b7ba:	bd10      	pop	{r4, pc}
 800b7bc:	9902      	ldr	r1, [sp, #8]
 800b7be:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f001 fa51 	bl	800cc68 <uxr_init_base_object_request>
 800b7c6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	a804      	add	r0, sp, #16
 800b7cc:	f002 fbfe 	bl	800dfcc <uxr_serialize_CREATE_Payload>
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	b00c      	add	sp, #48	@ 0x30
 800b7d4:	bd10      	pop	{r4, pc}
 800b7d6:	bf00      	nop

0800b7d8 <uxr_buffer_create_participant_bin>:
 800b7d8:	b570      	push	{r4, r5, r6, lr}
 800b7da:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800b7de:	ac11      	add	r4, sp, #68	@ 0x44
 800b7e0:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800b7e4:	2303      	movs	r3, #3
 800b7e6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b7ea:	7223      	strb	r3, [r4, #8]
 800b7ec:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800b7ee:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	4605      	mov	r5, r0
 800b7f8:	7122      	strb	r2, [r4, #4]
 800b7fa:	f88d 1014 	strb.w	r1, [sp, #20]
 800b7fe:	b1cb      	cbz	r3, 800b834 <uxr_buffer_create_participant_bin+0x5c>
 800b800:	f88d 201c 	strb.w	r2, [sp, #28]
 800b804:	9308      	str	r3, [sp, #32]
 800b806:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b80a:	a915      	add	r1, sp, #84	@ 0x54
 800b80c:	a809      	add	r0, sp, #36	@ 0x24
 800b80e:	f7fe f84f 	bl	80098b0 <ucdr_init_buffer>
 800b812:	a905      	add	r1, sp, #20
 800b814:	a809      	add	r0, sp, #36	@ 0x24
 800b816:	f001 ffbb 	bl	800d790 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800b81a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b81c:	9600      	str	r6, [sp, #0]
 800b81e:	9401      	str	r4, [sp, #4]
 800b820:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b824:	60e3      	str	r3, [r4, #12]
 800b826:	4628      	mov	r0, r5
 800b828:	b29b      	uxth	r3, r3
 800b82a:	f7ff ffa9 	bl	800b780 <uxr_common_create_entity>
 800b82e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800b832:	bd70      	pop	{r4, r5, r6, pc}
 800b834:	f88d 301c 	strb.w	r3, [sp, #28]
 800b838:	e7e5      	b.n	800b806 <uxr_buffer_create_participant_bin+0x2e>
 800b83a:	bf00      	nop

0800b83c <uxr_buffer_create_topic_bin>:
 800b83c:	b570      	push	{r4, r5, r6, lr}
 800b83e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800b842:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b846:	9105      	str	r1, [sp, #20]
 800b848:	4605      	mov	r5, r0
 800b84a:	a997      	add	r1, sp, #604	@ 0x25c
 800b84c:	4618      	mov	r0, r3
 800b84e:	2302      	movs	r3, #2
 800b850:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800b854:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800b858:	f000 f996 	bl	800bb88 <uxr_object_id_to_raw>
 800b85c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800b85e:	9306      	str	r3, [sp, #24]
 800b860:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800b862:	930a      	str	r3, [sp, #40]	@ 0x28
 800b864:	2303      	movs	r3, #3
 800b866:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800b86a:	2301      	movs	r3, #1
 800b86c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b870:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800b874:	a917      	add	r1, sp, #92	@ 0x5c
 800b876:	2300      	movs	r3, #0
 800b878:	a80b      	add	r0, sp, #44	@ 0x2c
 800b87a:	f88d 301c 	strb.w	r3, [sp, #28]
 800b87e:	f7fe f817 	bl	80098b0 <ucdr_init_buffer>
 800b882:	a906      	add	r1, sp, #24
 800b884:	a80b      	add	r0, sp, #44	@ 0x2c
 800b886:	f001 ffa5 	bl	800d7d4 <uxr_serialize_OBJK_Topic_Binary>
 800b88a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b88c:	9316      	str	r3, [sp, #88]	@ 0x58
 800b88e:	ac13      	add	r4, sp, #76	@ 0x4c
 800b890:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b894:	9600      	str	r6, [sp, #0]
 800b896:	9401      	str	r4, [sp, #4]
 800b898:	b29b      	uxth	r3, r3
 800b89a:	4628      	mov	r0, r5
 800b89c:	f7ff ff70 	bl	800b780 <uxr_common_create_entity>
 800b8a0:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800b8a4:	bd70      	pop	{r4, r5, r6, pc}
 800b8a6:	bf00      	nop

0800b8a8 <uxr_buffer_create_publisher_bin>:
 800b8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8aa:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800b8ae:	4605      	mov	r5, r0
 800b8b0:	9105      	str	r1, [sp, #20]
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	2603      	movs	r6, #3
 800b8b6:	a992      	add	r1, sp, #584	@ 0x248
 800b8b8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b8bc:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800b8c0:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800b8c4:	f000 f960 	bl	800bb88 <uxr_object_id_to_raw>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b8ce:	a912      	add	r1, sp, #72	@ 0x48
 800b8d0:	a806      	add	r0, sp, #24
 800b8d2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800b8d6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800b8da:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800b8de:	f7fd ffe7 	bl	80098b0 <ucdr_init_buffer>
 800b8e2:	a993      	add	r1, sp, #588	@ 0x24c
 800b8e4:	a806      	add	r0, sp, #24
 800b8e6:	f002 f829 	bl	800d93c <uxr_serialize_OBJK_Publisher_Binary>
 800b8ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8ec:	9311      	str	r3, [sp, #68]	@ 0x44
 800b8ee:	ac0e      	add	r4, sp, #56	@ 0x38
 800b8f0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b8f4:	9700      	str	r7, [sp, #0]
 800b8f6:	9401      	str	r4, [sp, #4]
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	f7ff ff40 	bl	800b780 <uxr_common_create_entity>
 800b900:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800b904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b906:	bf00      	nop

0800b908 <uxr_buffer_create_subscriber_bin>:
 800b908:	b570      	push	{r4, r5, r6, lr}
 800b90a:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800b90e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b912:	9105      	str	r1, [sp, #20]
 800b914:	4605      	mov	r5, r0
 800b916:	a992      	add	r1, sp, #584	@ 0x248
 800b918:	4618      	mov	r0, r3
 800b91a:	2304      	movs	r3, #4
 800b91c:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800b920:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800b924:	f000 f930 	bl	800bb88 <uxr_object_id_to_raw>
 800b928:	2300      	movs	r3, #0
 800b92a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b92e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800b932:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800b936:	a912      	add	r1, sp, #72	@ 0x48
 800b938:	2303      	movs	r3, #3
 800b93a:	a806      	add	r0, sp, #24
 800b93c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800b940:	f7fd ffb6 	bl	80098b0 <ucdr_init_buffer>
 800b944:	a993      	add	r1, sp, #588	@ 0x24c
 800b946:	a806      	add	r0, sp, #24
 800b948:	f002 f8a8 	bl	800da9c <uxr_serialize_OBJK_Subscriber_Binary>
 800b94c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b94e:	9311      	str	r3, [sp, #68]	@ 0x44
 800b950:	ac0e      	add	r4, sp, #56	@ 0x38
 800b952:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b956:	9600      	str	r6, [sp, #0]
 800b958:	9401      	str	r4, [sp, #4]
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	4628      	mov	r0, r5
 800b95e:	f7ff ff0f 	bl	800b780 <uxr_common_create_entity>
 800b962:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800b966:	bd70      	pop	{r4, r5, r6, pc}

0800b968 <uxr_buffer_create_datawriter_bin>:
 800b968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b96c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800b970:	ac1d      	add	r4, sp, #116	@ 0x74
 800b972:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b976:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800b97a:	9105      	str	r1, [sp, #20]
 800b97c:	4606      	mov	r6, r0
 800b97e:	a9a1      	add	r1, sp, #644	@ 0x284
 800b980:	4618      	mov	r0, r3
 800b982:	2305      	movs	r3, #5
 800b984:	7123      	strb	r3, [r4, #4]
 800b986:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800b98a:	2703      	movs	r7, #3
 800b98c:	f000 f8fc 	bl	800bb88 <uxr_object_id_to_raw>
 800b990:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800b992:	7227      	strb	r7, [r4, #8]
 800b994:	a90e      	add	r1, sp, #56	@ 0x38
 800b996:	f000 f8f7 	bl	800bb88 <uxr_object_id_to_raw>
 800b99a:	2300      	movs	r3, #0
 800b99c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800b9a0:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800b9a4:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800b9a8:	3d00      	subs	r5, #0
 800b9aa:	bf18      	it	ne
 800b9ac:	2501      	movne	r5, #1
 800b9ae:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800b9b2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800b9b6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800b9ba:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800b9be:	2301      	movs	r3, #1
 800b9c0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800b9c4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800b9c8:	bb8a      	cbnz	r2, 800ba2e <uxr_buffer_create_datawriter_bin+0xc6>
 800b9ca:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800b9ce:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800b9d2:	f04f 0c13 	mov.w	ip, #19
 800b9d6:	250b      	movs	r5, #11
 800b9d8:	2221      	movs	r2, #33	@ 0x21
 800b9da:	2111      	movs	r1, #17
 800b9dc:	2009      	movs	r0, #9
 800b9de:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800b9e2:	b923      	cbnz	r3, 800b9ee <uxr_buffer_create_datawriter_bin+0x86>
 800b9e4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800b9e8:	4672      	mov	r2, lr
 800b9ea:	4661      	mov	r1, ip
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d025      	beq.n	800ba42 <uxr_buffer_create_datawriter_bin+0xda>
 800b9f6:	2b03      	cmp	r3, #3
 800b9f8:	d029      	beq.n	800ba4e <uxr_buffer_create_datawriter_bin+0xe6>
 800b9fa:	b32b      	cbz	r3, 800ba48 <uxr_buffer_create_datawriter_bin+0xe0>
 800b9fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba00:	a921      	add	r1, sp, #132	@ 0x84
 800ba02:	a806      	add	r0, sp, #24
 800ba04:	f7fd ff54 	bl	80098b0 <ucdr_init_buffer>
 800ba08:	a90e      	add	r1, sp, #56	@ 0x38
 800ba0a:	a806      	add	r0, sp, #24
 800ba0c:	f002 f8f8 	bl	800dc00 <uxr_serialize_OBJK_DataWriter_Binary>
 800ba10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba12:	f8cd 8000 	str.w	r8, [sp]
 800ba16:	9401      	str	r4, [sp, #4]
 800ba18:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ba1c:	60e3      	str	r3, [r4, #12]
 800ba1e:	4630      	mov	r0, r6
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	f7ff fead 	bl	800b780 <uxr_common_create_entity>
 800ba26:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ba2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba2e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800ba32:	f04f 0c12 	mov.w	ip, #18
 800ba36:	250a      	movs	r5, #10
 800ba38:	2220      	movs	r2, #32
 800ba3a:	2110      	movs	r1, #16
 800ba3c:	2008      	movs	r0, #8
 800ba3e:	2702      	movs	r7, #2
 800ba40:	e7cd      	b.n	800b9de <uxr_buffer_create_datawriter_bin+0x76>
 800ba42:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800ba46:	e7d9      	b.n	800b9fc <uxr_buffer_create_datawriter_bin+0x94>
 800ba48:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800ba4c:	e7d6      	b.n	800b9fc <uxr_buffer_create_datawriter_bin+0x94>
 800ba4e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800ba52:	e7d3      	b.n	800b9fc <uxr_buffer_create_datawriter_bin+0x94>

0800ba54 <uxr_buffer_create_datareader_bin>:
 800ba54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba58:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ba5c:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ba5e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ba62:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800ba66:	9105      	str	r1, [sp, #20]
 800ba68:	4606      	mov	r6, r0
 800ba6a:	a9a3      	add	r1, sp, #652	@ 0x28c
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	2306      	movs	r3, #6
 800ba70:	7123      	strb	r3, [r4, #4]
 800ba72:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800ba76:	2703      	movs	r7, #3
 800ba78:	f000 f886 	bl	800bb88 <uxr_object_id_to_raw>
 800ba7c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800ba7e:	7227      	strb	r7, [r4, #8]
 800ba80:	a90e      	add	r1, sp, #56	@ 0x38
 800ba82:	f000 f881 	bl	800bb88 <uxr_object_id_to_raw>
 800ba86:	2300      	movs	r3, #0
 800ba88:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800ba8c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800ba90:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800ba94:	3d00      	subs	r5, #0
 800ba96:	bf18      	it	ne
 800ba98:	2501      	movne	r5, #1
 800ba9a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800ba9e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800baa2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800baa6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800baaa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800baae:	2301      	movs	r3, #1
 800bab0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800bab4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800bab8:	bb8a      	cbnz	r2, 800bb1e <uxr_buffer_create_datareader_bin+0xca>
 800baba:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800babe:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800bac2:	f04f 0c13 	mov.w	ip, #19
 800bac6:	250b      	movs	r5, #11
 800bac8:	2221      	movs	r2, #33	@ 0x21
 800baca:	2111      	movs	r1, #17
 800bacc:	2009      	movs	r0, #9
 800bace:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800bad2:	b923      	cbnz	r3, 800bade <uxr_buffer_create_datareader_bin+0x8a>
 800bad4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800bad8:	4672      	mov	r2, lr
 800bada:	4661      	mov	r1, ip
 800badc:	4628      	mov	r0, r5
 800bade:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d025      	beq.n	800bb32 <uxr_buffer_create_datareader_bin+0xde>
 800bae6:	2b03      	cmp	r3, #3
 800bae8:	d029      	beq.n	800bb3e <uxr_buffer_create_datareader_bin+0xea>
 800baea:	b32b      	cbz	r3, 800bb38 <uxr_buffer_create_datareader_bin+0xe4>
 800baec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800baf0:	a923      	add	r1, sp, #140	@ 0x8c
 800baf2:	a806      	add	r0, sp, #24
 800baf4:	f7fd fedc 	bl	80098b0 <ucdr_init_buffer>
 800baf8:	a90e      	add	r1, sp, #56	@ 0x38
 800bafa:	a806      	add	r0, sp, #24
 800bafc:	f002 f844 	bl	800db88 <uxr_serialize_OBJK_DataReader_Binary>
 800bb00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb02:	f8cd 8000 	str.w	r8, [sp]
 800bb06:	9401      	str	r4, [sp, #4]
 800bb08:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800bb0c:	60e3      	str	r3, [r4, #12]
 800bb0e:	4630      	mov	r0, r6
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	f7ff fe35 	bl	800b780 <uxr_common_create_entity>
 800bb16:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800bb1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb1e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800bb22:	f04f 0c12 	mov.w	ip, #18
 800bb26:	250a      	movs	r5, #10
 800bb28:	2220      	movs	r2, #32
 800bb2a:	2110      	movs	r1, #16
 800bb2c:	2008      	movs	r0, #8
 800bb2e:	2702      	movs	r7, #2
 800bb30:	e7cd      	b.n	800bace <uxr_buffer_create_datareader_bin+0x7a>
 800bb32:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800bb36:	e7d9      	b.n	800baec <uxr_buffer_create_datareader_bin+0x98>
 800bb38:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800bb3c:	e7d6      	b.n	800baec <uxr_buffer_create_datareader_bin+0x98>
 800bb3e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800bb42:	e7d3      	b.n	800baec <uxr_buffer_create_datareader_bin+0x98>

0800bb44 <uxr_object_id>:
 800bb44:	b082      	sub	sp, #8
 800bb46:	2300      	movs	r3, #0
 800bb48:	f88d 1006 	strb.w	r1, [sp, #6]
 800bb4c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bb50:	f360 030f 	bfi	r3, r0, #0, #16
 800bb54:	f362 431f 	bfi	r3, r2, #16, #16
 800bb58:	4618      	mov	r0, r3
 800bb5a:	b002      	add	sp, #8
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop

0800bb60 <uxr_object_id_from_raw>:
 800bb60:	7843      	ldrb	r3, [r0, #1]
 800bb62:	7801      	ldrb	r1, [r0, #0]
 800bb64:	b082      	sub	sp, #8
 800bb66:	f003 020f 	and.w	r2, r3, #15
 800bb6a:	f88d 2006 	strb.w	r2, [sp, #6]
 800bb6e:	091b      	lsrs	r3, r3, #4
 800bb70:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bb74:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800bb78:	2000      	movs	r0, #0
 800bb7a:	f363 000f 	bfi	r0, r3, #0, #16
 800bb7e:	f362 401f 	bfi	r0, r2, #16, #16
 800bb82:	b002      	add	sp, #8
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop

0800bb88 <uxr_object_id_to_raw>:
 800bb88:	4602      	mov	r2, r0
 800bb8a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800bb8e:	b082      	sub	sp, #8
 800bb90:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800bb94:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800bb98:	f881 c000 	strb.w	ip, [r1]
 800bb9c:	7048      	strb	r0, [r1, #1]
 800bb9e:	b002      	add	sp, #8
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop

0800bba4 <on_get_fragmentation_info>:
 800bba4:	b500      	push	{lr}
 800bba6:	b08b      	sub	sp, #44	@ 0x2c
 800bba8:	4601      	mov	r1, r0
 800bbaa:	2204      	movs	r2, #4
 800bbac:	a802      	add	r0, sp, #8
 800bbae:	f7fd fe7f 	bl	80098b0 <ucdr_init_buffer>
 800bbb2:	f10d 0305 	add.w	r3, sp, #5
 800bbb6:	f10d 0206 	add.w	r2, sp, #6
 800bbba:	a901      	add	r1, sp, #4
 800bbbc:	a802      	add	r0, sp, #8
 800bbbe:	f001 f9d5 	bl	800cf6c <uxr_read_submessage_header>
 800bbc2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bbc6:	2b0d      	cmp	r3, #13
 800bbc8:	d003      	beq.n	800bbd2 <on_get_fragmentation_info+0x2e>
 800bbca:	2000      	movs	r0, #0
 800bbcc:	b00b      	add	sp, #44	@ 0x2c
 800bbce:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbd2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bbd6:	f013 0f02 	tst.w	r3, #2
 800bbda:	bf14      	ite	ne
 800bbdc:	2002      	movne	r0, #2
 800bbde:	2001      	moveq	r0, #1
 800bbe0:	b00b      	add	sp, #44	@ 0x2c
 800bbe2:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbe6:	bf00      	nop

0800bbe8 <read_submessage_get_info>:
 800bbe8:	b570      	push	{r4, r5, r6, lr}
 800bbea:	2500      	movs	r5, #0
 800bbec:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800bbf0:	4604      	mov	r4, r0
 800bbf2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800bbf6:	460e      	mov	r6, r1
 800bbf8:	a810      	add	r0, sp, #64	@ 0x40
 800bbfa:	4629      	mov	r1, r5
 800bbfc:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800bc00:	f009 fe26 	bl	8015850 <memset>
 800bc04:	a903      	add	r1, sp, #12
 800bc06:	4630      	mov	r0, r6
 800bc08:	f002 fa70 	bl	800e0ec <uxr_deserialize_GET_INFO_Payload>
 800bc0c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800bc10:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800bc14:	4620      	mov	r0, r4
 800bc16:	f001 f81f 	bl	800cc58 <uxr_session_header_offset>
 800bc1a:	462b      	mov	r3, r5
 800bc1c:	9000      	str	r0, [sp, #0]
 800bc1e:	220c      	movs	r2, #12
 800bc20:	a905      	add	r1, sp, #20
 800bc22:	a808      	add	r0, sp, #32
 800bc24:	f7fd fe32 	bl	800988c <ucdr_init_buffer_origin_offset>
 800bc28:	a910      	add	r1, sp, #64	@ 0x40
 800bc2a:	a808      	add	r0, sp, #32
 800bc2c:	f002 fad0 	bl	800e1d0 <uxr_serialize_INFO_Payload>
 800bc30:	9b08      	ldr	r3, [sp, #32]
 800bc32:	462a      	mov	r2, r5
 800bc34:	4629      	mov	r1, r5
 800bc36:	4620      	mov	r0, r4
 800bc38:	f000 ffb8 	bl	800cbac <uxr_stamp_session_header>
 800bc3c:	a808      	add	r0, sp, #32
 800bc3e:	f7fd fe63 	bl	8009908 <ucdr_buffer_length>
 800bc42:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800bc44:	4602      	mov	r2, r0
 800bc46:	a905      	add	r1, sp, #20
 800bc48:	e9d3 0400 	ldrd	r0, r4, [r3]
 800bc4c:	47a0      	blx	r4
 800bc4e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800bc52:	bd70      	pop	{r4, r5, r6, pc}

0800bc54 <write_submessage_acknack.isra.0>:
 800bc54:	b570      	push	{r4, r5, r6, lr}
 800bc56:	b092      	sub	sp, #72	@ 0x48
 800bc58:	4605      	mov	r5, r0
 800bc5a:	460e      	mov	r6, r1
 800bc5c:	4614      	mov	r4, r2
 800bc5e:	f000 fffb 	bl	800cc58 <uxr_session_header_offset>
 800bc62:	a905      	add	r1, sp, #20
 800bc64:	9000      	str	r0, [sp, #0]
 800bc66:	2300      	movs	r3, #0
 800bc68:	a80a      	add	r0, sp, #40	@ 0x28
 800bc6a:	2211      	movs	r2, #17
 800bc6c:	f7fd fe0e 	bl	800988c <ucdr_init_buffer_origin_offset>
 800bc70:	2218      	movs	r2, #24
 800bc72:	fb02 5404 	mla	r4, r2, r4, r5
 800bc76:	2300      	movs	r3, #0
 800bc78:	2205      	movs	r2, #5
 800bc7a:	3450      	adds	r4, #80	@ 0x50
 800bc7c:	210a      	movs	r1, #10
 800bc7e:	a80a      	add	r0, sp, #40	@ 0x28
 800bc80:	f001 f95a 	bl	800cf38 <uxr_buffer_submessage_header>
 800bc84:	a903      	add	r1, sp, #12
 800bc86:	4620      	mov	r0, r4
 800bc88:	f007 fc1c 	bl	80134c4 <uxr_compute_acknack>
 800bc8c:	ba40      	rev16	r0, r0
 800bc8e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800bc92:	a903      	add	r1, sp, #12
 800bc94:	a80a      	add	r0, sp, #40	@ 0x28
 800bc96:	f88d 6010 	strb.w	r6, [sp, #16]
 800bc9a:	f002 fb09 	bl	800e2b0 <uxr_serialize_ACKNACK_Payload>
 800bc9e:	2200      	movs	r2, #0
 800bca0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bca2:	4611      	mov	r1, r2
 800bca4:	4628      	mov	r0, r5
 800bca6:	f000 ff81 	bl	800cbac <uxr_stamp_session_header>
 800bcaa:	a80a      	add	r0, sp, #40	@ 0x28
 800bcac:	f7fd fe2c 	bl	8009908 <ucdr_buffer_length>
 800bcb0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	a905      	add	r1, sp, #20
 800bcb6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800bcba:	47a0      	blx	r4
 800bcbc:	b012      	add	sp, #72	@ 0x48
 800bcbe:	bd70      	pop	{r4, r5, r6, pc}

0800bcc0 <uxr_init_session>:
 800bcc0:	b510      	push	{r4, lr}
 800bcc2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800bcf8 <uxr_init_session+0x38>
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800bccc:	4604      	mov	r4, r0
 800bcce:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800bcd2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800bcd6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800bcda:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800bcde:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800bce2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800bce6:	2181      	movs	r1, #129	@ 0x81
 800bce8:	f000 fecc 	bl	800ca84 <uxr_init_session_info>
 800bcec:	f104 0008 	add.w	r0, r4, #8
 800bcf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcf4:	f001 b83c 	b.w	800cd70 <uxr_init_stream_storage>
	...

0800bd00 <uxr_set_status_callback>:
 800bd00:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop

0800bd08 <uxr_set_topic_callback>:
 800bd08:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop

0800bd10 <uxr_set_request_callback>:
 800bd10:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800bd14:	4770      	bx	lr
 800bd16:	bf00      	nop

0800bd18 <uxr_set_reply_callback>:
 800bd18:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop

0800bd20 <uxr_create_output_best_effort_stream>:
 800bd20:	b510      	push	{r4, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	e9cd 2100 	strd	r2, r1, [sp]
 800bd28:	4604      	mov	r4, r0
 800bd2a:	f000 ff95 	bl	800cc58 <uxr_session_header_offset>
 800bd2e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800bd32:	4603      	mov	r3, r0
 800bd34:	f104 0008 	add.w	r0, r4, #8
 800bd38:	b004      	add	sp, #16
 800bd3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd3e:	f001 b861 	b.w	800ce04 <uxr_add_output_best_effort_buffer>
 800bd42:	bf00      	nop

0800bd44 <uxr_create_output_reliable_stream>:
 800bd44:	b510      	push	{r4, lr}
 800bd46:	b088      	sub	sp, #32
 800bd48:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	9303      	str	r3, [sp, #12]
 800bd50:	f000 ff82 	bl	800cc58 <uxr_session_header_offset>
 800bd54:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800bd58:	9000      	str	r0, [sp, #0]
 800bd5a:	9905      	ldr	r1, [sp, #20]
 800bd5c:	f104 0008 	add.w	r0, r4, #8
 800bd60:	f001 f864 	bl	800ce2c <uxr_add_output_reliable_buffer>
 800bd64:	2200      	movs	r2, #0
 800bd66:	b2c3      	uxtb	r3, r0
 800bd68:	f363 0207 	bfi	r2, r3, #0, #8
 800bd6c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800bd70:	f363 220f 	bfi	r2, r3, #8, #8
 800bd74:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800bd78:	f363 4217 	bfi	r2, r3, #16, #8
 800bd7c:	0e03      	lsrs	r3, r0, #24
 800bd7e:	f363 621f 	bfi	r2, r3, #24, #8
 800bd82:	4610      	mov	r0, r2
 800bd84:	b008      	add	sp, #32
 800bd86:	bd10      	pop	{r4, pc}

0800bd88 <uxr_create_input_best_effort_stream>:
 800bd88:	b082      	sub	sp, #8
 800bd8a:	3008      	adds	r0, #8
 800bd8c:	b002      	add	sp, #8
 800bd8e:	f001 b867 	b.w	800ce60 <uxr_add_input_best_effort_buffer>
 800bd92:	bf00      	nop

0800bd94 <uxr_create_input_reliable_stream>:
 800bd94:	b510      	push	{r4, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	4c0b      	ldr	r4, [pc, #44]	@ (800bdc8 <uxr_create_input_reliable_stream+0x34>)
 800bd9a:	9400      	str	r4, [sp, #0]
 800bd9c:	3008      	adds	r0, #8
 800bd9e:	f001 f875 	bl	800ce8c <uxr_add_input_reliable_buffer>
 800bda2:	2200      	movs	r2, #0
 800bda4:	b2c3      	uxtb	r3, r0
 800bda6:	f363 0207 	bfi	r2, r3, #0, #8
 800bdaa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800bdae:	f363 220f 	bfi	r2, r3, #8, #8
 800bdb2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800bdb6:	f363 4217 	bfi	r2, r3, #16, #8
 800bdba:	0e03      	lsrs	r3, r0, #24
 800bdbc:	f363 621f 	bfi	r2, r3, #24, #8
 800bdc0:	4610      	mov	r0, r2
 800bdc2:	b004      	add	sp, #16
 800bdc4:	bd10      	pop	{r4, pc}
 800bdc6:	bf00      	nop
 800bdc8:	0800bba5 	.word	0x0800bba5

0800bdcc <uxr_epoch_nanos>:
 800bdcc:	b510      	push	{r4, lr}
 800bdce:	4604      	mov	r4, r0
 800bdd0:	f001 f912 	bl	800cff8 <uxr_nanos>
 800bdd4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800bdd8:	1ac0      	subs	r0, r0, r3
 800bdda:	eb61 0102 	sbc.w	r1, r1, r2
 800bdde:	bd10      	pop	{r4, pc}

0800bde0 <uxr_flash_output_streams>:
 800bde0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bde4:	7e03      	ldrb	r3, [r0, #24]
 800bde6:	b084      	sub	sp, #16
 800bde8:	4604      	mov	r4, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d035      	beq.n	800be5a <uxr_flash_output_streams+0x7a>
 800bdee:	f04f 0900 	mov.w	r9, #0
 800bdf2:	4648      	mov	r0, r9
 800bdf4:	f10d 0802 	add.w	r8, sp, #2
 800bdf8:	af03      	add	r7, sp, #12
 800bdfa:	ae02      	add	r6, sp, #8
 800bdfc:	e006      	b.n	800be0c <uxr_flash_output_streams+0x2c>
 800bdfe:	7e23      	ldrb	r3, [r4, #24]
 800be00:	f109 0901 	add.w	r9, r9, #1
 800be04:	fa5f f089 	uxtb.w	r0, r9
 800be08:	4283      	cmp	r3, r0
 800be0a:	d926      	bls.n	800be5a <uxr_flash_output_streams+0x7a>
 800be0c:	2201      	movs	r2, #1
 800be0e:	4611      	mov	r1, r2
 800be10:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800be14:	f000 ff58 	bl	800ccc8 <uxr_stream_id>
 800be18:	3508      	adds	r5, #8
 800be1a:	4684      	mov	ip, r0
 800be1c:	4643      	mov	r3, r8
 800be1e:	463a      	mov	r2, r7
 800be20:	4631      	mov	r1, r6
 800be22:	4628      	mov	r0, r5
 800be24:	f8cd c004 	str.w	ip, [sp, #4]
 800be28:	f007 fbd2 	bl	80135d0 <uxr_prepare_best_effort_buffer_to_send>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	d0e6      	beq.n	800bdfe <uxr_flash_output_streams+0x1e>
 800be30:	9b02      	ldr	r3, [sp, #8]
 800be32:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800be36:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800be3a:	4620      	mov	r0, r4
 800be3c:	f000 feb6 	bl	800cbac <uxr_stamp_session_header>
 800be40:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800be42:	9a03      	ldr	r2, [sp, #12]
 800be44:	685d      	ldr	r5, [r3, #4]
 800be46:	6818      	ldr	r0, [r3, #0]
 800be48:	9902      	ldr	r1, [sp, #8]
 800be4a:	47a8      	blx	r5
 800be4c:	f109 0901 	add.w	r9, r9, #1
 800be50:	7e23      	ldrb	r3, [r4, #24]
 800be52:	fa5f f089 	uxtb.w	r0, r9
 800be56:	4283      	cmp	r3, r0
 800be58:	d8d8      	bhi.n	800be0c <uxr_flash_output_streams+0x2c>
 800be5a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800be5e:	b38b      	cbz	r3, 800bec4 <uxr_flash_output_streams+0xe4>
 800be60:	f04f 0900 	mov.w	r9, #0
 800be64:	f10d 0802 	add.w	r8, sp, #2
 800be68:	af03      	add	r7, sp, #12
 800be6a:	ae02      	add	r6, sp, #8
 800be6c:	4648      	mov	r0, r9
 800be6e:	2201      	movs	r2, #1
 800be70:	2102      	movs	r1, #2
 800be72:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800be76:	f000 ff27 	bl	800ccc8 <uxr_stream_id>
 800be7a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800be7e:	3520      	adds	r5, #32
 800be80:	9001      	str	r0, [sp, #4]
 800be82:	e00d      	b.n	800bea0 <uxr_flash_output_streams+0xc0>
 800be84:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800be88:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800be8c:	9b02      	ldr	r3, [sp, #8]
 800be8e:	f000 fe8d 	bl	800cbac <uxr_stamp_session_header>
 800be92:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800be94:	9a03      	ldr	r2, [sp, #12]
 800be96:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800be9a:	9902      	ldr	r1, [sp, #8]
 800be9c:	6818      	ldr	r0, [r3, #0]
 800be9e:	47d0      	blx	sl
 800bea0:	4643      	mov	r3, r8
 800bea2:	463a      	mov	r2, r7
 800bea4:	4631      	mov	r1, r6
 800bea6:	4628      	mov	r0, r5
 800bea8:	f007 fdb0 	bl	8013a0c <uxr_prepare_next_reliable_buffer_to_send>
 800beac:	4603      	mov	r3, r0
 800beae:	4620      	mov	r0, r4
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1e7      	bne.n	800be84 <uxr_flash_output_streams+0xa4>
 800beb4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800beb8:	f109 0901 	add.w	r9, r9, #1
 800bebc:	fa5f f089 	uxtb.w	r0, r9
 800bec0:	4283      	cmp	r3, r0
 800bec2:	d8d4      	bhi.n	800be6e <uxr_flash_output_streams+0x8e>
 800bec4:	b004      	add	sp, #16
 800bec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beca:	bf00      	nop

0800becc <read_submessage_info>:
 800becc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bed0:	460d      	mov	r5, r1
 800bed2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800bed6:	4669      	mov	r1, sp
 800bed8:	4607      	mov	r7, r0
 800beda:	4628      	mov	r0, r5
 800bedc:	f002 f814 	bl	800df08 <uxr_deserialize_BaseObjectReply>
 800bee0:	a902      	add	r1, sp, #8
 800bee2:	4604      	mov	r4, r0
 800bee4:	4628      	mov	r0, r5
 800bee6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800beea:	f7fc fb87 	bl	80085fc <ucdr_deserialize_bool>
 800beee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bef2:	4004      	ands	r4, r0
 800bef4:	b2e4      	uxtb	r4, r4
 800bef6:	b95b      	cbnz	r3, 800bf10 <read_submessage_info+0x44>
 800bef8:	a987      	add	r1, sp, #540	@ 0x21c
 800befa:	4628      	mov	r0, r5
 800befc:	f7fc fb7e 	bl	80085fc <ucdr_deserialize_bool>
 800bf00:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800bf04:	4606      	mov	r6, r0
 800bf06:	b94b      	cbnz	r3, 800bf1c <read_submessage_info+0x50>
 800bf08:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800bf0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf10:	a903      	add	r1, sp, #12
 800bf12:	4628      	mov	r0, r5
 800bf14:	f001 fea0 	bl	800dc58 <uxr_deserialize_ObjectVariant>
 800bf18:	4004      	ands	r4, r0
 800bf1a:	e7ed      	b.n	800bef8 <read_submessage_info+0x2c>
 800bf1c:	a988      	add	r1, sp, #544	@ 0x220
 800bf1e:	4628      	mov	r0, r5
 800bf20:	f7fc fb9a 	bl	8008658 <ucdr_deserialize_uint8_t>
 800bf24:	4234      	tst	r4, r6
 800bf26:	d0ef      	beq.n	800bf08 <read_submessage_info+0x3c>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d0ed      	beq.n	800bf08 <read_submessage_info+0x3c>
 800bf2c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800bf30:	2b0d      	cmp	r3, #13
 800bf32:	d1e9      	bne.n	800bf08 <read_submessage_info+0x3c>
 800bf34:	a98a      	add	r1, sp, #552	@ 0x228
 800bf36:	4628      	mov	r0, r5
 800bf38:	f7fd f934 	bl	80091a4 <ucdr_deserialize_int16_t>
 800bf3c:	b140      	cbz	r0, 800bf50 <read_submessage_info+0x84>
 800bf3e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	dd07      	ble.n	800bf56 <read_submessage_info+0x8a>
 800bf46:	f1b8 0f00 	cmp.w	r8, #0
 800bf4a:	bf14      	ite	ne
 800bf4c:	2001      	movne	r0, #1
 800bf4e:	2002      	moveq	r0, #2
 800bf50:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800bf54:	e7d8      	b.n	800bf08 <read_submessage_info+0x3c>
 800bf56:	2000      	movs	r0, #0
 800bf58:	e7fa      	b.n	800bf50 <read_submessage_info+0x84>
 800bf5a:	bf00      	nop

0800bf5c <read_submessage_list>:
 800bf5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf60:	b097      	sub	sp, #92	@ 0x5c
 800bf62:	4ec1      	ldr	r6, [pc, #772]	@ (800c268 <read_submessage_list+0x30c>)
 800bf64:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf66:	4604      	mov	r4, r0
 800bf68:	460d      	mov	r5, r1
 800bf6a:	f04f 0801 	mov.w	r8, #1
 800bf6e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800bf72:	aa0c      	add	r2, sp, #48	@ 0x30
 800bf74:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800bf78:	4628      	mov	r0, r5
 800bf7a:	f000 fff7 	bl	800cf6c <uxr_read_submessage_header>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	f000 813e 	beq.w	800c200 <read_submessage_list+0x2a4>
 800bf84:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800bf88:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800bf8c:	3b02      	subs	r3, #2
 800bf8e:	2b0d      	cmp	r3, #13
 800bf90:	d8ed      	bhi.n	800bf6e <read_submessage_list+0x12>
 800bf92:	a101      	add	r1, pc, #4	@ (adr r1, 800bf98 <read_submessage_list+0x3c>)
 800bf94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf98:	0800c1f7 	.word	0x0800c1f7
 800bf9c:	0800bf6f 	.word	0x0800bf6f
 800bfa0:	0800c1e7 	.word	0x0800c1e7
 800bfa4:	0800c185 	.word	0x0800c185
 800bfa8:	0800c17b 	.word	0x0800c17b
 800bfac:	0800bf6f 	.word	0x0800bf6f
 800bfb0:	0800bf6f 	.word	0x0800bf6f
 800bfb4:	0800c0db 	.word	0x0800c0db
 800bfb8:	0800c06b 	.word	0x0800c06b
 800bfbc:	0800c02b 	.word	0x0800c02b
 800bfc0:	0800bf6f 	.word	0x0800bf6f
 800bfc4:	0800bf6f 	.word	0x0800bf6f
 800bfc8:	0800bf6f 	.word	0x0800bf6f
 800bfcc:	0800bfd1 	.word	0x0800bfd1
 800bfd0:	a910      	add	r1, sp, #64	@ 0x40
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	f002 f9bc 	bl	800e350 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800bfd8:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800bfdc:	f1b9 0f00 	cmp.w	r9, #0
 800bfe0:	f000 8116 	beq.w	800c210 <read_submessage_list+0x2b4>
 800bfe4:	f001 f808 	bl	800cff8 <uxr_nanos>
 800bfe8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800bfea:	4602      	mov	r2, r0
 800bfec:	460b      	mov	r3, r1
 800bfee:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800bff0:	2100      	movs	r1, #0
 800bff2:	468c      	mov	ip, r1
 800bff4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800bff8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800bffc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800bffe:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800c000:	468c      	mov	ip, r1
 800c002:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800c006:	46e2      	mov	sl, ip
 800c008:	46bc      	mov	ip, r7
 800c00a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800c00e:	fbc0 7106 	smlal	r7, r1, r0, r6
 800c012:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800c016:	e9cd 7100 	strd	r7, r1, [sp]
 800c01a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800c01e:	9106      	str	r1, [sp, #24]
 800c020:	4620      	mov	r0, r4
 800c022:	47c8      	blx	r9
 800c024:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800c028:	e7a1      	b.n	800bf6e <read_submessage_list+0x12>
 800c02a:	a910      	add	r1, sp, #64	@ 0x40
 800c02c:	4628      	mov	r0, r5
 800c02e:	f002 f97d 	bl	800e32c <uxr_deserialize_HEARTBEAT_Payload>
 800c032:	2100      	movs	r1, #0
 800c034:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800c038:	f000 fe70 	bl	800cd1c <uxr_stream_id_from_raw>
 800c03c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800c040:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c042:	4639      	mov	r1, r7
 800c044:	f104 0008 	add.w	r0, r4, #8
 800c048:	f000 ff56 	bl	800cef8 <uxr_get_input_reliable_stream>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	d08e      	beq.n	800bf6e <read_submessage_list+0x12>
 800c050:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800c054:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800c058:	f007 fa28 	bl	80134ac <uxr_process_heartbeat>
 800c05c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800c060:	463a      	mov	r2, r7
 800c062:	4620      	mov	r0, r4
 800c064:	f7ff fdf6 	bl	800bc54 <write_submessage_acknack.isra.0>
 800c068:	e781      	b.n	800bf6e <read_submessage_list+0x12>
 800c06a:	a910      	add	r1, sp, #64	@ 0x40
 800c06c:	4628      	mov	r0, r5
 800c06e:	f002 f935 	bl	800e2dc <uxr_deserialize_ACKNACK_Payload>
 800c072:	2100      	movs	r1, #0
 800c074:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800c078:	f000 fe50 	bl	800cd1c <uxr_stream_id_from_raw>
 800c07c:	900d      	str	r0, [sp, #52]	@ 0x34
 800c07e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800c082:	f104 0008 	add.w	r0, r4, #8
 800c086:	f000 ff23 	bl	800ced0 <uxr_get_output_reliable_stream>
 800c08a:	4607      	mov	r7, r0
 800c08c:	2800      	cmp	r0, #0
 800c08e:	f43f af6e 	beq.w	800bf6e <read_submessage_list+0x12>
 800c092:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800c096:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800c09a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800c09e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800c0a2:	b289      	uxth	r1, r1
 800c0a4:	f007 fd5c 	bl	8013b60 <uxr_process_acknack>
 800c0a8:	4638      	mov	r0, r7
 800c0aa:	f007 fd19 	bl	8013ae0 <uxr_begin_output_nack_buffer_it>
 800c0ae:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800c0b2:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800c0b6:	e006      	b.n	800c0c6 <read_submessage_list+0x16a>
 800c0b8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c0ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c0bc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800c0c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c0c2:	6818      	ldr	r0, [r3, #0]
 800c0c4:	47c8      	blx	r9
 800c0c6:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800c0ca:	aa0f      	add	r2, sp, #60	@ 0x3c
 800c0cc:	4651      	mov	r1, sl
 800c0ce:	4638      	mov	r0, r7
 800c0d0:	f007 fd08 	bl	8013ae4 <uxr_next_reliable_nack_buffer_to_send>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d1ef      	bne.n	800c0b8 <read_submessage_list+0x15c>
 800c0d8:	e749      	b.n	800bf6e <read_submessage_list+0x12>
 800c0da:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800c0de:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800c0e2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800c0e6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800c0ea:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800c0ee:	4651      	mov	r1, sl
 800c0f0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800c0f4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800c0f8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800c0fc:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800c100:	4628      	mov	r0, r5
 800c102:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800c106:	f001 fe49 	bl	800dd9c <uxr_deserialize_BaseObjectRequest>
 800c10a:	4650      	mov	r0, sl
 800c10c:	a90f      	add	r1, sp, #60	@ 0x3c
 800c10e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800c112:	f000 fdc7 	bl	800cca4 <uxr_parse_base_object_request>
 800c116:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800c11a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c11c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800c120:	9110      	str	r1, [sp, #64]	@ 0x40
 800c122:	3f04      	subs	r7, #4
 800c124:	f009 090e 	and.w	r9, r9, #14
 800c128:	b2bf      	uxth	r7, r7
 800c12a:	f1bb 0f00 	cmp.w	fp, #0
 800c12e:	d006      	beq.n	800c13e <read_submessage_list+0x1e2>
 800c130:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800c134:	9300      	str	r3, [sp, #0]
 800c136:	4652      	mov	r2, sl
 800c138:	2300      	movs	r3, #0
 800c13a:	4620      	mov	r0, r4
 800c13c:	47d8      	blx	fp
 800c13e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800c140:	b16a      	cbz	r2, 800c15e <read_submessage_list+0x202>
 800c142:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800c144:	2100      	movs	r1, #0
 800c146:	3802      	subs	r0, #2
 800c148:	e002      	b.n	800c150 <read_submessage_list+0x1f4>
 800c14a:	3101      	adds	r1, #1
 800c14c:	4291      	cmp	r1, r2
 800c14e:	d006      	beq.n	800c15e <read_submessage_list+0x202>
 800c150:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800c154:	4553      	cmp	r3, sl
 800c156:	d1f8      	bne.n	800c14a <read_submessage_list+0x1ee>
 800c158:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800c15a:	2200      	movs	r2, #0
 800c15c:	545a      	strb	r2, [r3, r1]
 800c15e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800c162:	9102      	str	r1, [sp, #8]
 800c164:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c166:	9101      	str	r1, [sp, #4]
 800c168:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800c16a:	9100      	str	r1, [sp, #0]
 800c16c:	464b      	mov	r3, r9
 800c16e:	463a      	mov	r2, r7
 800c170:	4629      	mov	r1, r5
 800c172:	4620      	mov	r0, r4
 800c174:	f007 fdb2 	bl	8013cdc <read_submessage_format>
 800c178:	e6f9      	b.n	800bf6e <read_submessage_list+0x12>
 800c17a:	4629      	mov	r1, r5
 800c17c:	4620      	mov	r0, r4
 800c17e:	f7ff fea5 	bl	800becc <read_submessage_info>
 800c182:	e6f4      	b.n	800bf6e <read_submessage_list+0x12>
 800c184:	2a00      	cmp	r2, #0
 800c186:	d03e      	beq.n	800c206 <read_submessage_list+0x2aa>
 800c188:	a910      	add	r1, sp, #64	@ 0x40
 800c18a:	4628      	mov	r0, r5
 800c18c:	f002 f802 	bl	800e194 <uxr_deserialize_STATUS_Payload>
 800c190:	a90e      	add	r1, sp, #56	@ 0x38
 800c192:	aa0d      	add	r2, sp, #52	@ 0x34
 800c194:	a810      	add	r0, sp, #64	@ 0x40
 800c196:	f000 fd85 	bl	800cca4 <uxr_parse_base_object_request>
 800c19a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800c19e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c1a0:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800c1a4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800c1a8:	910f      	str	r1, [sp, #60]	@ 0x3c
 800c1aa:	f1ba 0f00 	cmp.w	sl, #0
 800c1ae:	d006      	beq.n	800c1be <read_submessage_list+0x262>
 800c1b0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800c1b4:	9300      	str	r3, [sp, #0]
 800c1b6:	463a      	mov	r2, r7
 800c1b8:	464b      	mov	r3, r9
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	47d0      	blx	sl
 800c1be:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800c1c0:	2a00      	cmp	r2, #0
 800c1c2:	f43f aed4 	beq.w	800bf6e <read_submessage_list+0x12>
 800c1c6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800c1c8:	2100      	movs	r1, #0
 800c1ca:	3802      	subs	r0, #2
 800c1cc:	e003      	b.n	800c1d6 <read_submessage_list+0x27a>
 800c1ce:	3101      	adds	r1, #1
 800c1d0:	4291      	cmp	r1, r2
 800c1d2:	f43f aecc 	beq.w	800bf6e <read_submessage_list+0x12>
 800c1d6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800c1da:	42bb      	cmp	r3, r7
 800c1dc:	d1f7      	bne.n	800c1ce <read_submessage_list+0x272>
 800c1de:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800c1e0:	f803 9001 	strb.w	r9, [r3, r1]
 800c1e4:	e6c3      	b.n	800bf6e <read_submessage_list+0x12>
 800c1e6:	2a00      	cmp	r2, #0
 800c1e8:	f47f aec1 	bne.w	800bf6e <read_submessage_list+0x12>
 800c1ec:	4629      	mov	r1, r5
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f000 fc9e 	bl	800cb30 <uxr_read_create_session_status>
 800c1f4:	e6bb      	b.n	800bf6e <read_submessage_list+0x12>
 800c1f6:	4629      	mov	r1, r5
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	f7ff fcf5 	bl	800bbe8 <read_submessage_get_info>
 800c1fe:	e6b6      	b.n	800bf6e <read_submessage_list+0x12>
 800c200:	b017      	add	sp, #92	@ 0x5c
 800c202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c206:	4629      	mov	r1, r5
 800c208:	4620      	mov	r0, r4
 800c20a:	f000 fc9d 	bl	800cb48 <uxr_read_delete_session_status>
 800c20e:	e6ae      	b.n	800bf6e <read_submessage_list+0x12>
 800c210:	f000 fef2 	bl	800cff8 <uxr_nanos>
 800c214:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c216:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c218:	464f      	mov	r7, r9
 800c21a:	fbc3 2706 	smlal	r2, r7, r3, r6
 800c21e:	1812      	adds	r2, r2, r0
 800c220:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c222:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800c224:	eb47 0101 	adc.w	r1, r7, r1
 800c228:	464f      	mov	r7, r9
 800c22a:	fbc3 0706 	smlal	r0, r7, r3, r6
 800c22e:	463b      	mov	r3, r7
 800c230:	4684      	mov	ip, r0
 800c232:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800c236:	fbc7 0906 	smlal	r0, r9, r7, r6
 800c23a:	eb1c 0c00 	adds.w	ip, ip, r0
 800c23e:	464f      	mov	r7, r9
 800c240:	eb43 0307 	adc.w	r3, r3, r7
 800c244:	ebb2 0c0c 	subs.w	ip, r2, ip
 800c248:	eb61 0303 	sbc.w	r3, r1, r3
 800c24c:	0fda      	lsrs	r2, r3, #31
 800c24e:	eb12 020c 	adds.w	r2, r2, ip
 800c252:	f143 0300 	adc.w	r3, r3, #0
 800c256:	0852      	lsrs	r2, r2, #1
 800c258:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800c25c:	105b      	asrs	r3, r3, #1
 800c25e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800c262:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800c266:	e6dd      	b.n	800c024 <read_submessage_list+0xc8>
 800c268:	3b9aca00 	.word	0x3b9aca00

0800c26c <listen_message_reliably>:
 800c26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c270:	1e0b      	subs	r3, r1, #0
 800c272:	b09d      	sub	sp, #116	@ 0x74
 800c274:	bfb8      	it	lt
 800c276:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800c27a:	4680      	mov	r8, r0
 800c27c:	9305      	str	r3, [sp, #20]
 800c27e:	f000 fea1 	bl	800cfc4 <uxr_millis>
 800c282:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800c286:	4681      	mov	r9, r0
 800c288:	2a00      	cmp	r2, #0
 800c28a:	f000 80a1 	beq.w	800c3d0 <listen_message_reliably+0x164>
 800c28e:	2600      	movs	r6, #0
 800c290:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c294:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800c298:	9303      	str	r3, [sp, #12]
 800c29a:	4630      	mov	r0, r6
 800c29c:	460f      	mov	r7, r1
 800c29e:	e00f      	b.n	800c2c0 <listen_message_reliably+0x54>
 800c2a0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c2a4:	9903      	ldr	r1, [sp, #12]
 800c2a6:	455a      	cmp	r2, fp
 800c2a8:	f106 0601 	add.w	r6, r6, #1
 800c2ac:	eb73 0101 	sbcs.w	r1, r3, r1
 800c2b0:	b2f0      	uxtb	r0, r6
 800c2b2:	da01      	bge.n	800c2b8 <listen_message_reliably+0x4c>
 800c2b4:	4693      	mov	fp, r2
 800c2b6:	9303      	str	r3, [sp, #12]
 800c2b8:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800c2bc:	4283      	cmp	r3, r0
 800c2be:	d960      	bls.n	800c382 <listen_message_reliably+0x116>
 800c2c0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800c2c4:	2102      	movs	r1, #2
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f000 fcfe 	bl	800ccc8 <uxr_stream_id>
 800c2cc:	00e4      	lsls	r4, r4, #3
 800c2ce:	f104 0520 	add.w	r5, r4, #32
 800c2d2:	4445      	add	r5, r8
 800c2d4:	4601      	mov	r1, r0
 800c2d6:	463b      	mov	r3, r7
 800c2d8:	464a      	mov	r2, r9
 800c2da:	4628      	mov	r0, r5
 800c2dc:	9109      	str	r1, [sp, #36]	@ 0x24
 800c2de:	f007 fbd5 	bl	8013a8c <uxr_update_output_stream_heartbeat_timestamp>
 800c2e2:	eb08 0304 	add.w	r3, r8, r4
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	d0da      	beq.n	800c2a0 <listen_message_reliably+0x34>
 800c2ea:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800c2ee:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800c2f2:	9304      	str	r3, [sp, #16]
 800c2f4:	4640      	mov	r0, r8
 800c2f6:	f000 fcaf 	bl	800cc58 <uxr_session_header_offset>
 800c2fa:	3501      	adds	r5, #1
 800c2fc:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800c300:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800c304:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800c308:	2300      	movs	r3, #0
 800c30a:	2211      	movs	r2, #17
 800c30c:	9000      	str	r0, [sp, #0]
 800c30e:	a90c      	add	r1, sp, #48	@ 0x30
 800c310:	4650      	mov	r0, sl
 800c312:	f7fd fabb 	bl	800988c <ucdr_init_buffer_origin_offset>
 800c316:	2300      	movs	r3, #0
 800c318:	2205      	movs	r2, #5
 800c31a:	210b      	movs	r1, #11
 800c31c:	4650      	mov	r0, sl
 800c31e:	f000 fe0b 	bl	800cf38 <uxr_buffer_submessage_header>
 800c322:	8968      	ldrh	r0, [r5, #10]
 800c324:	2101      	movs	r1, #1
 800c326:	f007 fda3 	bl	8013e70 <uxr_seq_num_add>
 800c32a:	892b      	ldrh	r3, [r5, #8]
 800c32c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800c330:	4602      	mov	r2, r0
 800c332:	9b04      	ldr	r3, [sp, #16]
 800c334:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800c338:	a90a      	add	r1, sp, #40	@ 0x28
 800c33a:	4650      	mov	r0, sl
 800c33c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800c340:	f001 ffe0 	bl	800e304 <uxr_serialize_HEARTBEAT_Payload>
 800c344:	2200      	movs	r2, #0
 800c346:	4611      	mov	r1, r2
 800c348:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c34a:	4640      	mov	r0, r8
 800c34c:	f000 fc2e 	bl	800cbac <uxr_stamp_session_header>
 800c350:	4650      	mov	r0, sl
 800c352:	f7fd fad9 	bl	8009908 <ucdr_buffer_length>
 800c356:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800c35a:	4602      	mov	r2, r0
 800c35c:	a90c      	add	r1, sp, #48	@ 0x30
 800c35e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c362:	4444      	add	r4, r8
 800c364:	47a8      	blx	r5
 800c366:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800c36a:	9903      	ldr	r1, [sp, #12]
 800c36c:	455a      	cmp	r2, fp
 800c36e:	f106 0601 	add.w	r6, r6, #1
 800c372:	eb73 0101 	sbcs.w	r1, r3, r1
 800c376:	b2f0      	uxtb	r0, r6
 800c378:	db9c      	blt.n	800c2b4 <listen_message_reliably+0x48>
 800c37a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800c37e:	4283      	cmp	r3, r0
 800c380:	d89e      	bhi.n	800c2c0 <listen_message_reliably+0x54>
 800c382:	9a03      	ldr	r2, [sp, #12]
 800c384:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c388:	429a      	cmp	r2, r3
 800c38a:	bf08      	it	eq
 800c38c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800c390:	d01e      	beq.n	800c3d0 <listen_message_reliably+0x164>
 800c392:	ebab 0309 	sub.w	r3, fp, r9
 800c396:	9905      	ldr	r1, [sp, #20]
 800c398:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	bf08      	it	eq
 800c3a0:	2301      	moveq	r3, #1
 800c3a2:	4299      	cmp	r1, r3
 800c3a4:	bfa8      	it	ge
 800c3a6:	4619      	movge	r1, r3
 800c3a8:	6894      	ldr	r4, [r2, #8]
 800c3aa:	6810      	ldr	r0, [r2, #0]
 800c3ac:	4689      	mov	r9, r1
 800c3ae:	460b      	mov	r3, r1
 800c3b0:	aa08      	add	r2, sp, #32
 800c3b2:	a907      	add	r1, sp, #28
 800c3b4:	47a0      	blx	r4
 800c3b6:	b968      	cbnz	r0, 800c3d4 <listen_message_reliably+0x168>
 800c3b8:	9b05      	ldr	r3, [sp, #20]
 800c3ba:	eba3 0309 	sub.w	r3, r3, r9
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	9305      	str	r3, [sp, #20]
 800c3c2:	f73f af5c 	bgt.w	800c27e <listen_message_reliably+0x12>
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	b01d      	add	sp, #116	@ 0x74
 800c3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d0:	9b05      	ldr	r3, [sp, #20]
 800c3d2:	e7e0      	b.n	800c396 <listen_message_reliably+0x12a>
 800c3d4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800c3d8:	4604      	mov	r4, r0
 800c3da:	a80c      	add	r0, sp, #48	@ 0x30
 800c3dc:	f7fd fa68 	bl	80098b0 <ucdr_init_buffer>
 800c3e0:	2500      	movs	r5, #0
 800c3e2:	f10d 031a 	add.w	r3, sp, #26
 800c3e6:	aa06      	add	r2, sp, #24
 800c3e8:	a90c      	add	r1, sp, #48	@ 0x30
 800c3ea:	4640      	mov	r0, r8
 800c3ec:	f88d 5018 	strb.w	r5, [sp, #24]
 800c3f0:	f000 fbf0 	bl	800cbd4 <uxr_read_session_header>
 800c3f4:	b918      	cbnz	r0, 800c3fe <listen_message_reliably+0x192>
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	b01d      	add	sp, #116	@ 0x74
 800c3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fe:	4629      	mov	r1, r5
 800c400:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c404:	f000 fc8a 	bl	800cd1c <uxr_stream_id_from_raw>
 800c408:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800c40c:	2d01      	cmp	r5, #1
 800c40e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800c412:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800c416:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800c41a:	d04b      	beq.n	800c4b4 <listen_message_reliably+0x248>
 800c41c:	2d02      	cmp	r5, #2
 800c41e:	d00f      	beq.n	800c440 <listen_message_reliably+0x1d4>
 800c420:	2d00      	cmp	r5, #0
 800c422:	d1e8      	bne.n	800c3f6 <listen_message_reliably+0x18a>
 800c424:	4629      	mov	r1, r5
 800c426:	4628      	mov	r0, r5
 800c428:	f000 fc78 	bl	800cd1c <uxr_stream_id_from_raw>
 800c42c:	a90c      	add	r1, sp, #48	@ 0x30
 800c42e:	4602      	mov	r2, r0
 800c430:	4640      	mov	r0, r8
 800c432:	920a      	str	r2, [sp, #40]	@ 0x28
 800c434:	f7ff fd92 	bl	800bf5c <read_submessage_list>
 800c438:	4620      	mov	r0, r4
 800c43a:	b01d      	add	sp, #116	@ 0x74
 800c43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c440:	4631      	mov	r1, r6
 800c442:	f108 0008 	add.w	r0, r8, #8
 800c446:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800c44a:	f000 fd55 	bl	800cef8 <uxr_get_input_reliable_stream>
 800c44e:	4607      	mov	r7, r0
 800c450:	b338      	cbz	r0, 800c4a2 <listen_message_reliably+0x236>
 800c452:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c454:	9203      	str	r2, [sp, #12]
 800c456:	a80c      	add	r0, sp, #48	@ 0x30
 800c458:	f7fd fa5a 	bl	8009910 <ucdr_buffer_remaining>
 800c45c:	4603      	mov	r3, r0
 800c45e:	f10d 0019 	add.w	r0, sp, #25
 800c462:	9000      	str	r0, [sp, #0]
 800c464:	9a03      	ldr	r2, [sp, #12]
 800c466:	4651      	mov	r1, sl
 800c468:	4638      	mov	r0, r7
 800c46a:	f006 ff25 	bl	80132b8 <uxr_receive_reliable_message>
 800c46e:	b1c0      	cbz	r0, 800c4a2 <listen_message_reliably+0x236>
 800c470:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c474:	b393      	cbz	r3, 800c4dc <listen_message_reliably+0x270>
 800c476:	ad14      	add	r5, sp, #80	@ 0x50
 800c478:	f04f 0a02 	mov.w	sl, #2
 800c47c:	e00a      	b.n	800c494 <listen_message_reliably+0x228>
 800c47e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800c482:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800c486:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800c48a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c48c:	4629      	mov	r1, r5
 800c48e:	4640      	mov	r0, r8
 800c490:	f7ff fd64 	bl	800bf5c <read_submessage_list>
 800c494:	2204      	movs	r2, #4
 800c496:	4629      	mov	r1, r5
 800c498:	4638      	mov	r0, r7
 800c49a:	f006 ff8d 	bl	80133b8 <uxr_next_input_reliable_buffer_available>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	d1ed      	bne.n	800c47e <listen_message_reliably+0x212>
 800c4a2:	4640      	mov	r0, r8
 800c4a4:	4632      	mov	r2, r6
 800c4a6:	4649      	mov	r1, r9
 800c4a8:	f7ff fbd4 	bl	800bc54 <write_submessage_acknack.isra.0>
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	b01d      	add	sp, #116	@ 0x74
 800c4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4b4:	4631      	mov	r1, r6
 800c4b6:	f108 0008 	add.w	r0, r8, #8
 800c4ba:	f000 fd13 	bl	800cee4 <uxr_get_input_best_effort_stream>
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	d099      	beq.n	800c3f6 <listen_message_reliably+0x18a>
 800c4c2:	4651      	mov	r1, sl
 800c4c4:	f006 fe64 	bl	8013190 <uxr_receive_best_effort_message>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	d094      	beq.n	800c3f6 <listen_message_reliably+0x18a>
 800c4cc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800c4d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4d2:	a90c      	add	r1, sp, #48	@ 0x30
 800c4d4:	4640      	mov	r0, r8
 800c4d6:	f7ff fd41 	bl	800bf5c <read_submessage_list>
 800c4da:	e78c      	b.n	800c3f6 <listen_message_reliably+0x18a>
 800c4dc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800c4e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4e2:	a90c      	add	r1, sp, #48	@ 0x30
 800c4e4:	4640      	mov	r0, r8
 800c4e6:	f7ff fd39 	bl	800bf5c <read_submessage_list>
 800c4ea:	e7c4      	b.n	800c476 <listen_message_reliably+0x20a>

0800c4ec <uxr_run_session_timeout>:
 800c4ec:	b570      	push	{r4, r5, r6, lr}
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	460d      	mov	r5, r1
 800c4f2:	f000 fd67 	bl	800cfc4 <uxr_millis>
 800c4f6:	4606      	mov	r6, r0
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	f7ff fc71 	bl	800bde0 <uxr_flash_output_streams>
 800c4fe:	4629      	mov	r1, r5
 800c500:	4620      	mov	r0, r4
 800c502:	f7ff feb3 	bl	800c26c <listen_message_reliably>
 800c506:	f000 fd5d 	bl	800cfc4 <uxr_millis>
 800c50a:	1b83      	subs	r3, r0, r6
 800c50c:	1ae9      	subs	r1, r5, r3
 800c50e:	2900      	cmp	r1, #0
 800c510:	dcf6      	bgt.n	800c500 <uxr_run_session_timeout+0x14>
 800c512:	f104 0008 	add.w	r0, r4, #8
 800c516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c51a:	f000 bcf7 	b.w	800cf0c <uxr_output_streams_confirmed>
 800c51e:	bf00      	nop

0800c520 <uxr_run_session_until_data>:
 800c520:	b570      	push	{r4, r5, r6, lr}
 800c522:	4604      	mov	r4, r0
 800c524:	460d      	mov	r5, r1
 800c526:	f000 fd4d 	bl	800cfc4 <uxr_millis>
 800c52a:	4606      	mov	r6, r0
 800c52c:	4620      	mov	r0, r4
 800c52e:	f7ff fc57 	bl	800bde0 <uxr_flash_output_streams>
 800c532:	2300      	movs	r3, #0
 800c534:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800c538:	4629      	mov	r1, r5
 800c53a:	e005      	b.n	800c548 <uxr_run_session_until_data+0x28>
 800c53c:	f000 fd42 	bl	800cfc4 <uxr_millis>
 800c540:	1b83      	subs	r3, r0, r6
 800c542:	1ae9      	subs	r1, r5, r3
 800c544:	2900      	cmp	r1, #0
 800c546:	dd07      	ble.n	800c558 <uxr_run_session_until_data+0x38>
 800c548:	4620      	mov	r0, r4
 800c54a:	f7ff fe8f 	bl	800c26c <listen_message_reliably>
 800c54e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800c552:	2800      	cmp	r0, #0
 800c554:	d0f2      	beq.n	800c53c <uxr_run_session_until_data+0x1c>
 800c556:	bd70      	pop	{r4, r5, r6, pc}
 800c558:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800c55c:	bd70      	pop	{r4, r5, r6, pc}
 800c55e:	bf00      	nop

0800c560 <uxr_run_session_until_confirm_delivery>:
 800c560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c564:	4606      	mov	r6, r0
 800c566:	460d      	mov	r5, r1
 800c568:	f000 fd2c 	bl	800cfc4 <uxr_millis>
 800c56c:	4607      	mov	r7, r0
 800c56e:	4630      	mov	r0, r6
 800c570:	f7ff fc36 	bl	800bde0 <uxr_flash_output_streams>
 800c574:	2d00      	cmp	r5, #0
 800c576:	f106 0808 	add.w	r8, r6, #8
 800c57a:	bfa8      	it	ge
 800c57c:	462c      	movge	r4, r5
 800c57e:	da07      	bge.n	800c590 <uxr_run_session_until_confirm_delivery+0x30>
 800c580:	e00e      	b.n	800c5a0 <uxr_run_session_until_confirm_delivery+0x40>
 800c582:	f7ff fe73 	bl	800c26c <listen_message_reliably>
 800c586:	f000 fd1d 	bl	800cfc4 <uxr_millis>
 800c58a:	1bc3      	subs	r3, r0, r7
 800c58c:	1aec      	subs	r4, r5, r3
 800c58e:	d407      	bmi.n	800c5a0 <uxr_run_session_until_confirm_delivery+0x40>
 800c590:	4640      	mov	r0, r8
 800c592:	f000 fcbb 	bl	800cf0c <uxr_output_streams_confirmed>
 800c596:	4603      	mov	r3, r0
 800c598:	4621      	mov	r1, r4
 800c59a:	4630      	mov	r0, r6
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d0f0      	beq.n	800c582 <uxr_run_session_until_confirm_delivery+0x22>
 800c5a0:	4640      	mov	r0, r8
 800c5a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5a6:	f000 bcb1 	b.w	800cf0c <uxr_output_streams_confirmed>
 800c5aa:	bf00      	nop

0800c5ac <uxr_run_session_until_all_status>:
 800c5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5b0:	9c08      	ldr	r4, [sp, #32]
 800c5b2:	4606      	mov	r6, r0
 800c5b4:	460f      	mov	r7, r1
 800c5b6:	4691      	mov	r9, r2
 800c5b8:	461d      	mov	r5, r3
 800c5ba:	f7ff fc11 	bl	800bde0 <uxr_flash_output_streams>
 800c5be:	b124      	cbz	r4, 800c5ca <uxr_run_session_until_all_status+0x1e>
 800c5c0:	4622      	mov	r2, r4
 800c5c2:	21ff      	movs	r1, #255	@ 0xff
 800c5c4:	4628      	mov	r0, r5
 800c5c6:	f009 f943 	bl	8015850 <memset>
 800c5ca:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800c5ce:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800c5d0:	f000 fcf8 	bl	800cfc4 <uxr_millis>
 800c5d4:	3d01      	subs	r5, #1
 800c5d6:	f1a9 0902 	sub.w	r9, r9, #2
 800c5da:	4680      	mov	r8, r0
 800c5dc:	4639      	mov	r1, r7
 800c5de:	4630      	mov	r0, r6
 800c5e0:	f7ff fe44 	bl	800c26c <listen_message_reliably>
 800c5e4:	f000 fcee 	bl	800cfc4 <uxr_millis>
 800c5e8:	eba0 0008 	sub.w	r0, r0, r8
 800c5ec:	1a39      	subs	r1, r7, r0
 800c5ee:	b344      	cbz	r4, 800c642 <uxr_run_session_until_all_status+0x96>
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	46ac      	mov	ip, r5
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e002      	b.n	800c5fe <uxr_run_session_until_all_status+0x52>
 800c5f8:	42a3      	cmp	r3, r4
 800c5fa:	d20d      	bcs.n	800c618 <uxr_run_session_until_all_status+0x6c>
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800c602:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800c606:	d1f7      	bne.n	800c5f8 <uxr_run_session_until_all_status+0x4c>
 800c608:	42a3      	cmp	r3, r4
 800c60a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800c60e:	d213      	bcs.n	800c638 <uxr_run_session_until_all_status+0x8c>
 800c610:	2a00      	cmp	r2, #0
 800c612:	d0f3      	beq.n	800c5fc <uxr_run_session_until_all_status+0x50>
 800c614:	2900      	cmp	r1, #0
 800c616:	dce2      	bgt.n	800c5de <uxr_run_session_until_all_status+0x32>
 800c618:	2300      	movs	r3, #0
 800c61a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800c61c:	442c      	add	r4, r5
 800c61e:	e001      	b.n	800c624 <uxr_run_session_until_all_status+0x78>
 800c620:	2b01      	cmp	r3, #1
 800c622:	d812      	bhi.n	800c64a <uxr_run_session_until_all_status+0x9e>
 800c624:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c628:	4284      	cmp	r4, r0
 800c62a:	d1f9      	bne.n	800c620 <uxr_run_session_until_all_status+0x74>
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	bf8c      	ite	hi
 800c630:	2000      	movhi	r0, #0
 800c632:	2001      	movls	r0, #1
 800c634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c638:	2900      	cmp	r1, #0
 800c63a:	dded      	ble.n	800c618 <uxr_run_session_until_all_status+0x6c>
 800c63c:	2a00      	cmp	r2, #0
 800c63e:	d1ce      	bne.n	800c5de <uxr_run_session_until_all_status+0x32>
 800c640:	e7ea      	b.n	800c618 <uxr_run_session_until_all_status+0x6c>
 800c642:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800c644:	2001      	movs	r0, #1
 800c646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c64a:	2000      	movs	r0, #0
 800c64c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c650 <wait_session_status>:
 800c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c654:	4604      	mov	r4, r0
 800c656:	b09d      	sub	sp, #116	@ 0x74
 800c658:	20ff      	movs	r0, #255	@ 0xff
 800c65a:	7160      	strb	r0, [r4, #5]
 800c65c:	9303      	str	r3, [sp, #12]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f000 80b6 	beq.w	800c7d0 <wait_session_status+0x180>
 800c664:	468a      	mov	sl, r1
 800c666:	4691      	mov	r9, r2
 800c668:	f04f 0b00 	mov.w	fp, #0
 800c66c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c66e:	464a      	mov	r2, r9
 800c670:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c674:	4651      	mov	r1, sl
 800c676:	47a8      	blx	r5
 800c678:	f000 fca4 	bl	800cfc4 <uxr_millis>
 800c67c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c680:	4605      	mov	r5, r0
 800c682:	e009      	b.n	800c698 <wait_session_status+0x48>
 800c684:	f000 fc9e 	bl	800cfc4 <uxr_millis>
 800c688:	1b40      	subs	r0, r0, r5
 800c68a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800c68e:	2b00      	cmp	r3, #0
 800c690:	dd40      	ble.n	800c714 <wait_session_status+0xc4>
 800c692:	7960      	ldrb	r0, [r4, #5]
 800c694:	28ff      	cmp	r0, #255	@ 0xff
 800c696:	d145      	bne.n	800c724 <wait_session_status+0xd4>
 800c698:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800c69a:	a908      	add	r1, sp, #32
 800c69c:	6896      	ldr	r6, [r2, #8]
 800c69e:	6810      	ldr	r0, [r2, #0]
 800c6a0:	aa09      	add	r2, sp, #36	@ 0x24
 800c6a2:	47b0      	blx	r6
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	d0ed      	beq.n	800c684 <wait_session_status+0x34>
 800c6a8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800c6ac:	a80c      	add	r0, sp, #48	@ 0x30
 800c6ae:	f7fd f8ff 	bl	80098b0 <ucdr_init_buffer>
 800c6b2:	2600      	movs	r6, #0
 800c6b4:	f10d 031e 	add.w	r3, sp, #30
 800c6b8:	aa07      	add	r2, sp, #28
 800c6ba:	a90c      	add	r1, sp, #48	@ 0x30
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f88d 601c 	strb.w	r6, [sp, #28]
 800c6c2:	f000 fa87 	bl	800cbd4 <uxr_read_session_header>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d0dc      	beq.n	800c684 <wait_session_status+0x34>
 800c6ca:	4631      	mov	r1, r6
 800c6cc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800c6d0:	f000 fb24 	bl	800cd1c <uxr_stream_id_from_raw>
 800c6d4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800c6d8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800c6dc:	9302      	str	r3, [sp, #8]
 800c6de:	2f01      	cmp	r7, #1
 800c6e0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800c6e4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800c6e8:	d05c      	beq.n	800c7a4 <wait_session_status+0x154>
 800c6ea:	2f02      	cmp	r7, #2
 800c6ec:	d020      	beq.n	800c730 <wait_session_status+0xe0>
 800c6ee:	2f00      	cmp	r7, #0
 800c6f0:	d1c8      	bne.n	800c684 <wait_session_status+0x34>
 800c6f2:	4639      	mov	r1, r7
 800c6f4:	4638      	mov	r0, r7
 800c6f6:	f000 fb11 	bl	800cd1c <uxr_stream_id_from_raw>
 800c6fa:	a90c      	add	r1, sp, #48	@ 0x30
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c700:	4620      	mov	r0, r4
 800c702:	f7ff fc2b 	bl	800bf5c <read_submessage_list>
 800c706:	f000 fc5d 	bl	800cfc4 <uxr_millis>
 800c70a:	1b40      	subs	r0, r0, r5
 800c70c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800c710:	2b00      	cmp	r3, #0
 800c712:	dcbe      	bgt.n	800c692 <wait_session_status+0x42>
 800c714:	9b03      	ldr	r3, [sp, #12]
 800c716:	7960      	ldrb	r0, [r4, #5]
 800c718:	f10b 0b01 	add.w	fp, fp, #1
 800c71c:	455b      	cmp	r3, fp
 800c71e:	d001      	beq.n	800c724 <wait_session_status+0xd4>
 800c720:	28ff      	cmp	r0, #255	@ 0xff
 800c722:	d0a3      	beq.n	800c66c <wait_session_status+0x1c>
 800c724:	38ff      	subs	r0, #255	@ 0xff
 800c726:	bf18      	it	ne
 800c728:	2001      	movne	r0, #1
 800c72a:	b01d      	add	sp, #116	@ 0x74
 800c72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c730:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800c734:	9304      	str	r3, [sp, #16]
 800c736:	4631      	mov	r1, r6
 800c738:	f104 0008 	add.w	r0, r4, #8
 800c73c:	f000 fbdc 	bl	800cef8 <uxr_get_input_reliable_stream>
 800c740:	4680      	mov	r8, r0
 800c742:	b348      	cbz	r0, 800c798 <wait_session_status+0x148>
 800c744:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c746:	9205      	str	r2, [sp, #20]
 800c748:	a80c      	add	r0, sp, #48	@ 0x30
 800c74a:	f7fd f8e1 	bl	8009910 <ucdr_buffer_remaining>
 800c74e:	4603      	mov	r3, r0
 800c750:	f10d 001d 	add.w	r0, sp, #29
 800c754:	9000      	str	r0, [sp, #0]
 800c756:	9a05      	ldr	r2, [sp, #20]
 800c758:	9902      	ldr	r1, [sp, #8]
 800c75a:	4640      	mov	r0, r8
 800c75c:	f006 fdac 	bl	80132b8 <uxr_receive_reliable_message>
 800c760:	b1d0      	cbz	r0, 800c798 <wait_session_status+0x148>
 800c762:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d03a      	beq.n	800c7e0 <wait_session_status+0x190>
 800c76a:	9f04      	ldr	r7, [sp, #16]
 800c76c:	e00a      	b.n	800c784 <wait_session_status+0x134>
 800c76e:	f04f 0302 	mov.w	r3, #2
 800c772:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800c776:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800c77a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800c77e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c780:	f7ff fbec 	bl	800bf5c <read_submessage_list>
 800c784:	a914      	add	r1, sp, #80	@ 0x50
 800c786:	2204      	movs	r2, #4
 800c788:	4640      	mov	r0, r8
 800c78a:	f006 fe15 	bl	80133b8 <uxr_next_input_reliable_buffer_available>
 800c78e:	4603      	mov	r3, r0
 800c790:	a914      	add	r1, sp, #80	@ 0x50
 800c792:	4620      	mov	r0, r4
 800c794:	2b00      	cmp	r3, #0
 800c796:	d1ea      	bne.n	800c76e <wait_session_status+0x11e>
 800c798:	9904      	ldr	r1, [sp, #16]
 800c79a:	4632      	mov	r2, r6
 800c79c:	4620      	mov	r0, r4
 800c79e:	f7ff fa59 	bl	800bc54 <write_submessage_acknack.isra.0>
 800c7a2:	e76f      	b.n	800c684 <wait_session_status+0x34>
 800c7a4:	4631      	mov	r1, r6
 800c7a6:	f104 0008 	add.w	r0, r4, #8
 800c7aa:	f000 fb9b 	bl	800cee4 <uxr_get_input_best_effort_stream>
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	f43f af68 	beq.w	800c684 <wait_session_status+0x34>
 800c7b4:	9902      	ldr	r1, [sp, #8]
 800c7b6:	f006 fceb 	bl	8013190 <uxr_receive_best_effort_message>
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	f43f af62 	beq.w	800c684 <wait_session_status+0x34>
 800c7c0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800c7c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c7c6:	a90c      	add	r1, sp, #48	@ 0x30
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	f7ff fbc7 	bl	800bf5c <read_submessage_list>
 800c7ce:	e759      	b.n	800c684 <wait_session_status+0x34>
 800c7d0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c7d2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c7d6:	47a0      	blx	r4
 800c7d8:	2001      	movs	r0, #1
 800c7da:	b01d      	add	sp, #116	@ 0x74
 800c7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800c7e4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c7e6:	a90c      	add	r1, sp, #48	@ 0x30
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	f7ff fbb7 	bl	800bf5c <read_submessage_list>
 800c7ee:	e7bc      	b.n	800c76a <wait_session_status+0x11a>

0800c7f0 <uxr_delete_session_retries>:
 800c7f0:	b530      	push	{r4, r5, lr}
 800c7f2:	b08f      	sub	sp, #60	@ 0x3c
 800c7f4:	4604      	mov	r4, r0
 800c7f6:	460d      	mov	r5, r1
 800c7f8:	f000 fa2e 	bl	800cc58 <uxr_session_header_offset>
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	2210      	movs	r2, #16
 800c800:	9000      	str	r0, [sp, #0]
 800c802:	a902      	add	r1, sp, #8
 800c804:	a806      	add	r0, sp, #24
 800c806:	f7fd f841 	bl	800988c <ucdr_init_buffer_origin_offset>
 800c80a:	a906      	add	r1, sp, #24
 800c80c:	4620      	mov	r0, r4
 800c80e:	f000 f973 	bl	800caf8 <uxr_buffer_delete_session>
 800c812:	2200      	movs	r2, #0
 800c814:	4611      	mov	r1, r2
 800c816:	9b06      	ldr	r3, [sp, #24]
 800c818:	4620      	mov	r0, r4
 800c81a:	f000 f9c7 	bl	800cbac <uxr_stamp_session_header>
 800c81e:	a806      	add	r0, sp, #24
 800c820:	f7fd f872 	bl	8009908 <ucdr_buffer_length>
 800c824:	462b      	mov	r3, r5
 800c826:	4602      	mov	r2, r0
 800c828:	a902      	add	r1, sp, #8
 800c82a:	4620      	mov	r0, r4
 800c82c:	f7ff ff10 	bl	800c650 <wait_session_status>
 800c830:	b118      	cbz	r0, 800c83a <uxr_delete_session_retries+0x4a>
 800c832:	7960      	ldrb	r0, [r4, #5]
 800c834:	fab0 f080 	clz	r0, r0
 800c838:	0940      	lsrs	r0, r0, #5
 800c83a:	b00f      	add	sp, #60	@ 0x3c
 800c83c:	bd30      	pop	{r4, r5, pc}
 800c83e:	bf00      	nop

0800c840 <uxr_create_session>:
 800c840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c844:	f100 0b08 	add.w	fp, r0, #8
 800c848:	b0ab      	sub	sp, #172	@ 0xac
 800c84a:	4604      	mov	r4, r0
 800c84c:	4658      	mov	r0, fp
 800c84e:	f000 fa99 	bl	800cd84 <uxr_reset_stream_storage>
 800c852:	4620      	mov	r0, r4
 800c854:	f000 fa00 	bl	800cc58 <uxr_session_header_offset>
 800c858:	2300      	movs	r3, #0
 800c85a:	9000      	str	r0, [sp, #0]
 800c85c:	221c      	movs	r2, #28
 800c85e:	a90b      	add	r1, sp, #44	@ 0x2c
 800c860:	a812      	add	r0, sp, #72	@ 0x48
 800c862:	f7fd f813 	bl	800988c <ucdr_init_buffer_origin_offset>
 800c866:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c868:	8a1a      	ldrh	r2, [r3, #16]
 800c86a:	3a04      	subs	r2, #4
 800c86c:	b292      	uxth	r2, r2
 800c86e:	a912      	add	r1, sp, #72	@ 0x48
 800c870:	4620      	mov	r0, r4
 800c872:	f000 f917 	bl	800caa4 <uxr_buffer_create_session>
 800c876:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c878:	4620      	mov	r0, r4
 800c87a:	f000 f983 	bl	800cb84 <uxr_stamp_create_session_header>
 800c87e:	a812      	add	r0, sp, #72	@ 0x48
 800c880:	f7fd f842 	bl	8009908 <ucdr_buffer_length>
 800c884:	23ff      	movs	r3, #255	@ 0xff
 800c886:	7163      	strb	r3, [r4, #5]
 800c888:	230a      	movs	r3, #10
 800c88a:	46da      	mov	sl, fp
 800c88c:	9303      	str	r3, [sp, #12]
 800c88e:	4683      	mov	fp, r0
 800c890:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c892:	465a      	mov	r2, fp
 800c894:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c898:	a90b      	add	r1, sp, #44	@ 0x2c
 800c89a:	47a8      	blx	r5
 800c89c:	f000 fb92 	bl	800cfc4 <uxr_millis>
 800c8a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c8a4:	4605      	mov	r5, r0
 800c8a6:	e009      	b.n	800c8bc <uxr_create_session+0x7c>
 800c8a8:	f000 fb8c 	bl	800cfc4 <uxr_millis>
 800c8ac:	1b40      	subs	r0, r0, r5
 800c8ae:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	7962      	ldrb	r2, [r4, #5]
 800c8b6:	dd38      	ble.n	800c92a <uxr_create_session+0xea>
 800c8b8:	2aff      	cmp	r2, #255	@ 0xff
 800c8ba:	d13c      	bne.n	800c936 <uxr_create_session+0xf6>
 800c8bc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800c8be:	a907      	add	r1, sp, #28
 800c8c0:	6896      	ldr	r6, [r2, #8]
 800c8c2:	6810      	ldr	r0, [r2, #0]
 800c8c4:	aa08      	add	r2, sp, #32
 800c8c6:	47b0      	blx	r6
 800c8c8:	2800      	cmp	r0, #0
 800c8ca:	d0ed      	beq.n	800c8a8 <uxr_create_session+0x68>
 800c8cc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800c8d0:	a81a      	add	r0, sp, #104	@ 0x68
 800c8d2:	f7fc ffed 	bl	80098b0 <ucdr_init_buffer>
 800c8d6:	2600      	movs	r6, #0
 800c8d8:	f10d 031a 	add.w	r3, sp, #26
 800c8dc:	aa06      	add	r2, sp, #24
 800c8de:	a91a      	add	r1, sp, #104	@ 0x68
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f88d 6018 	strb.w	r6, [sp, #24]
 800c8e6:	f000 f975 	bl	800cbd4 <uxr_read_session_header>
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	d0dc      	beq.n	800c8a8 <uxr_create_session+0x68>
 800c8ee:	4631      	mov	r1, r6
 800c8f0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c8f4:	f000 fa12 	bl	800cd1c <uxr_stream_id_from_raw>
 800c8f8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800c8fc:	2e01      	cmp	r6, #1
 800c8fe:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800c902:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800c906:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800c90a:	d053      	beq.n	800c9b4 <uxr_create_session+0x174>
 800c90c:	2e02      	cmp	r6, #2
 800c90e:	d018      	beq.n	800c942 <uxr_create_session+0x102>
 800c910:	2e00      	cmp	r6, #0
 800c912:	d1c9      	bne.n	800c8a8 <uxr_create_session+0x68>
 800c914:	4631      	mov	r1, r6
 800c916:	4630      	mov	r0, r6
 800c918:	f000 fa00 	bl	800cd1c <uxr_stream_id_from_raw>
 800c91c:	a91a      	add	r1, sp, #104	@ 0x68
 800c91e:	4602      	mov	r2, r0
 800c920:	900a      	str	r0, [sp, #40]	@ 0x28
 800c922:	4620      	mov	r0, r4
 800c924:	f7ff fb1a 	bl	800bf5c <read_submessage_list>
 800c928:	e7be      	b.n	800c8a8 <uxr_create_session+0x68>
 800c92a:	9b03      	ldr	r3, [sp, #12]
 800c92c:	3b01      	subs	r3, #1
 800c92e:	9303      	str	r3, [sp, #12]
 800c930:	d001      	beq.n	800c936 <uxr_create_session+0xf6>
 800c932:	2aff      	cmp	r2, #255	@ 0xff
 800c934:	d0ac      	beq.n	800c890 <uxr_create_session+0x50>
 800c936:	2a00      	cmp	r2, #0
 800c938:	d051      	beq.n	800c9de <uxr_create_session+0x19e>
 800c93a:	2000      	movs	r0, #0
 800c93c:	b02b      	add	sp, #172	@ 0xac
 800c93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c942:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800c946:	9304      	str	r3, [sp, #16]
 800c948:	4639      	mov	r1, r7
 800c94a:	4650      	mov	r0, sl
 800c94c:	f000 fad4 	bl	800cef8 <uxr_get_input_reliable_stream>
 800c950:	4680      	mov	r8, r0
 800c952:	b348      	cbz	r0, 800c9a8 <uxr_create_session+0x168>
 800c954:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c956:	9205      	str	r2, [sp, #20]
 800c958:	a81a      	add	r0, sp, #104	@ 0x68
 800c95a:	f7fc ffd9 	bl	8009910 <ucdr_buffer_remaining>
 800c95e:	4603      	mov	r3, r0
 800c960:	f10d 0019 	add.w	r0, sp, #25
 800c964:	9000      	str	r0, [sp, #0]
 800c966:	9a05      	ldr	r2, [sp, #20]
 800c968:	4649      	mov	r1, r9
 800c96a:	4640      	mov	r0, r8
 800c96c:	f006 fca4 	bl	80132b8 <uxr_receive_reliable_message>
 800c970:	b1d0      	cbz	r0, 800c9a8 <uxr_create_session+0x168>
 800c972:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d038      	beq.n	800c9ec <uxr_create_session+0x1ac>
 800c97a:	9e04      	ldr	r6, [sp, #16]
 800c97c:	e00a      	b.n	800c994 <uxr_create_session+0x154>
 800c97e:	f04f 0302 	mov.w	r3, #2
 800c982:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800c986:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800c98a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c98e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c990:	f7ff fae4 	bl	800bf5c <read_submessage_list>
 800c994:	a922      	add	r1, sp, #136	@ 0x88
 800c996:	2204      	movs	r2, #4
 800c998:	4640      	mov	r0, r8
 800c99a:	f006 fd0d 	bl	80133b8 <uxr_next_input_reliable_buffer_available>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	a922      	add	r1, sp, #136	@ 0x88
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1ea      	bne.n	800c97e <uxr_create_session+0x13e>
 800c9a8:	9904      	ldr	r1, [sp, #16]
 800c9aa:	463a      	mov	r2, r7
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f7ff f951 	bl	800bc54 <write_submessage_acknack.isra.0>
 800c9b2:	e779      	b.n	800c8a8 <uxr_create_session+0x68>
 800c9b4:	4639      	mov	r1, r7
 800c9b6:	4650      	mov	r0, sl
 800c9b8:	f000 fa94 	bl	800cee4 <uxr_get_input_best_effort_stream>
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	f43f af73 	beq.w	800c8a8 <uxr_create_session+0x68>
 800c9c2:	4649      	mov	r1, r9
 800c9c4:	f006 fbe4 	bl	8013190 <uxr_receive_best_effort_message>
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	f43f af6d 	beq.w	800c8a8 <uxr_create_session+0x68>
 800c9ce:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800c9d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c9d4:	a91a      	add	r1, sp, #104	@ 0x68
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f7ff fac0 	bl	800bf5c <read_submessage_list>
 800c9dc:	e764      	b.n	800c8a8 <uxr_create_session+0x68>
 800c9de:	4650      	mov	r0, sl
 800c9e0:	f000 f9d0 	bl	800cd84 <uxr_reset_stream_storage>
 800c9e4:	2001      	movs	r0, #1
 800c9e6:	b02b      	add	sp, #172	@ 0xac
 800c9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ec:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800c9f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c9f2:	a91a      	add	r1, sp, #104	@ 0x68
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f7ff fab1 	bl	800bf5c <read_submessage_list>
 800c9fa:	e7be      	b.n	800c97a <uxr_create_session+0x13a>

0800c9fc <uxr_prepare_stream_to_write_submessage>:
 800c9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca00:	b082      	sub	sp, #8
 800ca02:	4682      	mov	sl, r0
 800ca04:	4610      	mov	r0, r2
 800ca06:	4615      	mov	r5, r2
 800ca08:	461e      	mov	r6, r3
 800ca0a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800ca0e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800ca12:	9101      	str	r1, [sp, #4]
 800ca14:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800ca18:	f000 face 	bl	800cfb8 <uxr_submessage_padding>
 800ca1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ca20:	f105 0904 	add.w	r9, r5, #4
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	4481      	add	r9, r0
 800ca28:	d01d      	beq.n	800ca66 <uxr_prepare_stream_to_write_submessage+0x6a>
 800ca2a:	2b02      	cmp	r3, #2
 800ca2c:	d116      	bne.n	800ca5c <uxr_prepare_stream_to_write_submessage+0x60>
 800ca2e:	4621      	mov	r1, r4
 800ca30:	f10a 0008 	add.w	r0, sl, #8
 800ca34:	f000 fa4c 	bl	800ced0 <uxr_get_output_reliable_stream>
 800ca38:	4604      	mov	r4, r0
 800ca3a:	b158      	cbz	r0, 800ca54 <uxr_prepare_stream_to_write_submessage+0x58>
 800ca3c:	4649      	mov	r1, r9
 800ca3e:	4632      	mov	r2, r6
 800ca40:	f006 fe76 	bl	8013730 <uxr_prepare_reliable_buffer_to_write>
 800ca44:	4604      	mov	r4, r0
 800ca46:	b12c      	cbz	r4, 800ca54 <uxr_prepare_stream_to_write_submessage+0x58>
 800ca48:	4643      	mov	r3, r8
 800ca4a:	b2aa      	uxth	r2, r5
 800ca4c:	4639      	mov	r1, r7
 800ca4e:	4630      	mov	r0, r6
 800ca50:	f000 fa72 	bl	800cf38 <uxr_buffer_submessage_header>
 800ca54:	4620      	mov	r0, r4
 800ca56:	b002      	add	sp, #8
 800ca58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca5c:	2400      	movs	r4, #0
 800ca5e:	4620      	mov	r0, r4
 800ca60:	b002      	add	sp, #8
 800ca62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca66:	4621      	mov	r1, r4
 800ca68:	f10a 0008 	add.w	r0, sl, #8
 800ca6c:	f000 fa28 	bl	800cec0 <uxr_get_output_best_effort_stream>
 800ca70:	4604      	mov	r4, r0
 800ca72:	2800      	cmp	r0, #0
 800ca74:	d0ee      	beq.n	800ca54 <uxr_prepare_stream_to_write_submessage+0x58>
 800ca76:	4649      	mov	r1, r9
 800ca78:	4632      	mov	r2, r6
 800ca7a:	f006 fd89 	bl	8013590 <uxr_prepare_best_effort_buffer_to_write>
 800ca7e:	4604      	mov	r4, r0
 800ca80:	e7e1      	b.n	800ca46 <uxr_prepare_stream_to_write_submessage+0x4a>
 800ca82:	bf00      	nop

0800ca84 <uxr_init_session_info>:
 800ca84:	0e13      	lsrs	r3, r2, #24
 800ca86:	7043      	strb	r3, [r0, #1]
 800ca88:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800ca8c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800ca90:	7001      	strb	r1, [r0, #0]
 800ca92:	70c3      	strb	r3, [r0, #3]
 800ca94:	2109      	movs	r1, #9
 800ca96:	23ff      	movs	r3, #255	@ 0xff
 800ca98:	f880 c002 	strb.w	ip, [r0, #2]
 800ca9c:	7102      	strb	r2, [r0, #4]
 800ca9e:	80c1      	strh	r1, [r0, #6]
 800caa0:	7143      	strb	r3, [r0, #5]
 800caa2:	4770      	bx	lr

0800caa4 <uxr_buffer_create_session>:
 800caa4:	b530      	push	{r4, r5, lr}
 800caa6:	b089      	sub	sp, #36	@ 0x24
 800caa8:	2300      	movs	r3, #0
 800caaa:	4d12      	ldr	r5, [pc, #72]	@ (800caf4 <uxr_buffer_create_session+0x50>)
 800caac:	9307      	str	r3, [sp, #28]
 800caae:	f8ad 201c 	strh.w	r2, [sp, #28]
 800cab2:	2201      	movs	r2, #1
 800cab4:	9301      	str	r3, [sp, #4]
 800cab6:	80c2      	strh	r2, [r0, #6]
 800cab8:	f88d 2004 	strb.w	r2, [sp, #4]
 800cabc:	682a      	ldr	r2, [r5, #0]
 800cabe:	9200      	str	r2, [sp, #0]
 800cac0:	88aa      	ldrh	r2, [r5, #4]
 800cac2:	f8ad 2006 	strh.w	r2, [sp, #6]
 800cac6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800caca:	9202      	str	r2, [sp, #8]
 800cacc:	460c      	mov	r4, r1
 800cace:	7802      	ldrb	r2, [r0, #0]
 800cad0:	9303      	str	r3, [sp, #12]
 800cad2:	4619      	mov	r1, r3
 800cad4:	f88d 200c 	strb.w	r2, [sp, #12]
 800cad8:	4620      	mov	r0, r4
 800cada:	2210      	movs	r2, #16
 800cadc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800cae0:	9306      	str	r3, [sp, #24]
 800cae2:	f000 fa29 	bl	800cf38 <uxr_buffer_submessage_header>
 800cae6:	4669      	mov	r1, sp
 800cae8:	4620      	mov	r0, r4
 800caea:	f001 fa6d 	bl	800dfc8 <uxr_serialize_CREATE_CLIENT_Payload>
 800caee:	b009      	add	sp, #36	@ 0x24
 800caf0:	bd30      	pop	{r4, r5, pc}
 800caf2:	bf00      	nop
 800caf4:	08016854 	.word	0x08016854

0800caf8 <uxr_buffer_delete_session>:
 800caf8:	b510      	push	{r4, lr}
 800cafa:	4b0c      	ldr	r3, [pc, #48]	@ (800cb2c <uxr_buffer_delete_session+0x34>)
 800cafc:	b082      	sub	sp, #8
 800cafe:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800cb02:	f8ad c006 	strh.w	ip, [sp, #6]
 800cb06:	460c      	mov	r4, r1
 800cb08:	2202      	movs	r2, #2
 800cb0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cb0e:	80c2      	strh	r2, [r0, #6]
 800cb10:	f8ad 3004 	strh.w	r3, [sp, #4]
 800cb14:	2204      	movs	r2, #4
 800cb16:	2300      	movs	r3, #0
 800cb18:	2103      	movs	r1, #3
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	f000 fa0c 	bl	800cf38 <uxr_buffer_submessage_header>
 800cb20:	a901      	add	r1, sp, #4
 800cb22:	4620      	mov	r0, r4
 800cb24:	f001 faf6 	bl	800e114 <uxr_serialize_DELETE_Payload>
 800cb28:	b002      	add	sp, #8
 800cb2a:	bd10      	pop	{r4, pc}
 800cb2c:	08016854 	.word	0x08016854

0800cb30 <uxr_read_create_session_status>:
 800cb30:	b510      	push	{r4, lr}
 800cb32:	b088      	sub	sp, #32
 800cb34:	4604      	mov	r4, r0
 800cb36:	4608      	mov	r0, r1
 800cb38:	a901      	add	r1, sp, #4
 800cb3a:	f001 fafb 	bl	800e134 <uxr_deserialize_STATUS_AGENT_Payload>
 800cb3e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cb42:	7163      	strb	r3, [r4, #5]
 800cb44:	b008      	add	sp, #32
 800cb46:	bd10      	pop	{r4, pc}

0800cb48 <uxr_read_delete_session_status>:
 800cb48:	b510      	push	{r4, lr}
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	b084      	sub	sp, #16
 800cb4e:	4608      	mov	r0, r1
 800cb50:	a902      	add	r1, sp, #8
 800cb52:	f001 fb1f 	bl	800e194 <uxr_deserialize_STATUS_Payload>
 800cb56:	88e3      	ldrh	r3, [r4, #6]
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	d001      	beq.n	800cb60 <uxr_read_delete_session_status+0x18>
 800cb5c:	b004      	add	sp, #16
 800cb5e:	bd10      	pop	{r4, pc}
 800cb60:	f10d 000a 	add.w	r0, sp, #10
 800cb64:	f7fe fffc 	bl	800bb60 <uxr_object_id_from_raw>
 800cb68:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800cb6c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800cb70:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	2b02      	cmp	r3, #2
 800cb78:	bf04      	itt	eq
 800cb7a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800cb7e:	7163      	strbeq	r3, [r4, #5]
 800cb80:	b004      	add	sp, #16
 800cb82:	bd10      	pop	{r4, pc}

0800cb84 <uxr_stamp_create_session_header>:
 800cb84:	b510      	push	{r4, lr}
 800cb86:	2208      	movs	r2, #8
 800cb88:	b08a      	sub	sp, #40	@ 0x28
 800cb8a:	4604      	mov	r4, r0
 800cb8c:	eb0d 0002 	add.w	r0, sp, r2
 800cb90:	f7fc fe8e 	bl	80098b0 <ucdr_init_buffer>
 800cb94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb98:	9400      	str	r4, [sp, #0]
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800cba2:	a802      	add	r0, sp, #8
 800cba4:	f000 fbc2 	bl	800d32c <uxr_serialize_message_header>
 800cba8:	b00a      	add	sp, #40	@ 0x28
 800cbaa:	bd10      	pop	{r4, pc}

0800cbac <uxr_stamp_session_header>:
 800cbac:	b530      	push	{r4, r5, lr}
 800cbae:	b08d      	sub	sp, #52	@ 0x34
 800cbb0:	4604      	mov	r4, r0
 800cbb2:	460d      	mov	r5, r1
 800cbb4:	9203      	str	r2, [sp, #12]
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	a804      	add	r0, sp, #16
 800cbba:	2208      	movs	r2, #8
 800cbbc:	f7fc fe78 	bl	80098b0 <ucdr_init_buffer>
 800cbc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbc4:	9b03      	ldr	r3, [sp, #12]
 800cbc6:	9400      	str	r4, [sp, #0]
 800cbc8:	462a      	mov	r2, r5
 800cbca:	a804      	add	r0, sp, #16
 800cbcc:	f000 fbae 	bl	800d32c <uxr_serialize_message_header>
 800cbd0:	b00d      	add	sp, #52	@ 0x34
 800cbd2:	bd30      	pop	{r4, r5, pc}

0800cbd4 <uxr_read_session_header>:
 800cbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd8:	4607      	mov	r7, r0
 800cbda:	b084      	sub	sp, #16
 800cbdc:	4608      	mov	r0, r1
 800cbde:	460c      	mov	r4, r1
 800cbe0:	4615      	mov	r5, r2
 800cbe2:	461e      	mov	r6, r3
 800cbe4:	f7fc fe94 	bl	8009910 <ucdr_buffer_remaining>
 800cbe8:	2808      	cmp	r0, #8
 800cbea:	d803      	bhi.n	800cbf4 <uxr_read_session_header+0x20>
 800cbec:	2000      	movs	r0, #0
 800cbee:	b004      	add	sp, #16
 800cbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbf4:	f10d 080c 	add.w	r8, sp, #12
 800cbf8:	4633      	mov	r3, r6
 800cbfa:	462a      	mov	r2, r5
 800cbfc:	f8cd 8000 	str.w	r8, [sp]
 800cc00:	4620      	mov	r0, r4
 800cc02:	f10d 010b 	add.w	r1, sp, #11
 800cc06:	f000 fbaf 	bl	800d368 <uxr_deserialize_message_header>
 800cc0a:	783a      	ldrb	r2, [r7, #0]
 800cc0c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d1eb      	bne.n	800cbec <uxr_read_session_header+0x18>
 800cc14:	061b      	lsls	r3, r3, #24
 800cc16:	d41c      	bmi.n	800cc52 <uxr_read_session_header+0x7e>
 800cc18:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800cc1c:	787b      	ldrb	r3, [r7, #1]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d003      	beq.n	800cc2a <uxr_read_session_header+0x56>
 800cc22:	2001      	movs	r0, #1
 800cc24:	f080 0001 	eor.w	r0, r0, #1
 800cc28:	e7e1      	b.n	800cbee <uxr_read_session_header+0x1a>
 800cc2a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800cc2e:	78bb      	ldrb	r3, [r7, #2]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	f107 0102 	add.w	r1, r7, #2
 800cc36:	d1f4      	bne.n	800cc22 <uxr_read_session_header+0x4e>
 800cc38:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800cc3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d1ee      	bne.n	800cc22 <uxr_read_session_header+0x4e>
 800cc44:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800cc48:	784b      	ldrb	r3, [r1, #1]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d1e9      	bne.n	800cc22 <uxr_read_session_header+0x4e>
 800cc4e:	2000      	movs	r0, #0
 800cc50:	e7e8      	b.n	800cc24 <uxr_read_session_header+0x50>
 800cc52:	2001      	movs	r0, #1
 800cc54:	e7cb      	b.n	800cbee <uxr_read_session_header+0x1a>
 800cc56:	bf00      	nop

0800cc58 <uxr_session_header_offset>:
 800cc58:	f990 3000 	ldrsb.w	r3, [r0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	bfac      	ite	ge
 800cc60:	2008      	movge	r0, #8
 800cc62:	2004      	movlt	r0, #4
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop

0800cc68 <uxr_init_base_object_request>:
 800cc68:	b510      	push	{r4, lr}
 800cc6a:	88c3      	ldrh	r3, [r0, #6]
 800cc6c:	b082      	sub	sp, #8
 800cc6e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800cc72:	9101      	str	r1, [sp, #4]
 800cc74:	f1a3 010a 	sub.w	r1, r3, #10
 800cc78:	b289      	uxth	r1, r1
 800cc7a:	42a1      	cmp	r1, r4
 800cc7c:	d80e      	bhi.n	800cc9c <uxr_init_base_object_request+0x34>
 800cc7e:	3301      	adds	r3, #1
 800cc80:	b29c      	uxth	r4, r3
 800cc82:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	80c4      	strh	r4, [r0, #6]
 800cc8a:	9801      	ldr	r0, [sp, #4]
 800cc8c:	7011      	strb	r1, [r2, #0]
 800cc8e:	7053      	strb	r3, [r2, #1]
 800cc90:	1c91      	adds	r1, r2, #2
 800cc92:	f7fe ff79 	bl	800bb88 <uxr_object_id_to_raw>
 800cc96:	4620      	mov	r0, r4
 800cc98:	b002      	add	sp, #8
 800cc9a:	bd10      	pop	{r4, pc}
 800cc9c:	230a      	movs	r3, #10
 800cc9e:	2100      	movs	r1, #0
 800cca0:	461c      	mov	r4, r3
 800cca2:	e7f1      	b.n	800cc88 <uxr_init_base_object_request+0x20>

0800cca4 <uxr_parse_base_object_request>:
 800cca4:	b570      	push	{r4, r5, r6, lr}
 800cca6:	4604      	mov	r4, r0
 800cca8:	3002      	adds	r0, #2
 800ccaa:	460d      	mov	r5, r1
 800ccac:	4616      	mov	r6, r2
 800ccae:	f7fe ff57 	bl	800bb60 <uxr_object_id_from_raw>
 800ccb2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800ccb6:	8028      	strh	r0, [r5, #0]
 800ccb8:	806b      	strh	r3, [r5, #2]
 800ccba:	7822      	ldrb	r2, [r4, #0]
 800ccbc:	7863      	ldrb	r3, [r4, #1]
 800ccbe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ccc2:	8033      	strh	r3, [r6, #0]
 800ccc4:	bd70      	pop	{r4, r5, r6, pc}
 800ccc6:	bf00      	nop

0800ccc8 <uxr_stream_id>:
 800ccc8:	2901      	cmp	r1, #1
 800ccca:	b082      	sub	sp, #8
 800cccc:	d01d      	beq.n	800cd0a <uxr_stream_id+0x42>
 800ccce:	2902      	cmp	r1, #2
 800ccd0:	f04f 0c00 	mov.w	ip, #0
 800ccd4:	d01e      	beq.n	800cd14 <uxr_stream_id+0x4c>
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	f36c 0307 	bfi	r3, ip, #0, #8
 800ccdc:	f360 230f 	bfi	r3, r0, #8, #8
 800cce0:	f361 4317 	bfi	r3, r1, #16, #8
 800cce4:	f362 631f 	bfi	r3, r2, #24, #8
 800cce8:	b2da      	uxtb	r2, r3
 800ccea:	2000      	movs	r0, #0
 800ccec:	f362 0007 	bfi	r0, r2, #0, #8
 800ccf0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ccf4:	f362 200f 	bfi	r0, r2, #8, #8
 800ccf8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ccfc:	f362 4017 	bfi	r0, r2, #16, #8
 800cd00:	0e1b      	lsrs	r3, r3, #24
 800cd02:	f363 601f 	bfi	r0, r3, #24, #8
 800cd06:	b002      	add	sp, #8
 800cd08:	4770      	bx	lr
 800cd0a:	f100 0c01 	add.w	ip, r0, #1
 800cd0e:	fa5f fc8c 	uxtb.w	ip, ip
 800cd12:	e7e0      	b.n	800ccd6 <uxr_stream_id+0xe>
 800cd14:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800cd18:	e7dd      	b.n	800ccd6 <uxr_stream_id+0xe>
 800cd1a:	bf00      	nop

0800cd1c <uxr_stream_id_from_raw>:
 800cd1c:	b082      	sub	sp, #8
 800cd1e:	b130      	cbz	r0, 800cd2e <uxr_stream_id_from_raw+0x12>
 800cd20:	0603      	lsls	r3, r0, #24
 800cd22:	d420      	bmi.n	800cd66 <uxr_stream_id_from_raw+0x4a>
 800cd24:	1e42      	subs	r2, r0, #1
 800cd26:	b2d2      	uxtb	r2, r2
 800cd28:	f04f 0c01 	mov.w	ip, #1
 800cd2c:	e001      	b.n	800cd32 <uxr_stream_id_from_raw+0x16>
 800cd2e:	4684      	mov	ip, r0
 800cd30:	4602      	mov	r2, r0
 800cd32:	2300      	movs	r3, #0
 800cd34:	f360 0307 	bfi	r3, r0, #0, #8
 800cd38:	f362 230f 	bfi	r3, r2, #8, #8
 800cd3c:	f36c 4317 	bfi	r3, ip, #16, #8
 800cd40:	f361 631f 	bfi	r3, r1, #24, #8
 800cd44:	b2da      	uxtb	r2, r3
 800cd46:	2000      	movs	r0, #0
 800cd48:	f362 0007 	bfi	r0, r2, #0, #8
 800cd4c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800cd50:	f362 200f 	bfi	r0, r2, #8, #8
 800cd54:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800cd58:	f362 4017 	bfi	r0, r2, #16, #8
 800cd5c:	0e1b      	lsrs	r3, r3, #24
 800cd5e:	f363 601f 	bfi	r0, r3, #24, #8
 800cd62:	b002      	add	sp, #8
 800cd64:	4770      	bx	lr
 800cd66:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800cd6a:	f04f 0c02 	mov.w	ip, #2
 800cd6e:	e7e0      	b.n	800cd32 <uxr_stream_id_from_raw+0x16>

0800cd70 <uxr_init_stream_storage>:
 800cd70:	2300      	movs	r3, #0
 800cd72:	7403      	strb	r3, [r0, #16]
 800cd74:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800cd78:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800cd7c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800cd80:	4770      	bx	lr
 800cd82:	bf00      	nop

0800cd84 <uxr_reset_stream_storage>:
 800cd84:	b570      	push	{r4, r5, r6, lr}
 800cd86:	7c03      	ldrb	r3, [r0, #16]
 800cd88:	4604      	mov	r4, r0
 800cd8a:	b153      	cbz	r3, 800cda2 <uxr_reset_stream_storage+0x1e>
 800cd8c:	4606      	mov	r6, r0
 800cd8e:	2500      	movs	r5, #0
 800cd90:	4630      	mov	r0, r6
 800cd92:	f006 fbf7 	bl	8013584 <uxr_reset_output_best_effort_stream>
 800cd96:	7c23      	ldrb	r3, [r4, #16]
 800cd98:	3501      	adds	r5, #1
 800cd9a:	42ab      	cmp	r3, r5
 800cd9c:	f106 0610 	add.w	r6, r6, #16
 800cda0:	d8f6      	bhi.n	800cd90 <uxr_reset_stream_storage+0xc>
 800cda2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cda6:	b163      	cbz	r3, 800cdc2 <uxr_reset_stream_storage+0x3e>
 800cda8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cdac:	2500      	movs	r5, #0
 800cdae:	4630      	mov	r0, r6
 800cdb0:	f006 f9ea 	bl	8013188 <uxr_reset_input_best_effort_stream>
 800cdb4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cdb8:	3501      	adds	r5, #1
 800cdba:	42ab      	cmp	r3, r5
 800cdbc:	f106 0602 	add.w	r6, r6, #2
 800cdc0:	d8f5      	bhi.n	800cdae <uxr_reset_stream_storage+0x2a>
 800cdc2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800cdc6:	b163      	cbz	r3, 800cde2 <uxr_reset_stream_storage+0x5e>
 800cdc8:	f104 0618 	add.w	r6, r4, #24
 800cdcc:	2500      	movs	r5, #0
 800cdce:	4630      	mov	r0, r6
 800cdd0:	f006 fc84 	bl	80136dc <uxr_reset_output_reliable_stream>
 800cdd4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800cdd8:	3501      	adds	r5, #1
 800cdda:	42ab      	cmp	r3, r5
 800cddc:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800cde0:	d8f5      	bhi.n	800cdce <uxr_reset_stream_storage+0x4a>
 800cde2:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800cde6:	b163      	cbz	r3, 800ce02 <uxr_reset_stream_storage+0x7e>
 800cde8:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800cdec:	2500      	movs	r5, #0
 800cdee:	4630      	mov	r0, r6
 800cdf0:	f006 fa3e 	bl	8013270 <uxr_reset_input_reliable_stream>
 800cdf4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800cdf8:	3501      	adds	r5, #1
 800cdfa:	42ab      	cmp	r3, r5
 800cdfc:	f106 0618 	add.w	r6, r6, #24
 800ce00:	d8f5      	bhi.n	800cdee <uxr_reset_stream_storage+0x6a>
 800ce02:	bd70      	pop	{r4, r5, r6, pc}

0800ce04 <uxr_add_output_best_effort_buffer>:
 800ce04:	b510      	push	{r4, lr}
 800ce06:	7c04      	ldrb	r4, [r0, #16]
 800ce08:	f104 0c01 	add.w	ip, r4, #1
 800ce0c:	b082      	sub	sp, #8
 800ce0e:	f880 c010 	strb.w	ip, [r0, #16]
 800ce12:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ce16:	f006 fbab 	bl	8013570 <uxr_init_output_best_effort_stream>
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	4611      	mov	r1, r2
 800ce1e:	4620      	mov	r0, r4
 800ce20:	b002      	add	sp, #8
 800ce22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce26:	f7ff bf4f 	b.w	800ccc8 <uxr_stream_id>
 800ce2a:	bf00      	nop

0800ce2c <uxr_add_output_reliable_buffer>:
 800ce2c:	b510      	push	{r4, lr}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	4684      	mov	ip, r0
 800ce32:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ce36:	9000      	str	r0, [sp, #0]
 800ce38:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800ce3c:	2028      	movs	r0, #40	@ 0x28
 800ce3e:	fb00 c004 	mla	r0, r0, r4, ip
 800ce42:	f104 0e01 	add.w	lr, r4, #1
 800ce46:	3018      	adds	r0, #24
 800ce48:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800ce4c:	f006 fc0e 	bl	801366c <uxr_init_output_reliable_stream>
 800ce50:	2201      	movs	r2, #1
 800ce52:	2102      	movs	r1, #2
 800ce54:	4620      	mov	r0, r4
 800ce56:	b004      	add	sp, #16
 800ce58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce5c:	f7ff bf34 	b.w	800ccc8 <uxr_stream_id>

0800ce60 <uxr_add_input_best_effort_buffer>:
 800ce60:	b510      	push	{r4, lr}
 800ce62:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800ce66:	4603      	mov	r3, r0
 800ce68:	1c62      	adds	r2, r4, #1
 800ce6a:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800ce6e:	b082      	sub	sp, #8
 800ce70:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800ce74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce78:	f006 f982 	bl	8013180 <uxr_init_input_best_effort_stream>
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	2101      	movs	r1, #1
 800ce80:	4620      	mov	r0, r4
 800ce82:	b002      	add	sp, #8
 800ce84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce88:	f7ff bf1e 	b.w	800ccc8 <uxr_stream_id>

0800ce8c <uxr_add_input_reliable_buffer>:
 800ce8c:	b510      	push	{r4, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	4684      	mov	ip, r0
 800ce92:	9806      	ldr	r0, [sp, #24]
 800ce94:	9000      	str	r0, [sp, #0]
 800ce96:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800ce9a:	2018      	movs	r0, #24
 800ce9c:	fb00 c004 	mla	r0, r0, r4, ip
 800cea0:	f104 0e01 	add.w	lr, r4, #1
 800cea4:	3048      	adds	r0, #72	@ 0x48
 800cea6:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800ceaa:	f006 f9b5 	bl	8013218 <uxr_init_input_reliable_stream>
 800ceae:	2200      	movs	r2, #0
 800ceb0:	2102      	movs	r1, #2
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	b004      	add	sp, #16
 800ceb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceba:	f7ff bf05 	b.w	800ccc8 <uxr_stream_id>
 800cebe:	bf00      	nop

0800cec0 <uxr_get_output_best_effort_stream>:
 800cec0:	7c03      	ldrb	r3, [r0, #16]
 800cec2:	428b      	cmp	r3, r1
 800cec4:	bf8c      	ite	hi
 800cec6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800ceca:	2000      	movls	r0, #0
 800cecc:	4770      	bx	lr
 800cece:	bf00      	nop

0800ced0 <uxr_get_output_reliable_stream>:
 800ced0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ced4:	428b      	cmp	r3, r1
 800ced6:	bf83      	ittte	hi
 800ced8:	2328      	movhi	r3, #40	@ 0x28
 800ceda:	fb03 0001 	mlahi	r0, r3, r1, r0
 800cede:	3018      	addhi	r0, #24
 800cee0:	2000      	movls	r0, #0
 800cee2:	4770      	bx	lr

0800cee4 <uxr_get_input_best_effort_stream>:
 800cee4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800cee8:	428b      	cmp	r3, r1
 800ceea:	bf86      	itte	hi
 800ceec:	3121      	addhi	r1, #33	@ 0x21
 800ceee:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800cef2:	2000      	movls	r0, #0
 800cef4:	4770      	bx	lr
 800cef6:	bf00      	nop

0800cef8 <uxr_get_input_reliable_stream>:
 800cef8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800cefc:	428b      	cmp	r3, r1
 800cefe:	bf83      	ittte	hi
 800cf00:	2318      	movhi	r3, #24
 800cf02:	fb03 0001 	mlahi	r0, r3, r1, r0
 800cf06:	3048      	addhi	r0, #72	@ 0x48
 800cf08:	2000      	movls	r0, #0
 800cf0a:	4770      	bx	lr

0800cf0c <uxr_output_streams_confirmed>:
 800cf0c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800cf10:	b183      	cbz	r3, 800cf34 <uxr_output_streams_confirmed+0x28>
 800cf12:	b570      	push	{r4, r5, r6, lr}
 800cf14:	4606      	mov	r6, r0
 800cf16:	f100 0518 	add.w	r5, r0, #24
 800cf1a:	2400      	movs	r4, #0
 800cf1c:	e001      	b.n	800cf22 <uxr_output_streams_confirmed+0x16>
 800cf1e:	3528      	adds	r5, #40	@ 0x28
 800cf20:	b138      	cbz	r0, 800cf32 <uxr_output_streams_confirmed+0x26>
 800cf22:	4628      	mov	r0, r5
 800cf24:	f006 fe4a 	bl	8013bbc <uxr_is_output_up_to_date>
 800cf28:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800cf2c:	3401      	adds	r4, #1
 800cf2e:	42a3      	cmp	r3, r4
 800cf30:	d8f5      	bhi.n	800cf1e <uxr_output_streams_confirmed+0x12>
 800cf32:	bd70      	pop	{r4, r5, r6, pc}
 800cf34:	2001      	movs	r0, #1
 800cf36:	4770      	bx	lr

0800cf38 <uxr_buffer_submessage_header>:
 800cf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	460e      	mov	r6, r1
 800cf3e:	2104      	movs	r1, #4
 800cf40:	4615      	mov	r5, r2
 800cf42:	461f      	mov	r7, r3
 800cf44:	f7fc fcce 	bl	80098e4 <ucdr_align_to>
 800cf48:	2301      	movs	r3, #1
 800cf4a:	ea47 0203 	orr.w	r2, r7, r3
 800cf4e:	4631      	mov	r1, r6
 800cf50:	7523      	strb	r3, [r4, #20]
 800cf52:	4620      	mov	r0, r4
 800cf54:	462b      	mov	r3, r5
 800cf56:	f000 fa27 	bl	800d3a8 <uxr_serialize_submessage_header>
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f7fc fcd8 	bl	8009910 <ucdr_buffer_remaining>
 800cf60:	42a8      	cmp	r0, r5
 800cf62:	bf34      	ite	cc
 800cf64:	2000      	movcc	r0, #0
 800cf66:	2001      	movcs	r0, #1
 800cf68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf6a:	bf00      	nop

0800cf6c <uxr_read_submessage_header>:
 800cf6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf70:	4604      	mov	r4, r0
 800cf72:	460d      	mov	r5, r1
 800cf74:	2104      	movs	r1, #4
 800cf76:	4616      	mov	r6, r2
 800cf78:	4698      	mov	r8, r3
 800cf7a:	f7fc fcb3 	bl	80098e4 <ucdr_align_to>
 800cf7e:	4620      	mov	r0, r4
 800cf80:	f7fc fcc6 	bl	8009910 <ucdr_buffer_remaining>
 800cf84:	2803      	cmp	r0, #3
 800cf86:	bf8c      	ite	hi
 800cf88:	2701      	movhi	r7, #1
 800cf8a:	2700      	movls	r7, #0
 800cf8c:	d802      	bhi.n	800cf94 <uxr_read_submessage_header+0x28>
 800cf8e:	4638      	mov	r0, r7
 800cf90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf94:	4633      	mov	r3, r6
 800cf96:	4642      	mov	r2, r8
 800cf98:	4620      	mov	r0, r4
 800cf9a:	4629      	mov	r1, r5
 800cf9c:	f000 fa18 	bl	800d3d0 <uxr_deserialize_submessage_header>
 800cfa0:	f898 3000 	ldrb.w	r3, [r8]
 800cfa4:	f003 0201 	and.w	r2, r3, #1
 800cfa8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800cfac:	f888 3000 	strb.w	r3, [r8]
 800cfb0:	7522      	strb	r2, [r4, #20]
 800cfb2:	4638      	mov	r0, r7
 800cfb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cfb8 <uxr_submessage_padding>:
 800cfb8:	f010 0003 	ands.w	r0, r0, #3
 800cfbc:	bf18      	it	ne
 800cfbe:	f1c0 0004 	rsbne	r0, r0, #4
 800cfc2:	4770      	bx	lr

0800cfc4 <uxr_millis>:
 800cfc4:	b510      	push	{r4, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	4669      	mov	r1, sp
 800cfca:	2001      	movs	r0, #1
 800cfcc:	f7f4 fbcc 	bl	8001768 <clock_gettime>
 800cfd0:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800cfd4:	4906      	ldr	r1, [pc, #24]	@ (800cff0 <uxr_millis+0x2c>)
 800cfd6:	fba0 0301 	umull	r0, r3, r0, r1
 800cfda:	1900      	adds	r0, r0, r4
 800cfdc:	fb01 3102 	mla	r1, r1, r2, r3
 800cfe0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800cfe4:	4a03      	ldr	r2, [pc, #12]	@ (800cff4 <uxr_millis+0x30>)
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	f7f3 fb34 	bl	8000654 <__aeabi_ldivmod>
 800cfec:	b004      	add	sp, #16
 800cfee:	bd10      	pop	{r4, pc}
 800cff0:	3b9aca00 	.word	0x3b9aca00
 800cff4:	000f4240 	.word	0x000f4240

0800cff8 <uxr_nanos>:
 800cff8:	b510      	push	{r4, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	4669      	mov	r1, sp
 800cffe:	2001      	movs	r0, #1
 800d000:	f7f4 fbb2 	bl	8001768 <clock_gettime>
 800d004:	4a06      	ldr	r2, [pc, #24]	@ (800d020 <uxr_nanos+0x28>)
 800d006:	9800      	ldr	r0, [sp, #0]
 800d008:	9902      	ldr	r1, [sp, #8]
 800d00a:	9c01      	ldr	r4, [sp, #4]
 800d00c:	fba0 0302 	umull	r0, r3, r0, r2
 800d010:	1840      	adds	r0, r0, r1
 800d012:	fb02 3304 	mla	r3, r2, r4, r3
 800d016:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800d01a:	b004      	add	sp, #16
 800d01c:	bd10      	pop	{r4, pc}
 800d01e:	bf00      	nop
 800d020:	3b9aca00 	.word	0x3b9aca00

0800d024 <on_full_output_buffer_fragmented>:
 800d024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d028:	460c      	mov	r4, r1
 800d02a:	b08a      	sub	sp, #40	@ 0x28
 800d02c:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800d030:	4606      	mov	r6, r0
 800d032:	f104 0008 	add.w	r0, r4, #8
 800d036:	f7ff ff4b 	bl	800ced0 <uxr_get_output_reliable_stream>
 800d03a:	4605      	mov	r5, r0
 800d03c:	f006 fdc8 	bl	8013bd0 <get_available_free_slots>
 800d040:	b968      	cbnz	r0, 800d05e <on_full_output_buffer_fragmented+0x3a>
 800d042:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800d046:	4620      	mov	r0, r4
 800d048:	4798      	blx	r3
 800d04a:	b918      	cbnz	r0, 800d054 <on_full_output_buffer_fragmented+0x30>
 800d04c:	2001      	movs	r0, #1
 800d04e:	b00a      	add	sp, #40	@ 0x28
 800d050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d054:	4628      	mov	r0, r5
 800d056:	f006 fdbb 	bl	8013bd0 <get_available_free_slots>
 800d05a:	2800      	cmp	r0, #0
 800d05c:	d0f6      	beq.n	800d04c <on_full_output_buffer_fragmented+0x28>
 800d05e:	8929      	ldrh	r1, [r5, #8]
 800d060:	89eb      	ldrh	r3, [r5, #14]
 800d062:	7b28      	ldrb	r0, [r5, #12]
 800d064:	686a      	ldr	r2, [r5, #4]
 800d066:	fbb2 f8f1 	udiv	r8, r2, r1
 800d06a:	fbb3 f2f1 	udiv	r2, r3, r1
 800d06e:	fb01 3112 	mls	r1, r1, r2, r3
 800d072:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800d076:	b289      	uxth	r1, r1
 800d078:	fb08 f101 	mul.w	r1, r8, r1
 800d07c:	30fc      	adds	r0, #252	@ 0xfc
 800d07e:	f1a8 0804 	sub.w	r8, r8, #4
 800d082:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800d086:	4440      	add	r0, r8
 800d088:	b287      	uxth	r7, r0
 800d08a:	1bdb      	subs	r3, r3, r7
 800d08c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800d090:	682b      	ldr	r3, [r5, #0]
 800d092:	3104      	adds	r1, #4
 800d094:	4419      	add	r1, r3
 800d096:	4642      	mov	r2, r8
 800d098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	a802      	add	r0, sp, #8
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	f7fc fbf3 	bl	800988c <ucdr_init_buffer_origin_offset>
 800d0a6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800d0aa:	f102 0308 	add.w	r3, r2, #8
 800d0ae:	4543      	cmp	r3, r8
 800d0b0:	d928      	bls.n	800d104 <on_full_output_buffer_fragmented+0xe0>
 800d0b2:	463a      	mov	r2, r7
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	210d      	movs	r1, #13
 800d0b8:	a802      	add	r0, sp, #8
 800d0ba:	f7ff ff3d 	bl	800cf38 <uxr_buffer_submessage_header>
 800d0be:	8929      	ldrh	r1, [r5, #8]
 800d0c0:	89eb      	ldrh	r3, [r5, #14]
 800d0c2:	fbb3 f2f1 	udiv	r2, r3, r1
 800d0c6:	fb01 3312 	mls	r3, r1, r2, r3
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	686a      	ldr	r2, [r5, #4]
 800d0ce:	fbb2 f2f1 	udiv	r2, r2, r1
 800d0d2:	fb02 f303 	mul.w	r3, r2, r3
 800d0d6:	682a      	ldr	r2, [r5, #0]
 800d0d8:	f842 8003 	str.w	r8, [r2, r3]
 800d0dc:	89e8      	ldrh	r0, [r5, #14]
 800d0de:	2101      	movs	r1, #1
 800d0e0:	f006 fec6 	bl	8013e70 <uxr_seq_num_add>
 800d0e4:	9904      	ldr	r1, [sp, #16]
 800d0e6:	9a03      	ldr	r2, [sp, #12]
 800d0e8:	81e8      	strh	r0, [r5, #14]
 800d0ea:	1a52      	subs	r2, r2, r1
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	f7fc fbdf 	bl	80098b0 <ucdr_init_buffer>
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	490f      	ldr	r1, [pc, #60]	@ (800d134 <on_full_output_buffer_fragmented+0x110>)
 800d0f6:	4622      	mov	r2, r4
 800d0f8:	f7fc fbae 	bl	8009858 <ucdr_set_on_full_buffer_callback>
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	b00a      	add	sp, #40	@ 0x28
 800d100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d104:	b292      	uxth	r2, r2
 800d106:	2302      	movs	r3, #2
 800d108:	210d      	movs	r1, #13
 800d10a:	a802      	add	r0, sp, #8
 800d10c:	f7ff ff14 	bl	800cf38 <uxr_buffer_submessage_header>
 800d110:	8928      	ldrh	r0, [r5, #8]
 800d112:	89eb      	ldrh	r3, [r5, #14]
 800d114:	fbb3 f1f0 	udiv	r1, r3, r0
 800d118:	fb00 3311 	mls	r3, r0, r1, r3
 800d11c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800d120:	6869      	ldr	r1, [r5, #4]
 800d122:	fbb1 f1f0 	udiv	r1, r1, r0
 800d126:	b29b      	uxth	r3, r3
 800d128:	fb01 f303 	mul.w	r3, r1, r3
 800d12c:	6829      	ldr	r1, [r5, #0]
 800d12e:	3208      	adds	r2, #8
 800d130:	50ca      	str	r2, [r1, r3]
 800d132:	e7d3      	b.n	800d0dc <on_full_output_buffer_fragmented+0xb8>
 800d134:	0800d025 	.word	0x0800d025

0800d138 <uxr_prepare_output_stream>:
 800d138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d13a:	b087      	sub	sp, #28
 800d13c:	2707      	movs	r7, #7
 800d13e:	9202      	str	r2, [sp, #8]
 800d140:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d142:	9103      	str	r1, [sp, #12]
 800d144:	2500      	movs	r5, #0
 800d146:	3204      	adds	r2, #4
 800d148:	e9cd 7500 	strd	r7, r5, [sp]
 800d14c:	461c      	mov	r4, r3
 800d14e:	4606      	mov	r6, r0
 800d150:	f7ff fc54 	bl	800c9fc <uxr_prepare_stream_to_write_submessage>
 800d154:	f080 0201 	eor.w	r2, r0, #1
 800d158:	b2d2      	uxtb	r2, r2
 800d15a:	75a2      	strb	r2, [r4, #22]
 800d15c:	b112      	cbz	r2, 800d164 <uxr_prepare_output_stream+0x2c>
 800d15e:	4628      	mov	r0, r5
 800d160:	b007      	add	sp, #28
 800d162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d164:	aa05      	add	r2, sp, #20
 800d166:	9902      	ldr	r1, [sp, #8]
 800d168:	4630      	mov	r0, r6
 800d16a:	f7ff fd7d 	bl	800cc68 <uxr_init_base_object_request>
 800d16e:	a905      	add	r1, sp, #20
 800d170:	4605      	mov	r5, r0
 800d172:	4620      	mov	r0, r4
 800d174:	f001 f88c 	bl	800e290 <uxr_serialize_WRITE_DATA_Payload_Data>
 800d178:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800d17c:	69a6      	ldr	r6, [r4, #24]
 800d17e:	69e7      	ldr	r7, [r4, #28]
 800d180:	1a52      	subs	r2, r2, r1
 800d182:	4620      	mov	r0, r4
 800d184:	f7fc fb94 	bl	80098b0 <ucdr_init_buffer>
 800d188:	4620      	mov	r0, r4
 800d18a:	463a      	mov	r2, r7
 800d18c:	4631      	mov	r1, r6
 800d18e:	f7fc fb63 	bl	8009858 <ucdr_set_on_full_buffer_callback>
 800d192:	4628      	mov	r0, r5
 800d194:	b007      	add	sp, #28
 800d196:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d198 <uxr_prepare_output_stream_fragmented>:
 800d198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d19c:	b091      	sub	sp, #68	@ 0x44
 800d19e:	4605      	mov	r5, r0
 800d1a0:	9105      	str	r1, [sp, #20]
 800d1a2:	3008      	adds	r0, #8
 800d1a4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800d1a8:	461e      	mov	r6, r3
 800d1aa:	9204      	str	r2, [sp, #16]
 800d1ac:	f7ff fe90 	bl	800ced0 <uxr_get_output_reliable_stream>
 800d1b0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	f000 8091 	beq.w	800d2dc <uxr_prepare_output_stream_fragmented+0x144>
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	f000 808d 	beq.w	800d2dc <uxr_prepare_output_stream_fragmented+0x144>
 800d1c2:	f006 fd05 	bl	8013bd0 <get_available_free_slots>
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	f000 8083 	beq.w	800d2d2 <uxr_prepare_output_stream_fragmented+0x13a>
 800d1cc:	8922      	ldrh	r2, [r4, #8]
 800d1ce:	89e7      	ldrh	r7, [r4, #14]
 800d1d0:	fbb7 f9f2 	udiv	r9, r7, r2
 800d1d4:	fb02 7919 	mls	r9, r2, r9, r7
 800d1d8:	fa1f f989 	uxth.w	r9, r9
 800d1dc:	6863      	ldr	r3, [r4, #4]
 800d1de:	fbb3 f2f2 	udiv	r2, r3, r2
 800d1e2:	6823      	ldr	r3, [r4, #0]
 800d1e4:	9203      	str	r2, [sp, #12]
 800d1e6:	fb02 f909 	mul.w	r9, r2, r9
 800d1ea:	f109 0904 	add.w	r9, r9, #4
 800d1ee:	4499      	add	r9, r3
 800d1f0:	7b23      	ldrb	r3, [r4, #12]
 800d1f2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800d1f6:	4543      	cmp	r3, r8
 800d1f8:	f1a2 0b04 	sub.w	fp, r2, #4
 800d1fc:	d37a      	bcc.n	800d2f4 <uxr_prepare_output_stream_fragmented+0x15c>
 800d1fe:	f1ab 0a04 	sub.w	sl, fp, #4
 800d202:	ebaa 0a03 	sub.w	sl, sl, r3
 800d206:	465a      	mov	r2, fp
 800d208:	2300      	movs	r3, #0
 800d20a:	4649      	mov	r1, r9
 800d20c:	a808      	add	r0, sp, #32
 800d20e:	f8cd 8000 	str.w	r8, [sp]
 800d212:	f7fc fb3b 	bl	800988c <ucdr_init_buffer_origin_offset>
 800d216:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800d218:	fa1f fa8a 	uxth.w	sl, sl
 800d21c:	4652      	mov	r2, sl
 800d21e:	f103 0a08 	add.w	sl, r3, #8
 800d222:	45da      	cmp	sl, fp
 800d224:	bf34      	ite	cc
 800d226:	2302      	movcc	r3, #2
 800d228:	2300      	movcs	r3, #0
 800d22a:	210d      	movs	r1, #13
 800d22c:	a808      	add	r0, sp, #32
 800d22e:	f7ff fe83 	bl	800cf38 <uxr_buffer_submessage_header>
 800d232:	8921      	ldrh	r1, [r4, #8]
 800d234:	fbb7 f2f1 	udiv	r2, r7, r1
 800d238:	fb01 7212 	mls	r2, r1, r2, r7
 800d23c:	b292      	uxth	r2, r2
 800d23e:	6863      	ldr	r3, [r4, #4]
 800d240:	fbb3 f3f1 	udiv	r3, r3, r1
 800d244:	fb02 f303 	mul.w	r3, r2, r3
 800d248:	6822      	ldr	r2, [r4, #0]
 800d24a:	4638      	mov	r0, r7
 800d24c:	f842 b003 	str.w	fp, [r2, r3]
 800d250:	2101      	movs	r1, #1
 800d252:	f006 fe0d 	bl	8013e70 <uxr_seq_num_add>
 800d256:	9b03      	ldr	r3, [sp, #12]
 800d258:	f108 0104 	add.w	r1, r8, #4
 800d25c:	f1a3 0208 	sub.w	r2, r3, #8
 800d260:	eba2 0208 	sub.w	r2, r2, r8
 800d264:	4449      	add	r1, r9
 800d266:	4607      	mov	r7, r0
 800d268:	4630      	mov	r0, r6
 800d26a:	f7fc fb21 	bl	80098b0 <ucdr_init_buffer>
 800d26e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800d270:	81e7      	strh	r7, [r4, #14]
 800d272:	1d1a      	adds	r2, r3, #4
 800d274:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800d278:	bf28      	it	cs
 800d27a:	2200      	movcs	r2, #0
 800d27c:	2300      	movs	r3, #0
 800d27e:	b292      	uxth	r2, r2
 800d280:	2107      	movs	r1, #7
 800d282:	4630      	mov	r0, r6
 800d284:	f7ff fe58 	bl	800cf38 <uxr_buffer_submessage_header>
 800d288:	9904      	ldr	r1, [sp, #16]
 800d28a:	aa07      	add	r2, sp, #28
 800d28c:	4628      	mov	r0, r5
 800d28e:	f7ff fceb 	bl	800cc68 <uxr_init_base_object_request>
 800d292:	4604      	mov	r4, r0
 800d294:	b318      	cbz	r0, 800d2de <uxr_prepare_output_stream_fragmented+0x146>
 800d296:	a907      	add	r1, sp, #28
 800d298:	4630      	mov	r0, r6
 800d29a:	f000 fff9 	bl	800e290 <uxr_serialize_WRITE_DATA_Payload_Data>
 800d29e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800d2a2:	4630      	mov	r0, r6
 800d2a4:	1a52      	subs	r2, r2, r1
 800d2a6:	f7fc fb03 	bl	80098b0 <ucdr_init_buffer>
 800d2aa:	9b05      	ldr	r3, [sp, #20]
 800d2ac:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800d2b0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d2b2:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800d2b6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800d2b8:	491b      	ldr	r1, [pc, #108]	@ (800d328 <uxr_prepare_output_stream_fragmented+0x190>)
 800d2ba:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800d2be:	4630      	mov	r0, r6
 800d2c0:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800d2c4:	462a      	mov	r2, r5
 800d2c6:	f7fc fac7 	bl	8009858 <ucdr_set_on_full_buffer_callback>
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	b011      	add	sp, #68	@ 0x44
 800d2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2d2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800d2d4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d2d6:	4628      	mov	r0, r5
 800d2d8:	4798      	blx	r3
 800d2da:	b920      	cbnz	r0, 800d2e6 <uxr_prepare_output_stream_fragmented+0x14e>
 800d2dc:	2400      	movs	r4, #0
 800d2de:	4620      	mov	r0, r4
 800d2e0:	b011      	add	sp, #68	@ 0x44
 800d2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	f006 fc72 	bl	8013bd0 <get_available_free_slots>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	f47f af6d 	bne.w	800d1cc <uxr_prepare_output_stream_fragmented+0x34>
 800d2f2:	e7f3      	b.n	800d2dc <uxr_prepare_output_stream_fragmented+0x144>
 800d2f4:	4638      	mov	r0, r7
 800d2f6:	2101      	movs	r1, #1
 800d2f8:	f006 fdba 	bl	8013e70 <uxr_seq_num_add>
 800d2fc:	8921      	ldrh	r1, [r4, #8]
 800d2fe:	fbb0 f2f1 	udiv	r2, r0, r1
 800d302:	fb01 0912 	mls	r9, r1, r2, r0
 800d306:	fa1f f289 	uxth.w	r2, r9
 800d30a:	6863      	ldr	r3, [r4, #4]
 800d30c:	fbb3 f9f1 	udiv	r9, r3, r1
 800d310:	6823      	ldr	r3, [r4, #0]
 800d312:	fb02 f909 	mul.w	r9, r2, r9
 800d316:	f109 0904 	add.w	r9, r9, #4
 800d31a:	4499      	add	r9, r3
 800d31c:	4607      	mov	r7, r0
 800d31e:	7b23      	ldrb	r3, [r4, #12]
 800d320:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800d324:	e76b      	b.n	800d1fe <uxr_prepare_output_stream_fragmented+0x66>
 800d326:	bf00      	nop
 800d328:	0800d025 	.word	0x0800d025

0800d32c <uxr_serialize_message_header>:
 800d32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d32e:	b083      	sub	sp, #12
 800d330:	4616      	mov	r6, r2
 800d332:	4604      	mov	r4, r0
 800d334:	9301      	str	r3, [sp, #4]
 800d336:	460d      	mov	r5, r1
 800d338:	9f08      	ldr	r7, [sp, #32]
 800d33a:	f7fb f977 	bl	800862c <ucdr_serialize_uint8_t>
 800d33e:	4631      	mov	r1, r6
 800d340:	4620      	mov	r0, r4
 800d342:	f7fb f973 	bl	800862c <ucdr_serialize_uint8_t>
 800d346:	9a01      	ldr	r2, [sp, #4]
 800d348:	2101      	movs	r1, #1
 800d34a:	4620      	mov	r0, r4
 800d34c:	f7fb fa1a 	bl	8008784 <ucdr_serialize_endian_uint16_t>
 800d350:	062b      	lsls	r3, r5, #24
 800d352:	d501      	bpl.n	800d358 <uxr_serialize_message_header+0x2c>
 800d354:	b003      	add	sp, #12
 800d356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d358:	2204      	movs	r2, #4
 800d35a:	4639      	mov	r1, r7
 800d35c:	4620      	mov	r0, r4
 800d35e:	b003      	add	sp, #12
 800d360:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d364:	f005 bd12 	b.w	8012d8c <ucdr_serialize_array_uint8_t>

0800d368 <uxr_deserialize_message_header>:
 800d368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d36a:	b083      	sub	sp, #12
 800d36c:	4616      	mov	r6, r2
 800d36e:	4604      	mov	r4, r0
 800d370:	9301      	str	r3, [sp, #4]
 800d372:	460d      	mov	r5, r1
 800d374:	9f08      	ldr	r7, [sp, #32]
 800d376:	f7fb f96f 	bl	8008658 <ucdr_deserialize_uint8_t>
 800d37a:	4631      	mov	r1, r6
 800d37c:	4620      	mov	r0, r4
 800d37e:	f7fb f96b 	bl	8008658 <ucdr_deserialize_uint8_t>
 800d382:	9a01      	ldr	r2, [sp, #4]
 800d384:	2101      	movs	r1, #1
 800d386:	4620      	mov	r0, r4
 800d388:	f7fb faf0 	bl	800896c <ucdr_deserialize_endian_uint16_t>
 800d38c:	f995 3000 	ldrsb.w	r3, [r5]
 800d390:	2b00      	cmp	r3, #0
 800d392:	da01      	bge.n	800d398 <uxr_deserialize_message_header+0x30>
 800d394:	b003      	add	sp, #12
 800d396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d398:	2204      	movs	r2, #4
 800d39a:	4639      	mov	r1, r7
 800d39c:	4620      	mov	r0, r4
 800d39e:	b003      	add	sp, #12
 800d3a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d3a4:	f005 bd56 	b.w	8012e54 <ucdr_deserialize_array_uint8_t>

0800d3a8 <uxr_serialize_submessage_header>:
 800d3a8:	b530      	push	{r4, r5, lr}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	4615      	mov	r5, r2
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	9301      	str	r3, [sp, #4]
 800d3b2:	f7fb f93b 	bl	800862c <ucdr_serialize_uint8_t>
 800d3b6:	4629      	mov	r1, r5
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f7fb f937 	bl	800862c <ucdr_serialize_uint8_t>
 800d3be:	9a01      	ldr	r2, [sp, #4]
 800d3c0:	2101      	movs	r1, #1
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	b003      	add	sp, #12
 800d3c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3ca:	f7fb b9db 	b.w	8008784 <ucdr_serialize_endian_uint16_t>
 800d3ce:	bf00      	nop

0800d3d0 <uxr_deserialize_submessage_header>:
 800d3d0:	b530      	push	{r4, r5, lr}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	4615      	mov	r5, r2
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	9301      	str	r3, [sp, #4]
 800d3da:	f7fb f93d 	bl	8008658 <ucdr_deserialize_uint8_t>
 800d3de:	4629      	mov	r1, r5
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	f7fb f939 	bl	8008658 <ucdr_deserialize_uint8_t>
 800d3e6:	9a01      	ldr	r2, [sp, #4]
 800d3e8:	2101      	movs	r1, #1
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	b003      	add	sp, #12
 800d3ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3f2:	f7fb babb 	b.w	800896c <ucdr_deserialize_endian_uint16_t>
 800d3f6:	bf00      	nop

0800d3f8 <uxr_serialize_CLIENT_Representation>:
 800d3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3fc:	2204      	movs	r2, #4
 800d3fe:	460e      	mov	r6, r1
 800d400:	4605      	mov	r5, r0
 800d402:	f005 fcc3 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800d406:	2202      	movs	r2, #2
 800d408:	4607      	mov	r7, r0
 800d40a:	1d31      	adds	r1, r6, #4
 800d40c:	4628      	mov	r0, r5
 800d40e:	f005 fcbd 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800d412:	4038      	ands	r0, r7
 800d414:	2202      	movs	r2, #2
 800d416:	1db1      	adds	r1, r6, #6
 800d418:	b2c7      	uxtb	r7, r0
 800d41a:	4628      	mov	r0, r5
 800d41c:	f005 fcb6 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800d420:	2204      	movs	r2, #4
 800d422:	4007      	ands	r7, r0
 800d424:	f106 0108 	add.w	r1, r6, #8
 800d428:	4628      	mov	r0, r5
 800d42a:	f005 fcaf 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800d42e:	7b31      	ldrb	r1, [r6, #12]
 800d430:	4007      	ands	r7, r0
 800d432:	4628      	mov	r0, r5
 800d434:	f7fb f8fa 	bl	800862c <ucdr_serialize_uint8_t>
 800d438:	7b71      	ldrb	r1, [r6, #13]
 800d43a:	4007      	ands	r7, r0
 800d43c:	4628      	mov	r0, r5
 800d43e:	f7fb f8c7 	bl	80085d0 <ucdr_serialize_bool>
 800d442:	7b73      	ldrb	r3, [r6, #13]
 800d444:	ea07 0800 	and.w	r8, r7, r0
 800d448:	b93b      	cbnz	r3, 800d45a <uxr_serialize_CLIENT_Representation+0x62>
 800d44a:	8bb1      	ldrh	r1, [r6, #28]
 800d44c:	4628      	mov	r0, r5
 800d44e:	f7fb f919 	bl	8008684 <ucdr_serialize_uint16_t>
 800d452:	ea08 0000 	and.w	r0, r8, r0
 800d456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d45a:	6931      	ldr	r1, [r6, #16]
 800d45c:	4628      	mov	r0, r5
 800d45e:	f7fb fafb 	bl	8008a58 <ucdr_serialize_uint32_t>
 800d462:	6933      	ldr	r3, [r6, #16]
 800d464:	b1e3      	cbz	r3, 800d4a0 <uxr_serialize_CLIENT_Representation+0xa8>
 800d466:	b1c0      	cbz	r0, 800d49a <uxr_serialize_CLIENT_Representation+0xa2>
 800d468:	4637      	mov	r7, r6
 800d46a:	f04f 0900 	mov.w	r9, #0
 800d46e:	e001      	b.n	800d474 <uxr_serialize_CLIENT_Representation+0x7c>
 800d470:	3708      	adds	r7, #8
 800d472:	b194      	cbz	r4, 800d49a <uxr_serialize_CLIENT_Representation+0xa2>
 800d474:	6979      	ldr	r1, [r7, #20]
 800d476:	4628      	mov	r0, r5
 800d478:	f005 fda8 	bl	8012fcc <ucdr_serialize_string>
 800d47c:	69b9      	ldr	r1, [r7, #24]
 800d47e:	4604      	mov	r4, r0
 800d480:	4628      	mov	r0, r5
 800d482:	f005 fda3 	bl	8012fcc <ucdr_serialize_string>
 800d486:	6933      	ldr	r3, [r6, #16]
 800d488:	f109 0901 	add.w	r9, r9, #1
 800d48c:	4004      	ands	r4, r0
 800d48e:	4599      	cmp	r9, r3
 800d490:	b2e4      	uxtb	r4, r4
 800d492:	d3ed      	bcc.n	800d470 <uxr_serialize_CLIENT_Representation+0x78>
 800d494:	ea08 0804 	and.w	r8, r8, r4
 800d498:	e7d7      	b.n	800d44a <uxr_serialize_CLIENT_Representation+0x52>
 800d49a:	f04f 0800 	mov.w	r8, #0
 800d49e:	e7d4      	b.n	800d44a <uxr_serialize_CLIENT_Representation+0x52>
 800d4a0:	ea08 0800 	and.w	r8, r8, r0
 800d4a4:	e7d1      	b.n	800d44a <uxr_serialize_CLIENT_Representation+0x52>
 800d4a6:	bf00      	nop

0800d4a8 <uxr_deserialize_CLIENT_Representation>:
 800d4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4ac:	2204      	movs	r2, #4
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	4605      	mov	r5, r0
 800d4b2:	f005 fccf 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800d4b6:	2202      	movs	r2, #2
 800d4b8:	4607      	mov	r7, r0
 800d4ba:	1d21      	adds	r1, r4, #4
 800d4bc:	4628      	mov	r0, r5
 800d4be:	f005 fcc9 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800d4c2:	4038      	ands	r0, r7
 800d4c4:	2202      	movs	r2, #2
 800d4c6:	1da1      	adds	r1, r4, #6
 800d4c8:	b2c6      	uxtb	r6, r0
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	f005 fcc2 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800d4d0:	2204      	movs	r2, #4
 800d4d2:	4006      	ands	r6, r0
 800d4d4:	f104 0108 	add.w	r1, r4, #8
 800d4d8:	4628      	mov	r0, r5
 800d4da:	f005 fcbb 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800d4de:	f104 010c 	add.w	r1, r4, #12
 800d4e2:	4006      	ands	r6, r0
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	f7fb f8b7 	bl	8008658 <ucdr_deserialize_uint8_t>
 800d4ea:	f104 010d 	add.w	r1, r4, #13
 800d4ee:	ea06 0700 	and.w	r7, r6, r0
 800d4f2:	4628      	mov	r0, r5
 800d4f4:	f7fb f882 	bl	80085fc <ucdr_deserialize_bool>
 800d4f8:	7b63      	ldrb	r3, [r4, #13]
 800d4fa:	4007      	ands	r7, r0
 800d4fc:	b93b      	cbnz	r3, 800d50e <uxr_deserialize_CLIENT_Representation+0x66>
 800d4fe:	f104 011c 	add.w	r1, r4, #28
 800d502:	4628      	mov	r0, r5
 800d504:	f7fb f9be 	bl	8008884 <ucdr_deserialize_uint16_t>
 800d508:	4038      	ands	r0, r7
 800d50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d50e:	f104 0110 	add.w	r1, r4, #16
 800d512:	4628      	mov	r0, r5
 800d514:	f7fb fbd0 	bl	8008cb8 <ucdr_deserialize_uint32_t>
 800d518:	6923      	ldr	r3, [r4, #16]
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d903      	bls.n	800d526 <uxr_deserialize_CLIENT_Representation+0x7e>
 800d51e:	2301      	movs	r3, #1
 800d520:	75ab      	strb	r3, [r5, #22]
 800d522:	2700      	movs	r7, #0
 800d524:	e7eb      	b.n	800d4fe <uxr_deserialize_CLIENT_Representation+0x56>
 800d526:	b30b      	cbz	r3, 800d56c <uxr_deserialize_CLIENT_Representation+0xc4>
 800d528:	2800      	cmp	r0, #0
 800d52a:	d0fa      	beq.n	800d522 <uxr_deserialize_CLIENT_Representation+0x7a>
 800d52c:	46a0      	mov	r8, r4
 800d52e:	f04f 0900 	mov.w	r9, #0
 800d532:	e001      	b.n	800d538 <uxr_deserialize_CLIENT_Representation+0x90>
 800d534:	2e00      	cmp	r6, #0
 800d536:	d0f4      	beq.n	800d522 <uxr_deserialize_CLIENT_Representation+0x7a>
 800d538:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800d53c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d540:	4628      	mov	r0, r5
 800d542:	f005 fd53 	bl	8012fec <ucdr_deserialize_string>
 800d546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d54a:	4606      	mov	r6, r0
 800d54c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800d550:	4628      	mov	r0, r5
 800d552:	f005 fd4b 	bl	8012fec <ucdr_deserialize_string>
 800d556:	6923      	ldr	r3, [r4, #16]
 800d558:	f109 0901 	add.w	r9, r9, #1
 800d55c:	4006      	ands	r6, r0
 800d55e:	4599      	cmp	r9, r3
 800d560:	f108 0808 	add.w	r8, r8, #8
 800d564:	b2f6      	uxtb	r6, r6
 800d566:	d3e5      	bcc.n	800d534 <uxr_deserialize_CLIENT_Representation+0x8c>
 800d568:	4037      	ands	r7, r6
 800d56a:	e7c8      	b.n	800d4fe <uxr_deserialize_CLIENT_Representation+0x56>
 800d56c:	4007      	ands	r7, r0
 800d56e:	e7c6      	b.n	800d4fe <uxr_deserialize_CLIENT_Representation+0x56>

0800d570 <uxr_serialize_AGENT_Representation>:
 800d570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d574:	2204      	movs	r2, #4
 800d576:	460f      	mov	r7, r1
 800d578:	4605      	mov	r5, r0
 800d57a:	f005 fc07 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800d57e:	2202      	movs	r2, #2
 800d580:	4604      	mov	r4, r0
 800d582:	1d39      	adds	r1, r7, #4
 800d584:	4628      	mov	r0, r5
 800d586:	f005 fc01 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800d58a:	4020      	ands	r0, r4
 800d58c:	2202      	movs	r2, #2
 800d58e:	1db9      	adds	r1, r7, #6
 800d590:	b2c4      	uxtb	r4, r0
 800d592:	4628      	mov	r0, r5
 800d594:	f005 fbfa 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800d598:	7a39      	ldrb	r1, [r7, #8]
 800d59a:	4004      	ands	r4, r0
 800d59c:	4628      	mov	r0, r5
 800d59e:	f7fb f817 	bl	80085d0 <ucdr_serialize_bool>
 800d5a2:	7a3b      	ldrb	r3, [r7, #8]
 800d5a4:	ea00 0804 	and.w	r8, r0, r4
 800d5a8:	b913      	cbnz	r3, 800d5b0 <uxr_serialize_AGENT_Representation+0x40>
 800d5aa:	4640      	mov	r0, r8
 800d5ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5b0:	68f9      	ldr	r1, [r7, #12]
 800d5b2:	4628      	mov	r0, r5
 800d5b4:	f7fb fa50 	bl	8008a58 <ucdr_serialize_uint32_t>
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	b303      	cbz	r3, 800d5fe <uxr_serialize_AGENT_Representation+0x8e>
 800d5bc:	b1d0      	cbz	r0, 800d5f4 <uxr_serialize_AGENT_Representation+0x84>
 800d5be:	463e      	mov	r6, r7
 800d5c0:	f04f 0900 	mov.w	r9, #0
 800d5c4:	e001      	b.n	800d5ca <uxr_serialize_AGENT_Representation+0x5a>
 800d5c6:	3608      	adds	r6, #8
 800d5c8:	b1a4      	cbz	r4, 800d5f4 <uxr_serialize_AGENT_Representation+0x84>
 800d5ca:	6931      	ldr	r1, [r6, #16]
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	f005 fcfd 	bl	8012fcc <ucdr_serialize_string>
 800d5d2:	6971      	ldr	r1, [r6, #20]
 800d5d4:	4604      	mov	r4, r0
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	f005 fcf8 	bl	8012fcc <ucdr_serialize_string>
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f109 0901 	add.w	r9, r9, #1
 800d5e2:	4004      	ands	r4, r0
 800d5e4:	4599      	cmp	r9, r3
 800d5e6:	b2e4      	uxtb	r4, r4
 800d5e8:	d3ed      	bcc.n	800d5c6 <uxr_serialize_AGENT_Representation+0x56>
 800d5ea:	ea08 0804 	and.w	r8, r8, r4
 800d5ee:	4640      	mov	r0, r8
 800d5f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5f4:	f04f 0800 	mov.w	r8, #0
 800d5f8:	4640      	mov	r0, r8
 800d5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5fe:	ea08 0800 	and.w	r8, r8, r0
 800d602:	e7d2      	b.n	800d5aa <uxr_serialize_AGENT_Representation+0x3a>

0800d604 <uxr_serialize_DATAWRITER_Representation>:
 800d604:	b570      	push	{r4, r5, r6, lr}
 800d606:	460d      	mov	r5, r1
 800d608:	7809      	ldrb	r1, [r1, #0]
 800d60a:	4606      	mov	r6, r0
 800d60c:	f7fb f80e 	bl	800862c <ucdr_serialize_uint8_t>
 800d610:	4604      	mov	r4, r0
 800d612:	b130      	cbz	r0, 800d622 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d614:	782b      	ldrb	r3, [r5, #0]
 800d616:	2b02      	cmp	r3, #2
 800d618:	d00c      	beq.n	800d634 <uxr_serialize_DATAWRITER_Representation+0x30>
 800d61a:	2b03      	cmp	r3, #3
 800d61c:	d010      	beq.n	800d640 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d008      	beq.n	800d634 <uxr_serialize_DATAWRITER_Representation+0x30>
 800d622:	2202      	movs	r2, #2
 800d624:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800d628:	4630      	mov	r0, r6
 800d62a:	f005 fbaf 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800d62e:	4020      	ands	r0, r4
 800d630:	b2c0      	uxtb	r0, r0
 800d632:	bd70      	pop	{r4, r5, r6, pc}
 800d634:	6869      	ldr	r1, [r5, #4]
 800d636:	4630      	mov	r0, r6
 800d638:	f005 fcc8 	bl	8012fcc <ucdr_serialize_string>
 800d63c:	4604      	mov	r4, r0
 800d63e:	e7f0      	b.n	800d622 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d640:	4629      	mov	r1, r5
 800d642:	4630      	mov	r0, r6
 800d644:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800d648:	3104      	adds	r1, #4
 800d64a:	f005 fc93 	bl	8012f74 <ucdr_serialize_sequence_uint8_t>
 800d64e:	4604      	mov	r4, r0
 800d650:	e7e7      	b.n	800d622 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d652:	bf00      	nop

0800d654 <uxr_serialize_ObjectVariant.part.0>:
 800d654:	b570      	push	{r4, r5, r6, lr}
 800d656:	780b      	ldrb	r3, [r1, #0]
 800d658:	3b01      	subs	r3, #1
 800d65a:	460c      	mov	r4, r1
 800d65c:	4605      	mov	r5, r0
 800d65e:	2b0d      	cmp	r3, #13
 800d660:	d854      	bhi.n	800d70c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800d662:	e8df f003 	tbb	[pc, r3]
 800d666:	0730      	.short	0x0730
 800d668:	07071b1b 	.word	0x07071b1b
 800d66c:	0c530707 	.word	0x0c530707
 800d670:	494e0c0c 	.word	0x494e0c0c
 800d674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d678:	3104      	adds	r1, #4
 800d67a:	f7ff bfc3 	b.w	800d604 <uxr_serialize_DATAWRITER_Representation>
 800d67e:	7909      	ldrb	r1, [r1, #4]
 800d680:	f7fa ffd4 	bl	800862c <ucdr_serialize_uint8_t>
 800d684:	b1e8      	cbz	r0, 800d6c2 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800d686:	7923      	ldrb	r3, [r4, #4]
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d001      	beq.n	800d690 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	d13d      	bne.n	800d70c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800d690:	68a1      	ldr	r1, [r4, #8]
 800d692:	4628      	mov	r0, r5
 800d694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d698:	f005 bc98 	b.w	8012fcc <ucdr_serialize_string>
 800d69c:	7909      	ldrb	r1, [r1, #4]
 800d69e:	f7fa ffc5 	bl	800862c <ucdr_serialize_uint8_t>
 800d6a2:	4606      	mov	r6, r0
 800d6a4:	b120      	cbz	r0, 800d6b0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d6a6:	7923      	ldrb	r3, [r4, #4]
 800d6a8:	2b02      	cmp	r3, #2
 800d6aa:	d039      	beq.n	800d720 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800d6ac:	2b03      	cmp	r3, #3
 800d6ae:	d02f      	beq.n	800d710 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800d6b0:	2202      	movs	r2, #2
 800d6b2:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	f005 fb68 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800d6bc:	4030      	ands	r0, r6
 800d6be:	b2c0      	uxtb	r0, r0
 800d6c0:	bd70      	pop	{r4, r5, r6, pc}
 800d6c2:	2000      	movs	r0, #0
 800d6c4:	bd70      	pop	{r4, r5, r6, pc}
 800d6c6:	7909      	ldrb	r1, [r1, #4]
 800d6c8:	f7fa ffb0 	bl	800862c <ucdr_serialize_uint8_t>
 800d6cc:	4606      	mov	r6, r0
 800d6ce:	b158      	cbz	r0, 800d6e8 <uxr_serialize_ObjectVariant.part.0+0x94>
 800d6d0:	7923      	ldrb	r3, [r4, #4]
 800d6d2:	2b02      	cmp	r3, #2
 800d6d4:	d003      	beq.n	800d6de <uxr_serialize_ObjectVariant.part.0+0x8a>
 800d6d6:	2b03      	cmp	r3, #3
 800d6d8:	d028      	beq.n	800d72c <uxr_serialize_ObjectVariant.part.0+0xd8>
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	d104      	bne.n	800d6e8 <uxr_serialize_ObjectVariant.part.0+0x94>
 800d6de:	68a1      	ldr	r1, [r4, #8]
 800d6e0:	4628      	mov	r0, r5
 800d6e2:	f005 fc73 	bl	8012fcc <ucdr_serialize_string>
 800d6e6:	4606      	mov	r6, r0
 800d6e8:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800d6ec:	4628      	mov	r0, r5
 800d6ee:	f7fb fcd9 	bl	80090a4 <ucdr_serialize_int16_t>
 800d6f2:	4030      	ands	r0, r6
 800d6f4:	b2c0      	uxtb	r0, r0
 800d6f6:	bd70      	pop	{r4, r5, r6, pc}
 800d6f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d6fc:	3104      	adds	r1, #4
 800d6fe:	f7ff be7b 	b.w	800d3f8 <uxr_serialize_CLIENT_Representation>
 800d702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d706:	3104      	adds	r1, #4
 800d708:	f7ff bf32 	b.w	800d570 <uxr_serialize_AGENT_Representation>
 800d70c:	2001      	movs	r0, #1
 800d70e:	bd70      	pop	{r4, r5, r6, pc}
 800d710:	68a2      	ldr	r2, [r4, #8]
 800d712:	f104 010c 	add.w	r1, r4, #12
 800d716:	4628      	mov	r0, r5
 800d718:	f005 fc2c 	bl	8012f74 <ucdr_serialize_sequence_uint8_t>
 800d71c:	4606      	mov	r6, r0
 800d71e:	e7c7      	b.n	800d6b0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d720:	68a1      	ldr	r1, [r4, #8]
 800d722:	4628      	mov	r0, r5
 800d724:	f005 fc52 	bl	8012fcc <ucdr_serialize_string>
 800d728:	4606      	mov	r6, r0
 800d72a:	e7c1      	b.n	800d6b0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d72c:	68a2      	ldr	r2, [r4, #8]
 800d72e:	f104 010c 	add.w	r1, r4, #12
 800d732:	4628      	mov	r0, r5
 800d734:	f005 fc1e 	bl	8012f74 <ucdr_serialize_sequence_uint8_t>
 800d738:	4606      	mov	r6, r0
 800d73a:	e7d5      	b.n	800d6e8 <uxr_serialize_ObjectVariant.part.0+0x94>

0800d73c <uxr_deserialize_DATAWRITER_Representation>:
 800d73c:	b570      	push	{r4, r5, r6, lr}
 800d73e:	4606      	mov	r6, r0
 800d740:	460d      	mov	r5, r1
 800d742:	f7fa ff89 	bl	8008658 <ucdr_deserialize_uint8_t>
 800d746:	4604      	mov	r4, r0
 800d748:	b130      	cbz	r0, 800d758 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d74a:	782b      	ldrb	r3, [r5, #0]
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	d00c      	beq.n	800d76a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800d750:	2b03      	cmp	r3, #3
 800d752:	d012      	beq.n	800d77a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800d754:	2b01      	cmp	r3, #1
 800d756:	d008      	beq.n	800d76a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800d758:	2202      	movs	r2, #2
 800d75a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800d75e:	4630      	mov	r0, r6
 800d760:	f005 fb78 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800d764:	4020      	ands	r0, r4
 800d766:	b2c0      	uxtb	r0, r0
 800d768:	bd70      	pop	{r4, r5, r6, pc}
 800d76a:	6869      	ldr	r1, [r5, #4]
 800d76c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d770:	4630      	mov	r0, r6
 800d772:	f005 fc3b 	bl	8012fec <ucdr_deserialize_string>
 800d776:	4604      	mov	r4, r0
 800d778:	e7ee      	b.n	800d758 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d77a:	1d2b      	adds	r3, r5, #4
 800d77c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d780:	f105 0108 	add.w	r1, r5, #8
 800d784:	4630      	mov	r0, r6
 800d786:	f005 fc07 	bl	8012f98 <ucdr_deserialize_sequence_uint8_t>
 800d78a:	4604      	mov	r4, r0
 800d78c:	e7e4      	b.n	800d758 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d78e:	bf00      	nop

0800d790 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800d790:	b570      	push	{r4, r5, r6, lr}
 800d792:	460d      	mov	r5, r1
 800d794:	7809      	ldrb	r1, [r1, #0]
 800d796:	4606      	mov	r6, r0
 800d798:	f7fa ff1a 	bl	80085d0 <ucdr_serialize_bool>
 800d79c:	782b      	ldrb	r3, [r5, #0]
 800d79e:	4604      	mov	r4, r0
 800d7a0:	b94b      	cbnz	r3, 800d7b6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800d7a2:	7a29      	ldrb	r1, [r5, #8]
 800d7a4:	4630      	mov	r0, r6
 800d7a6:	f7fa ff13 	bl	80085d0 <ucdr_serialize_bool>
 800d7aa:	7a2b      	ldrb	r3, [r5, #8]
 800d7ac:	4004      	ands	r4, r0
 800d7ae:	b2e4      	uxtb	r4, r4
 800d7b0:	b943      	cbnz	r3, 800d7c4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	bd70      	pop	{r4, r5, r6, pc}
 800d7b6:	6869      	ldr	r1, [r5, #4]
 800d7b8:	4630      	mov	r0, r6
 800d7ba:	f005 fc07 	bl	8012fcc <ucdr_serialize_string>
 800d7be:	4004      	ands	r4, r0
 800d7c0:	b2e4      	uxtb	r4, r4
 800d7c2:	e7ee      	b.n	800d7a2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800d7c4:	68e9      	ldr	r1, [r5, #12]
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	f005 fc00 	bl	8012fcc <ucdr_serialize_string>
 800d7cc:	4004      	ands	r4, r0
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	bd70      	pop	{r4, r5, r6, pc}
 800d7d2:	bf00      	nop

0800d7d4 <uxr_serialize_OBJK_Topic_Binary>:
 800d7d4:	b570      	push	{r4, r5, r6, lr}
 800d7d6:	460d      	mov	r5, r1
 800d7d8:	6809      	ldr	r1, [r1, #0]
 800d7da:	4606      	mov	r6, r0
 800d7dc:	f005 fbf6 	bl	8012fcc <ucdr_serialize_string>
 800d7e0:	7929      	ldrb	r1, [r5, #4]
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	4630      	mov	r0, r6
 800d7e6:	f7fa fef3 	bl	80085d0 <ucdr_serialize_bool>
 800d7ea:	792b      	ldrb	r3, [r5, #4]
 800d7ec:	4004      	ands	r4, r0
 800d7ee:	b2e4      	uxtb	r4, r4
 800d7f0:	b943      	cbnz	r3, 800d804 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800d7f2:	7b29      	ldrb	r1, [r5, #12]
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	f7fa feeb 	bl	80085d0 <ucdr_serialize_bool>
 800d7fa:	7b2b      	ldrb	r3, [r5, #12]
 800d7fc:	4004      	ands	r4, r0
 800d7fe:	b93b      	cbnz	r3, 800d810 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800d800:	4620      	mov	r0, r4
 800d802:	bd70      	pop	{r4, r5, r6, pc}
 800d804:	68a9      	ldr	r1, [r5, #8]
 800d806:	4630      	mov	r0, r6
 800d808:	f005 fbe0 	bl	8012fcc <ucdr_serialize_string>
 800d80c:	4004      	ands	r4, r0
 800d80e:	e7f0      	b.n	800d7f2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800d810:	6929      	ldr	r1, [r5, #16]
 800d812:	4630      	mov	r0, r6
 800d814:	f005 fbda 	bl	8012fcc <ucdr_serialize_string>
 800d818:	4004      	ands	r4, r0
 800d81a:	b2e4      	uxtb	r4, r4
 800d81c:	4620      	mov	r0, r4
 800d81e:	bd70      	pop	{r4, r5, r6, pc}

0800d820 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800d820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d824:	460c      	mov	r4, r1
 800d826:	7809      	ldrb	r1, [r1, #0]
 800d828:	4606      	mov	r6, r0
 800d82a:	f7fa fed1 	bl	80085d0 <ucdr_serialize_bool>
 800d82e:	7823      	ldrb	r3, [r4, #0]
 800d830:	4605      	mov	r5, r0
 800d832:	b96b      	cbnz	r3, 800d850 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800d834:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800d838:	4630      	mov	r0, r6
 800d83a:	f7fa fec9 	bl	80085d0 <ucdr_serialize_bool>
 800d83e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d842:	4005      	ands	r5, r0
 800d844:	b2ed      	uxtb	r5, r5
 800d846:	2b00      	cmp	r3, #0
 800d848:	d169      	bne.n	800d91e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800d84a:	4628      	mov	r0, r5
 800d84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d850:	6861      	ldr	r1, [r4, #4]
 800d852:	4630      	mov	r0, r6
 800d854:	f7fb f900 	bl	8008a58 <ucdr_serialize_uint32_t>
 800d858:	6863      	ldr	r3, [r4, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d06b      	beq.n	800d936 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800d85e:	2800      	cmp	r0, #0
 800d860:	d067      	beq.n	800d932 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d862:	68a1      	ldr	r1, [r4, #8]
 800d864:	4630      	mov	r0, r6
 800d866:	f005 fbb1 	bl	8012fcc <ucdr_serialize_string>
 800d86a:	6863      	ldr	r3, [r4, #4]
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d953      	bls.n	800d918 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d870:	2800      	cmp	r0, #0
 800d872:	d05e      	beq.n	800d932 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d874:	68e1      	ldr	r1, [r4, #12]
 800d876:	4630      	mov	r0, r6
 800d878:	f005 fba8 	bl	8012fcc <ucdr_serialize_string>
 800d87c:	6863      	ldr	r3, [r4, #4]
 800d87e:	2b02      	cmp	r3, #2
 800d880:	d94a      	bls.n	800d918 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d882:	2800      	cmp	r0, #0
 800d884:	d055      	beq.n	800d932 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d886:	6921      	ldr	r1, [r4, #16]
 800d888:	4630      	mov	r0, r6
 800d88a:	f005 fb9f 	bl	8012fcc <ucdr_serialize_string>
 800d88e:	6863      	ldr	r3, [r4, #4]
 800d890:	2b03      	cmp	r3, #3
 800d892:	d941      	bls.n	800d918 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d894:	2800      	cmp	r0, #0
 800d896:	d04c      	beq.n	800d932 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d898:	6961      	ldr	r1, [r4, #20]
 800d89a:	4630      	mov	r0, r6
 800d89c:	f005 fb96 	bl	8012fcc <ucdr_serialize_string>
 800d8a0:	6863      	ldr	r3, [r4, #4]
 800d8a2:	2b04      	cmp	r3, #4
 800d8a4:	d938      	bls.n	800d918 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	d043      	beq.n	800d932 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d8aa:	69a1      	ldr	r1, [r4, #24]
 800d8ac:	4630      	mov	r0, r6
 800d8ae:	f005 fb8d 	bl	8012fcc <ucdr_serialize_string>
 800d8b2:	6863      	ldr	r3, [r4, #4]
 800d8b4:	2b05      	cmp	r3, #5
 800d8b6:	d92f      	bls.n	800d918 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	d03a      	beq.n	800d932 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d8bc:	69e1      	ldr	r1, [r4, #28]
 800d8be:	4630      	mov	r0, r6
 800d8c0:	f005 fb84 	bl	8012fcc <ucdr_serialize_string>
 800d8c4:	6863      	ldr	r3, [r4, #4]
 800d8c6:	2b06      	cmp	r3, #6
 800d8c8:	d926      	bls.n	800d918 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d8ca:	b390      	cbz	r0, 800d932 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d8cc:	6a21      	ldr	r1, [r4, #32]
 800d8ce:	4630      	mov	r0, r6
 800d8d0:	f005 fb7c 	bl	8012fcc <ucdr_serialize_string>
 800d8d4:	6863      	ldr	r3, [r4, #4]
 800d8d6:	2b07      	cmp	r3, #7
 800d8d8:	d91e      	bls.n	800d918 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d8da:	b350      	cbz	r0, 800d932 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d8dc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d8de:	4630      	mov	r0, r6
 800d8e0:	f005 fb74 	bl	8012fcc <ucdr_serialize_string>
 800d8e4:	6863      	ldr	r3, [r4, #4]
 800d8e6:	2b08      	cmp	r3, #8
 800d8e8:	d916      	bls.n	800d918 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d8ea:	b310      	cbz	r0, 800d932 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d8ec:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	f005 fb6c 	bl	8012fcc <ucdr_serialize_string>
 800d8f4:	6863      	ldr	r3, [r4, #4]
 800d8f6:	2b09      	cmp	r3, #9
 800d8f8:	d90e      	bls.n	800d918 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d8fa:	b1d0      	cbz	r0, 800d932 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d8fc:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800d900:	2709      	movs	r7, #9
 800d902:	e000      	b.n	800d906 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800d904:	b1a8      	cbz	r0, 800d932 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d906:	f858 1b04 	ldr.w	r1, [r8], #4
 800d90a:	4630      	mov	r0, r6
 800d90c:	f005 fb5e 	bl	8012fcc <ucdr_serialize_string>
 800d910:	6862      	ldr	r2, [r4, #4]
 800d912:	3701      	adds	r7, #1
 800d914:	4297      	cmp	r7, r2
 800d916:	d3f5      	bcc.n	800d904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800d918:	4005      	ands	r5, r0
 800d91a:	b2ed      	uxtb	r5, r5
 800d91c:	e78a      	b.n	800d834 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800d91e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d920:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800d924:	4630      	mov	r0, r6
 800d926:	f005 fb25 	bl	8012f74 <ucdr_serialize_sequence_uint8_t>
 800d92a:	4005      	ands	r5, r0
 800d92c:	4628      	mov	r0, r5
 800d92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d932:	2500      	movs	r5, #0
 800d934:	e77e      	b.n	800d834 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800d936:	4028      	ands	r0, r5
 800d938:	b2c5      	uxtb	r5, r0
 800d93a:	e77b      	b.n	800d834 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800d93c <uxr_serialize_OBJK_Publisher_Binary>:
 800d93c:	b570      	push	{r4, r5, r6, lr}
 800d93e:	460d      	mov	r5, r1
 800d940:	7809      	ldrb	r1, [r1, #0]
 800d942:	4606      	mov	r6, r0
 800d944:	f7fa fe44 	bl	80085d0 <ucdr_serialize_bool>
 800d948:	782b      	ldrb	r3, [r5, #0]
 800d94a:	4604      	mov	r4, r0
 800d94c:	b94b      	cbnz	r3, 800d962 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800d94e:	7a29      	ldrb	r1, [r5, #8]
 800d950:	4630      	mov	r0, r6
 800d952:	f7fa fe3d 	bl	80085d0 <ucdr_serialize_bool>
 800d956:	7a2b      	ldrb	r3, [r5, #8]
 800d958:	4004      	ands	r4, r0
 800d95a:	b2e4      	uxtb	r4, r4
 800d95c:	b943      	cbnz	r3, 800d970 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800d95e:	4620      	mov	r0, r4
 800d960:	bd70      	pop	{r4, r5, r6, pc}
 800d962:	6869      	ldr	r1, [r5, #4]
 800d964:	4630      	mov	r0, r6
 800d966:	f005 fb31 	bl	8012fcc <ucdr_serialize_string>
 800d96a:	4004      	ands	r4, r0
 800d96c:	b2e4      	uxtb	r4, r4
 800d96e:	e7ee      	b.n	800d94e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800d970:	f105 010c 	add.w	r1, r5, #12
 800d974:	4630      	mov	r0, r6
 800d976:	f7ff ff53 	bl	800d820 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800d97a:	4004      	ands	r4, r0
 800d97c:	4620      	mov	r0, r4
 800d97e:	bd70      	pop	{r4, r5, r6, pc}

0800d980 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800d980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d984:	460c      	mov	r4, r1
 800d986:	7809      	ldrb	r1, [r1, #0]
 800d988:	4606      	mov	r6, r0
 800d98a:	f7fa fe21 	bl	80085d0 <ucdr_serialize_bool>
 800d98e:	7823      	ldrb	r3, [r4, #0]
 800d990:	4605      	mov	r5, r0
 800d992:	b96b      	cbnz	r3, 800d9b0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800d994:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800d998:	4630      	mov	r0, r6
 800d99a:	f7fa fe19 	bl	80085d0 <ucdr_serialize_bool>
 800d99e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d9a2:	4005      	ands	r5, r0
 800d9a4:	b2ed      	uxtb	r5, r5
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d169      	bne.n	800da7e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800d9aa:	4628      	mov	r0, r5
 800d9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9b0:	6861      	ldr	r1, [r4, #4]
 800d9b2:	4630      	mov	r0, r6
 800d9b4:	f7fb f850 	bl	8008a58 <ucdr_serialize_uint32_t>
 800d9b8:	6863      	ldr	r3, [r4, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d06b      	beq.n	800da96 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	d067      	beq.n	800da92 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d9c2:	68a1      	ldr	r1, [r4, #8]
 800d9c4:	4630      	mov	r0, r6
 800d9c6:	f005 fb01 	bl	8012fcc <ucdr_serialize_string>
 800d9ca:	6863      	ldr	r3, [r4, #4]
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d953      	bls.n	800da78 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	d05e      	beq.n	800da92 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d9d4:	68e1      	ldr	r1, [r4, #12]
 800d9d6:	4630      	mov	r0, r6
 800d9d8:	f005 faf8 	bl	8012fcc <ucdr_serialize_string>
 800d9dc:	6863      	ldr	r3, [r4, #4]
 800d9de:	2b02      	cmp	r3, #2
 800d9e0:	d94a      	bls.n	800da78 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	d055      	beq.n	800da92 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d9e6:	6921      	ldr	r1, [r4, #16]
 800d9e8:	4630      	mov	r0, r6
 800d9ea:	f005 faef 	bl	8012fcc <ucdr_serialize_string>
 800d9ee:	6863      	ldr	r3, [r4, #4]
 800d9f0:	2b03      	cmp	r3, #3
 800d9f2:	d941      	bls.n	800da78 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d04c      	beq.n	800da92 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d9f8:	6961      	ldr	r1, [r4, #20]
 800d9fa:	4630      	mov	r0, r6
 800d9fc:	f005 fae6 	bl	8012fcc <ucdr_serialize_string>
 800da00:	6863      	ldr	r3, [r4, #4]
 800da02:	2b04      	cmp	r3, #4
 800da04:	d938      	bls.n	800da78 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800da06:	2800      	cmp	r0, #0
 800da08:	d043      	beq.n	800da92 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800da0a:	69a1      	ldr	r1, [r4, #24]
 800da0c:	4630      	mov	r0, r6
 800da0e:	f005 fadd 	bl	8012fcc <ucdr_serialize_string>
 800da12:	6863      	ldr	r3, [r4, #4]
 800da14:	2b05      	cmp	r3, #5
 800da16:	d92f      	bls.n	800da78 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800da18:	2800      	cmp	r0, #0
 800da1a:	d03a      	beq.n	800da92 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800da1c:	69e1      	ldr	r1, [r4, #28]
 800da1e:	4630      	mov	r0, r6
 800da20:	f005 fad4 	bl	8012fcc <ucdr_serialize_string>
 800da24:	6863      	ldr	r3, [r4, #4]
 800da26:	2b06      	cmp	r3, #6
 800da28:	d926      	bls.n	800da78 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800da2a:	b390      	cbz	r0, 800da92 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800da2c:	6a21      	ldr	r1, [r4, #32]
 800da2e:	4630      	mov	r0, r6
 800da30:	f005 facc 	bl	8012fcc <ucdr_serialize_string>
 800da34:	6863      	ldr	r3, [r4, #4]
 800da36:	2b07      	cmp	r3, #7
 800da38:	d91e      	bls.n	800da78 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800da3a:	b350      	cbz	r0, 800da92 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800da3c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800da3e:	4630      	mov	r0, r6
 800da40:	f005 fac4 	bl	8012fcc <ucdr_serialize_string>
 800da44:	6863      	ldr	r3, [r4, #4]
 800da46:	2b08      	cmp	r3, #8
 800da48:	d916      	bls.n	800da78 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800da4a:	b310      	cbz	r0, 800da92 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800da4c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800da4e:	4630      	mov	r0, r6
 800da50:	f005 fabc 	bl	8012fcc <ucdr_serialize_string>
 800da54:	6863      	ldr	r3, [r4, #4]
 800da56:	2b09      	cmp	r3, #9
 800da58:	d90e      	bls.n	800da78 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800da5a:	b1d0      	cbz	r0, 800da92 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800da5c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800da60:	2709      	movs	r7, #9
 800da62:	e000      	b.n	800da66 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800da64:	b1a8      	cbz	r0, 800da92 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800da66:	f858 1b04 	ldr.w	r1, [r8], #4
 800da6a:	4630      	mov	r0, r6
 800da6c:	f005 faae 	bl	8012fcc <ucdr_serialize_string>
 800da70:	6862      	ldr	r2, [r4, #4]
 800da72:	3701      	adds	r7, #1
 800da74:	4297      	cmp	r7, r2
 800da76:	d3f5      	bcc.n	800da64 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800da78:	4005      	ands	r5, r0
 800da7a:	b2ed      	uxtb	r5, r5
 800da7c:	e78a      	b.n	800d994 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800da7e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800da80:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800da84:	4630      	mov	r0, r6
 800da86:	f005 fa75 	bl	8012f74 <ucdr_serialize_sequence_uint8_t>
 800da8a:	4005      	ands	r5, r0
 800da8c:	4628      	mov	r0, r5
 800da8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da92:	2500      	movs	r5, #0
 800da94:	e77e      	b.n	800d994 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800da96:	4028      	ands	r0, r5
 800da98:	b2c5      	uxtb	r5, r0
 800da9a:	e77b      	b.n	800d994 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800da9c <uxr_serialize_OBJK_Subscriber_Binary>:
 800da9c:	b570      	push	{r4, r5, r6, lr}
 800da9e:	460d      	mov	r5, r1
 800daa0:	7809      	ldrb	r1, [r1, #0]
 800daa2:	4606      	mov	r6, r0
 800daa4:	f7fa fd94 	bl	80085d0 <ucdr_serialize_bool>
 800daa8:	782b      	ldrb	r3, [r5, #0]
 800daaa:	4604      	mov	r4, r0
 800daac:	b94b      	cbnz	r3, 800dac2 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800daae:	7a29      	ldrb	r1, [r5, #8]
 800dab0:	4630      	mov	r0, r6
 800dab2:	f7fa fd8d 	bl	80085d0 <ucdr_serialize_bool>
 800dab6:	7a2b      	ldrb	r3, [r5, #8]
 800dab8:	4004      	ands	r4, r0
 800daba:	b2e4      	uxtb	r4, r4
 800dabc:	b943      	cbnz	r3, 800dad0 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800dabe:	4620      	mov	r0, r4
 800dac0:	bd70      	pop	{r4, r5, r6, pc}
 800dac2:	6869      	ldr	r1, [r5, #4]
 800dac4:	4630      	mov	r0, r6
 800dac6:	f005 fa81 	bl	8012fcc <ucdr_serialize_string>
 800daca:	4004      	ands	r4, r0
 800dacc:	b2e4      	uxtb	r4, r4
 800dace:	e7ee      	b.n	800daae <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800dad0:	f105 010c 	add.w	r1, r5, #12
 800dad4:	4630      	mov	r0, r6
 800dad6:	f7ff ff53 	bl	800d980 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800dada:	4004      	ands	r4, r0
 800dadc:	4620      	mov	r0, r4
 800dade:	bd70      	pop	{r4, r5, r6, pc}

0800dae0 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800dae0:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800dae4:	4688      	mov	r8, r1
 800dae6:	8809      	ldrh	r1, [r1, #0]
 800dae8:	4681      	mov	r9, r0
 800daea:	f7fa fdcb 	bl	8008684 <ucdr_serialize_uint16_t>
 800daee:	f898 1002 	ldrb.w	r1, [r8, #2]
 800daf2:	4606      	mov	r6, r0
 800daf4:	4648      	mov	r0, r9
 800daf6:	f7fa fd6b 	bl	80085d0 <ucdr_serialize_bool>
 800dafa:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dafe:	4006      	ands	r6, r0
 800db00:	b2f5      	uxtb	r5, r6
 800db02:	b9eb      	cbnz	r3, 800db40 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800db04:	f898 1006 	ldrb.w	r1, [r8, #6]
 800db08:	4648      	mov	r0, r9
 800db0a:	f7fa fd61 	bl	80085d0 <ucdr_serialize_bool>
 800db0e:	f898 3006 	ldrb.w	r3, [r8, #6]
 800db12:	4005      	ands	r5, r0
 800db14:	bb7b      	cbnz	r3, 800db76 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800db16:	f898 100c 	ldrb.w	r1, [r8, #12]
 800db1a:	4648      	mov	r0, r9
 800db1c:	f7fa fd58 	bl	80085d0 <ucdr_serialize_bool>
 800db20:	f898 300c 	ldrb.w	r3, [r8, #12]
 800db24:	4005      	ands	r5, r0
 800db26:	b9f3      	cbnz	r3, 800db66 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800db28:	f898 1014 	ldrb.w	r1, [r8, #20]
 800db2c:	4648      	mov	r0, r9
 800db2e:	f7fa fd4f 	bl	80085d0 <ucdr_serialize_bool>
 800db32:	f898 3014 	ldrb.w	r3, [r8, #20]
 800db36:	4005      	ands	r5, r0
 800db38:	b94b      	cbnz	r3, 800db4e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800db3a:	4628      	mov	r0, r5
 800db3c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800db40:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800db44:	4648      	mov	r0, r9
 800db46:	f7fa fd9d 	bl	8008684 <ucdr_serialize_uint16_t>
 800db4a:	4005      	ands	r5, r0
 800db4c:	e7da      	b.n	800db04 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800db4e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800db52:	f108 011c 	add.w	r1, r8, #28
 800db56:	4648      	mov	r0, r9
 800db58:	f005 fa0c 	bl	8012f74 <ucdr_serialize_sequence_uint8_t>
 800db5c:	4028      	ands	r0, r5
 800db5e:	b2c5      	uxtb	r5, r0
 800db60:	4628      	mov	r0, r5
 800db62:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800db66:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800db6a:	4648      	mov	r0, r9
 800db6c:	f7fa ff74 	bl	8008a58 <ucdr_serialize_uint32_t>
 800db70:	4028      	ands	r0, r5
 800db72:	b2c5      	uxtb	r5, r0
 800db74:	e7d8      	b.n	800db28 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800db76:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800db7a:	4648      	mov	r0, r9
 800db7c:	f7fa ff6c 	bl	8008a58 <ucdr_serialize_uint32_t>
 800db80:	4028      	ands	r0, r5
 800db82:	b2c5      	uxtb	r5, r0
 800db84:	e7c7      	b.n	800db16 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800db86:	bf00      	nop

0800db88 <uxr_serialize_OBJK_DataReader_Binary>:
 800db88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db8a:	2202      	movs	r2, #2
 800db8c:	460c      	mov	r4, r1
 800db8e:	4606      	mov	r6, r0
 800db90:	f005 f8fc 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800db94:	78a1      	ldrb	r1, [r4, #2]
 800db96:	4605      	mov	r5, r0
 800db98:	4630      	mov	r0, r6
 800db9a:	f7fa fd19 	bl	80085d0 <ucdr_serialize_bool>
 800db9e:	78a3      	ldrb	r3, [r4, #2]
 800dba0:	4005      	ands	r5, r0
 800dba2:	b2ed      	uxtb	r5, r5
 800dba4:	b90b      	cbnz	r3, 800dbaa <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800dba6:	4628      	mov	r0, r5
 800dba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbaa:	f104 0108 	add.w	r1, r4, #8
 800dbae:	4630      	mov	r0, r6
 800dbb0:	f7ff ff96 	bl	800dae0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800dbb4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800dbb8:	4607      	mov	r7, r0
 800dbba:	4630      	mov	r0, r6
 800dbbc:	f7fa fd08 	bl	80085d0 <ucdr_serialize_bool>
 800dbc0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800dbc4:	4038      	ands	r0, r7
 800dbc6:	b2c7      	uxtb	r7, r0
 800dbc8:	b95b      	cbnz	r3, 800dbe2 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800dbca:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800dbce:	4630      	mov	r0, r6
 800dbd0:	f7fa fcfe 	bl	80085d0 <ucdr_serialize_bool>
 800dbd4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800dbd8:	4007      	ands	r7, r0
 800dbda:	b94b      	cbnz	r3, 800dbf0 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800dbdc:	403d      	ands	r5, r7
 800dbde:	4628      	mov	r0, r5
 800dbe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbe2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800dbe6:	4630      	mov	r0, r6
 800dbe8:	f7fb f98c 	bl	8008f04 <ucdr_serialize_uint64_t>
 800dbec:	4007      	ands	r7, r0
 800dbee:	e7ec      	b.n	800dbca <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800dbf0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	f005 f9ea 	bl	8012fcc <ucdr_serialize_string>
 800dbf8:	4007      	ands	r7, r0
 800dbfa:	b2ff      	uxtb	r7, r7
 800dbfc:	e7ee      	b.n	800dbdc <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800dbfe:	bf00      	nop

0800dc00 <uxr_serialize_OBJK_DataWriter_Binary>:
 800dc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc02:	2202      	movs	r2, #2
 800dc04:	460d      	mov	r5, r1
 800dc06:	4606      	mov	r6, r0
 800dc08:	f005 f8c0 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800dc0c:	78a9      	ldrb	r1, [r5, #2]
 800dc0e:	4604      	mov	r4, r0
 800dc10:	4630      	mov	r0, r6
 800dc12:	f7fa fcdd 	bl	80085d0 <ucdr_serialize_bool>
 800dc16:	78ab      	ldrb	r3, [r5, #2]
 800dc18:	4004      	ands	r4, r0
 800dc1a:	b2e4      	uxtb	r4, r4
 800dc1c:	b90b      	cbnz	r3, 800dc22 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800dc1e:	4620      	mov	r0, r4
 800dc20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc22:	f105 0108 	add.w	r1, r5, #8
 800dc26:	4630      	mov	r0, r6
 800dc28:	f7ff ff5a 	bl	800dae0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800dc2c:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800dc30:	4607      	mov	r7, r0
 800dc32:	4630      	mov	r0, r6
 800dc34:	f7fa fccc 	bl	80085d0 <ucdr_serialize_bool>
 800dc38:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800dc3c:	4038      	ands	r0, r7
 800dc3e:	b2c7      	uxtb	r7, r0
 800dc40:	b913      	cbnz	r3, 800dc48 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800dc42:	403c      	ands	r4, r7
 800dc44:	4620      	mov	r0, r4
 800dc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc48:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	f7fb f959 	bl	8008f04 <ucdr_serialize_uint64_t>
 800dc52:	4007      	ands	r7, r0
 800dc54:	e7f5      	b.n	800dc42 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800dc56:	bf00      	nop

0800dc58 <uxr_deserialize_ObjectVariant>:
 800dc58:	b570      	push	{r4, r5, r6, lr}
 800dc5a:	4605      	mov	r5, r0
 800dc5c:	460e      	mov	r6, r1
 800dc5e:	f7fa fcfb 	bl	8008658 <ucdr_deserialize_uint8_t>
 800dc62:	b168      	cbz	r0, 800dc80 <uxr_deserialize_ObjectVariant+0x28>
 800dc64:	7833      	ldrb	r3, [r6, #0]
 800dc66:	3b01      	subs	r3, #1
 800dc68:	4604      	mov	r4, r0
 800dc6a:	2b0d      	cmp	r3, #13
 800dc6c:	d809      	bhi.n	800dc82 <uxr_deserialize_ObjectVariant+0x2a>
 800dc6e:	e8df f003 	tbb	[pc, r3]
 800dc72:	0a41      	.short	0x0a41
 800dc74:	0a0a2323 	.word	0x0a0a2323
 800dc78:	10080a0a 	.word	0x10080a0a
 800dc7c:	565c1010 	.word	0x565c1010
 800dc80:	2400      	movs	r4, #0
 800dc82:	4620      	mov	r0, r4
 800dc84:	bd70      	pop	{r4, r5, r6, pc}
 800dc86:	1d31      	adds	r1, r6, #4
 800dc88:	4628      	mov	r0, r5
 800dc8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc8e:	f7ff bd55 	b.w	800d73c <uxr_deserialize_DATAWRITER_Representation>
 800dc92:	1d31      	adds	r1, r6, #4
 800dc94:	4628      	mov	r0, r5
 800dc96:	f7fa fcdf 	bl	8008658 <ucdr_deserialize_uint8_t>
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	d0f0      	beq.n	800dc80 <uxr_deserialize_ObjectVariant+0x28>
 800dc9e:	7933      	ldrb	r3, [r6, #4]
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d001      	beq.n	800dca8 <uxr_deserialize_ObjectVariant+0x50>
 800dca4:	2b02      	cmp	r3, #2
 800dca6:	d1ec      	bne.n	800dc82 <uxr_deserialize_ObjectVariant+0x2a>
 800dca8:	68b1      	ldr	r1, [r6, #8]
 800dcaa:	4628      	mov	r0, r5
 800dcac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dcb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcb4:	f005 b99a 	b.w	8012fec <ucdr_deserialize_string>
 800dcb8:	1d31      	adds	r1, r6, #4
 800dcba:	4628      	mov	r0, r5
 800dcbc:	f7fa fccc 	bl	8008658 <ucdr_deserialize_uint8_t>
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	b170      	cbz	r0, 800dce2 <uxr_deserialize_ObjectVariant+0x8a>
 800dcc4:	7933      	ldrb	r3, [r6, #4]
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	d04c      	beq.n	800dd64 <uxr_deserialize_ObjectVariant+0x10c>
 800dcca:	2b03      	cmp	r3, #3
 800dccc:	d109      	bne.n	800dce2 <uxr_deserialize_ObjectVariant+0x8a>
 800dcce:	f106 0308 	add.w	r3, r6, #8
 800dcd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dcd6:	f106 010c 	add.w	r1, r6, #12
 800dcda:	4628      	mov	r0, r5
 800dcdc:	f005 f95c 	bl	8012f98 <ucdr_deserialize_sequence_uint8_t>
 800dce0:	4604      	mov	r4, r0
 800dce2:	2202      	movs	r2, #2
 800dce4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800dce8:	4628      	mov	r0, r5
 800dcea:	f005 f8b3 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800dcee:	4020      	ands	r0, r4
 800dcf0:	b2c4      	uxtb	r4, r0
 800dcf2:	e7c6      	b.n	800dc82 <uxr_deserialize_ObjectVariant+0x2a>
 800dcf4:	1d31      	adds	r1, r6, #4
 800dcf6:	4628      	mov	r0, r5
 800dcf8:	f7fa fcae 	bl	8008658 <ucdr_deserialize_uint8_t>
 800dcfc:	4604      	mov	r4, r0
 800dcfe:	b130      	cbz	r0, 800dd0e <uxr_deserialize_ObjectVariant+0xb6>
 800dd00:	7933      	ldrb	r3, [r6, #4]
 800dd02:	2b02      	cmp	r3, #2
 800dd04:	d036      	beq.n	800dd74 <uxr_deserialize_ObjectVariant+0x11c>
 800dd06:	2b03      	cmp	r3, #3
 800dd08:	d03c      	beq.n	800dd84 <uxr_deserialize_ObjectVariant+0x12c>
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d032      	beq.n	800dd74 <uxr_deserialize_ObjectVariant+0x11c>
 800dd0e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800dd12:	4628      	mov	r0, r5
 800dd14:	f7fb fa46 	bl	80091a4 <ucdr_deserialize_int16_t>
 800dd18:	4020      	ands	r0, r4
 800dd1a:	b2c4      	uxtb	r4, r0
 800dd1c:	e7b1      	b.n	800dc82 <uxr_deserialize_ObjectVariant+0x2a>
 800dd1e:	1d31      	adds	r1, r6, #4
 800dd20:	4628      	mov	r0, r5
 800dd22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd26:	f7ff bbbf 	b.w	800d4a8 <uxr_deserialize_CLIENT_Representation>
 800dd2a:	2204      	movs	r2, #4
 800dd2c:	18b1      	adds	r1, r6, r2
 800dd2e:	4628      	mov	r0, r5
 800dd30:	f005 f890 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800dd34:	2202      	movs	r2, #2
 800dd36:	f106 0108 	add.w	r1, r6, #8
 800dd3a:	4604      	mov	r4, r0
 800dd3c:	4628      	mov	r0, r5
 800dd3e:	f005 f889 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800dd42:	2202      	movs	r2, #2
 800dd44:	4004      	ands	r4, r0
 800dd46:	f106 010a 	add.w	r1, r6, #10
 800dd4a:	4628      	mov	r0, r5
 800dd4c:	f005 f882 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800dd50:	b2e4      	uxtb	r4, r4
 800dd52:	4603      	mov	r3, r0
 800dd54:	f106 010c 	add.w	r1, r6, #12
 800dd58:	4628      	mov	r0, r5
 800dd5a:	401c      	ands	r4, r3
 800dd5c:	f7fa fc4e 	bl	80085fc <ucdr_deserialize_bool>
 800dd60:	4004      	ands	r4, r0
 800dd62:	e78e      	b.n	800dc82 <uxr_deserialize_ObjectVariant+0x2a>
 800dd64:	68b1      	ldr	r1, [r6, #8]
 800dd66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	f005 f93e 	bl	8012fec <ucdr_deserialize_string>
 800dd70:	4604      	mov	r4, r0
 800dd72:	e7b6      	b.n	800dce2 <uxr_deserialize_ObjectVariant+0x8a>
 800dd74:	68b1      	ldr	r1, [r6, #8]
 800dd76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd7a:	4628      	mov	r0, r5
 800dd7c:	f005 f936 	bl	8012fec <ucdr_deserialize_string>
 800dd80:	4604      	mov	r4, r0
 800dd82:	e7c4      	b.n	800dd0e <uxr_deserialize_ObjectVariant+0xb6>
 800dd84:	f106 0308 	add.w	r3, r6, #8
 800dd88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd8c:	f106 010c 	add.w	r1, r6, #12
 800dd90:	4628      	mov	r0, r5
 800dd92:	f005 f901 	bl	8012f98 <ucdr_deserialize_sequence_uint8_t>
 800dd96:	4604      	mov	r4, r0
 800dd98:	e7b9      	b.n	800dd0e <uxr_deserialize_ObjectVariant+0xb6>
 800dd9a:	bf00      	nop

0800dd9c <uxr_deserialize_BaseObjectRequest>:
 800dd9c:	b570      	push	{r4, r5, r6, lr}
 800dd9e:	2202      	movs	r2, #2
 800dda0:	4605      	mov	r5, r0
 800dda2:	460e      	mov	r6, r1
 800dda4:	f005 f856 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800dda8:	2202      	movs	r2, #2
 800ddaa:	4604      	mov	r4, r0
 800ddac:	18b1      	adds	r1, r6, r2
 800ddae:	4628      	mov	r0, r5
 800ddb0:	f005 f850 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800ddb4:	4020      	ands	r0, r4
 800ddb6:	b2c0      	uxtb	r0, r0
 800ddb8:	bd70      	pop	{r4, r5, r6, pc}
 800ddba:	bf00      	nop

0800ddbc <uxr_serialize_ActivityInfoVariant>:
 800ddbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddc0:	460d      	mov	r5, r1
 800ddc2:	7809      	ldrb	r1, [r1, #0]
 800ddc4:	4607      	mov	r7, r0
 800ddc6:	f7fa fc31 	bl	800862c <ucdr_serialize_uint8_t>
 800ddca:	4681      	mov	r9, r0
 800ddcc:	b138      	cbz	r0, 800ddde <uxr_serialize_ActivityInfoVariant+0x22>
 800ddce:	782b      	ldrb	r3, [r5, #0]
 800ddd0:	2b06      	cmp	r3, #6
 800ddd2:	f000 8082 	beq.w	800deda <uxr_serialize_ActivityInfoVariant+0x11e>
 800ddd6:	2b0d      	cmp	r3, #13
 800ddd8:	d016      	beq.n	800de08 <uxr_serialize_ActivityInfoVariant+0x4c>
 800ddda:	2b05      	cmp	r3, #5
 800dddc:	d002      	beq.n	800dde4 <uxr_serialize_ActivityInfoVariant+0x28>
 800ddde:	4648      	mov	r0, r9
 800dde0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dde4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800dde8:	4638      	mov	r0, r7
 800ddea:	f7fb f95b 	bl	80090a4 <ucdr_serialize_int16_t>
 800ddee:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800ddf2:	4681      	mov	r9, r0
 800ddf4:	4638      	mov	r0, r7
 800ddf6:	f7fb f885 	bl	8008f04 <ucdr_serialize_uint64_t>
 800ddfa:	ea09 0000 	and.w	r0, r9, r0
 800ddfe:	fa5f f980 	uxtb.w	r9, r0
 800de02:	4648      	mov	r0, r9
 800de04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de08:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800de0c:	4638      	mov	r0, r7
 800de0e:	f7fb f949 	bl	80090a4 <ucdr_serialize_int16_t>
 800de12:	68e9      	ldr	r1, [r5, #12]
 800de14:	4681      	mov	r9, r0
 800de16:	4638      	mov	r0, r7
 800de18:	f7fa fe1e 	bl	8008a58 <ucdr_serialize_uint32_t>
 800de1c:	68eb      	ldr	r3, [r5, #12]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d0eb      	beq.n	800ddfa <uxr_serialize_ActivityInfoVariant+0x3e>
 800de22:	b320      	cbz	r0, 800de6e <uxr_serialize_ActivityInfoVariant+0xb2>
 800de24:	f105 080c 	add.w	r8, r5, #12
 800de28:	2600      	movs	r6, #0
 800de2a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800de2e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800de32:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800de36:	4638      	mov	r0, r7
 800de38:	f7fa fbf8 	bl	800862c <ucdr_serialize_uint8_t>
 800de3c:	2800      	cmp	r0, #0
 800de3e:	d053      	beq.n	800dee8 <uxr_serialize_ActivityInfoVariant+0x12c>
 800de40:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800de44:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800de48:	0074      	lsls	r4, r6, #1
 800de4a:	00c9      	lsls	r1, r1, #3
 800de4c:	2b03      	cmp	r3, #3
 800de4e:	d854      	bhi.n	800defa <uxr_serialize_ActivityInfoVariant+0x13e>
 800de50:	e8df f003 	tbb	[pc, r3]
 800de54:	02102132 	.word	0x02102132
 800de58:	4441      	add	r1, r8
 800de5a:	4638      	mov	r0, r7
 800de5c:	6889      	ldr	r1, [r1, #8]
 800de5e:	f005 f8b5 	bl	8012fcc <ucdr_serialize_string>
 800de62:	68ea      	ldr	r2, [r5, #12]
 800de64:	3601      	adds	r6, #1
 800de66:	4296      	cmp	r6, r2
 800de68:	d242      	bcs.n	800def0 <uxr_serialize_ActivityInfoVariant+0x134>
 800de6a:	2800      	cmp	r0, #0
 800de6c:	d1dd      	bne.n	800de2a <uxr_serialize_ActivityInfoVariant+0x6e>
 800de6e:	f04f 0900 	mov.w	r9, #0
 800de72:	e7b4      	b.n	800ddde <uxr_serialize_ActivityInfoVariant+0x22>
 800de74:	3108      	adds	r1, #8
 800de76:	4441      	add	r1, r8
 800de78:	2210      	movs	r2, #16
 800de7a:	4638      	mov	r0, r7
 800de7c:	f004 ff86 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800de80:	4434      	add	r4, r6
 800de82:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800de86:	4604      	mov	r4, r0
 800de88:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800de8a:	4638      	mov	r0, r7
 800de8c:	f7fa fde4 	bl	8008a58 <ucdr_serialize_uint32_t>
 800de90:	4020      	ands	r0, r4
 800de92:	b2c0      	uxtb	r0, r0
 800de94:	e7e5      	b.n	800de62 <uxr_serialize_ActivityInfoVariant+0xa6>
 800de96:	3108      	adds	r1, #8
 800de98:	4441      	add	r1, r8
 800de9a:	2204      	movs	r2, #4
 800de9c:	4638      	mov	r0, r7
 800de9e:	f004 ff75 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800dea2:	4434      	add	r4, r6
 800dea4:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800dea8:	4604      	mov	r4, r0
 800deaa:	8b19      	ldrh	r1, [r3, #24]
 800deac:	4638      	mov	r0, r7
 800deae:	f7fa fbe9 	bl	8008684 <ucdr_serialize_uint16_t>
 800deb2:	4020      	ands	r0, r4
 800deb4:	b2c0      	uxtb	r0, r0
 800deb6:	e7d4      	b.n	800de62 <uxr_serialize_ActivityInfoVariant+0xa6>
 800deb8:	3108      	adds	r1, #8
 800deba:	4441      	add	r1, r8
 800debc:	2202      	movs	r2, #2
 800debe:	4638      	mov	r0, r7
 800dec0:	f004 ff64 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800dec4:	4434      	add	r4, r6
 800dec6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800deca:	4604      	mov	r4, r0
 800decc:	7d99      	ldrb	r1, [r3, #22]
 800dece:	4638      	mov	r0, r7
 800ded0:	f7fa fbac 	bl	800862c <ucdr_serialize_uint8_t>
 800ded4:	4020      	ands	r0, r4
 800ded6:	b2c0      	uxtb	r0, r0
 800ded8:	e7c3      	b.n	800de62 <uxr_serialize_ActivityInfoVariant+0xa6>
 800deda:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800dede:	4638      	mov	r0, r7
 800dee0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dee4:	f7fb b8de 	b.w	80090a4 <ucdr_serialize_int16_t>
 800dee8:	68ea      	ldr	r2, [r5, #12]
 800deea:	3601      	adds	r6, #1
 800deec:	42b2      	cmp	r2, r6
 800deee:	d8be      	bhi.n	800de6e <uxr_serialize_ActivityInfoVariant+0xb2>
 800def0:	ea09 0900 	and.w	r9, r9, r0
 800def4:	fa5f f989 	uxtb.w	r9, r9
 800def8:	e771      	b.n	800ddde <uxr_serialize_ActivityInfoVariant+0x22>
 800defa:	68eb      	ldr	r3, [r5, #12]
 800defc:	3601      	adds	r6, #1
 800defe:	429e      	cmp	r6, r3
 800df00:	f10a 0a18 	add.w	sl, sl, #24
 800df04:	d395      	bcc.n	800de32 <uxr_serialize_ActivityInfoVariant+0x76>
 800df06:	e76a      	b.n	800ddde <uxr_serialize_ActivityInfoVariant+0x22>

0800df08 <uxr_deserialize_BaseObjectReply>:
 800df08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df0c:	2202      	movs	r2, #2
 800df0e:	4606      	mov	r6, r0
 800df10:	460f      	mov	r7, r1
 800df12:	f004 ff9f 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800df16:	2202      	movs	r2, #2
 800df18:	18b9      	adds	r1, r7, r2
 800df1a:	4605      	mov	r5, r0
 800df1c:	4630      	mov	r0, r6
 800df1e:	f004 ff99 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800df22:	1d39      	adds	r1, r7, #4
 800df24:	4680      	mov	r8, r0
 800df26:	4630      	mov	r0, r6
 800df28:	f7fa fb96 	bl	8008658 <ucdr_deserialize_uint8_t>
 800df2c:	1d79      	adds	r1, r7, #5
 800df2e:	4604      	mov	r4, r0
 800df30:	4630      	mov	r0, r6
 800df32:	f7fa fb91 	bl	8008658 <ucdr_deserialize_uint8_t>
 800df36:	ea05 0508 	and.w	r5, r5, r8
 800df3a:	402c      	ands	r4, r5
 800df3c:	4020      	ands	r0, r4
 800df3e:	b2c0      	uxtb	r0, r0
 800df40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800df44 <uxr_serialize_ReadSpecification>:
 800df44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df48:	460e      	mov	r6, r1
 800df4a:	7809      	ldrb	r1, [r1, #0]
 800df4c:	4607      	mov	r7, r0
 800df4e:	f7fa fb6d 	bl	800862c <ucdr_serialize_uint8_t>
 800df52:	7871      	ldrb	r1, [r6, #1]
 800df54:	4604      	mov	r4, r0
 800df56:	4638      	mov	r0, r7
 800df58:	f7fa fb68 	bl	800862c <ucdr_serialize_uint8_t>
 800df5c:	78b1      	ldrb	r1, [r6, #2]
 800df5e:	4004      	ands	r4, r0
 800df60:	4638      	mov	r0, r7
 800df62:	f7fa fb35 	bl	80085d0 <ucdr_serialize_bool>
 800df66:	78b3      	ldrb	r3, [r6, #2]
 800df68:	b2e4      	uxtb	r4, r4
 800df6a:	4004      	ands	r4, r0
 800df6c:	b94b      	cbnz	r3, 800df82 <uxr_serialize_ReadSpecification+0x3e>
 800df6e:	7a31      	ldrb	r1, [r6, #8]
 800df70:	4638      	mov	r0, r7
 800df72:	f7fa fb2d 	bl	80085d0 <ucdr_serialize_bool>
 800df76:	7a33      	ldrb	r3, [r6, #8]
 800df78:	4004      	ands	r4, r0
 800df7a:	b943      	cbnz	r3, 800df8e <uxr_serialize_ReadSpecification+0x4a>
 800df7c:	4620      	mov	r0, r4
 800df7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df82:	6871      	ldr	r1, [r6, #4]
 800df84:	4638      	mov	r0, r7
 800df86:	f005 f821 	bl	8012fcc <ucdr_serialize_string>
 800df8a:	4004      	ands	r4, r0
 800df8c:	e7ef      	b.n	800df6e <uxr_serialize_ReadSpecification+0x2a>
 800df8e:	8971      	ldrh	r1, [r6, #10]
 800df90:	4638      	mov	r0, r7
 800df92:	f7fa fb77 	bl	8008684 <ucdr_serialize_uint16_t>
 800df96:	89b1      	ldrh	r1, [r6, #12]
 800df98:	4605      	mov	r5, r0
 800df9a:	4638      	mov	r0, r7
 800df9c:	f7fa fb72 	bl	8008684 <ucdr_serialize_uint16_t>
 800dfa0:	89f1      	ldrh	r1, [r6, #14]
 800dfa2:	4005      	ands	r5, r0
 800dfa4:	4638      	mov	r0, r7
 800dfa6:	f7fa fb6d 	bl	8008684 <ucdr_serialize_uint16_t>
 800dfaa:	8a31      	ldrh	r1, [r6, #16]
 800dfac:	4680      	mov	r8, r0
 800dfae:	4638      	mov	r0, r7
 800dfb0:	f7fa fb68 	bl	8008684 <ucdr_serialize_uint16_t>
 800dfb4:	b2ed      	uxtb	r5, r5
 800dfb6:	4025      	ands	r5, r4
 800dfb8:	ea08 0505 	and.w	r5, r8, r5
 800dfbc:	ea00 0405 	and.w	r4, r0, r5
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfc6:	bf00      	nop

0800dfc8 <uxr_serialize_CREATE_CLIENT_Payload>:
 800dfc8:	f7ff ba16 	b.w	800d3f8 <uxr_serialize_CLIENT_Representation>

0800dfcc <uxr_serialize_CREATE_Payload>:
 800dfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfce:	2202      	movs	r2, #2
 800dfd0:	4607      	mov	r7, r0
 800dfd2:	460e      	mov	r6, r1
 800dfd4:	f004 feda 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800dfd8:	2202      	movs	r2, #2
 800dfda:	18b1      	adds	r1, r6, r2
 800dfdc:	4605      	mov	r5, r0
 800dfde:	4638      	mov	r0, r7
 800dfe0:	f004 fed4 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800dfe4:	7931      	ldrb	r1, [r6, #4]
 800dfe6:	4604      	mov	r4, r0
 800dfe8:	4638      	mov	r0, r7
 800dfea:	f7fa fb1f 	bl	800862c <ucdr_serialize_uint8_t>
 800dfee:	b170      	cbz	r0, 800e00e <uxr_serialize_CREATE_Payload+0x42>
 800dff0:	7933      	ldrb	r3, [r6, #4]
 800dff2:	402c      	ands	r4, r5
 800dff4:	3b01      	subs	r3, #1
 800dff6:	b2e4      	uxtb	r4, r4
 800dff8:	2b0d      	cmp	r3, #13
 800dffa:	d809      	bhi.n	800e010 <uxr_serialize_CREATE_Payload+0x44>
 800dffc:	e8df f003 	tbb	[pc, r3]
 800e000:	23230a4c 	.word	0x23230a4c
 800e004:	0a0a0a0a 	.word	0x0a0a0a0a
 800e008:	12121208 	.word	0x12121208
 800e00c:	3e45      	.short	0x3e45
 800e00e:	2400      	movs	r4, #0
 800e010:	4620      	mov	r0, r4
 800e012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e014:	f106 0108 	add.w	r1, r6, #8
 800e018:	4638      	mov	r0, r7
 800e01a:	f7ff faf3 	bl	800d604 <uxr_serialize_DATAWRITER_Representation>
 800e01e:	4004      	ands	r4, r0
 800e020:	4620      	mov	r0, r4
 800e022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e024:	7a31      	ldrb	r1, [r6, #8]
 800e026:	4638      	mov	r0, r7
 800e028:	f7fa fb00 	bl	800862c <ucdr_serialize_uint8_t>
 800e02c:	2800      	cmp	r0, #0
 800e02e:	d0ee      	beq.n	800e00e <uxr_serialize_CREATE_Payload+0x42>
 800e030:	7a33      	ldrb	r3, [r6, #8]
 800e032:	2b01      	cmp	r3, #1
 800e034:	d001      	beq.n	800e03a <uxr_serialize_CREATE_Payload+0x6e>
 800e036:	2b02      	cmp	r3, #2
 800e038:	d1ea      	bne.n	800e010 <uxr_serialize_CREATE_Payload+0x44>
 800e03a:	68f1      	ldr	r1, [r6, #12]
 800e03c:	4638      	mov	r0, r7
 800e03e:	f004 ffc5 	bl	8012fcc <ucdr_serialize_string>
 800e042:	4004      	ands	r4, r0
 800e044:	e7e4      	b.n	800e010 <uxr_serialize_CREATE_Payload+0x44>
 800e046:	7a31      	ldrb	r1, [r6, #8]
 800e048:	4638      	mov	r0, r7
 800e04a:	f7fa faef 	bl	800862c <ucdr_serialize_uint8_t>
 800e04e:	4605      	mov	r5, r0
 800e050:	b158      	cbz	r0, 800e06a <uxr_serialize_CREATE_Payload+0x9e>
 800e052:	7a33      	ldrb	r3, [r6, #8]
 800e054:	2b02      	cmp	r3, #2
 800e056:	d034      	beq.n	800e0c2 <uxr_serialize_CREATE_Payload+0xf6>
 800e058:	2b03      	cmp	r3, #3
 800e05a:	d106      	bne.n	800e06a <uxr_serialize_CREATE_Payload+0x9e>
 800e05c:	68f2      	ldr	r2, [r6, #12]
 800e05e:	f106 0110 	add.w	r1, r6, #16
 800e062:	4638      	mov	r0, r7
 800e064:	f004 ff86 	bl	8012f74 <ucdr_serialize_sequence_uint8_t>
 800e068:	4605      	mov	r5, r0
 800e06a:	2202      	movs	r2, #2
 800e06c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800e070:	4638      	mov	r0, r7
 800e072:	f004 fe8b 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800e076:	4028      	ands	r0, r5
 800e078:	4004      	ands	r4, r0
 800e07a:	e7c9      	b.n	800e010 <uxr_serialize_CREATE_Payload+0x44>
 800e07c:	f106 0108 	add.w	r1, r6, #8
 800e080:	4638      	mov	r0, r7
 800e082:	f7ff f9b9 	bl	800d3f8 <uxr_serialize_CLIENT_Representation>
 800e086:	4004      	ands	r4, r0
 800e088:	e7c2      	b.n	800e010 <uxr_serialize_CREATE_Payload+0x44>
 800e08a:	f106 0108 	add.w	r1, r6, #8
 800e08e:	4638      	mov	r0, r7
 800e090:	f7ff fa6e 	bl	800d570 <uxr_serialize_AGENT_Representation>
 800e094:	4004      	ands	r4, r0
 800e096:	e7bb      	b.n	800e010 <uxr_serialize_CREATE_Payload+0x44>
 800e098:	7a31      	ldrb	r1, [r6, #8]
 800e09a:	4638      	mov	r0, r7
 800e09c:	f7fa fac6 	bl	800862c <ucdr_serialize_uint8_t>
 800e0a0:	4605      	mov	r5, r0
 800e0a2:	b130      	cbz	r0, 800e0b2 <uxr_serialize_CREATE_Payload+0xe6>
 800e0a4:	7a33      	ldrb	r3, [r6, #8]
 800e0a6:	2b02      	cmp	r3, #2
 800e0a8:	d011      	beq.n	800e0ce <uxr_serialize_CREATE_Payload+0x102>
 800e0aa:	2b03      	cmp	r3, #3
 800e0ac:	d015      	beq.n	800e0da <uxr_serialize_CREATE_Payload+0x10e>
 800e0ae:	2b01      	cmp	r3, #1
 800e0b0:	d00d      	beq.n	800e0ce <uxr_serialize_CREATE_Payload+0x102>
 800e0b2:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800e0b6:	4638      	mov	r0, r7
 800e0b8:	f7fa fff4 	bl	80090a4 <ucdr_serialize_int16_t>
 800e0bc:	4028      	ands	r0, r5
 800e0be:	4004      	ands	r4, r0
 800e0c0:	e7a6      	b.n	800e010 <uxr_serialize_CREATE_Payload+0x44>
 800e0c2:	68f1      	ldr	r1, [r6, #12]
 800e0c4:	4638      	mov	r0, r7
 800e0c6:	f004 ff81 	bl	8012fcc <ucdr_serialize_string>
 800e0ca:	4605      	mov	r5, r0
 800e0cc:	e7cd      	b.n	800e06a <uxr_serialize_CREATE_Payload+0x9e>
 800e0ce:	68f1      	ldr	r1, [r6, #12]
 800e0d0:	4638      	mov	r0, r7
 800e0d2:	f004 ff7b 	bl	8012fcc <ucdr_serialize_string>
 800e0d6:	4605      	mov	r5, r0
 800e0d8:	e7eb      	b.n	800e0b2 <uxr_serialize_CREATE_Payload+0xe6>
 800e0da:	68f2      	ldr	r2, [r6, #12]
 800e0dc:	f106 0110 	add.w	r1, r6, #16
 800e0e0:	4638      	mov	r0, r7
 800e0e2:	f004 ff47 	bl	8012f74 <ucdr_serialize_sequence_uint8_t>
 800e0e6:	4605      	mov	r5, r0
 800e0e8:	e7e3      	b.n	800e0b2 <uxr_serialize_CREATE_Payload+0xe6>
 800e0ea:	bf00      	nop

0800e0ec <uxr_deserialize_GET_INFO_Payload>:
 800e0ec:	b570      	push	{r4, r5, r6, lr}
 800e0ee:	2202      	movs	r2, #2
 800e0f0:	4605      	mov	r5, r0
 800e0f2:	460e      	mov	r6, r1
 800e0f4:	f004 feae 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800e0f8:	2202      	movs	r2, #2
 800e0fa:	18b1      	adds	r1, r6, r2
 800e0fc:	4604      	mov	r4, r0
 800e0fe:	4628      	mov	r0, r5
 800e100:	f004 fea8 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800e104:	1d31      	adds	r1, r6, #4
 800e106:	4004      	ands	r4, r0
 800e108:	4628      	mov	r0, r5
 800e10a:	f7fa fdd5 	bl	8008cb8 <ucdr_deserialize_uint32_t>
 800e10e:	b2e4      	uxtb	r4, r4
 800e110:	4020      	ands	r0, r4
 800e112:	bd70      	pop	{r4, r5, r6, pc}

0800e114 <uxr_serialize_DELETE_Payload>:
 800e114:	b570      	push	{r4, r5, r6, lr}
 800e116:	2202      	movs	r2, #2
 800e118:	4605      	mov	r5, r0
 800e11a:	460e      	mov	r6, r1
 800e11c:	f004 fe36 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800e120:	2202      	movs	r2, #2
 800e122:	4604      	mov	r4, r0
 800e124:	18b1      	adds	r1, r6, r2
 800e126:	4628      	mov	r0, r5
 800e128:	f004 fe30 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800e12c:	4020      	ands	r0, r4
 800e12e:	b2c0      	uxtb	r0, r0
 800e130:	bd70      	pop	{r4, r5, r6, pc}
 800e132:	bf00      	nop

0800e134 <uxr_deserialize_STATUS_AGENT_Payload>:
 800e134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e138:	4605      	mov	r5, r0
 800e13a:	460e      	mov	r6, r1
 800e13c:	f7fa fa8c 	bl	8008658 <ucdr_deserialize_uint8_t>
 800e140:	1c71      	adds	r1, r6, #1
 800e142:	4604      	mov	r4, r0
 800e144:	4628      	mov	r0, r5
 800e146:	f7fa fa87 	bl	8008658 <ucdr_deserialize_uint8_t>
 800e14a:	2204      	movs	r2, #4
 800e14c:	18b1      	adds	r1, r6, r2
 800e14e:	4680      	mov	r8, r0
 800e150:	4628      	mov	r0, r5
 800e152:	f004 fe7f 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800e156:	f106 0108 	add.w	r1, r6, #8
 800e15a:	4607      	mov	r7, r0
 800e15c:	2202      	movs	r2, #2
 800e15e:	4628      	mov	r0, r5
 800e160:	f004 fe78 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800e164:	ea04 0308 	and.w	r3, r4, r8
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	ea03 0407 	and.w	r4, r3, r7
 800e16e:	2202      	movs	r2, #2
 800e170:	4607      	mov	r7, r0
 800e172:	f106 010a 	add.w	r1, r6, #10
 800e176:	4628      	mov	r0, r5
 800e178:	f004 fe6c 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800e17c:	f106 010c 	add.w	r1, r6, #12
 800e180:	4603      	mov	r3, r0
 800e182:	4628      	mov	r0, r5
 800e184:	461d      	mov	r5, r3
 800e186:	f7fa fa39 	bl	80085fc <ucdr_deserialize_bool>
 800e18a:	403c      	ands	r4, r7
 800e18c:	4025      	ands	r5, r4
 800e18e:	4028      	ands	r0, r5
 800e190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e194 <uxr_deserialize_STATUS_Payload>:
 800e194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e198:	2202      	movs	r2, #2
 800e19a:	4606      	mov	r6, r0
 800e19c:	460f      	mov	r7, r1
 800e19e:	f004 fe59 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800e1a2:	2202      	movs	r2, #2
 800e1a4:	18b9      	adds	r1, r7, r2
 800e1a6:	4605      	mov	r5, r0
 800e1a8:	4630      	mov	r0, r6
 800e1aa:	f004 fe53 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800e1ae:	1d39      	adds	r1, r7, #4
 800e1b0:	4680      	mov	r8, r0
 800e1b2:	4630      	mov	r0, r6
 800e1b4:	f7fa fa50 	bl	8008658 <ucdr_deserialize_uint8_t>
 800e1b8:	1d79      	adds	r1, r7, #5
 800e1ba:	4604      	mov	r4, r0
 800e1bc:	4630      	mov	r0, r6
 800e1be:	f7fa fa4b 	bl	8008658 <ucdr_deserialize_uint8_t>
 800e1c2:	ea05 0508 	and.w	r5, r5, r8
 800e1c6:	402c      	ands	r4, r5
 800e1c8:	4020      	ands	r0, r4
 800e1ca:	b2c0      	uxtb	r0, r0
 800e1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e1d0 <uxr_serialize_INFO_Payload>:
 800e1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1d4:	2202      	movs	r2, #2
 800e1d6:	460c      	mov	r4, r1
 800e1d8:	4605      	mov	r5, r0
 800e1da:	f004 fdd7 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800e1de:	2202      	movs	r2, #2
 800e1e0:	18a1      	adds	r1, r4, r2
 800e1e2:	4680      	mov	r8, r0
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	f004 fdd1 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800e1ea:	7921      	ldrb	r1, [r4, #4]
 800e1ec:	4607      	mov	r7, r0
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	f7fa fa1c 	bl	800862c <ucdr_serialize_uint8_t>
 800e1f4:	7961      	ldrb	r1, [r4, #5]
 800e1f6:	4606      	mov	r6, r0
 800e1f8:	4628      	mov	r0, r5
 800e1fa:	f7fa fa17 	bl	800862c <ucdr_serialize_uint8_t>
 800e1fe:	ea08 0807 	and.w	r8, r8, r7
 800e202:	ea06 0608 	and.w	r6, r6, r8
 800e206:	4006      	ands	r6, r0
 800e208:	7a21      	ldrb	r1, [r4, #8]
 800e20a:	4628      	mov	r0, r5
 800e20c:	f7fa f9e0 	bl	80085d0 <ucdr_serialize_bool>
 800e210:	7a23      	ldrb	r3, [r4, #8]
 800e212:	b2f7      	uxtb	r7, r6
 800e214:	4606      	mov	r6, r0
 800e216:	b96b      	cbnz	r3, 800e234 <uxr_serialize_INFO_Payload+0x64>
 800e218:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800e21c:	4628      	mov	r0, r5
 800e21e:	f7fa f9d7 	bl	80085d0 <ucdr_serialize_bool>
 800e222:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800e226:	4030      	ands	r0, r6
 800e228:	b2c6      	uxtb	r6, r0
 800e22a:	b983      	cbnz	r3, 800e24e <uxr_serialize_INFO_Payload+0x7e>
 800e22c:	ea06 0007 	and.w	r0, r6, r7
 800e230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e234:	7b21      	ldrb	r1, [r4, #12]
 800e236:	4628      	mov	r0, r5
 800e238:	f7fa f9f8 	bl	800862c <ucdr_serialize_uint8_t>
 800e23c:	b188      	cbz	r0, 800e262 <uxr_serialize_INFO_Payload+0x92>
 800e23e:	f104 010c 	add.w	r1, r4, #12
 800e242:	4628      	mov	r0, r5
 800e244:	f7ff fa06 	bl	800d654 <uxr_serialize_ObjectVariant.part.0>
 800e248:	4030      	ands	r0, r6
 800e24a:	b2c6      	uxtb	r6, r0
 800e24c:	e7e4      	b.n	800e218 <uxr_serialize_INFO_Payload+0x48>
 800e24e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800e252:	4628      	mov	r0, r5
 800e254:	f7ff fdb2 	bl	800ddbc <uxr_serialize_ActivityInfoVariant>
 800e258:	4006      	ands	r6, r0
 800e25a:	ea06 0007 	and.w	r0, r6, r7
 800e25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e262:	4606      	mov	r6, r0
 800e264:	e7d8      	b.n	800e218 <uxr_serialize_INFO_Payload+0x48>
 800e266:	bf00      	nop

0800e268 <uxr_serialize_READ_DATA_Payload>:
 800e268:	b570      	push	{r4, r5, r6, lr}
 800e26a:	2202      	movs	r2, #2
 800e26c:	4605      	mov	r5, r0
 800e26e:	460e      	mov	r6, r1
 800e270:	f004 fd8c 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800e274:	2202      	movs	r2, #2
 800e276:	18b1      	adds	r1, r6, r2
 800e278:	4604      	mov	r4, r0
 800e27a:	4628      	mov	r0, r5
 800e27c:	f004 fd86 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800e280:	1d31      	adds	r1, r6, #4
 800e282:	4004      	ands	r4, r0
 800e284:	4628      	mov	r0, r5
 800e286:	f7ff fe5d 	bl	800df44 <uxr_serialize_ReadSpecification>
 800e28a:	b2e4      	uxtb	r4, r4
 800e28c:	4020      	ands	r0, r4
 800e28e:	bd70      	pop	{r4, r5, r6, pc}

0800e290 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800e290:	b570      	push	{r4, r5, r6, lr}
 800e292:	2202      	movs	r2, #2
 800e294:	4605      	mov	r5, r0
 800e296:	460e      	mov	r6, r1
 800e298:	f004 fd78 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800e29c:	2202      	movs	r2, #2
 800e29e:	4604      	mov	r4, r0
 800e2a0:	18b1      	adds	r1, r6, r2
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	f004 fd72 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800e2a8:	4020      	ands	r0, r4
 800e2aa:	b2c0      	uxtb	r0, r0
 800e2ac:	bd70      	pop	{r4, r5, r6, pc}
 800e2ae:	bf00      	nop

0800e2b0 <uxr_serialize_ACKNACK_Payload>:
 800e2b0:	b570      	push	{r4, r5, r6, lr}
 800e2b2:	460c      	mov	r4, r1
 800e2b4:	460e      	mov	r6, r1
 800e2b6:	f834 1b02 	ldrh.w	r1, [r4], #2
 800e2ba:	4605      	mov	r5, r0
 800e2bc:	f7fa f9e2 	bl	8008684 <ucdr_serialize_uint16_t>
 800e2c0:	2202      	movs	r2, #2
 800e2c2:	4621      	mov	r1, r4
 800e2c4:	4604      	mov	r4, r0
 800e2c6:	4628      	mov	r0, r5
 800e2c8:	f004 fd60 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800e2cc:	7931      	ldrb	r1, [r6, #4]
 800e2ce:	4004      	ands	r4, r0
 800e2d0:	4628      	mov	r0, r5
 800e2d2:	f7fa f9ab 	bl	800862c <ucdr_serialize_uint8_t>
 800e2d6:	b2e4      	uxtb	r4, r4
 800e2d8:	4020      	ands	r0, r4
 800e2da:	bd70      	pop	{r4, r5, r6, pc}

0800e2dc <uxr_deserialize_ACKNACK_Payload>:
 800e2dc:	b570      	push	{r4, r5, r6, lr}
 800e2de:	4605      	mov	r5, r0
 800e2e0:	460e      	mov	r6, r1
 800e2e2:	f7fa facf 	bl	8008884 <ucdr_deserialize_uint16_t>
 800e2e6:	2202      	movs	r2, #2
 800e2e8:	18b1      	adds	r1, r6, r2
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	4628      	mov	r0, r5
 800e2ee:	f004 fdb1 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800e2f2:	1d31      	adds	r1, r6, #4
 800e2f4:	4004      	ands	r4, r0
 800e2f6:	4628      	mov	r0, r5
 800e2f8:	f7fa f9ae 	bl	8008658 <ucdr_deserialize_uint8_t>
 800e2fc:	b2e4      	uxtb	r4, r4
 800e2fe:	4020      	ands	r0, r4
 800e300:	bd70      	pop	{r4, r5, r6, pc}
 800e302:	bf00      	nop

0800e304 <uxr_serialize_HEARTBEAT_Payload>:
 800e304:	b570      	push	{r4, r5, r6, lr}
 800e306:	460d      	mov	r5, r1
 800e308:	8809      	ldrh	r1, [r1, #0]
 800e30a:	4606      	mov	r6, r0
 800e30c:	f7fa f9ba 	bl	8008684 <ucdr_serialize_uint16_t>
 800e310:	8869      	ldrh	r1, [r5, #2]
 800e312:	4604      	mov	r4, r0
 800e314:	4630      	mov	r0, r6
 800e316:	f7fa f9b5 	bl	8008684 <ucdr_serialize_uint16_t>
 800e31a:	7929      	ldrb	r1, [r5, #4]
 800e31c:	4004      	ands	r4, r0
 800e31e:	4630      	mov	r0, r6
 800e320:	f7fa f984 	bl	800862c <ucdr_serialize_uint8_t>
 800e324:	b2e4      	uxtb	r4, r4
 800e326:	4020      	ands	r0, r4
 800e328:	bd70      	pop	{r4, r5, r6, pc}
 800e32a:	bf00      	nop

0800e32c <uxr_deserialize_HEARTBEAT_Payload>:
 800e32c:	b570      	push	{r4, r5, r6, lr}
 800e32e:	4605      	mov	r5, r0
 800e330:	460e      	mov	r6, r1
 800e332:	f7fa faa7 	bl	8008884 <ucdr_deserialize_uint16_t>
 800e336:	1cb1      	adds	r1, r6, #2
 800e338:	4604      	mov	r4, r0
 800e33a:	4628      	mov	r0, r5
 800e33c:	f7fa faa2 	bl	8008884 <ucdr_deserialize_uint16_t>
 800e340:	1d31      	adds	r1, r6, #4
 800e342:	4004      	ands	r4, r0
 800e344:	4628      	mov	r0, r5
 800e346:	f7fa f987 	bl	8008658 <ucdr_deserialize_uint8_t>
 800e34a:	b2e4      	uxtb	r4, r4
 800e34c:	4020      	ands	r0, r4
 800e34e:	bd70      	pop	{r4, r5, r6, pc}

0800e350 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800e350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e354:	4605      	mov	r5, r0
 800e356:	460e      	mov	r6, r1
 800e358:	f7fb f830 	bl	80093bc <ucdr_deserialize_int32_t>
 800e35c:	1d31      	adds	r1, r6, #4
 800e35e:	4607      	mov	r7, r0
 800e360:	4628      	mov	r0, r5
 800e362:	f7fa fca9 	bl	8008cb8 <ucdr_deserialize_uint32_t>
 800e366:	f106 0108 	add.w	r1, r6, #8
 800e36a:	4680      	mov	r8, r0
 800e36c:	4628      	mov	r0, r5
 800e36e:	f7fb f825 	bl	80093bc <ucdr_deserialize_int32_t>
 800e372:	f106 010c 	add.w	r1, r6, #12
 800e376:	4604      	mov	r4, r0
 800e378:	4628      	mov	r0, r5
 800e37a:	f7fa fc9d 	bl	8008cb8 <ucdr_deserialize_uint32_t>
 800e37e:	ea07 0708 	and.w	r7, r7, r8
 800e382:	403c      	ands	r4, r7
 800e384:	f106 0110 	add.w	r1, r6, #16
 800e388:	4004      	ands	r4, r0
 800e38a:	4628      	mov	r0, r5
 800e38c:	f7fb f816 	bl	80093bc <ucdr_deserialize_int32_t>
 800e390:	f106 0114 	add.w	r1, r6, #20
 800e394:	4607      	mov	r7, r0
 800e396:	4628      	mov	r0, r5
 800e398:	f7fa fc8e 	bl	8008cb8 <ucdr_deserialize_uint32_t>
 800e39c:	b2e4      	uxtb	r4, r4
 800e39e:	403c      	ands	r4, r7
 800e3a0:	4020      	ands	r0, r4
 800e3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3a6:	bf00      	nop

0800e3a8 <uxr_serialize_SampleIdentity>:
 800e3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ac:	220c      	movs	r2, #12
 800e3ae:	4604      	mov	r4, r0
 800e3b0:	460d      	mov	r5, r1
 800e3b2:	f004 fceb 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800e3b6:	2203      	movs	r2, #3
 800e3b8:	f105 010c 	add.w	r1, r5, #12
 800e3bc:	4607      	mov	r7, r0
 800e3be:	4620      	mov	r0, r4
 800e3c0:	f004 fce4 	bl	8012d8c <ucdr_serialize_array_uint8_t>
 800e3c4:	7be9      	ldrb	r1, [r5, #15]
 800e3c6:	4680      	mov	r8, r0
 800e3c8:	4620      	mov	r0, r4
 800e3ca:	f7fa f92f 	bl	800862c <ucdr_serialize_uint8_t>
 800e3ce:	6929      	ldr	r1, [r5, #16]
 800e3d0:	4606      	mov	r6, r0
 800e3d2:	4620      	mov	r0, r4
 800e3d4:	f7fa ff5a 	bl	800928c <ucdr_serialize_int32_t>
 800e3d8:	6969      	ldr	r1, [r5, #20]
 800e3da:	4603      	mov	r3, r0
 800e3dc:	4620      	mov	r0, r4
 800e3de:	ea07 0708 	and.w	r7, r7, r8
 800e3e2:	461c      	mov	r4, r3
 800e3e4:	f7fa fb38 	bl	8008a58 <ucdr_serialize_uint32_t>
 800e3e8:	403e      	ands	r6, r7
 800e3ea:	4034      	ands	r4, r6
 800e3ec:	4020      	ands	r0, r4
 800e3ee:	b2c0      	uxtb	r0, r0
 800e3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e3f4 <uxr_deserialize_SampleIdentity>:
 800e3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f8:	220c      	movs	r2, #12
 800e3fa:	4604      	mov	r4, r0
 800e3fc:	460d      	mov	r5, r1
 800e3fe:	f004 fd29 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800e402:	2203      	movs	r2, #3
 800e404:	f105 010c 	add.w	r1, r5, #12
 800e408:	4607      	mov	r7, r0
 800e40a:	4620      	mov	r0, r4
 800e40c:	f004 fd22 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 800e410:	f105 010f 	add.w	r1, r5, #15
 800e414:	4680      	mov	r8, r0
 800e416:	4620      	mov	r0, r4
 800e418:	f7fa f91e 	bl	8008658 <ucdr_deserialize_uint8_t>
 800e41c:	f105 0110 	add.w	r1, r5, #16
 800e420:	4606      	mov	r6, r0
 800e422:	4620      	mov	r0, r4
 800e424:	f7fa ffca 	bl	80093bc <ucdr_deserialize_int32_t>
 800e428:	f105 0114 	add.w	r1, r5, #20
 800e42c:	4603      	mov	r3, r0
 800e42e:	4620      	mov	r0, r4
 800e430:	ea07 0708 	and.w	r7, r7, r8
 800e434:	461c      	mov	r4, r3
 800e436:	f7fa fc3f 	bl	8008cb8 <ucdr_deserialize_uint32_t>
 800e43a:	403e      	ands	r6, r7
 800e43c:	4034      	ands	r4, r6
 800e43e:	4020      	ands	r0, r4
 800e440:	b2c0      	uxtb	r0, r0
 800e442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e446:	bf00      	nop

0800e448 <rcl_client_get_rmw_handle>:
 800e448:	b118      	cbz	r0, 800e452 <rcl_client_get_rmw_handle+0xa>
 800e44a:	6800      	ldr	r0, [r0, #0]
 800e44c:	b108      	cbz	r0, 800e452 <rcl_client_get_rmw_handle+0xa>
 800e44e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800e452:	4770      	bx	lr

0800e454 <rcl_send_request>:
 800e454:	b570      	push	{r4, r5, r6, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	b1e8      	cbz	r0, 800e496 <rcl_send_request+0x42>
 800e45a:	4604      	mov	r4, r0
 800e45c:	6800      	ldr	r0, [r0, #0]
 800e45e:	b1d0      	cbz	r0, 800e496 <rcl_send_request+0x42>
 800e460:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800e464:	b1bb      	cbz	r3, 800e496 <rcl_send_request+0x42>
 800e466:	460e      	mov	r6, r1
 800e468:	b1d1      	cbz	r1, 800e4a0 <rcl_send_request+0x4c>
 800e46a:	4615      	mov	r5, r2
 800e46c:	b1c2      	cbz	r2, 800e4a0 <rcl_send_request+0x4c>
 800e46e:	2105      	movs	r1, #5
 800e470:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800e474:	f002 fd74 	bl	8010f60 <__atomic_load_8>
 800e478:	6823      	ldr	r3, [r4, #0]
 800e47a:	e9c5 0100 	strd	r0, r1, [r5]
 800e47e:	462a      	mov	r2, r5
 800e480:	4631      	mov	r1, r6
 800e482:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800e486:	f003 ff1f 	bl	80122c8 <rmw_send_request>
 800e48a:	4606      	mov	r6, r0
 800e48c:	b160      	cbz	r0, 800e4a8 <rcl_send_request+0x54>
 800e48e:	2601      	movs	r6, #1
 800e490:	4630      	mov	r0, r6
 800e492:	b002      	add	sp, #8
 800e494:	bd70      	pop	{r4, r5, r6, pc}
 800e496:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800e49a:	4630      	mov	r0, r6
 800e49c:	b002      	add	sp, #8
 800e49e:	bd70      	pop	{r4, r5, r6, pc}
 800e4a0:	260b      	movs	r6, #11
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	b002      	add	sp, #8
 800e4a6:	bd70      	pop	{r4, r5, r6, pc}
 800e4a8:	6820      	ldr	r0, [r4, #0]
 800e4aa:	2105      	movs	r1, #5
 800e4ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e4b0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800e4b4:	9100      	str	r1, [sp, #0]
 800e4b6:	f002 fdbf 	bl	8011038 <__atomic_exchange_8>
 800e4ba:	4630      	mov	r0, r6
 800e4bc:	b002      	add	sp, #8
 800e4be:	bd70      	pop	{r4, r5, r6, pc}

0800e4c0 <rcl_take_response>:
 800e4c0:	b570      	push	{r4, r5, r6, lr}
 800e4c2:	468e      	mov	lr, r1
 800e4c4:	460c      	mov	r4, r1
 800e4c6:	4616      	mov	r6, r2
 800e4c8:	4605      	mov	r5, r0
 800e4ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e4ce:	b08c      	sub	sp, #48	@ 0x30
 800e4d0:	f10d 0c18 	add.w	ip, sp, #24
 800e4d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e4d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e4dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e4e0:	b35d      	cbz	r5, 800e53a <rcl_take_response+0x7a>
 800e4e2:	682b      	ldr	r3, [r5, #0]
 800e4e4:	b34b      	cbz	r3, 800e53a <rcl_take_response+0x7a>
 800e4e6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800e4ea:	b330      	cbz	r0, 800e53a <rcl_take_response+0x7a>
 800e4ec:	b346      	cbz	r6, 800e540 <rcl_take_response+0x80>
 800e4ee:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800e548 <rcl_take_response+0x88>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	f88d 3007 	strb.w	r3, [sp, #7]
 800e4f8:	4632      	mov	r2, r6
 800e4fa:	f10d 0307 	add.w	r3, sp, #7
 800e4fe:	a902      	add	r1, sp, #8
 800e500:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e504:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e508:	f003 ffe6 	bl	80124d8 <rmw_take_response>
 800e50c:	4605      	mov	r5, r0
 800e50e:	b9c8      	cbnz	r0, 800e544 <rcl_take_response+0x84>
 800e510:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e514:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800e518:	2a00      	cmp	r2, #0
 800e51a:	bf08      	it	eq
 800e51c:	461d      	moveq	r5, r3
 800e51e:	f10d 0e18 	add.w	lr, sp, #24
 800e522:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e526:	46a4      	mov	ip, r4
 800e528:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e52c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e530:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e534:	4628      	mov	r0, r5
 800e536:	b00c      	add	sp, #48	@ 0x30
 800e538:	bd70      	pop	{r4, r5, r6, pc}
 800e53a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800e53e:	e7ee      	b.n	800e51e <rcl_take_response+0x5e>
 800e540:	250b      	movs	r5, #11
 800e542:	e7ec      	b.n	800e51e <rcl_take_response+0x5e>
 800e544:	2501      	movs	r5, #1
 800e546:	e7ea      	b.n	800e51e <rcl_take_response+0x5e>
	...

0800e550 <rcl_client_is_valid>:
 800e550:	b130      	cbz	r0, 800e560 <rcl_client_is_valid+0x10>
 800e552:	6800      	ldr	r0, [r0, #0]
 800e554:	b120      	cbz	r0, 800e560 <rcl_client_is_valid+0x10>
 800e556:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800e55a:	3800      	subs	r0, #0
 800e55c:	bf18      	it	ne
 800e55e:	2001      	movne	r0, #1
 800e560:	4770      	bx	lr
 800e562:	bf00      	nop

0800e564 <rcl_convert_rmw_ret_to_rcl_ret>:
 800e564:	280b      	cmp	r0, #11
 800e566:	dc0d      	bgt.n	800e584 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800e568:	2800      	cmp	r0, #0
 800e56a:	db09      	blt.n	800e580 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e56c:	280b      	cmp	r0, #11
 800e56e:	d807      	bhi.n	800e580 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e570:	e8df f000 	tbb	[pc, r0]
 800e574:	07060607 	.word	0x07060607
 800e578:	06060606 	.word	0x06060606
 800e57c:	07070606 	.word	0x07070606
 800e580:	2001      	movs	r0, #1
 800e582:	4770      	bx	lr
 800e584:	28cb      	cmp	r0, #203	@ 0xcb
 800e586:	bf18      	it	ne
 800e588:	2001      	movne	r0, #1
 800e58a:	4770      	bx	lr

0800e58c <rcl_get_zero_initialized_context>:
 800e58c:	4a03      	ldr	r2, [pc, #12]	@ (800e59c <rcl_get_zero_initialized_context+0x10>)
 800e58e:	4603      	mov	r3, r0
 800e590:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e594:	e883 0003 	stmia.w	r3, {r0, r1}
 800e598:	4618      	mov	r0, r3
 800e59a:	4770      	bx	lr
 800e59c:	08016d74 	.word	0x08016d74

0800e5a0 <rcl_context_is_valid>:
 800e5a0:	b118      	cbz	r0, 800e5aa <rcl_context_is_valid+0xa>
 800e5a2:	6840      	ldr	r0, [r0, #4]
 800e5a4:	3800      	subs	r0, #0
 800e5a6:	bf18      	it	ne
 800e5a8:	2001      	movne	r0, #1
 800e5aa:	4770      	bx	lr

0800e5ac <__cleanup_context>:
 800e5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5b0:	4606      	mov	r6, r0
 800e5b2:	6800      	ldr	r0, [r0, #0]
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	6073      	str	r3, [r6, #4]
 800e5b8:	2800      	cmp	r0, #0
 800e5ba:	d049      	beq.n	800e650 <__cleanup_context+0xa4>
 800e5bc:	6947      	ldr	r7, [r0, #20]
 800e5be:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800e5c2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800e5c6:	b137      	cbz	r7, 800e5d6 <__cleanup_context+0x2a>
 800e5c8:	3014      	adds	r0, #20
 800e5ca:	f000 f9bb 	bl	800e944 <rcl_init_options_fini>
 800e5ce:	4607      	mov	r7, r0
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	d144      	bne.n	800e65e <__cleanup_context+0xb2>
 800e5d4:	6830      	ldr	r0, [r6, #0]
 800e5d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e5d8:	b143      	cbz	r3, 800e5ec <__cleanup_context+0x40>
 800e5da:	3028      	adds	r0, #40	@ 0x28
 800e5dc:	f003 fcbc 	bl	8011f58 <rmw_context_fini>
 800e5e0:	b118      	cbz	r0, 800e5ea <__cleanup_context+0x3e>
 800e5e2:	2f00      	cmp	r7, #0
 800e5e4:	d03e      	beq.n	800e664 <__cleanup_context+0xb8>
 800e5e6:	f7fc fa53 	bl	800aa90 <rcutils_reset_error>
 800e5ea:	6830      	ldr	r0, [r6, #0]
 800e5ec:	6a03      	ldr	r3, [r0, #32]
 800e5ee:	b1db      	cbz	r3, 800e628 <__cleanup_context+0x7c>
 800e5f0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800e5f4:	2a01      	cmp	r2, #1
 800e5f6:	f17c 0100 	sbcs.w	r1, ip, #0
 800e5fa:	db11      	blt.n	800e620 <__cleanup_context+0x74>
 800e5fc:	2400      	movs	r4, #0
 800e5fe:	4625      	mov	r5, r4
 800e600:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e604:	4649      	mov	r1, r9
 800e606:	b1b8      	cbz	r0, 800e638 <__cleanup_context+0x8c>
 800e608:	47c0      	blx	r8
 800e60a:	6833      	ldr	r3, [r6, #0]
 800e60c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800e610:	3401      	adds	r4, #1
 800e612:	f145 0500 	adc.w	r5, r5, #0
 800e616:	4294      	cmp	r4, r2
 800e618:	eb75 010c 	sbcs.w	r1, r5, ip
 800e61c:	6a1b      	ldr	r3, [r3, #32]
 800e61e:	dbef      	blt.n	800e600 <__cleanup_context+0x54>
 800e620:	4618      	mov	r0, r3
 800e622:	4649      	mov	r1, r9
 800e624:	47c0      	blx	r8
 800e626:	6830      	ldr	r0, [r6, #0]
 800e628:	4649      	mov	r1, r9
 800e62a:	47c0      	blx	r8
 800e62c:	2300      	movs	r3, #0
 800e62e:	e9c6 3300 	strd	r3, r3, [r6]
 800e632:	4638      	mov	r0, r7
 800e634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e638:	3401      	adds	r4, #1
 800e63a:	f145 0500 	adc.w	r5, r5, #0
 800e63e:	4294      	cmp	r4, r2
 800e640:	eb75 010c 	sbcs.w	r1, r5, ip
 800e644:	dbdc      	blt.n	800e600 <__cleanup_context+0x54>
 800e646:	4618      	mov	r0, r3
 800e648:	4649      	mov	r1, r9
 800e64a:	47c0      	blx	r8
 800e64c:	6830      	ldr	r0, [r6, #0]
 800e64e:	e7eb      	b.n	800e628 <__cleanup_context+0x7c>
 800e650:	4607      	mov	r7, r0
 800e652:	2300      	movs	r3, #0
 800e654:	e9c6 3300 	strd	r3, r3, [r6]
 800e658:	4638      	mov	r0, r7
 800e65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e65e:	f7fc fa17 	bl	800aa90 <rcutils_reset_error>
 800e662:	e7b7      	b.n	800e5d4 <__cleanup_context+0x28>
 800e664:	f7ff ff7e 	bl	800e564 <rcl_convert_rmw_ret_to_rcl_ret>
 800e668:	4607      	mov	r7, r0
 800e66a:	e7bc      	b.n	800e5e6 <__cleanup_context+0x3a>

0800e66c <rcl_init>:
 800e66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e670:	1e05      	subs	r5, r0, #0
 800e672:	b09e      	sub	sp, #120	@ 0x78
 800e674:	460e      	mov	r6, r1
 800e676:	4690      	mov	r8, r2
 800e678:	461f      	mov	r7, r3
 800e67a:	f340 809c 	ble.w	800e7b6 <rcl_init+0x14a>
 800e67e:	2900      	cmp	r1, #0
 800e680:	f000 809c 	beq.w	800e7bc <rcl_init+0x150>
 800e684:	f1a1 0e04 	sub.w	lr, r1, #4
 800e688:	f04f 0c00 	mov.w	ip, #0
 800e68c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800e690:	f10c 0c01 	add.w	ip, ip, #1
 800e694:	2c00      	cmp	r4, #0
 800e696:	f000 8091 	beq.w	800e7bc <rcl_init+0x150>
 800e69a:	4565      	cmp	r5, ip
 800e69c:	d1f6      	bne.n	800e68c <rcl_init+0x20>
 800e69e:	f1b8 0f00 	cmp.w	r8, #0
 800e6a2:	f000 808b 	beq.w	800e7bc <rcl_init+0x150>
 800e6a6:	f8d8 4000 	ldr.w	r4, [r8]
 800e6aa:	2c00      	cmp	r4, #0
 800e6ac:	f000 8086 	beq.w	800e7bc <rcl_init+0x150>
 800e6b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e6b2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800e6b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6ba:	6823      	ldr	r3, [r4, #0]
 800e6bc:	f8cc 3000 	str.w	r3, [ip]
 800e6c0:	a819      	add	r0, sp, #100	@ 0x64
 800e6c2:	f7fc f9c1 	bl	800aa48 <rcutils_allocator_is_valid>
 800e6c6:	2800      	cmp	r0, #0
 800e6c8:	d078      	beq.n	800e7bc <rcl_init+0x150>
 800e6ca:	2f00      	cmp	r7, #0
 800e6cc:	d076      	beq.n	800e7bc <rcl_init+0x150>
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d178      	bne.n	800e7c6 <rcl_init+0x15a>
 800e6d4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800e6d8:	2178      	movs	r1, #120	@ 0x78
 800e6da:	2001      	movs	r0, #1
 800e6dc:	4798      	blx	r3
 800e6de:	4604      	mov	r4, r0
 800e6e0:	6038      	str	r0, [r7, #0]
 800e6e2:	2800      	cmp	r0, #0
 800e6e4:	f000 80b6 	beq.w	800e854 <rcl_init+0x1e8>
 800e6e8:	a802      	add	r0, sp, #8
 800e6ea:	f002 ff89 	bl	8011600 <rmw_get_zero_initialized_context>
 800e6ee:	a902      	add	r1, sp, #8
 800e6f0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e6f4:	2250      	movs	r2, #80	@ 0x50
 800e6f6:	ac19      	add	r4, sp, #100	@ 0x64
 800e6f8:	f007 f973 	bl	80159e2 <memcpy>
 800e6fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e6fe:	f8d7 e000 	ldr.w	lr, [r7]
 800e702:	46f4      	mov	ip, lr
 800e704:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e708:	6823      	ldr	r3, [r4, #0]
 800e70a:	f8cc 3000 	str.w	r3, [ip]
 800e70e:	f10e 0114 	add.w	r1, lr, #20
 800e712:	4640      	mov	r0, r8
 800e714:	f000 f940 	bl	800e998 <rcl_init_options_copy>
 800e718:	4604      	mov	r4, r0
 800e71a:	2800      	cmp	r0, #0
 800e71c:	d144      	bne.n	800e7a8 <rcl_init+0x13c>
 800e71e:	f8d7 9000 	ldr.w	r9, [r7]
 800e722:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800e726:	f8c9 0020 	str.w	r0, [r9, #32]
 800e72a:	f8c9 5018 	str.w	r5, [r9, #24]
 800e72e:	f8c9 801c 	str.w	r8, [r9, #28]
 800e732:	2d00      	cmp	r5, #0
 800e734:	d04e      	beq.n	800e7d4 <rcl_init+0x168>
 800e736:	2e00      	cmp	r6, #0
 800e738:	d04c      	beq.n	800e7d4 <rcl_init+0x168>
 800e73a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800e73e:	2104      	movs	r1, #4
 800e740:	4628      	mov	r0, r5
 800e742:	4798      	blx	r3
 800e744:	f8c9 0020 	str.w	r0, [r9, #32]
 800e748:	f8d7 9000 	ldr.w	r9, [r7]
 800e74c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800e750:	46ca      	mov	sl, r9
 800e752:	b343      	cbz	r3, 800e7a6 <rcl_init+0x13a>
 800e754:	2d01      	cmp	r5, #1
 800e756:	f178 0300 	sbcs.w	r3, r8, #0
 800e75a:	db3b      	blt.n	800e7d4 <rcl_init+0x168>
 800e75c:	2400      	movs	r4, #0
 800e75e:	3e04      	subs	r6, #4
 800e760:	46a1      	mov	r9, r4
 800e762:	e00b      	b.n	800e77c <rcl_init+0x110>
 800e764:	6831      	ldr	r1, [r6, #0]
 800e766:	f007 f93c 	bl	80159e2 <memcpy>
 800e76a:	3401      	adds	r4, #1
 800e76c:	f149 0900 	adc.w	r9, r9, #0
 800e770:	45c8      	cmp	r8, r9
 800e772:	bf08      	it	eq
 800e774:	42a5      	cmpeq	r5, r4
 800e776:	d02b      	beq.n	800e7d0 <rcl_init+0x164>
 800e778:	f8d7 a000 	ldr.w	sl, [r7]
 800e77c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800e780:	f7f1 fd38 	bl	80001f4 <strlen>
 800e784:	1c42      	adds	r2, r0, #1
 800e786:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e788:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800e78a:	f8da a020 	ldr.w	sl, [sl, #32]
 800e78e:	9201      	str	r2, [sp, #4]
 800e790:	4610      	mov	r0, r2
 800e792:	4798      	blx	r3
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800e79a:	6a1b      	ldr	r3, [r3, #32]
 800e79c:	9a01      	ldr	r2, [sp, #4]
 800e79e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e7a2:	2800      	cmp	r0, #0
 800e7a4:	d1de      	bne.n	800e764 <rcl_init+0xf8>
 800e7a6:	240a      	movs	r4, #10
 800e7a8:	4638      	mov	r0, r7
 800e7aa:	f7ff feff 	bl	800e5ac <__cleanup_context>
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	b01e      	add	sp, #120	@ 0x78
 800e7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7b6:	2900      	cmp	r1, #0
 800e7b8:	f43f af71 	beq.w	800e69e <rcl_init+0x32>
 800e7bc:	240b      	movs	r4, #11
 800e7be:	4620      	mov	r0, r4
 800e7c0:	b01e      	add	sp, #120	@ 0x78
 800e7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7c6:	2464      	movs	r4, #100	@ 0x64
 800e7c8:	4620      	mov	r0, r4
 800e7ca:	b01e      	add	sp, #120	@ 0x78
 800e7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7d0:	f8d7 9000 	ldr.w	r9, [r7]
 800e7d4:	4926      	ldr	r1, [pc, #152]	@ (800e870 <rcl_init+0x204>)
 800e7d6:	680b      	ldr	r3, [r1, #0]
 800e7d8:	3301      	adds	r3, #1
 800e7da:	d036      	beq.n	800e84a <rcl_init+0x1de>
 800e7dc:	600b      	str	r3, [r1, #0]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	2400      	movs	r4, #0
 800e7e2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800e7e6:	607b      	str	r3, [r7, #4]
 800e7e8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800e7f0:	d034      	beq.n	800e85c <rcl_init+0x1f0>
 800e7f2:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800e7f6:	b93b      	cbnz	r3, 800e808 <rcl_init+0x19c>
 800e7f8:	3030      	adds	r0, #48	@ 0x30
 800e7fa:	f000 f939 	bl	800ea70 <rcl_get_localhost_only>
 800e7fe:	4604      	mov	r4, r0
 800e800:	2800      	cmp	r0, #0
 800e802:	d1d1      	bne.n	800e7a8 <rcl_init+0x13c>
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	6958      	ldr	r0, [r3, #20]
 800e808:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800e80a:	aa18      	add	r2, sp, #96	@ 0x60
 800e80c:	a917      	add	r1, sp, #92	@ 0x5c
 800e80e:	f001 f841 	bl	800f894 <rcl_validate_enclave_name>
 800e812:	4604      	mov	r4, r0
 800e814:	2800      	cmp	r0, #0
 800e816:	d1c7      	bne.n	800e7a8 <rcl_init+0x13c>
 800e818:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e81a:	b9eb      	cbnz	r3, 800e858 <rcl_init+0x1ec>
 800e81c:	6839      	ldr	r1, [r7, #0]
 800e81e:	694b      	ldr	r3, [r1, #20]
 800e820:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800e822:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800e826:	f000 fc3d 	bl	800f0a4 <rcl_get_security_options_from_environment>
 800e82a:	4604      	mov	r4, r0
 800e82c:	2800      	cmp	r0, #0
 800e82e:	d1bb      	bne.n	800e7a8 <rcl_init+0x13c>
 800e830:	6839      	ldr	r1, [r7, #0]
 800e832:	6948      	ldr	r0, [r1, #20]
 800e834:	3128      	adds	r1, #40	@ 0x28
 800e836:	3018      	adds	r0, #24
 800e838:	f003 fa58 	bl	8011cec <rmw_init>
 800e83c:	4604      	mov	r4, r0
 800e83e:	2800      	cmp	r0, #0
 800e840:	d0bd      	beq.n	800e7be <rcl_init+0x152>
 800e842:	f7ff fe8f 	bl	800e564 <rcl_convert_rmw_ret_to_rcl_ret>
 800e846:	4604      	mov	r4, r0
 800e848:	e7ae      	b.n	800e7a8 <rcl_init+0x13c>
 800e84a:	2201      	movs	r2, #1
 800e84c:	461c      	mov	r4, r3
 800e84e:	600a      	str	r2, [r1, #0]
 800e850:	4613      	mov	r3, r2
 800e852:	e7c6      	b.n	800e7e2 <rcl_init+0x176>
 800e854:	240a      	movs	r4, #10
 800e856:	e7b2      	b.n	800e7be <rcl_init+0x152>
 800e858:	2401      	movs	r4, #1
 800e85a:	e7a5      	b.n	800e7a8 <rcl_init+0x13c>
 800e85c:	3024      	adds	r0, #36	@ 0x24
 800e85e:	f005 ffb9 	bl	80147d4 <rcl_get_default_domain_id>
 800e862:	4604      	mov	r4, r0
 800e864:	2800      	cmp	r0, #0
 800e866:	d19f      	bne.n	800e7a8 <rcl_init+0x13c>
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	6958      	ldr	r0, [r3, #20]
 800e86c:	e7c1      	b.n	800e7f2 <rcl_init+0x186>
 800e86e:	bf00      	nop
 800e870:	2000dbac 	.word	0x2000dbac

0800e874 <rcl_get_zero_initialized_init_options>:
 800e874:	2000      	movs	r0, #0
 800e876:	4770      	bx	lr

0800e878 <rcl_init_options_init>:
 800e878:	b084      	sub	sp, #16
 800e87a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e87c:	b097      	sub	sp, #92	@ 0x5c
 800e87e:	ae1d      	add	r6, sp, #116	@ 0x74
 800e880:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800e884:	2800      	cmp	r0, #0
 800e886:	d058      	beq.n	800e93a <rcl_init_options_init+0xc2>
 800e888:	6803      	ldr	r3, [r0, #0]
 800e88a:	4605      	mov	r5, r0
 800e88c:	b133      	cbz	r3, 800e89c <rcl_init_options_init+0x24>
 800e88e:	2464      	movs	r4, #100	@ 0x64
 800e890:	4620      	mov	r0, r4
 800e892:	b017      	add	sp, #92	@ 0x5c
 800e894:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e898:	b004      	add	sp, #16
 800e89a:	4770      	bx	lr
 800e89c:	4630      	mov	r0, r6
 800e89e:	f7fc f8d3 	bl	800aa48 <rcutils_allocator_is_valid>
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	d049      	beq.n	800e93a <rcl_init_options_init+0xc2>
 800e8a6:	46b4      	mov	ip, r6
 800e8a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e8ac:	ac11      	add	r4, sp, #68	@ 0x44
 800e8ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e8b0:	f8dc 3000 	ldr.w	r3, [ip]
 800e8b4:	6023      	str	r3, [r4, #0]
 800e8b6:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e8b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e8ba:	2050      	movs	r0, #80	@ 0x50
 800e8bc:	4798      	blx	r3
 800e8be:	4604      	mov	r4, r0
 800e8c0:	6028      	str	r0, [r5, #0]
 800e8c2:	2800      	cmp	r0, #0
 800e8c4:	d03b      	beq.n	800e93e <rcl_init_options_init+0xc6>
 800e8c6:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800e8ca:	4686      	mov	lr, r0
 800e8cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e8d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e8d4:	f8dc 3000 	ldr.w	r3, [ip]
 800e8d8:	f8ce 3000 	str.w	r3, [lr]
 800e8dc:	a802      	add	r0, sp, #8
 800e8de:	f002 fe9f 	bl	8011620 <rmw_get_zero_initialized_init_options>
 800e8e2:	f10d 0e08 	add.w	lr, sp, #8
 800e8e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e8ea:	f104 0c18 	add.w	ip, r4, #24
 800e8ee:	682f      	ldr	r7, [r5, #0]
 800e8f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e8f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e8f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e8fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e900:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e904:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e908:	ac20      	add	r4, sp, #128	@ 0x80
 800e90a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e90e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e912:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e916:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800e91a:	f107 0018 	add.w	r0, r7, #24
 800e91e:	f003 f8ed 	bl	8011afc <rmw_init_options_init>
 800e922:	4604      	mov	r4, r0
 800e924:	2800      	cmp	r0, #0
 800e926:	d0b3      	beq.n	800e890 <rcl_init_options_init+0x18>
 800e928:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e92a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e92c:	6828      	ldr	r0, [r5, #0]
 800e92e:	4798      	blx	r3
 800e930:	4620      	mov	r0, r4
 800e932:	f7ff fe17 	bl	800e564 <rcl_convert_rmw_ret_to_rcl_ret>
 800e936:	4604      	mov	r4, r0
 800e938:	e7aa      	b.n	800e890 <rcl_init_options_init+0x18>
 800e93a:	240b      	movs	r4, #11
 800e93c:	e7a8      	b.n	800e890 <rcl_init_options_init+0x18>
 800e93e:	240a      	movs	r4, #10
 800e940:	e7a6      	b.n	800e890 <rcl_init_options_init+0x18>
 800e942:	bf00      	nop

0800e944 <rcl_init_options_fini>:
 800e944:	b530      	push	{r4, r5, lr}
 800e946:	b087      	sub	sp, #28
 800e948:	b1f0      	cbz	r0, 800e988 <rcl_init_options_fini+0x44>
 800e94a:	6803      	ldr	r3, [r0, #0]
 800e94c:	4604      	mov	r4, r0
 800e94e:	b1db      	cbz	r3, 800e988 <rcl_init_options_fini+0x44>
 800e950:	469c      	mov	ip, r3
 800e952:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e956:	f10d 0e04 	add.w	lr, sp, #4
 800e95a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e95e:	f8dc 3000 	ldr.w	r3, [ip]
 800e962:	f8ce 3000 	str.w	r3, [lr]
 800e966:	a801      	add	r0, sp, #4
 800e968:	f7fc f86e 	bl	800aa48 <rcutils_allocator_is_valid>
 800e96c:	b160      	cbz	r0, 800e988 <rcl_init_options_fini+0x44>
 800e96e:	6820      	ldr	r0, [r4, #0]
 800e970:	3018      	adds	r0, #24
 800e972:	f003 f973 	bl	8011c5c <rmw_init_options_fini>
 800e976:	4605      	mov	r5, r0
 800e978:	b950      	cbnz	r0, 800e990 <rcl_init_options_fini+0x4c>
 800e97a:	6820      	ldr	r0, [r4, #0]
 800e97c:	9b02      	ldr	r3, [sp, #8]
 800e97e:	9905      	ldr	r1, [sp, #20]
 800e980:	4798      	blx	r3
 800e982:	4628      	mov	r0, r5
 800e984:	b007      	add	sp, #28
 800e986:	bd30      	pop	{r4, r5, pc}
 800e988:	250b      	movs	r5, #11
 800e98a:	4628      	mov	r0, r5
 800e98c:	b007      	add	sp, #28
 800e98e:	bd30      	pop	{r4, r5, pc}
 800e990:	f7ff fde8 	bl	800e564 <rcl_convert_rmw_ret_to_rcl_ret>
 800e994:	4605      	mov	r5, r0
 800e996:	e7f8      	b.n	800e98a <rcl_init_options_fini+0x46>

0800e998 <rcl_init_options_copy>:
 800e998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e99c:	b094      	sub	sp, #80	@ 0x50
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	d058      	beq.n	800ea54 <rcl_init_options_copy+0xbc>
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	6800      	ldr	r0, [r0, #0]
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	d054      	beq.n	800ea54 <rcl_init_options_copy+0xbc>
 800e9aa:	460e      	mov	r6, r1
 800e9ac:	f7fc f84c 	bl	800aa48 <rcutils_allocator_is_valid>
 800e9b0:	2800      	cmp	r0, #0
 800e9b2:	d04f      	beq.n	800ea54 <rcl_init_options_copy+0xbc>
 800e9b4:	2e00      	cmp	r6, #0
 800e9b6:	d04d      	beq.n	800ea54 <rcl_init_options_copy+0xbc>
 800e9b8:	6833      	ldr	r3, [r6, #0]
 800e9ba:	b123      	cbz	r3, 800e9c6 <rcl_init_options_copy+0x2e>
 800e9bc:	2464      	movs	r4, #100	@ 0x64
 800e9be:	4620      	mov	r0, r4
 800e9c0:	b014      	add	sp, #80	@ 0x50
 800e9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9c6:	6827      	ldr	r7, [r4, #0]
 800e9c8:	46bc      	mov	ip, r7
 800e9ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e9ce:	ad0f      	add	r5, sp, #60	@ 0x3c
 800e9d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e9d2:	f8dc 3000 	ldr.w	r3, [ip]
 800e9d6:	f8d7 8000 	ldr.w	r8, [r7]
 800e9da:	602b      	str	r3, [r5, #0]
 800e9dc:	4619      	mov	r1, r3
 800e9de:	2050      	movs	r0, #80	@ 0x50
 800e9e0:	47c0      	blx	r8
 800e9e2:	4605      	mov	r5, r0
 800e9e4:	6030      	str	r0, [r6, #0]
 800e9e6:	b3d0      	cbz	r0, 800ea5e <rcl_init_options_copy+0xc6>
 800e9e8:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800e9ec:	4686      	mov	lr, r0
 800e9ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e9f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e9f6:	f8dc 3000 	ldr.w	r3, [ip]
 800e9fa:	f8ce 3000 	str.w	r3, [lr]
 800e9fe:	4668      	mov	r0, sp
 800ea00:	f002 fe0e 	bl	8011620 <rmw_get_zero_initialized_init_options>
 800ea04:	46ee      	mov	lr, sp
 800ea06:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ea0a:	f105 0c18 	add.w	ip, r5, #24
 800ea0e:	6824      	ldr	r4, [r4, #0]
 800ea10:	6835      	ldr	r5, [r6, #0]
 800ea12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ea16:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ea1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ea1e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ea22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ea26:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ea2a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ea2e:	f104 0018 	add.w	r0, r4, #24
 800ea32:	f105 0118 	add.w	r1, r5, #24
 800ea36:	f003 f8c9 	bl	8011bcc <rmw_init_options_copy>
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	d0be      	beq.n	800e9be <rcl_init_options_copy+0x26>
 800ea40:	f7fc f810 	bl	800aa64 <rcutils_get_error_string>
 800ea44:	f7fc f824 	bl	800aa90 <rcutils_reset_error>
 800ea48:	4630      	mov	r0, r6
 800ea4a:	f7ff ff7b 	bl	800e944 <rcl_init_options_fini>
 800ea4e:	b140      	cbz	r0, 800ea62 <rcl_init_options_copy+0xca>
 800ea50:	4604      	mov	r4, r0
 800ea52:	e7b4      	b.n	800e9be <rcl_init_options_copy+0x26>
 800ea54:	240b      	movs	r4, #11
 800ea56:	4620      	mov	r0, r4
 800ea58:	b014      	add	sp, #80	@ 0x50
 800ea5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea5e:	240a      	movs	r4, #10
 800ea60:	e7ad      	b.n	800e9be <rcl_init_options_copy+0x26>
 800ea62:	4620      	mov	r0, r4
 800ea64:	b014      	add	sp, #80	@ 0x50
 800ea66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea6a:	f7ff bd7b 	b.w	800e564 <rcl_convert_rmw_ret_to_rcl_ret>
 800ea6e:	bf00      	nop

0800ea70 <rcl_get_localhost_only>:
 800ea70:	b510      	push	{r4, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	2300      	movs	r3, #0
 800ea76:	9301      	str	r3, [sp, #4]
 800ea78:	b1b8      	cbz	r0, 800eaaa <rcl_get_localhost_only+0x3a>
 800ea7a:	4604      	mov	r4, r0
 800ea7c:	a901      	add	r1, sp, #4
 800ea7e:	480c      	ldr	r0, [pc, #48]	@ (800eab0 <rcl_get_localhost_only+0x40>)
 800ea80:	f002 fb12 	bl	80110a8 <rcutils_get_env>
 800ea84:	b110      	cbz	r0, 800ea8c <rcl_get_localhost_only+0x1c>
 800ea86:	2001      	movs	r0, #1
 800ea88:	b002      	add	sp, #8
 800ea8a:	bd10      	pop	{r4, pc}
 800ea8c:	9b01      	ldr	r3, [sp, #4]
 800ea8e:	b113      	cbz	r3, 800ea96 <rcl_get_localhost_only+0x26>
 800ea90:	781a      	ldrb	r2, [r3, #0]
 800ea92:	2a31      	cmp	r2, #49	@ 0x31
 800ea94:	d004      	beq.n	800eaa0 <rcl_get_localhost_only+0x30>
 800ea96:	2302      	movs	r3, #2
 800ea98:	2000      	movs	r0, #0
 800ea9a:	7023      	strb	r3, [r4, #0]
 800ea9c:	b002      	add	sp, #8
 800ea9e:	bd10      	pop	{r4, pc}
 800eaa0:	785b      	ldrb	r3, [r3, #1]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d1f7      	bne.n	800ea96 <rcl_get_localhost_only+0x26>
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	e7f6      	b.n	800ea98 <rcl_get_localhost_only+0x28>
 800eaaa:	200b      	movs	r0, #11
 800eaac:	b002      	add	sp, #8
 800eaae:	bd10      	pop	{r4, pc}
 800eab0:	08016d7c 	.word	0x08016d7c

0800eab4 <rcl_get_zero_initialized_node>:
 800eab4:	4a03      	ldr	r2, [pc, #12]	@ (800eac4 <rcl_get_zero_initialized_node+0x10>)
 800eab6:	4603      	mov	r3, r0
 800eab8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eabc:	e883 0003 	stmia.w	r3, {r0, r1}
 800eac0:	4618      	mov	r0, r3
 800eac2:	4770      	bx	lr
 800eac4:	08016da4 	.word	0x08016da4

0800eac8 <rcl_node_init>:
 800eac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eacc:	b0a9      	sub	sp, #164	@ 0xa4
 800eace:	4604      	mov	r4, r0
 800ead0:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800ead4:	a823      	add	r0, sp, #140	@ 0x8c
 800ead6:	460e      	mov	r6, r1
 800ead8:	4615      	mov	r5, r2
 800eada:	461f      	mov	r7, r3
 800eadc:	f006 f8a2 	bl	8014c24 <rcl_guard_condition_get_default_options>
 800eae0:	f1b8 0f00 	cmp.w	r8, #0
 800eae4:	f000 80e6 	beq.w	800ecb4 <rcl_node_init+0x1ec>
 800eae8:	4640      	mov	r0, r8
 800eaea:	f7fb ffad 	bl	800aa48 <rcutils_allocator_is_valid>
 800eaee:	2800      	cmp	r0, #0
 800eaf0:	f000 80e0 	beq.w	800ecb4 <rcl_node_init+0x1ec>
 800eaf4:	2e00      	cmp	r6, #0
 800eaf6:	f000 80dd 	beq.w	800ecb4 <rcl_node_init+0x1ec>
 800eafa:	2d00      	cmp	r5, #0
 800eafc:	f000 80da 	beq.w	800ecb4 <rcl_node_init+0x1ec>
 800eb00:	2c00      	cmp	r4, #0
 800eb02:	f000 80d7 	beq.w	800ecb4 <rcl_node_init+0x1ec>
 800eb06:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800eb0a:	f1b9 0f00 	cmp.w	r9, #0
 800eb0e:	f040 80fd 	bne.w	800ed0c <rcl_node_init+0x244>
 800eb12:	2f00      	cmp	r7, #0
 800eb14:	f000 80ce 	beq.w	800ecb4 <rcl_node_init+0x1ec>
 800eb18:	4638      	mov	r0, r7
 800eb1a:	f7ff fd41 	bl	800e5a0 <rcl_context_is_valid>
 800eb1e:	4682      	mov	sl, r0
 800eb20:	2800      	cmp	r0, #0
 800eb22:	f000 80cd 	beq.w	800ecc0 <rcl_node_init+0x1f8>
 800eb26:	464a      	mov	r2, r9
 800eb28:	a922      	add	r1, sp, #136	@ 0x88
 800eb2a:	4630      	mov	r0, r6
 800eb2c:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800eb30:	f002 ff18 	bl	8011964 <rmw_validate_node_name>
 800eb34:	4681      	mov	r9, r0
 800eb36:	2800      	cmp	r0, #0
 800eb38:	f040 80be 	bne.w	800ecb8 <rcl_node_init+0x1f0>
 800eb3c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800eb3e:	2800      	cmp	r0, #0
 800eb40:	f040 80f0 	bne.w	800ed24 <rcl_node_init+0x25c>
 800eb44:	4628      	mov	r0, r5
 800eb46:	f7f1 fb55 	bl	80001f4 <strlen>
 800eb4a:	2800      	cmp	r0, #0
 800eb4c:	f040 80bb 	bne.w	800ecc6 <rcl_node_init+0x1fe>
 800eb50:	4d7c      	ldr	r5, [pc, #496]	@ (800ed44 <rcl_node_init+0x27c>)
 800eb52:	a922      	add	r1, sp, #136	@ 0x88
 800eb54:	2200      	movs	r2, #0
 800eb56:	4628      	mov	r0, r5
 800eb58:	f002 fee6 	bl	8011928 <rmw_validate_namespace>
 800eb5c:	4681      	mov	r9, r0
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	f040 80aa 	bne.w	800ecb8 <rcl_node_init+0x1f0>
 800eb64:	4682      	mov	sl, r0
 800eb66:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	f040 80e0 	bne.w	800ed2e <rcl_node_init+0x266>
 800eb6e:	f8d8 3000 	ldr.w	r3, [r8]
 800eb72:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800eb76:	2078      	movs	r0, #120	@ 0x78
 800eb78:	4798      	blx	r3
 800eb7a:	4681      	mov	r9, r0
 800eb7c:	6060      	str	r0, [r4, #4]
 800eb7e:	2800      	cmp	r0, #0
 800eb80:	f000 80ca 	beq.w	800ed18 <rcl_node_init+0x250>
 800eb84:	2200      	movs	r2, #0
 800eb86:	2300      	movs	r3, #0
 800eb88:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800eb8c:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800eb90:	a808      	add	r0, sp, #32
 800eb92:	f000 f907 	bl	800eda4 <rcl_node_get_default_options>
 800eb96:	a908      	add	r1, sp, #32
 800eb98:	4648      	mov	r0, r9
 800eb9a:	2268      	movs	r2, #104	@ 0x68
 800eb9c:	f006 ff21 	bl	80159e2 <memcpy>
 800eba0:	6861      	ldr	r1, [r4, #4]
 800eba2:	6027      	str	r7, [r4, #0]
 800eba4:	4640      	mov	r0, r8
 800eba6:	f000 f90b 	bl	800edc0 <rcl_node_options_copy>
 800ebaa:	2800      	cmp	r0, #0
 800ebac:	d158      	bne.n	800ec60 <rcl_node_init+0x198>
 800ebae:	4628      	mov	r0, r5
 800ebb0:	f7f1 fb20 	bl	80001f4 <strlen>
 800ebb4:	4428      	add	r0, r5
 800ebb6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800ebba:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800ebbe:	2b2f      	cmp	r3, #47	@ 0x2f
 800ebc0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ebc4:	9300      	str	r3, [sp, #0]
 800ebc6:	bf0c      	ite	eq
 800ebc8:	4b5f      	ldreq	r3, [pc, #380]	@ (800ed48 <rcl_node_init+0x280>)
 800ebca:	4b60      	ldrne	r3, [pc, #384]	@ (800ed4c <rcl_node_init+0x284>)
 800ebcc:	9302      	str	r3, [sp, #8]
 800ebce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ebd2:	9301      	str	r3, [sp, #4]
 800ebd4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800ebd8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ebdc:	f002 fa8c 	bl	80110f8 <rcutils_format_string_limit>
 800ebe0:	6823      	ldr	r3, [r4, #0]
 800ebe2:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800ebe6:	6818      	ldr	r0, [r3, #0]
 800ebe8:	4631      	mov	r1, r6
 800ebea:	3028      	adds	r0, #40	@ 0x28
 800ebec:	462a      	mov	r2, r5
 800ebee:	6866      	ldr	r6, [r4, #4]
 800ebf0:	f003 fad0 	bl	8012194 <rmw_create_node>
 800ebf4:	6863      	ldr	r3, [r4, #4]
 800ebf6:	66b0      	str	r0, [r6, #104]	@ 0x68
 800ebf8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d032      	beq.n	800ec64 <rcl_node_init+0x19c>
 800ebfe:	f003 fb5d 	bl	80122bc <rmw_node_get_graph_guard_condition>
 800ec02:	4681      	mov	r9, r0
 800ec04:	b360      	cbz	r0, 800ec60 <rcl_node_init+0x198>
 800ec06:	f8d8 3000 	ldr.w	r3, [r8]
 800ec0a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ec0e:	6866      	ldr	r6, [r4, #4]
 800ec10:	2008      	movs	r0, #8
 800ec12:	4798      	blx	r3
 800ec14:	6863      	ldr	r3, [r4, #4]
 800ec16:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800ec18:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800ec1c:	f1bb 0f00 	cmp.w	fp, #0
 800ec20:	d020      	beq.n	800ec64 <rcl_node_init+0x19c>
 800ec22:	a806      	add	r0, sp, #24
 800ec24:	f005 ff6e 	bl	8014b04 <rcl_get_zero_initialized_guard_condition>
 800ec28:	a806      	add	r0, sp, #24
 800ec2a:	c803      	ldmia	r0, {r0, r1}
 800ec2c:	6863      	ldr	r3, [r4, #4]
 800ec2e:	46c4      	mov	ip, r8
 800ec30:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800ec34:	e88b 0003 	stmia.w	fp, {r0, r1}
 800ec38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ec3c:	ae23      	add	r6, sp, #140	@ 0x8c
 800ec3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ec40:	f8dc 3000 	ldr.w	r3, [ip]
 800ec44:	6033      	str	r3, [r6, #0]
 800ec46:	ab28      	add	r3, sp, #160	@ 0xa0
 800ec48:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800ec4c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ec50:	4649      	mov	r1, r9
 800ec52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ec54:	463a      	mov	r2, r7
 800ec56:	4670      	mov	r0, lr
 800ec58:	f005 ff5e 	bl	8014b18 <rcl_guard_condition_init_from_rmw>
 800ec5c:	4681      	mov	r9, r0
 800ec5e:	b328      	cbz	r0, 800ecac <rcl_node_init+0x1e4>
 800ec60:	6863      	ldr	r3, [r4, #4]
 800ec62:	b1f3      	cbz	r3, 800eca2 <rcl_node_init+0x1da>
 800ec64:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800ec66:	b128      	cbz	r0, 800ec74 <rcl_node_init+0x1ac>
 800ec68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ec6c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ec70:	4798      	blx	r3
 800ec72:	6863      	ldr	r3, [r4, #4]
 800ec74:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800ec76:	b110      	cbz	r0, 800ec7e <rcl_node_init+0x1b6>
 800ec78:	f003 faa4 	bl	80121c4 <rmw_destroy_node>
 800ec7c:	6863      	ldr	r3, [r4, #4]
 800ec7e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ec80:	b148      	cbz	r0, 800ec96 <rcl_node_init+0x1ce>
 800ec82:	f005 ffa9 	bl	8014bd8 <rcl_guard_condition_fini>
 800ec86:	6863      	ldr	r3, [r4, #4]
 800ec88:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ec8c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ec8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ec92:	4798      	blx	r3
 800ec94:	6863      	ldr	r3, [r4, #4]
 800ec96:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eca0:	4798      	blx	r3
 800eca2:	2300      	movs	r3, #0
 800eca4:	e9c4 3300 	strd	r3, r3, [r4]
 800eca8:	f04f 0901 	mov.w	r9, #1
 800ecac:	f1ba 0f00 	cmp.w	sl, #0
 800ecb0:	d125      	bne.n	800ecfe <rcl_node_init+0x236>
 800ecb2:	e001      	b.n	800ecb8 <rcl_node_init+0x1f0>
 800ecb4:	f04f 090b 	mov.w	r9, #11
 800ecb8:	4648      	mov	r0, r9
 800ecba:	b029      	add	sp, #164	@ 0xa4
 800ecbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecc0:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800ecc4:	e7f8      	b.n	800ecb8 <rcl_node_init+0x1f0>
 800ecc6:	782b      	ldrb	r3, [r5, #0]
 800ecc8:	2b2f      	cmp	r3, #47	@ 0x2f
 800ecca:	f43f af42 	beq.w	800eb52 <rcl_node_init+0x8a>
 800ecce:	9503      	str	r5, [sp, #12]
 800ecd0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ecd4:	9300      	str	r3, [sp, #0]
 800ecd6:	4b1e      	ldr	r3, [pc, #120]	@ (800ed50 <rcl_node_init+0x288>)
 800ecd8:	9302      	str	r3, [sp, #8]
 800ecda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ecde:	9301      	str	r3, [sp, #4]
 800ece0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800ece4:	f002 fa08 	bl	80110f8 <rcutils_format_string_limit>
 800ece8:	4605      	mov	r5, r0
 800ecea:	b340      	cbz	r0, 800ed3e <rcl_node_init+0x276>
 800ecec:	2200      	movs	r2, #0
 800ecee:	a922      	add	r1, sp, #136	@ 0x88
 800ecf0:	9222      	str	r2, [sp, #136]	@ 0x88
 800ecf2:	f002 fe19 	bl	8011928 <rmw_validate_namespace>
 800ecf6:	4681      	mov	r9, r0
 800ecf8:	2800      	cmp	r0, #0
 800ecfa:	f43f af34 	beq.w	800eb66 <rcl_node_init+0x9e>
 800ecfe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ed02:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ed06:	4628      	mov	r0, r5
 800ed08:	4798      	blx	r3
 800ed0a:	e7d5      	b.n	800ecb8 <rcl_node_init+0x1f0>
 800ed0c:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800ed10:	4648      	mov	r0, r9
 800ed12:	b029      	add	sp, #164	@ 0xa4
 800ed14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed18:	f04f 090a 	mov.w	r9, #10
 800ed1c:	f1ba 0f00 	cmp.w	sl, #0
 800ed20:	d1ed      	bne.n	800ecfe <rcl_node_init+0x236>
 800ed22:	e7c9      	b.n	800ecb8 <rcl_node_init+0x1f0>
 800ed24:	f002 fe70 	bl	8011a08 <rmw_node_name_validation_result_string>
 800ed28:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800ed2c:	e7c4      	b.n	800ecb8 <rcl_node_init+0x1f0>
 800ed2e:	f002 fe0d 	bl	801194c <rmw_namespace_validation_result_string>
 800ed32:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800ed36:	f1ba 0f00 	cmp.w	sl, #0
 800ed3a:	d1e0      	bne.n	800ecfe <rcl_node_init+0x236>
 800ed3c:	e7bc      	b.n	800ecb8 <rcl_node_init+0x1f0>
 800ed3e:	f04f 090a 	mov.w	r9, #10
 800ed42:	e7b9      	b.n	800ecb8 <rcl_node_init+0x1f0>
 800ed44:	08016d94 	.word	0x08016d94
 800ed48:	08016c24 	.word	0x08016c24
 800ed4c:	08016d9c 	.word	0x08016d9c
 800ed50:	08016d98 	.word	0x08016d98

0800ed54 <rcl_node_is_valid>:
 800ed54:	b130      	cbz	r0, 800ed64 <rcl_node_is_valid+0x10>
 800ed56:	6843      	ldr	r3, [r0, #4]
 800ed58:	b123      	cbz	r3, 800ed64 <rcl_node_is_valid+0x10>
 800ed5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ed5c:	b113      	cbz	r3, 800ed64 <rcl_node_is_valid+0x10>
 800ed5e:	6800      	ldr	r0, [r0, #0]
 800ed60:	f7ff bc1e 	b.w	800e5a0 <rcl_context_is_valid>
 800ed64:	2000      	movs	r0, #0
 800ed66:	4770      	bx	lr

0800ed68 <rcl_node_get_name>:
 800ed68:	b120      	cbz	r0, 800ed74 <rcl_node_get_name+0xc>
 800ed6a:	6840      	ldr	r0, [r0, #4]
 800ed6c:	b110      	cbz	r0, 800ed74 <rcl_node_get_name+0xc>
 800ed6e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800ed70:	b100      	cbz	r0, 800ed74 <rcl_node_get_name+0xc>
 800ed72:	6880      	ldr	r0, [r0, #8]
 800ed74:	4770      	bx	lr
 800ed76:	bf00      	nop

0800ed78 <rcl_node_get_namespace>:
 800ed78:	b120      	cbz	r0, 800ed84 <rcl_node_get_namespace+0xc>
 800ed7a:	6840      	ldr	r0, [r0, #4]
 800ed7c:	b110      	cbz	r0, 800ed84 <rcl_node_get_namespace+0xc>
 800ed7e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800ed80:	b100      	cbz	r0, 800ed84 <rcl_node_get_namespace+0xc>
 800ed82:	68c0      	ldr	r0, [r0, #12]
 800ed84:	4770      	bx	lr
 800ed86:	bf00      	nop

0800ed88 <rcl_node_get_options>:
 800ed88:	b128      	cbz	r0, 800ed96 <rcl_node_get_options+0xe>
 800ed8a:	6840      	ldr	r0, [r0, #4]
 800ed8c:	b118      	cbz	r0, 800ed96 <rcl_node_get_options+0xe>
 800ed8e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	bf08      	it	eq
 800ed94:	2000      	moveq	r0, #0
 800ed96:	4770      	bx	lr

0800ed98 <rcl_node_get_rmw_handle>:
 800ed98:	b110      	cbz	r0, 800eda0 <rcl_node_get_rmw_handle+0x8>
 800ed9a:	6840      	ldr	r0, [r0, #4]
 800ed9c:	b100      	cbz	r0, 800eda0 <rcl_node_get_rmw_handle+0x8>
 800ed9e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800eda0:	4770      	bx	lr
 800eda2:	bf00      	nop

0800eda4 <rcl_node_get_default_options>:
 800eda4:	b510      	push	{r4, lr}
 800eda6:	2268      	movs	r2, #104	@ 0x68
 800eda8:	4604      	mov	r4, r0
 800edaa:	2100      	movs	r1, #0
 800edac:	f006 fd50 	bl	8015850 <memset>
 800edb0:	4620      	mov	r0, r4
 800edb2:	f7fb fe3b 	bl	800aa2c <rcutils_get_default_allocator>
 800edb6:	2301      	movs	r3, #1
 800edb8:	7523      	strb	r3, [r4, #20]
 800edba:	4620      	mov	r0, r4
 800edbc:	bd10      	pop	{r4, pc}
 800edbe:	bf00      	nop

0800edc0 <rcl_node_options_copy>:
 800edc0:	b1d0      	cbz	r0, 800edf8 <rcl_node_options_copy+0x38>
 800edc2:	b570      	push	{r4, r5, r6, lr}
 800edc4:	460c      	mov	r4, r1
 800edc6:	b1a9      	cbz	r1, 800edf4 <rcl_node_options_copy+0x34>
 800edc8:	4288      	cmp	r0, r1
 800edca:	4684      	mov	ip, r0
 800edcc:	d012      	beq.n	800edf4 <rcl_node_options_copy+0x34>
 800edce:	4605      	mov	r5, r0
 800edd0:	8a86      	ldrh	r6, [r0, #20]
 800edd2:	468e      	mov	lr, r1
 800edd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800edd6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800edda:	682b      	ldr	r3, [r5, #0]
 800eddc:	f8ce 3000 	str.w	r3, [lr]
 800ede0:	f10c 0118 	add.w	r1, ip, #24
 800ede4:	2250      	movs	r2, #80	@ 0x50
 800ede6:	82a6      	strh	r6, [r4, #20]
 800ede8:	f104 0018 	add.w	r0, r4, #24
 800edec:	f006 fdf9 	bl	80159e2 <memcpy>
 800edf0:	2000      	movs	r0, #0
 800edf2:	bd70      	pop	{r4, r5, r6, pc}
 800edf4:	200b      	movs	r0, #11
 800edf6:	bd70      	pop	{r4, r5, r6, pc}
 800edf8:	200b      	movs	r0, #11
 800edfa:	4770      	bx	lr

0800edfc <rcl_node_resolve_name>:
 800edfc:	b082      	sub	sp, #8
 800edfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee02:	b091      	sub	sp, #68	@ 0x44
 800ee04:	ac1a      	add	r4, sp, #104	@ 0x68
 800ee06:	e884 000c 	stmia.w	r4, {r2, r3}
 800ee0a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	d03b      	beq.n	800ee8a <rcl_node_resolve_name+0x8e>
 800ee12:	460c      	mov	r4, r1
 800ee14:	4605      	mov	r5, r0
 800ee16:	f7ff ffb7 	bl	800ed88 <rcl_node_get_options>
 800ee1a:	2800      	cmp	r0, #0
 800ee1c:	d037      	beq.n	800ee8e <rcl_node_resolve_name+0x92>
 800ee1e:	4628      	mov	r0, r5
 800ee20:	f7ff ffa2 	bl	800ed68 <rcl_node_get_name>
 800ee24:	4606      	mov	r6, r0
 800ee26:	4628      	mov	r0, r5
 800ee28:	f7ff ffa6 	bl	800ed78 <rcl_node_get_namespace>
 800ee2c:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800ee30:	4681      	mov	r9, r0
 800ee32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee36:	ad0b      	add	r5, sp, #44	@ 0x2c
 800ee38:	46ac      	mov	ip, r5
 800ee3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee3e:	f8de 3000 	ldr.w	r3, [lr]
 800ee42:	f8cc 3000 	str.w	r3, [ip]
 800ee46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ee48:	b1fb      	cbz	r3, 800ee8a <rcl_node_resolve_name+0x8e>
 800ee4a:	468a      	mov	sl, r1
 800ee4c:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800ee50:	f002 faaa 	bl	80113a8 <rcutils_get_zero_initialized_string_map>
 800ee54:	ab10      	add	r3, sp, #64	@ 0x40
 800ee56:	9008      	str	r0, [sp, #32]
 800ee58:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800ee5c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ee60:	2100      	movs	r1, #0
 800ee62:	e895 000c 	ldmia.w	r5, {r2, r3}
 800ee66:	a808      	add	r0, sp, #32
 800ee68:	f002 fb16 	bl	8011498 <rcutils_string_map_init>
 800ee6c:	4607      	mov	r7, r0
 800ee6e:	b180      	cbz	r0, 800ee92 <rcl_node_resolve_name+0x96>
 800ee70:	f7fb fdf8 	bl	800aa64 <rcutils_get_error_string>
 800ee74:	f7fb fe0c 	bl	800aa90 <rcutils_reset_error>
 800ee78:	2f0a      	cmp	r7, #10
 800ee7a:	bf18      	it	ne
 800ee7c:	2701      	movne	r7, #1
 800ee7e:	4638      	mov	r0, r7
 800ee80:	b011      	add	sp, #68	@ 0x44
 800ee82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee86:	b002      	add	sp, #8
 800ee88:	4770      	bx	lr
 800ee8a:	270b      	movs	r7, #11
 800ee8c:	e7f7      	b.n	800ee7e <rcl_node_resolve_name+0x82>
 800ee8e:	2701      	movs	r7, #1
 800ee90:	e7f5      	b.n	800ee7e <rcl_node_resolve_name+0x82>
 800ee92:	9009      	str	r0, [sp, #36]	@ 0x24
 800ee94:	9007      	str	r0, [sp, #28]
 800ee96:	a808      	add	r0, sp, #32
 800ee98:	f005 fe2e 	bl	8014af8 <rcl_get_default_topic_name_substitutions>
 800ee9c:	4607      	mov	r7, r0
 800ee9e:	b1a8      	cbz	r0, 800eecc <rcl_node_resolve_name+0xd0>
 800eea0:	280a      	cmp	r0, #10
 800eea2:	9c07      	ldr	r4, [sp, #28]
 800eea4:	d000      	beq.n	800eea8 <rcl_node_resolve_name+0xac>
 800eea6:	2701      	movs	r7, #1
 800eea8:	a808      	add	r0, sp, #32
 800eeaa:	f002 fb35 	bl	8011518 <rcutils_string_map_fini>
 800eeae:	2800      	cmp	r0, #0
 800eeb0:	d13d      	bne.n	800ef2e <rcl_node_resolve_name+0x132>
 800eeb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eeb4:	4659      	mov	r1, fp
 800eeb6:	47d0      	blx	sl
 800eeb8:	4659      	mov	r1, fp
 800eeba:	4620      	mov	r0, r4
 800eebc:	47d0      	blx	sl
 800eebe:	f1b8 0f00 	cmp.w	r8, #0
 800eec2:	d0dc      	beq.n	800ee7e <rcl_node_resolve_name+0x82>
 800eec4:	2f67      	cmp	r7, #103	@ 0x67
 800eec6:	bf08      	it	eq
 800eec8:	2768      	moveq	r7, #104	@ 0x68
 800eeca:	e7d8      	b.n	800ee7e <rcl_node_resolve_name+0x82>
 800eecc:	ab09      	add	r3, sp, #36	@ 0x24
 800eece:	9305      	str	r3, [sp, #20]
 800eed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eed2:	46ec      	mov	ip, sp
 800eed4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eed8:	682b      	ldr	r3, [r5, #0]
 800eeda:	f8cc 3000 	str.w	r3, [ip]
 800eede:	464a      	mov	r2, r9
 800eee0:	4631      	mov	r1, r6
 800eee2:	4620      	mov	r0, r4
 800eee4:	ab08      	add	r3, sp, #32
 800eee6:	f005 fca9 	bl	801483c <rcl_expand_topic_name>
 800eeea:	4607      	mov	r7, r0
 800eeec:	b9b8      	cbnz	r0, 800ef1e <rcl_node_resolve_name+0x122>
 800eeee:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800eef0:	9009      	str	r0, [sp, #36]	@ 0x24
 800eef2:	4602      	mov	r2, r0
 800eef4:	a90a      	add	r1, sp, #40	@ 0x28
 800eef6:	4620      	mov	r0, r4
 800eef8:	f002 fc52 	bl	80117a0 <rmw_validate_full_topic_name>
 800eefc:	b988      	cbnz	r0, 800ef22 <rcl_node_resolve_name+0x126>
 800eefe:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ef00:	b9d5      	cbnz	r5, 800ef38 <rcl_node_resolve_name+0x13c>
 800ef02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ef04:	a808      	add	r0, sp, #32
 800ef06:	601c      	str	r4, [r3, #0]
 800ef08:	f002 fb06 	bl	8011518 <rcutils_string_map_fini>
 800ef0c:	4607      	mov	r7, r0
 800ef0e:	b1a8      	cbz	r0, 800ef3c <rcl_node_resolve_name+0x140>
 800ef10:	f7fb fda8 	bl	800aa64 <rcutils_get_error_string>
 800ef14:	462c      	mov	r4, r5
 800ef16:	f7fb fdbb 	bl	800aa90 <rcutils_reset_error>
 800ef1a:	2701      	movs	r7, #1
 800ef1c:	e7c9      	b.n	800eeb2 <rcl_node_resolve_name+0xb6>
 800ef1e:	9c07      	ldr	r4, [sp, #28]
 800ef20:	e7c2      	b.n	800eea8 <rcl_node_resolve_name+0xac>
 800ef22:	f7fb fd9f 	bl	800aa64 <rcutils_get_error_string>
 800ef26:	2701      	movs	r7, #1
 800ef28:	f7fb fdb2 	bl	800aa90 <rcutils_reset_error>
 800ef2c:	e7bc      	b.n	800eea8 <rcl_node_resolve_name+0xac>
 800ef2e:	f7fb fd99 	bl	800aa64 <rcutils_get_error_string>
 800ef32:	f7fb fdad 	bl	800aa90 <rcutils_reset_error>
 800ef36:	e7bc      	b.n	800eeb2 <rcl_node_resolve_name+0xb6>
 800ef38:	2767      	movs	r7, #103	@ 0x67
 800ef3a:	e7b5      	b.n	800eea8 <rcl_node_resolve_name+0xac>
 800ef3c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef3e:	4659      	mov	r1, fp
 800ef40:	47d0      	blx	sl
 800ef42:	4659      	mov	r1, fp
 800ef44:	4638      	mov	r0, r7
 800ef46:	47d0      	blx	sl
 800ef48:	e799      	b.n	800ee7e <rcl_node_resolve_name+0x82>
 800ef4a:	bf00      	nop

0800ef4c <exact_match_lookup>:
 800ef4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef4e:	f102 0708 	add.w	r7, r2, #8
 800ef52:	460b      	mov	r3, r1
 800ef54:	4614      	mov	r4, r2
 800ef56:	4606      	mov	r6, r0
 800ef58:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800ef5c:	b085      	sub	sp, #20
 800ef5e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ef62:	4618      	mov	r0, r3
 800ef64:	4919      	ldr	r1, [pc, #100]	@ (800efcc <exact_match_lookup+0x80>)
 800ef66:	e894 000c 	ldmia.w	r4, {r2, r3}
 800ef6a:	f002 f8b7 	bl	80110dc <rcutils_join_path>
 800ef6e:	7833      	ldrb	r3, [r6, #0]
 800ef70:	2b2f      	cmp	r3, #47	@ 0x2f
 800ef72:	4605      	mov	r5, r0
 800ef74:	d023      	beq.n	800efbe <exact_match_lookup+0x72>
 800ef76:	f104 030c 	add.w	r3, r4, #12
 800ef7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ef7e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ef82:	1c70      	adds	r0, r6, #1
 800ef84:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ef88:	f002 f8ae 	bl	80110e8 <rcutils_to_native_path>
 800ef8c:	4606      	mov	r6, r0
 800ef8e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800ef92:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ef96:	4631      	mov	r1, r6
 800ef98:	e894 000c 	ldmia.w	r4, {r2, r3}
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	f002 f89d 	bl	80110dc <rcutils_join_path>
 800efa2:	6862      	ldr	r2, [r4, #4]
 800efa4:	6921      	ldr	r1, [r4, #16]
 800efa6:	4603      	mov	r3, r0
 800efa8:	4630      	mov	r0, r6
 800efaa:	461e      	mov	r6, r3
 800efac:	4790      	blx	r2
 800efae:	4628      	mov	r0, r5
 800efb0:	6863      	ldr	r3, [r4, #4]
 800efb2:	6921      	ldr	r1, [r4, #16]
 800efb4:	4798      	blx	r3
 800efb6:	4635      	mov	r5, r6
 800efb8:	4628      	mov	r0, r5
 800efba:	b005      	add	sp, #20
 800efbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efbe:	7873      	ldrb	r3, [r6, #1]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d1d8      	bne.n	800ef76 <exact_match_lookup+0x2a>
 800efc4:	4628      	mov	r0, r5
 800efc6:	b005      	add	sp, #20
 800efc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efca:	bf00      	nop
 800efcc:	08016de8 	.word	0x08016de8

0800efd0 <rcl_get_secure_root>:
 800efd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efd4:	b085      	sub	sp, #20
 800efd6:	b168      	cbz	r0, 800eff4 <rcl_get_secure_root+0x24>
 800efd8:	4607      	mov	r7, r0
 800efda:	4608      	mov	r0, r1
 800efdc:	460c      	mov	r4, r1
 800efde:	f7fb fd33 	bl	800aa48 <rcutils_allocator_is_valid>
 800efe2:	b138      	cbz	r0, 800eff4 <rcl_get_secure_root+0x24>
 800efe4:	2300      	movs	r3, #0
 800efe6:	482d      	ldr	r0, [pc, #180]	@ (800f09c <rcl_get_secure_root+0xcc>)
 800efe8:	9303      	str	r3, [sp, #12]
 800efea:	a903      	add	r1, sp, #12
 800efec:	f002 f85c 	bl	80110a8 <rcutils_get_env>
 800eff0:	4605      	mov	r5, r0
 800eff2:	b120      	cbz	r0, 800effe <rcl_get_secure_root+0x2e>
 800eff4:	2500      	movs	r5, #0
 800eff6:	4628      	mov	r0, r5
 800eff8:	b005      	add	sp, #20
 800effa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800effe:	9b03      	ldr	r3, [sp, #12]
 800f000:	781a      	ldrb	r2, [r3, #0]
 800f002:	2a00      	cmp	r2, #0
 800f004:	d0f6      	beq.n	800eff4 <rcl_get_secure_root+0x24>
 800f006:	f104 090c 	add.w	r9, r4, #12
 800f00a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f00e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f012:	4618      	mov	r0, r3
 800f014:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f018:	f002 f988 	bl	801132c <rcutils_strdup>
 800f01c:	4680      	mov	r8, r0
 800f01e:	2800      	cmp	r0, #0
 800f020:	d0e8      	beq.n	800eff4 <rcl_get_secure_root+0x24>
 800f022:	481f      	ldr	r0, [pc, #124]	@ (800f0a0 <rcl_get_secure_root+0xd0>)
 800f024:	9503      	str	r5, [sp, #12]
 800f026:	a903      	add	r1, sp, #12
 800f028:	f002 f83e 	bl	80110a8 <rcutils_get_env>
 800f02c:	b160      	cbz	r0, 800f048 <rcl_get_secure_root+0x78>
 800f02e:	2600      	movs	r6, #0
 800f030:	6863      	ldr	r3, [r4, #4]
 800f032:	6921      	ldr	r1, [r4, #16]
 800f034:	4630      	mov	r0, r6
 800f036:	4798      	blx	r3
 800f038:	4640      	mov	r0, r8
 800f03a:	6863      	ldr	r3, [r4, #4]
 800f03c:	6921      	ldr	r1, [r4, #16]
 800f03e:	4798      	blx	r3
 800f040:	4628      	mov	r0, r5
 800f042:	b005      	add	sp, #20
 800f044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f048:	9b03      	ldr	r3, [sp, #12]
 800f04a:	781e      	ldrb	r6, [r3, #0]
 800f04c:	b1f6      	cbz	r6, 800f08c <rcl_get_secure_root+0xbc>
 800f04e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f052:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f056:	4618      	mov	r0, r3
 800f058:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f05c:	f002 f966 	bl	801132c <rcutils_strdup>
 800f060:	4606      	mov	r6, r0
 800f062:	2800      	cmp	r0, #0
 800f064:	d0e3      	beq.n	800f02e <rcl_get_secure_root+0x5e>
 800f066:	4622      	mov	r2, r4
 800f068:	4641      	mov	r1, r8
 800f06a:	f7ff ff6f 	bl	800ef4c <exact_match_lookup>
 800f06e:	4605      	mov	r5, r0
 800f070:	2d00      	cmp	r5, #0
 800f072:	d0dd      	beq.n	800f030 <rcl_get_secure_root+0x60>
 800f074:	4628      	mov	r0, r5
 800f076:	f002 f82f 	bl	80110d8 <rcutils_is_directory>
 800f07a:	4603      	mov	r3, r0
 800f07c:	2800      	cmp	r0, #0
 800f07e:	d1d7      	bne.n	800f030 <rcl_get_secure_root+0x60>
 800f080:	4628      	mov	r0, r5
 800f082:	6921      	ldr	r1, [r4, #16]
 800f084:	461d      	mov	r5, r3
 800f086:	6863      	ldr	r3, [r4, #4]
 800f088:	4798      	blx	r3
 800f08a:	e7d1      	b.n	800f030 <rcl_get_secure_root+0x60>
 800f08c:	4622      	mov	r2, r4
 800f08e:	4638      	mov	r0, r7
 800f090:	4641      	mov	r1, r8
 800f092:	f7ff ff5b 	bl	800ef4c <exact_match_lookup>
 800f096:	4605      	mov	r5, r0
 800f098:	e7ea      	b.n	800f070 <rcl_get_secure_root+0xa0>
 800f09a:	bf00      	nop
 800f09c:	08016df4 	.word	0x08016df4
 800f0a0:	08016e0c 	.word	0x08016e0c

0800f0a4 <rcl_get_security_options_from_environment>:
 800f0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a8:	b082      	sub	sp, #8
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	4606      	mov	r6, r0
 800f0ae:	460f      	mov	r7, r1
 800f0b0:	4820      	ldr	r0, [pc, #128]	@ (800f134 <rcl_get_security_options_from_environment+0x90>)
 800f0b2:	9301      	str	r3, [sp, #4]
 800f0b4:	a901      	add	r1, sp, #4
 800f0b6:	4690      	mov	r8, r2
 800f0b8:	f001 fff6 	bl	80110a8 <rcutils_get_env>
 800f0bc:	b120      	cbz	r0, 800f0c8 <rcl_get_security_options_from_environment+0x24>
 800f0be:	2501      	movs	r5, #1
 800f0c0:	4628      	mov	r0, r5
 800f0c2:	b002      	add	sp, #8
 800f0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0c8:	491b      	ldr	r1, [pc, #108]	@ (800f138 <rcl_get_security_options_from_environment+0x94>)
 800f0ca:	4604      	mov	r4, r0
 800f0cc:	9801      	ldr	r0, [sp, #4]
 800f0ce:	f7f1 f887 	bl	80001e0 <strcmp>
 800f0d2:	4605      	mov	r5, r0
 800f0d4:	b9e8      	cbnz	r0, 800f112 <rcl_get_security_options_from_environment+0x6e>
 800f0d6:	9001      	str	r0, [sp, #4]
 800f0d8:	f1b8 0f00 	cmp.w	r8, #0
 800f0dc:	d020      	beq.n	800f120 <rcl_get_security_options_from_environment+0x7c>
 800f0de:	4817      	ldr	r0, [pc, #92]	@ (800f13c <rcl_get_security_options_from_environment+0x98>)
 800f0e0:	a901      	add	r1, sp, #4
 800f0e2:	f001 ffe1 	bl	80110a8 <rcutils_get_env>
 800f0e6:	2800      	cmp	r0, #0
 800f0e8:	d1e9      	bne.n	800f0be <rcl_get_security_options_from_environment+0x1a>
 800f0ea:	4915      	ldr	r1, [pc, #84]	@ (800f140 <rcl_get_security_options_from_environment+0x9c>)
 800f0ec:	9801      	ldr	r0, [sp, #4]
 800f0ee:	f7f1 f877 	bl	80001e0 <strcmp>
 800f0f2:	fab0 f080 	clz	r0, r0
 800f0f6:	0940      	lsrs	r0, r0, #5
 800f0f8:	f888 0000 	strb.w	r0, [r8]
 800f0fc:	4639      	mov	r1, r7
 800f0fe:	4630      	mov	r0, r6
 800f100:	f7ff ff66 	bl	800efd0 <rcl_get_secure_root>
 800f104:	b170      	cbz	r0, 800f124 <rcl_get_security_options_from_environment+0x80>
 800f106:	f8c8 0004 	str.w	r0, [r8, #4]
 800f10a:	4628      	mov	r0, r5
 800f10c:	b002      	add	sp, #8
 800f10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f112:	4625      	mov	r5, r4
 800f114:	4628      	mov	r0, r5
 800f116:	f888 4000 	strb.w	r4, [r8]
 800f11a:	b002      	add	sp, #8
 800f11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f120:	250b      	movs	r5, #11
 800f122:	e7cd      	b.n	800f0c0 <rcl_get_security_options_from_environment+0x1c>
 800f124:	f898 5000 	ldrb.w	r5, [r8]
 800f128:	f1a5 0501 	sub.w	r5, r5, #1
 800f12c:	fab5 f585 	clz	r5, r5
 800f130:	096d      	lsrs	r5, r5, #5
 800f132:	e7c5      	b.n	800f0c0 <rcl_get_security_options_from_environment+0x1c>
 800f134:	08016dac 	.word	0x08016dac
 800f138:	08016dc0 	.word	0x08016dc0
 800f13c:	08016dc8 	.word	0x08016dc8
 800f140:	08016de0 	.word	0x08016de0

0800f144 <rcl_service_get_rmw_handle>:
 800f144:	b118      	cbz	r0, 800f14e <rcl_service_get_rmw_handle+0xa>
 800f146:	6800      	ldr	r0, [r0, #0]
 800f148:	b108      	cbz	r0, 800f14e <rcl_service_get_rmw_handle+0xa>
 800f14a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f14e:	4770      	bx	lr

0800f150 <rcl_take_request>:
 800f150:	b570      	push	{r4, r5, r6, lr}
 800f152:	468e      	mov	lr, r1
 800f154:	460c      	mov	r4, r1
 800f156:	4616      	mov	r6, r2
 800f158:	4605      	mov	r5, r0
 800f15a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f15e:	b08c      	sub	sp, #48	@ 0x30
 800f160:	f10d 0c18 	add.w	ip, sp, #24
 800f164:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f168:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f16c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f170:	b30d      	cbz	r5, 800f1b6 <rcl_take_request+0x66>
 800f172:	682b      	ldr	r3, [r5, #0]
 800f174:	b1fb      	cbz	r3, 800f1b6 <rcl_take_request+0x66>
 800f176:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f17a:	b1e0      	cbz	r0, 800f1b6 <rcl_take_request+0x66>
 800f17c:	b336      	cbz	r6, 800f1cc <rcl_take_request+0x7c>
 800f17e:	2300      	movs	r3, #0
 800f180:	f88d 3007 	strb.w	r3, [sp, #7]
 800f184:	4632      	mov	r2, r6
 800f186:	f10d 0307 	add.w	r3, sp, #7
 800f18a:	a902      	add	r1, sp, #8
 800f18c:	f003 f8ea 	bl	8012364 <rmw_take_request>
 800f190:	4605      	mov	r5, r0
 800f192:	b198      	cbz	r0, 800f1bc <rcl_take_request+0x6c>
 800f194:	280a      	cmp	r0, #10
 800f196:	bf18      	it	ne
 800f198:	2501      	movne	r5, #1
 800f19a:	f10d 0e18 	add.w	lr, sp, #24
 800f19e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f1a2:	46a4      	mov	ip, r4
 800f1a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f1a8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f1ac:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	b00c      	add	sp, #48	@ 0x30
 800f1b4:	bd70      	pop	{r4, r5, r6, pc}
 800f1b6:	f44f 7516 	mov.w	r5, #600	@ 0x258
 800f1ba:	e7ee      	b.n	800f19a <rcl_take_request+0x4a>
 800f1bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f1c0:	f240 2359 	movw	r3, #601	@ 0x259
 800f1c4:	2a00      	cmp	r2, #0
 800f1c6:	bf08      	it	eq
 800f1c8:	461d      	moveq	r5, r3
 800f1ca:	e7e6      	b.n	800f19a <rcl_take_request+0x4a>
 800f1cc:	250b      	movs	r5, #11
 800f1ce:	e7e4      	b.n	800f19a <rcl_take_request+0x4a>

0800f1d0 <rcl_send_response>:
 800f1d0:	b170      	cbz	r0, 800f1f0 <rcl_send_response+0x20>
 800f1d2:	6800      	ldr	r0, [r0, #0]
 800f1d4:	b160      	cbz	r0, 800f1f0 <rcl_send_response+0x20>
 800f1d6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f1da:	b148      	cbz	r0, 800f1f0 <rcl_send_response+0x20>
 800f1dc:	b159      	cbz	r1, 800f1f6 <rcl_send_response+0x26>
 800f1de:	b510      	push	{r4, lr}
 800f1e0:	b15a      	cbz	r2, 800f1fa <rcl_send_response+0x2a>
 800f1e2:	f003 f91d 	bl	8012420 <rmw_send_response>
 800f1e6:	b110      	cbz	r0, 800f1ee <rcl_send_response+0x1e>
 800f1e8:	2802      	cmp	r0, #2
 800f1ea:	bf18      	it	ne
 800f1ec:	2001      	movne	r0, #1
 800f1ee:	bd10      	pop	{r4, pc}
 800f1f0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800f1f4:	4770      	bx	lr
 800f1f6:	200b      	movs	r0, #11
 800f1f8:	4770      	bx	lr
 800f1fa:	200b      	movs	r0, #11
 800f1fc:	bd10      	pop	{r4, pc}
 800f1fe:	bf00      	nop

0800f200 <rcl_service_is_valid>:
 800f200:	b130      	cbz	r0, 800f210 <rcl_service_is_valid+0x10>
 800f202:	6800      	ldr	r0, [r0, #0]
 800f204:	b120      	cbz	r0, 800f210 <rcl_service_is_valid+0x10>
 800f206:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f20a:	3800      	subs	r0, #0
 800f20c:	bf18      	it	ne
 800f20e:	2001      	movne	r0, #1
 800f210:	4770      	bx	lr
 800f212:	bf00      	nop

0800f214 <rcl_get_zero_initialized_subscription>:
 800f214:	4b01      	ldr	r3, [pc, #4]	@ (800f21c <rcl_get_zero_initialized_subscription+0x8>)
 800f216:	6818      	ldr	r0, [r3, #0]
 800f218:	4770      	bx	lr
 800f21a:	bf00      	nop
 800f21c:	08016e2c 	.word	0x08016e2c

0800f220 <rcl_subscription_init>:
 800f220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f224:	b089      	sub	sp, #36	@ 0x24
 800f226:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800f228:	b1d6      	cbz	r6, 800f260 <rcl_subscription_init+0x40>
 800f22a:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800f22e:	4604      	mov	r4, r0
 800f230:	4648      	mov	r0, r9
 800f232:	460d      	mov	r5, r1
 800f234:	4690      	mov	r8, r2
 800f236:	461f      	mov	r7, r3
 800f238:	f7fb fc06 	bl	800aa48 <rcutils_allocator_is_valid>
 800f23c:	b180      	cbz	r0, 800f260 <rcl_subscription_init+0x40>
 800f23e:	b17c      	cbz	r4, 800f260 <rcl_subscription_init+0x40>
 800f240:	4628      	mov	r0, r5
 800f242:	f7ff fd87 	bl	800ed54 <rcl_node_is_valid>
 800f246:	2800      	cmp	r0, #0
 800f248:	d054      	beq.n	800f2f4 <rcl_subscription_init+0xd4>
 800f24a:	f1b8 0f00 	cmp.w	r8, #0
 800f24e:	d007      	beq.n	800f260 <rcl_subscription_init+0x40>
 800f250:	b137      	cbz	r7, 800f260 <rcl_subscription_init+0x40>
 800f252:	6823      	ldr	r3, [r4, #0]
 800f254:	b14b      	cbz	r3, 800f26a <rcl_subscription_init+0x4a>
 800f256:	2764      	movs	r7, #100	@ 0x64
 800f258:	4638      	mov	r0, r7
 800f25a:	b009      	add	sp, #36	@ 0x24
 800f25c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f260:	270b      	movs	r7, #11
 800f262:	4638      	mov	r0, r7
 800f264:	b009      	add	sp, #36	@ 0x24
 800f266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f26a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800f26e:	aa07      	add	r2, sp, #28
 800f270:	9205      	str	r2, [sp, #20]
 800f272:	9307      	str	r3, [sp, #28]
 800f274:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800f278:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f27c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f280:	4639      	mov	r1, r7
 800f282:	e899 000c 	ldmia.w	r9, {r2, r3}
 800f286:	4628      	mov	r0, r5
 800f288:	f7ff fdb8 	bl	800edfc <rcl_node_resolve_name>
 800f28c:	4607      	mov	r7, r0
 800f28e:	2800      	cmp	r0, #0
 800f290:	d15f      	bne.n	800f352 <rcl_subscription_init+0x132>
 800f292:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800f296:	21c8      	movs	r1, #200	@ 0xc8
 800f298:	2001      	movs	r0, #1
 800f29a:	4798      	blx	r3
 800f29c:	6020      	str	r0, [r4, #0]
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	d05d      	beq.n	800f35e <rcl_subscription_init+0x13e>
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	f7ff fd78 	bl	800ed98 <rcl_node_get_rmw_handle>
 800f2a8:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800f2ac:	9300      	str	r3, [sp, #0]
 800f2ae:	9a07      	ldr	r2, [sp, #28]
 800f2b0:	6827      	ldr	r7, [r4, #0]
 800f2b2:	4641      	mov	r1, r8
 800f2b4:	4633      	mov	r3, r6
 800f2b6:	f003 f99d 	bl	80125f4 <rmw_create_subscription>
 800f2ba:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800f2be:	6827      	ldr	r7, [r4, #0]
 800f2c0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800f2c4:	b348      	cbz	r0, 800f31a <rcl_subscription_init+0xfa>
 800f2c6:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800f2ca:	f003 fa75 	bl	80127b8 <rmw_subscription_get_actual_qos>
 800f2ce:	4607      	mov	r7, r0
 800f2d0:	b9a8      	cbnz	r0, 800f2fe <rcl_subscription_init+0xde>
 800f2d2:	6820      	ldr	r0, [r4, #0]
 800f2d4:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800f2d8:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800f2dc:	2270      	movs	r2, #112	@ 0x70
 800f2de:	4631      	mov	r1, r6
 800f2e0:	f006 fb7f 	bl	80159e2 <memcpy>
 800f2e4:	9807      	ldr	r0, [sp, #28]
 800f2e6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800f2e8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800f2ea:	4798      	blx	r3
 800f2ec:	4638      	mov	r0, r7
 800f2ee:	b009      	add	sp, #36	@ 0x24
 800f2f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2f4:	27c8      	movs	r7, #200	@ 0xc8
 800f2f6:	4638      	mov	r0, r7
 800f2f8:	b009      	add	sp, #36	@ 0x24
 800f2fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2fe:	6827      	ldr	r7, [r4, #0]
 800f300:	b32f      	cbz	r7, 800f34e <rcl_subscription_init+0x12e>
 800f302:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f306:	b14b      	cbz	r3, 800f31c <rcl_subscription_init+0xfc>
 800f308:	4628      	mov	r0, r5
 800f30a:	f7ff fd45 	bl	800ed98 <rcl_node_get_rmw_handle>
 800f30e:	6823      	ldr	r3, [r4, #0]
 800f310:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800f314:	f003 fa60 	bl	80127d8 <rmw_destroy_subscription>
 800f318:	6827      	ldr	r7, [r4, #0]
 800f31a:	b197      	cbz	r7, 800f342 <rcl_subscription_init+0x122>
 800f31c:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800f320:	4628      	mov	r0, r5
 800f322:	f7fb fb91 	bl	800aa48 <rcutils_allocator_is_valid>
 800f326:	b158      	cbz	r0, 800f340 <rcl_subscription_init+0x120>
 800f328:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f32a:	b148      	cbz	r0, 800f340 <rcl_subscription_init+0x120>
 800f32c:	4629      	mov	r1, r5
 800f32e:	f002 f98b 	bl	8011648 <rmw_subscription_content_filter_options_fini>
 800f332:	4605      	mov	r5, r0
 800f334:	b9b8      	cbnz	r0, 800f366 <rcl_subscription_init+0x146>
 800f336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f338:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f33a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f33c:	4798      	blx	r3
 800f33e:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800f340:	6827      	ldr	r7, [r4, #0]
 800f342:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800f344:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800f346:	4638      	mov	r0, r7
 800f348:	4798      	blx	r3
 800f34a:	2300      	movs	r3, #0
 800f34c:	6023      	str	r3, [r4, #0]
 800f34e:	2701      	movs	r7, #1
 800f350:	e7c8      	b.n	800f2e4 <rcl_subscription_init+0xc4>
 800f352:	2867      	cmp	r0, #103	@ 0x67
 800f354:	d0c6      	beq.n	800f2e4 <rcl_subscription_init+0xc4>
 800f356:	2869      	cmp	r0, #105	@ 0x69
 800f358:	d003      	beq.n	800f362 <rcl_subscription_init+0x142>
 800f35a:	280a      	cmp	r0, #10
 800f35c:	d1f7      	bne.n	800f34e <rcl_subscription_init+0x12e>
 800f35e:	270a      	movs	r7, #10
 800f360:	e7c0      	b.n	800f2e4 <rcl_subscription_init+0xc4>
 800f362:	2767      	movs	r7, #103	@ 0x67
 800f364:	e7be      	b.n	800f2e4 <rcl_subscription_init+0xc4>
 800f366:	f7ff f8fd 	bl	800e564 <rcl_convert_rmw_ret_to_rcl_ret>
 800f36a:	6827      	ldr	r7, [r4, #0]
 800f36c:	e7e9      	b.n	800f342 <rcl_subscription_init+0x122>
 800f36e:	bf00      	nop

0800f370 <rcl_subscription_get_default_options>:
 800f370:	b570      	push	{r4, r5, r6, lr}
 800f372:	4d14      	ldr	r5, [pc, #80]	@ (800f3c4 <rcl_subscription_get_default_options+0x54>)
 800f374:	4914      	ldr	r1, [pc, #80]	@ (800f3c8 <rcl_subscription_get_default_options+0x58>)
 800f376:	b08a      	sub	sp, #40	@ 0x28
 800f378:	4604      	mov	r4, r0
 800f37a:	2250      	movs	r2, #80	@ 0x50
 800f37c:	4628      	mov	r0, r5
 800f37e:	f006 fb30 	bl	80159e2 <memcpy>
 800f382:	a804      	add	r0, sp, #16
 800f384:	f7fb fb52 	bl	800aa2c <rcutils_get_default_allocator>
 800f388:	f10d 0c10 	add.w	ip, sp, #16
 800f38c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f390:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800f394:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f398:	466e      	mov	r6, sp
 800f39a:	f8dc 3000 	ldr.w	r3, [ip]
 800f39e:	f8ce 3000 	str.w	r3, [lr]
 800f3a2:	4630      	mov	r0, r6
 800f3a4:	f002 f96a 	bl	801167c <rmw_get_default_subscription_options>
 800f3a8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f3ac:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800f3b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f3b4:	2270      	movs	r2, #112	@ 0x70
 800f3b6:	4629      	mov	r1, r5
 800f3b8:	4620      	mov	r0, r4
 800f3ba:	f006 fb12 	bl	80159e2 <memcpy>
 800f3be:	4620      	mov	r0, r4
 800f3c0:	b00a      	add	sp, #40	@ 0x28
 800f3c2:	bd70      	pop	{r4, r5, r6, pc}
 800f3c4:	2000dbb0 	.word	0x2000dbb0
 800f3c8:	08016e30 	.word	0x08016e30

0800f3cc <rcl_take>:
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	d04a      	beq.n	800f466 <rcl_take+0x9a>
 800f3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3d4:	4604      	mov	r4, r0
 800f3d6:	6800      	ldr	r0, [r0, #0]
 800f3d8:	b0a4      	sub	sp, #144	@ 0x90
 800f3da:	2800      	cmp	r0, #0
 800f3dc:	d03b      	beq.n	800f456 <rcl_take+0x8a>
 800f3de:	461f      	mov	r7, r3
 800f3e0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d036      	beq.n	800f456 <rcl_take+0x8a>
 800f3e8:	460e      	mov	r6, r1
 800f3ea:	2900      	cmp	r1, #0
 800f3ec:	d039      	beq.n	800f462 <rcl_take+0x96>
 800f3ee:	4615      	mov	r5, r2
 800f3f0:	2a00      	cmp	r2, #0
 800f3f2:	d03c      	beq.n	800f46e <rcl_take+0xa2>
 800f3f4:	a802      	add	r0, sp, #8
 800f3f6:	f002 f9cb 	bl	8011790 <rmw_get_zero_initialized_message_info>
 800f3fa:	f10d 0c08 	add.w	ip, sp, #8
 800f3fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f402:	46ae      	mov	lr, r5
 800f404:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f408:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f40c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f410:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f414:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f418:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800f41c:	f04f 0800 	mov.w	r8, #0
 800f420:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800f424:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800f428:	6822      	ldr	r2, [r4, #0]
 800f42a:	462b      	mov	r3, r5
 800f42c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800f430:	9700      	str	r7, [sp, #0]
 800f432:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800f436:	4631      	mov	r1, r6
 800f438:	f003 fa2e 	bl	8012898 <rmw_take_with_info>
 800f43c:	4603      	mov	r3, r0
 800f43e:	b9c0      	cbnz	r0, 800f472 <rcl_take+0xa6>
 800f440:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800f444:	f240 1291 	movw	r2, #401	@ 0x191
 800f448:	2900      	cmp	r1, #0
 800f44a:	bf08      	it	eq
 800f44c:	4613      	moveq	r3, r2
 800f44e:	4618      	mov	r0, r3
 800f450:	b024      	add	sp, #144	@ 0x90
 800f452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f456:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800f45a:	4618      	mov	r0, r3
 800f45c:	b024      	add	sp, #144	@ 0x90
 800f45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f462:	230b      	movs	r3, #11
 800f464:	e7f3      	b.n	800f44e <rcl_take+0x82>
 800f466:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800f46a:	4618      	mov	r0, r3
 800f46c:	4770      	bx	lr
 800f46e:	ad14      	add	r5, sp, #80	@ 0x50
 800f470:	e7c0      	b.n	800f3f4 <rcl_take+0x28>
 800f472:	f7ff f877 	bl	800e564 <rcl_convert_rmw_ret_to_rcl_ret>
 800f476:	4603      	mov	r3, r0
 800f478:	e7e9      	b.n	800f44e <rcl_take+0x82>
 800f47a:	bf00      	nop

0800f47c <rcl_subscription_get_rmw_handle>:
 800f47c:	b118      	cbz	r0, 800f486 <rcl_subscription_get_rmw_handle+0xa>
 800f47e:	6800      	ldr	r0, [r0, #0]
 800f480:	b108      	cbz	r0, 800f486 <rcl_subscription_get_rmw_handle+0xa>
 800f482:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800f486:	4770      	bx	lr

0800f488 <rcl_subscription_is_valid>:
 800f488:	b130      	cbz	r0, 800f498 <rcl_subscription_is_valid+0x10>
 800f48a:	6800      	ldr	r0, [r0, #0]
 800f48c:	b120      	cbz	r0, 800f498 <rcl_subscription_is_valid+0x10>
 800f48e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800f492:	3800      	subs	r0, #0
 800f494:	bf18      	it	ne
 800f496:	2001      	movne	r0, #1
 800f498:	4770      	bx	lr
 800f49a:	bf00      	nop

0800f49c <rcl_get_system_time>:
 800f49c:	4608      	mov	r0, r1
 800f49e:	f7fb bb13 	b.w	800aac8 <rcutils_system_time_now>
 800f4a2:	bf00      	nop

0800f4a4 <rcl_get_steady_time>:
 800f4a4:	4608      	mov	r0, r1
 800f4a6:	f7fb bb37 	b.w	800ab18 <rcutils_steady_time_now>
 800f4aa:	bf00      	nop

0800f4ac <rcl_get_ros_time>:
 800f4ac:	7a03      	ldrb	r3, [r0, #8]
 800f4ae:	b510      	push	{r4, lr}
 800f4b0:	460c      	mov	r4, r1
 800f4b2:	b133      	cbz	r3, 800f4c2 <rcl_get_ros_time+0x16>
 800f4b4:	2105      	movs	r1, #5
 800f4b6:	f001 fd53 	bl	8010f60 <__atomic_load_8>
 800f4ba:	e9c4 0100 	strd	r0, r1, [r4]
 800f4be:	2000      	movs	r0, #0
 800f4c0:	bd10      	pop	{r4, pc}
 800f4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4c6:	4608      	mov	r0, r1
 800f4c8:	f7fb bafe 	b.w	800aac8 <rcutils_system_time_now>

0800f4cc <rcl_clock_init>:
 800f4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ce:	4605      	mov	r5, r0
 800f4d0:	4610      	mov	r0, r2
 800f4d2:	4614      	mov	r4, r2
 800f4d4:	460e      	mov	r6, r1
 800f4d6:	f7fb fab7 	bl	800aa48 <rcutils_allocator_is_valid>
 800f4da:	b128      	cbz	r0, 800f4e8 <rcl_clock_init+0x1c>
 800f4dc:	2d03      	cmp	r5, #3
 800f4de:	d803      	bhi.n	800f4e8 <rcl_clock_init+0x1c>
 800f4e0:	e8df f005 	tbb	[pc, r5]
 800f4e4:	06532e1d 	.word	0x06532e1d
 800f4e8:	f04f 0c0b 	mov.w	ip, #11
 800f4ec:	4660      	mov	r0, ip
 800f4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4f0:	2e00      	cmp	r6, #0
 800f4f2:	d0f9      	beq.n	800f4e8 <rcl_clock_init+0x1c>
 800f4f4:	2c00      	cmp	r4, #0
 800f4f6:	d0f7      	beq.n	800f4e8 <rcl_clock_init+0x1c>
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f4fe:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 800f5b4 <rcl_clock_init+0xe8>
 800f502:	6133      	str	r3, [r6, #16]
 800f504:	f106 0514 	add.w	r5, r6, #20
 800f508:	469c      	mov	ip, r3
 800f50a:	2703      	movs	r7, #3
 800f50c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f50e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f510:	6823      	ldr	r3, [r4, #0]
 800f512:	602b      	str	r3, [r5, #0]
 800f514:	7037      	strb	r7, [r6, #0]
 800f516:	f8c6 e00c 	str.w	lr, [r6, #12]
 800f51a:	4660      	mov	r0, ip
 800f51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f51e:	2e00      	cmp	r6, #0
 800f520:	d0e2      	beq.n	800f4e8 <rcl_clock_init+0x1c>
 800f522:	2300      	movs	r3, #0
 800f524:	7033      	strb	r3, [r6, #0]
 800f526:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f52a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800f52e:	469c      	mov	ip, r3
 800f530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f532:	f106 0514 	add.w	r5, r6, #20
 800f536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f538:	6823      	ldr	r3, [r4, #0]
 800f53a:	602b      	str	r3, [r5, #0]
 800f53c:	4660      	mov	r0, ip
 800f53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f540:	2e00      	cmp	r6, #0
 800f542:	d0d1      	beq.n	800f4e8 <rcl_clock_init+0x1c>
 800f544:	2c00      	cmp	r4, #0
 800f546:	d0cf      	beq.n	800f4e8 <rcl_clock_init+0x1c>
 800f548:	2700      	movs	r7, #0
 800f54a:	7037      	strb	r7, [r6, #0]
 800f54c:	46a4      	mov	ip, r4
 800f54e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f552:	f106 0514 	add.w	r5, r6, #20
 800f556:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800f55a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800f55e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f560:	f8dc 3000 	ldr.w	r3, [ip]
 800f564:	602b      	str	r3, [r5, #0]
 800f566:	6921      	ldr	r1, [r4, #16]
 800f568:	6823      	ldr	r3, [r4, #0]
 800f56a:	2010      	movs	r0, #16
 800f56c:	4798      	blx	r3
 800f56e:	6130      	str	r0, [r6, #16]
 800f570:	b1d0      	cbz	r0, 800f5a8 <rcl_clock_init+0xdc>
 800f572:	2200      	movs	r2, #0
 800f574:	2300      	movs	r3, #0
 800f576:	e9c0 2300 	strd	r2, r3, [r0]
 800f57a:	2301      	movs	r3, #1
 800f57c:	7207      	strb	r7, [r0, #8]
 800f57e:	4a0c      	ldr	r2, [pc, #48]	@ (800f5b0 <rcl_clock_init+0xe4>)
 800f580:	7033      	strb	r3, [r6, #0]
 800f582:	46bc      	mov	ip, r7
 800f584:	60f2      	str	r2, [r6, #12]
 800f586:	4660      	mov	r0, ip
 800f588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f58a:	2e00      	cmp	r6, #0
 800f58c:	d0ac      	beq.n	800f4e8 <rcl_clock_init+0x1c>
 800f58e:	2c00      	cmp	r4, #0
 800f590:	d0aa      	beq.n	800f4e8 <rcl_clock_init+0x1c>
 800f592:	2300      	movs	r3, #0
 800f594:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f598:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 800f5b8 <rcl_clock_init+0xec>
 800f59c:	6133      	str	r3, [r6, #16]
 800f59e:	f106 0514 	add.w	r5, r6, #20
 800f5a2:	469c      	mov	ip, r3
 800f5a4:	2702      	movs	r7, #2
 800f5a6:	e7b1      	b.n	800f50c <rcl_clock_init+0x40>
 800f5a8:	f04f 0c0a 	mov.w	ip, #10
 800f5ac:	e79e      	b.n	800f4ec <rcl_clock_init+0x20>
 800f5ae:	bf00      	nop
 800f5b0:	0800f4ad 	.word	0x0800f4ad
 800f5b4:	0800f4a5 	.word	0x0800f4a5
 800f5b8:	0800f49d 	.word	0x0800f49d

0800f5bc <rcl_clock_get_now>:
 800f5bc:	b140      	cbz	r0, 800f5d0 <rcl_clock_get_now+0x14>
 800f5be:	b139      	cbz	r1, 800f5d0 <rcl_clock_get_now+0x14>
 800f5c0:	7803      	ldrb	r3, [r0, #0]
 800f5c2:	b11b      	cbz	r3, 800f5cc <rcl_clock_get_now+0x10>
 800f5c4:	68c3      	ldr	r3, [r0, #12]
 800f5c6:	b10b      	cbz	r3, 800f5cc <rcl_clock_get_now+0x10>
 800f5c8:	6900      	ldr	r0, [r0, #16]
 800f5ca:	4718      	bx	r3
 800f5cc:	2001      	movs	r0, #1
 800f5ce:	4770      	bx	lr
 800f5d0:	200b      	movs	r0, #11
 800f5d2:	4770      	bx	lr

0800f5d4 <rcl_timer_call>:
 800f5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d8:	b087      	sub	sp, #28
 800f5da:	2800      	cmp	r0, #0
 800f5dc:	d06d      	beq.n	800f6ba <rcl_timer_call+0xe6>
 800f5de:	6803      	ldr	r3, [r0, #0]
 800f5e0:	4604      	mov	r4, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d063      	beq.n	800f6ae <rcl_timer_call+0xda>
 800f5e6:	f3bf 8f5b 	dmb	ish
 800f5ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f5ee:	f3bf 8f5b 	dmb	ish
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d150      	bne.n	800f698 <rcl_timer_call+0xc4>
 800f5f6:	6803      	ldr	r3, [r0, #0]
 800f5f8:	a904      	add	r1, sp, #16
 800f5fa:	6818      	ldr	r0, [r3, #0]
 800f5fc:	f7ff ffde 	bl	800f5bc <rcl_clock_get_now>
 800f600:	4605      	mov	r5, r0
 800f602:	2800      	cmp	r0, #0
 800f604:	d14a      	bne.n	800f69c <rcl_timer_call+0xc8>
 800f606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	db4a      	blt.n	800f6a4 <rcl_timer_call+0xd0>
 800f60e:	6820      	ldr	r0, [r4, #0]
 800f610:	f04f 0a05 	mov.w	sl, #5
 800f614:	f8cd a000 	str.w	sl, [sp]
 800f618:	3020      	adds	r0, #32
 800f61a:	f001 fd0d 	bl	8011038 <__atomic_exchange_8>
 800f61e:	6823      	ldr	r3, [r4, #0]
 800f620:	f3bf 8f5b 	dmb	ish
 800f624:	4680      	mov	r8, r0
 800f626:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800f62a:	f3bf 8f5b 	dmb	ish
 800f62e:	6820      	ldr	r0, [r4, #0]
 800f630:	4689      	mov	r9, r1
 800f632:	3028      	adds	r0, #40	@ 0x28
 800f634:	4651      	mov	r1, sl
 800f636:	f001 fc93 	bl	8010f60 <__atomic_load_8>
 800f63a:	4606      	mov	r6, r0
 800f63c:	6820      	ldr	r0, [r4, #0]
 800f63e:	460f      	mov	r7, r1
 800f640:	3018      	adds	r0, #24
 800f642:	4651      	mov	r1, sl
 800f644:	f001 fc8c 	bl	8010f60 <__atomic_load_8>
 800f648:	1836      	adds	r6, r6, r0
 800f64a:	4602      	mov	r2, r0
 800f64c:	4682      	mov	sl, r0
 800f64e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800f652:	eb47 0701 	adc.w	r7, r7, r1
 800f656:	4286      	cmp	r6, r0
 800f658:	460b      	mov	r3, r1
 800f65a:	eb77 010c 	sbcs.w	r1, r7, ip
 800f65e:	da04      	bge.n	800f66a <rcl_timer_call+0x96>
 800f660:	ea53 0102 	orrs.w	r1, r3, r2
 800f664:	d12e      	bne.n	800f6c4 <rcl_timer_call+0xf0>
 800f666:	4606      	mov	r6, r0
 800f668:	4667      	mov	r7, ip
 800f66a:	6820      	ldr	r0, [r4, #0]
 800f66c:	2105      	movs	r1, #5
 800f66e:	4632      	mov	r2, r6
 800f670:	463b      	mov	r3, r7
 800f672:	3028      	adds	r0, #40	@ 0x28
 800f674:	9100      	str	r1, [sp, #0]
 800f676:	f001 fca9 	bl	8010fcc <__atomic_store_8>
 800f67a:	f1bb 0f00 	cmp.w	fp, #0
 800f67e:	d00d      	beq.n	800f69c <rcl_timer_call+0xc8>
 800f680:	9a04      	ldr	r2, [sp, #16]
 800f682:	9b05      	ldr	r3, [sp, #20]
 800f684:	ebb2 0208 	subs.w	r2, r2, r8
 800f688:	4620      	mov	r0, r4
 800f68a:	eb63 0309 	sbc.w	r3, r3, r9
 800f68e:	47d8      	blx	fp
 800f690:	4628      	mov	r0, r5
 800f692:	b007      	add	sp, #28
 800f694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f698:	f240 3521 	movw	r5, #801	@ 0x321
 800f69c:	4628      	mov	r0, r5
 800f69e:	b007      	add	sp, #28
 800f6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6a4:	2501      	movs	r5, #1
 800f6a6:	4628      	mov	r0, r5
 800f6a8:	b007      	add	sp, #28
 800f6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ae:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800f6b2:	4628      	mov	r0, r5
 800f6b4:	b007      	add	sp, #28
 800f6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ba:	250b      	movs	r5, #11
 800f6bc:	4628      	mov	r0, r5
 800f6be:	b007      	add	sp, #28
 800f6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6c4:	1b80      	subs	r0, r0, r6
 800f6c6:	eb6c 0107 	sbc.w	r1, ip, r7
 800f6ca:	3801      	subs	r0, #1
 800f6cc:	f161 0100 	sbc.w	r1, r1, #0
 800f6d0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800f6d4:	f7f0 ffbe 	bl	8000654 <__aeabi_ldivmod>
 800f6d8:	9b02      	ldr	r3, [sp, #8]
 800f6da:	3001      	adds	r0, #1
 800f6dc:	f141 0100 	adc.w	r1, r1, #0
 800f6e0:	fb00 f303 	mul.w	r3, r0, r3
 800f6e4:	fb01 330a 	mla	r3, r1, sl, r3
 800f6e8:	fba0 0a0a 	umull	r0, sl, r0, sl
 800f6ec:	1986      	adds	r6, r0, r6
 800f6ee:	4453      	add	r3, sl
 800f6f0:	eb43 0707 	adc.w	r7, r3, r7
 800f6f4:	e7b9      	b.n	800f66a <rcl_timer_call+0x96>
 800f6f6:	bf00      	nop

0800f6f8 <rcl_timer_is_ready>:
 800f6f8:	b570      	push	{r4, r5, r6, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	b378      	cbz	r0, 800f75e <rcl_timer_is_ready+0x66>
 800f6fe:	6803      	ldr	r3, [r0, #0]
 800f700:	4604      	mov	r4, r0
 800f702:	b383      	cbz	r3, 800f766 <rcl_timer_is_ready+0x6e>
 800f704:	460d      	mov	r5, r1
 800f706:	b351      	cbz	r1, 800f75e <rcl_timer_is_ready+0x66>
 800f708:	f3bf 8f5b 	dmb	ish
 800f70c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f710:	f3bf 8f5b 	dmb	ish
 800f714:	b953      	cbnz	r3, 800f72c <rcl_timer_is_ready+0x34>
 800f716:	6803      	ldr	r3, [r0, #0]
 800f718:	4669      	mov	r1, sp
 800f71a:	6818      	ldr	r0, [r3, #0]
 800f71c:	f7ff ff4e 	bl	800f5bc <rcl_clock_get_now>
 800f720:	4606      	mov	r6, r0
 800f722:	b140      	cbz	r0, 800f736 <rcl_timer_is_ready+0x3e>
 800f724:	f240 3321 	movw	r3, #801	@ 0x321
 800f728:	4298      	cmp	r0, r3
 800f72a:	d101      	bne.n	800f730 <rcl_timer_is_ready+0x38>
 800f72c:	2600      	movs	r6, #0
 800f72e:	702e      	strb	r6, [r5, #0]
 800f730:	4630      	mov	r0, r6
 800f732:	b002      	add	sp, #8
 800f734:	bd70      	pop	{r4, r5, r6, pc}
 800f736:	6820      	ldr	r0, [r4, #0]
 800f738:	2105      	movs	r1, #5
 800f73a:	3028      	adds	r0, #40	@ 0x28
 800f73c:	f001 fc10 	bl	8010f60 <__atomic_load_8>
 800f740:	9b00      	ldr	r3, [sp, #0]
 800f742:	1ac0      	subs	r0, r0, r3
 800f744:	9b01      	ldr	r3, [sp, #4]
 800f746:	eb61 0103 	sbc.w	r1, r1, r3
 800f74a:	2801      	cmp	r0, #1
 800f74c:	f171 0300 	sbcs.w	r3, r1, #0
 800f750:	bfb4      	ite	lt
 800f752:	2301      	movlt	r3, #1
 800f754:	2300      	movge	r3, #0
 800f756:	4630      	mov	r0, r6
 800f758:	702b      	strb	r3, [r5, #0]
 800f75a:	b002      	add	sp, #8
 800f75c:	bd70      	pop	{r4, r5, r6, pc}
 800f75e:	260b      	movs	r6, #11
 800f760:	4630      	mov	r0, r6
 800f762:	b002      	add	sp, #8
 800f764:	bd70      	pop	{r4, r5, r6, pc}
 800f766:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800f76a:	e7e1      	b.n	800f730 <rcl_timer_is_ready+0x38>

0800f76c <rcl_timer_get_time_until_next_call>:
 800f76c:	b570      	push	{r4, r5, r6, lr}
 800f76e:	b082      	sub	sp, #8
 800f770:	b330      	cbz	r0, 800f7c0 <rcl_timer_get_time_until_next_call+0x54>
 800f772:	6803      	ldr	r3, [r0, #0]
 800f774:	4604      	mov	r4, r0
 800f776:	b33b      	cbz	r3, 800f7c8 <rcl_timer_get_time_until_next_call+0x5c>
 800f778:	460d      	mov	r5, r1
 800f77a:	b309      	cbz	r1, 800f7c0 <rcl_timer_get_time_until_next_call+0x54>
 800f77c:	f3bf 8f5b 	dmb	ish
 800f780:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f784:	f3bf 8f5b 	dmb	ish
 800f788:	b9ab      	cbnz	r3, 800f7b6 <rcl_timer_get_time_until_next_call+0x4a>
 800f78a:	6803      	ldr	r3, [r0, #0]
 800f78c:	4669      	mov	r1, sp
 800f78e:	6818      	ldr	r0, [r3, #0]
 800f790:	f7ff ff14 	bl	800f5bc <rcl_clock_get_now>
 800f794:	4606      	mov	r6, r0
 800f796:	b958      	cbnz	r0, 800f7b0 <rcl_timer_get_time_until_next_call+0x44>
 800f798:	6820      	ldr	r0, [r4, #0]
 800f79a:	2105      	movs	r1, #5
 800f79c:	3028      	adds	r0, #40	@ 0x28
 800f79e:	f001 fbdf 	bl	8010f60 <__atomic_load_8>
 800f7a2:	9b00      	ldr	r3, [sp, #0]
 800f7a4:	1ac0      	subs	r0, r0, r3
 800f7a6:	9b01      	ldr	r3, [sp, #4]
 800f7a8:	6028      	str	r0, [r5, #0]
 800f7aa:	eb61 0103 	sbc.w	r1, r1, r3
 800f7ae:	6069      	str	r1, [r5, #4]
 800f7b0:	4630      	mov	r0, r6
 800f7b2:	b002      	add	sp, #8
 800f7b4:	bd70      	pop	{r4, r5, r6, pc}
 800f7b6:	f240 3621 	movw	r6, #801	@ 0x321
 800f7ba:	4630      	mov	r0, r6
 800f7bc:	b002      	add	sp, #8
 800f7be:	bd70      	pop	{r4, r5, r6, pc}
 800f7c0:	260b      	movs	r6, #11
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	b002      	add	sp, #8
 800f7c6:	bd70      	pop	{r4, r5, r6, pc}
 800f7c8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800f7cc:	e7f0      	b.n	800f7b0 <rcl_timer_get_time_until_next_call+0x44>
 800f7ce:	bf00      	nop

0800f7d0 <rcl_timer_get_guard_condition>:
 800f7d0:	b130      	cbz	r0, 800f7e0 <rcl_timer_get_guard_condition+0x10>
 800f7d2:	6800      	ldr	r0, [r0, #0]
 800f7d4:	b120      	cbz	r0, 800f7e0 <rcl_timer_get_guard_condition+0x10>
 800f7d6:	68c3      	ldr	r3, [r0, #12]
 800f7d8:	b10b      	cbz	r3, 800f7de <rcl_timer_get_guard_condition+0xe>
 800f7da:	3008      	adds	r0, #8
 800f7dc:	4770      	bx	lr
 800f7de:	4618      	mov	r0, r3
 800f7e0:	4770      	bx	lr
 800f7e2:	bf00      	nop

0800f7e4 <rcl_validate_enclave_name_with_size>:
 800f7e4:	b378      	cbz	r0, 800f846 <rcl_validate_enclave_name_with_size+0x62>
 800f7e6:	b570      	push	{r4, r5, r6, lr}
 800f7e8:	4615      	mov	r5, r2
 800f7ea:	b0c2      	sub	sp, #264	@ 0x108
 800f7ec:	b302      	cbz	r2, 800f830 <rcl_validate_enclave_name_with_size+0x4c>
 800f7ee:	461e      	mov	r6, r3
 800f7f0:	466a      	mov	r2, sp
 800f7f2:	ab01      	add	r3, sp, #4
 800f7f4:	460c      	mov	r4, r1
 800f7f6:	f002 f849 	bl	801188c <rmw_validate_namespace_with_size>
 800f7fa:	4684      	mov	ip, r0
 800f7fc:	b9e8      	cbnz	r0, 800f83a <rcl_validate_enclave_name_with_size+0x56>
 800f7fe:	9b00      	ldr	r3, [sp, #0]
 800f800:	b923      	cbnz	r3, 800f80c <rcl_validate_enclave_name_with_size+0x28>
 800f802:	2300      	movs	r3, #0
 800f804:	602b      	str	r3, [r5, #0]
 800f806:	4660      	mov	r0, ip
 800f808:	b042      	add	sp, #264	@ 0x108
 800f80a:	bd70      	pop	{r4, r5, r6, pc}
 800f80c:	2b07      	cmp	r3, #7
 800f80e:	d007      	beq.n	800f820 <rcl_validate_enclave_name_with_size+0x3c>
 800f810:	1e5a      	subs	r2, r3, #1
 800f812:	2a05      	cmp	r2, #5
 800f814:	d833      	bhi.n	800f87e <rcl_validate_enclave_name_with_size+0x9a>
 800f816:	e8df f002 	tbb	[pc, r2]
 800f81a:	2c2f      	.short	0x2c2f
 800f81c:	1a232629 	.word	0x1a232629
 800f820:	2cff      	cmp	r4, #255	@ 0xff
 800f822:	d9ee      	bls.n	800f802 <rcl_validate_enclave_name_with_size+0x1e>
 800f824:	602b      	str	r3, [r5, #0]
 800f826:	2e00      	cmp	r6, #0
 800f828:	d0ed      	beq.n	800f806 <rcl_validate_enclave_name_with_size+0x22>
 800f82a:	23fe      	movs	r3, #254	@ 0xfe
 800f82c:	6033      	str	r3, [r6, #0]
 800f82e:	e7ea      	b.n	800f806 <rcl_validate_enclave_name_with_size+0x22>
 800f830:	f04f 0c0b 	mov.w	ip, #11
 800f834:	4660      	mov	r0, ip
 800f836:	b042      	add	sp, #264	@ 0x108
 800f838:	bd70      	pop	{r4, r5, r6, pc}
 800f83a:	f7fe fe93 	bl	800e564 <rcl_convert_rmw_ret_to_rcl_ret>
 800f83e:	4684      	mov	ip, r0
 800f840:	4660      	mov	r0, ip
 800f842:	b042      	add	sp, #264	@ 0x108
 800f844:	bd70      	pop	{r4, r5, r6, pc}
 800f846:	f04f 0c0b 	mov.w	ip, #11
 800f84a:	4660      	mov	r0, ip
 800f84c:	4770      	bx	lr
 800f84e:	2306      	movs	r3, #6
 800f850:	602b      	str	r3, [r5, #0]
 800f852:	2e00      	cmp	r6, #0
 800f854:	d0d7      	beq.n	800f806 <rcl_validate_enclave_name_with_size+0x22>
 800f856:	9b01      	ldr	r3, [sp, #4]
 800f858:	6033      	str	r3, [r6, #0]
 800f85a:	4660      	mov	r0, ip
 800f85c:	b042      	add	sp, #264	@ 0x108
 800f85e:	bd70      	pop	{r4, r5, r6, pc}
 800f860:	2305      	movs	r3, #5
 800f862:	602b      	str	r3, [r5, #0]
 800f864:	e7f5      	b.n	800f852 <rcl_validate_enclave_name_with_size+0x6e>
 800f866:	2304      	movs	r3, #4
 800f868:	602b      	str	r3, [r5, #0]
 800f86a:	e7f2      	b.n	800f852 <rcl_validate_enclave_name_with_size+0x6e>
 800f86c:	2303      	movs	r3, #3
 800f86e:	602b      	str	r3, [r5, #0]
 800f870:	e7ef      	b.n	800f852 <rcl_validate_enclave_name_with_size+0x6e>
 800f872:	2302      	movs	r3, #2
 800f874:	602b      	str	r3, [r5, #0]
 800f876:	e7ec      	b.n	800f852 <rcl_validate_enclave_name_with_size+0x6e>
 800f878:	2301      	movs	r3, #1
 800f87a:	602b      	str	r3, [r5, #0]
 800f87c:	e7e9      	b.n	800f852 <rcl_validate_enclave_name_with_size+0x6e>
 800f87e:	4a04      	ldr	r2, [pc, #16]	@ (800f890 <rcl_validate_enclave_name_with_size+0xac>)
 800f880:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f884:	a802      	add	r0, sp, #8
 800f886:	f001 fd25 	bl	80112d4 <rcutils_snprintf>
 800f88a:	f04f 0c01 	mov.w	ip, #1
 800f88e:	e7ba      	b.n	800f806 <rcl_validate_enclave_name_with_size+0x22>
 800f890:	08016e80 	.word	0x08016e80

0800f894 <rcl_validate_enclave_name>:
 800f894:	b168      	cbz	r0, 800f8b2 <rcl_validate_enclave_name+0x1e>
 800f896:	b570      	push	{r4, r5, r6, lr}
 800f898:	460d      	mov	r5, r1
 800f89a:	4616      	mov	r6, r2
 800f89c:	4604      	mov	r4, r0
 800f89e:	f7f0 fca9 	bl	80001f4 <strlen>
 800f8a2:	4633      	mov	r3, r6
 800f8a4:	4601      	mov	r1, r0
 800f8a6:	462a      	mov	r2, r5
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f8ae:	f7ff bf99 	b.w	800f7e4 <rcl_validate_enclave_name_with_size>
 800f8b2:	200b      	movs	r0, #11
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop

0800f8b8 <rcl_get_zero_initialized_wait_set>:
 800f8b8:	b510      	push	{r4, lr}
 800f8ba:	4c08      	ldr	r4, [pc, #32]	@ (800f8dc <rcl_get_zero_initialized_wait_set+0x24>)
 800f8bc:	4686      	mov	lr, r0
 800f8be:	4684      	mov	ip, r0
 800f8c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f8c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f8c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f8ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8d2:	6823      	ldr	r3, [r4, #0]
 800f8d4:	f8cc 3000 	str.w	r3, [ip]
 800f8d8:	4670      	mov	r0, lr
 800f8da:	bd10      	pop	{r4, pc}
 800f8dc:	08016ee0 	.word	0x08016ee0

0800f8e0 <rcl_wait_set_is_valid>:
 800f8e0:	b118      	cbz	r0, 800f8ea <rcl_wait_set_is_valid+0xa>
 800f8e2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800f8e4:	3800      	subs	r0, #0
 800f8e6:	bf18      	it	ne
 800f8e8:	2001      	movne	r0, #1
 800f8ea:	4770      	bx	lr

0800f8ec <rcl_wait_set_fini>:
 800f8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8f0:	b082      	sub	sp, #8
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	f000 8095 	beq.w	800fa22 <rcl_wait_set_fini+0x136>
 800f8f8:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800f8fa:	4604      	mov	r4, r0
 800f8fc:	2e00      	cmp	r6, #0
 800f8fe:	f000 808c 	beq.w	800fa1a <rcl_wait_set_fini+0x12e>
 800f902:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 800f904:	f003 f9b6 	bl	8012c74 <rmw_destroy_wait_set>
 800f908:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f90a:	1e06      	subs	r6, r0, #0
 800f90c:	bf18      	it	ne
 800f90e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 800f912:	2d00      	cmp	r5, #0
 800f914:	f000 8081 	beq.w	800fa1a <rcl_wait_set_fini+0x12e>
 800f918:	6820      	ldr	r0, [r4, #0]
 800f91a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800f91e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f920:	2700      	movs	r7, #0
 800f922:	6067      	str	r7, [r4, #4]
 800f924:	602f      	str	r7, [r5, #0]
 800f926:	b120      	cbz	r0, 800f932 <rcl_wait_set_fini+0x46>
 800f928:	9101      	str	r1, [sp, #4]
 800f92a:	47c0      	blx	r8
 800f92c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f92e:	9901      	ldr	r1, [sp, #4]
 800f930:	6027      	str	r7, [r4, #0]
 800f932:	68a8      	ldr	r0, [r5, #8]
 800f934:	b120      	cbz	r0, 800f940 <rcl_wait_set_fini+0x54>
 800f936:	47c0      	blx	r8
 800f938:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f93a:	2300      	movs	r3, #0
 800f93c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800f940:	68a0      	ldr	r0, [r4, #8]
 800f942:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800f944:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f946:	f04f 0800 	mov.w	r8, #0
 800f94a:	f8c4 800c 	str.w	r8, [r4, #12]
 800f94e:	f8c5 800c 	str.w	r8, [r5, #12]
 800f952:	b128      	cbz	r0, 800f960 <rcl_wait_set_fini+0x74>
 800f954:	47b8      	blx	r7
 800f956:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f958:	f8c4 8008 	str.w	r8, [r4, #8]
 800f95c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800f95e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f960:	6968      	ldr	r0, [r5, #20]
 800f962:	f04f 0800 	mov.w	r8, #0
 800f966:	f8c5 8010 	str.w	r8, [r5, #16]
 800f96a:	b128      	cbz	r0, 800f978 <rcl_wait_set_fini+0x8c>
 800f96c:	47b8      	blx	r7
 800f96e:	f8c5 8014 	str.w	r8, [r5, #20]
 800f972:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f974:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800f976:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f978:	6920      	ldr	r0, [r4, #16]
 800f97a:	f04f 0800 	mov.w	r8, #0
 800f97e:	f8c4 8014 	str.w	r8, [r4, #20]
 800f982:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 800f986:	b128      	cbz	r0, 800f994 <rcl_wait_set_fini+0xa8>
 800f988:	47b8      	blx	r7
 800f98a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f98c:	f8c4 8010 	str.w	r8, [r4, #16]
 800f990:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800f992:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f994:	69a0      	ldr	r0, [r4, #24]
 800f996:	f04f 0800 	mov.w	r8, #0
 800f99a:	f8c4 801c 	str.w	r8, [r4, #28]
 800f99e:	f8c5 8018 	str.w	r8, [r5, #24]
 800f9a2:	b128      	cbz	r0, 800f9b0 <rcl_wait_set_fini+0xc4>
 800f9a4:	9101      	str	r1, [sp, #4]
 800f9a6:	47b8      	blx	r7
 800f9a8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f9aa:	9901      	ldr	r1, [sp, #4]
 800f9ac:	f8c4 8018 	str.w	r8, [r4, #24]
 800f9b0:	6a28      	ldr	r0, [r5, #32]
 800f9b2:	b120      	cbz	r0, 800f9be <rcl_wait_set_fini+0xd2>
 800f9b4:	47b8      	blx	r7
 800f9b6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800f9be:	6a20      	ldr	r0, [r4, #32]
 800f9c0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800f9c4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f9c6:	2700      	movs	r7, #0
 800f9c8:	6267      	str	r7, [r4, #36]	@ 0x24
 800f9ca:	626f      	str	r7, [r5, #36]	@ 0x24
 800f9cc:	b120      	cbz	r0, 800f9d8 <rcl_wait_set_fini+0xec>
 800f9ce:	9101      	str	r1, [sp, #4]
 800f9d0:	47c0      	blx	r8
 800f9d2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f9d4:	9901      	ldr	r1, [sp, #4]
 800f9d6:	6227      	str	r7, [r4, #32]
 800f9d8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800f9da:	b120      	cbz	r0, 800f9e6 <rcl_wait_set_fini+0xfa>
 800f9dc:	47c0      	blx	r8
 800f9de:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800f9e6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800f9e8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800f9ec:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f9ee:	2700      	movs	r7, #0
 800f9f0:	62e7      	str	r7, [r4, #44]	@ 0x2c
 800f9f2:	632f      	str	r7, [r5, #48]	@ 0x30
 800f9f4:	b120      	cbz	r0, 800fa00 <rcl_wait_set_fini+0x114>
 800f9f6:	9101      	str	r1, [sp, #4]
 800f9f8:	47c0      	blx	r8
 800f9fa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f9fc:	9901      	ldr	r1, [sp, #4]
 800f9fe:	62a7      	str	r7, [r4, #40]	@ 0x28
 800fa00:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800fa02:	b120      	cbz	r0, 800fa0e <rcl_wait_set_fini+0x122>
 800fa04:	47c0      	blx	r8
 800fa06:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800fa08:	2300      	movs	r3, #0
 800fa0a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 800fa0e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800fa10:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800fa12:	4628      	mov	r0, r5
 800fa14:	4798      	blx	r3
 800fa16:	2300      	movs	r3, #0
 800fa18:	6323      	str	r3, [r4, #48]	@ 0x30
 800fa1a:	4630      	mov	r0, r6
 800fa1c:	b002      	add	sp, #8
 800fa1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa22:	260b      	movs	r6, #11
 800fa24:	4630      	mov	r0, r6
 800fa26:	b002      	add	sp, #8
 800fa28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fa2c <rcl_wait_set_add_subscription>:
 800fa2c:	b318      	cbz	r0, 800fa76 <rcl_wait_set_add_subscription+0x4a>
 800fa2e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fa30:	b570      	push	{r4, r5, r6, lr}
 800fa32:	4604      	mov	r4, r0
 800fa34:	b30b      	cbz	r3, 800fa7a <rcl_wait_set_add_subscription+0x4e>
 800fa36:	b319      	cbz	r1, 800fa80 <rcl_wait_set_add_subscription+0x54>
 800fa38:	681d      	ldr	r5, [r3, #0]
 800fa3a:	6840      	ldr	r0, [r0, #4]
 800fa3c:	4285      	cmp	r5, r0
 800fa3e:	d217      	bcs.n	800fa70 <rcl_wait_set_add_subscription+0x44>
 800fa40:	6820      	ldr	r0, [r4, #0]
 800fa42:	1c6e      	adds	r6, r5, #1
 800fa44:	601e      	str	r6, [r3, #0]
 800fa46:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800fa4a:	b102      	cbz	r2, 800fa4e <rcl_wait_set_add_subscription+0x22>
 800fa4c:	6015      	str	r5, [r2, #0]
 800fa4e:	4608      	mov	r0, r1
 800fa50:	f7ff fd14 	bl	800f47c <rcl_subscription_get_rmw_handle>
 800fa54:	b150      	cbz	r0, 800fa6c <rcl_wait_set_add_subscription+0x40>
 800fa56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fa58:	6842      	ldr	r2, [r0, #4]
 800fa5a:	689b      	ldr	r3, [r3, #8]
 800fa5c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fa60:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800fa62:	6853      	ldr	r3, [r2, #4]
 800fa64:	3301      	adds	r3, #1
 800fa66:	2000      	movs	r0, #0
 800fa68:	6053      	str	r3, [r2, #4]
 800fa6a:	bd70      	pop	{r4, r5, r6, pc}
 800fa6c:	2001      	movs	r0, #1
 800fa6e:	bd70      	pop	{r4, r5, r6, pc}
 800fa70:	f240 3086 	movw	r0, #902	@ 0x386
 800fa74:	bd70      	pop	{r4, r5, r6, pc}
 800fa76:	200b      	movs	r0, #11
 800fa78:	4770      	bx	lr
 800fa7a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800fa7e:	bd70      	pop	{r4, r5, r6, pc}
 800fa80:	200b      	movs	r0, #11
 800fa82:	bd70      	pop	{r4, r5, r6, pc}

0800fa84 <rcl_wait_set_clear>:
 800fa84:	2800      	cmp	r0, #0
 800fa86:	d073      	beq.n	800fb70 <rcl_wait_set_clear+0xec>
 800fa88:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fa8a:	b510      	push	{r4, lr}
 800fa8c:	4604      	mov	r4, r0
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d070      	beq.n	800fb74 <rcl_wait_set_clear+0xf0>
 800fa92:	6800      	ldr	r0, [r0, #0]
 800fa94:	b138      	cbz	r0, 800faa6 <rcl_wait_set_clear+0x22>
 800fa96:	6862      	ldr	r2, [r4, #4]
 800fa98:	2100      	movs	r1, #0
 800fa9a:	0092      	lsls	r2, r2, #2
 800fa9c:	f005 fed8 	bl	8015850 <memset>
 800faa0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800faa2:	2200      	movs	r2, #0
 800faa4:	601a      	str	r2, [r3, #0]
 800faa6:	68a0      	ldr	r0, [r4, #8]
 800faa8:	b138      	cbz	r0, 800faba <rcl_wait_set_clear+0x36>
 800faaa:	68e2      	ldr	r2, [r4, #12]
 800faac:	2100      	movs	r1, #0
 800faae:	0092      	lsls	r2, r2, #2
 800fab0:	f005 fece 	bl	8015850 <memset>
 800fab4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fab6:	2200      	movs	r2, #0
 800fab8:	60da      	str	r2, [r3, #12]
 800faba:	69a0      	ldr	r0, [r4, #24]
 800fabc:	b138      	cbz	r0, 800face <rcl_wait_set_clear+0x4a>
 800fabe:	69e2      	ldr	r2, [r4, #28]
 800fac0:	2100      	movs	r1, #0
 800fac2:	0092      	lsls	r2, r2, #2
 800fac4:	f005 fec4 	bl	8015850 <memset>
 800fac8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800faca:	2200      	movs	r2, #0
 800facc:	619a      	str	r2, [r3, #24]
 800face:	6a20      	ldr	r0, [r4, #32]
 800fad0:	b138      	cbz	r0, 800fae2 <rcl_wait_set_clear+0x5e>
 800fad2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800fad4:	2100      	movs	r1, #0
 800fad6:	0092      	lsls	r2, r2, #2
 800fad8:	f005 feba 	bl	8015850 <memset>
 800fadc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fade:	2200      	movs	r2, #0
 800fae0:	625a      	str	r2, [r3, #36]	@ 0x24
 800fae2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800fae4:	b138      	cbz	r0, 800faf6 <rcl_wait_set_clear+0x72>
 800fae6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fae8:	2100      	movs	r1, #0
 800faea:	0092      	lsls	r2, r2, #2
 800faec:	f005 feb0 	bl	8015850 <memset>
 800faf0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800faf2:	2200      	movs	r2, #0
 800faf4:	631a      	str	r2, [r3, #48]	@ 0x30
 800faf6:	6920      	ldr	r0, [r4, #16]
 800faf8:	b138      	cbz	r0, 800fb0a <rcl_wait_set_clear+0x86>
 800fafa:	6962      	ldr	r2, [r4, #20]
 800fafc:	2100      	movs	r1, #0
 800fafe:	0092      	lsls	r2, r2, #2
 800fb00:	f005 fea6 	bl	8015850 <memset>
 800fb04:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fb06:	2200      	movs	r2, #0
 800fb08:	641a      	str	r2, [r3, #64]	@ 0x40
 800fb0a:	6898      	ldr	r0, [r3, #8]
 800fb0c:	b138      	cbz	r0, 800fb1e <rcl_wait_set_clear+0x9a>
 800fb0e:	685a      	ldr	r2, [r3, #4]
 800fb10:	2100      	movs	r1, #0
 800fb12:	0092      	lsls	r2, r2, #2
 800fb14:	f005 fe9c 	bl	8015850 <memset>
 800fb18:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	605a      	str	r2, [r3, #4]
 800fb1e:	6958      	ldr	r0, [r3, #20]
 800fb20:	b138      	cbz	r0, 800fb32 <rcl_wait_set_clear+0xae>
 800fb22:	691a      	ldr	r2, [r3, #16]
 800fb24:	2100      	movs	r1, #0
 800fb26:	0092      	lsls	r2, r2, #2
 800fb28:	f005 fe92 	bl	8015850 <memset>
 800fb2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fb2e:	2200      	movs	r2, #0
 800fb30:	611a      	str	r2, [r3, #16]
 800fb32:	6a18      	ldr	r0, [r3, #32]
 800fb34:	b138      	cbz	r0, 800fb46 <rcl_wait_set_clear+0xc2>
 800fb36:	69da      	ldr	r2, [r3, #28]
 800fb38:	2100      	movs	r1, #0
 800fb3a:	0092      	lsls	r2, r2, #2
 800fb3c:	f005 fe88 	bl	8015850 <memset>
 800fb40:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fb42:	2200      	movs	r2, #0
 800fb44:	61da      	str	r2, [r3, #28]
 800fb46:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800fb48:	b138      	cbz	r0, 800fb5a <rcl_wait_set_clear+0xd6>
 800fb4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fb4c:	2100      	movs	r1, #0
 800fb4e:	0092      	lsls	r2, r2, #2
 800fb50:	f005 fe7e 	bl	8015850 <memset>
 800fb54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fb56:	2200      	movs	r2, #0
 800fb58:	629a      	str	r2, [r3, #40]	@ 0x28
 800fb5a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800fb5c:	b138      	cbz	r0, 800fb6e <rcl_wait_set_clear+0xea>
 800fb5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fb60:	2100      	movs	r1, #0
 800fb62:	0092      	lsls	r2, r2, #2
 800fb64:	f005 fe74 	bl	8015850 <memset>
 800fb68:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fb6a:	2000      	movs	r0, #0
 800fb6c:	6358      	str	r0, [r3, #52]	@ 0x34
 800fb6e:	bd10      	pop	{r4, pc}
 800fb70:	200b      	movs	r0, #11
 800fb72:	4770      	bx	lr
 800fb74:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800fb78:	bd10      	pop	{r4, pc}
 800fb7a:	bf00      	nop

0800fb7c <rcl_wait_set_resize>:
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	f000 8185 	beq.w	800fe8c <rcl_wait_set_resize+0x310>
 800fb82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb86:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800fb88:	b083      	sub	sp, #12
 800fb8a:	4605      	mov	r5, r0
 800fb8c:	2c00      	cmp	r4, #0
 800fb8e:	f000 817f 	beq.w	800fe90 <rcl_wait_set_resize+0x314>
 800fb92:	f04f 0900 	mov.w	r9, #0
 800fb96:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 800fb9a:	461f      	mov	r7, r3
 800fb9c:	4688      	mov	r8, r1
 800fb9e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 800fba2:	4616      	mov	r6, r2
 800fba4:	f8c0 9004 	str.w	r9, [r0, #4]
 800fba8:	f8c4 9000 	str.w	r9, [r4]
 800fbac:	2900      	cmp	r1, #0
 800fbae:	f000 80bd 	beq.w	800fd2c <rcl_wait_set_resize+0x1b0>
 800fbb2:	008c      	lsls	r4, r1, #2
 800fbb4:	6800      	ldr	r0, [r0, #0]
 800fbb6:	9301      	str	r3, [sp, #4]
 800fbb8:	4652      	mov	r2, sl
 800fbba:	4621      	mov	r1, r4
 800fbbc:	4798      	blx	r3
 800fbbe:	9b01      	ldr	r3, [sp, #4]
 800fbc0:	6028      	str	r0, [r5, #0]
 800fbc2:	2800      	cmp	r0, #0
 800fbc4:	f000 80cb 	beq.w	800fd5e <rcl_wait_set_resize+0x1e2>
 800fbc8:	4622      	mov	r2, r4
 800fbca:	4649      	mov	r1, r9
 800fbcc:	9301      	str	r3, [sp, #4]
 800fbce:	f005 fe3f 	bl	8015850 <memset>
 800fbd2:	f8c5 8004 	str.w	r8, [r5, #4]
 800fbd6:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 800fbda:	9b01      	ldr	r3, [sp, #4]
 800fbdc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800fbe0:	f8c8 9004 	str.w	r9, [r8, #4]
 800fbe4:	4652      	mov	r2, sl
 800fbe6:	4621      	mov	r1, r4
 800fbe8:	4798      	blx	r3
 800fbea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fbec:	f8c8 0008 	str.w	r0, [r8, #8]
 800fbf0:	689b      	ldr	r3, [r3, #8]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	f000 80ac 	beq.w	800fd50 <rcl_wait_set_resize+0x1d4>
 800fbf8:	4622      	mov	r2, r4
 800fbfa:	4649      	mov	r1, r9
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f005 fe27 	bl	8015850 <memset>
 800fc02:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fc04:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fc08:	f04f 0800 	mov.w	r8, #0
 800fc0c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 800fc10:	f8c5 800c 	str.w	r8, [r5, #12]
 800fc14:	f8c4 800c 	str.w	r8, [r4, #12]
 800fc18:	2e00      	cmp	r6, #0
 800fc1a:	f040 80a4 	bne.w	800fd66 <rcl_wait_set_resize+0x1ea>
 800fc1e:	68a8      	ldr	r0, [r5, #8]
 800fc20:	b128      	cbz	r0, 800fc2e <rcl_wait_set_resize+0xb2>
 800fc22:	4649      	mov	r1, r9
 800fc24:	4790      	blx	r2
 800fc26:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fc28:	60ae      	str	r6, [r5, #8]
 800fc2a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fc2e:	f04f 0800 	mov.w	r8, #0
 800fc32:	19f6      	adds	r6, r6, r7
 800fc34:	f8c4 8010 	str.w	r8, [r4, #16]
 800fc38:	f040 80ac 	bne.w	800fd94 <rcl_wait_set_resize+0x218>
 800fc3c:	6960      	ldr	r0, [r4, #20]
 800fc3e:	b130      	cbz	r0, 800fc4e <rcl_wait_set_resize+0xd2>
 800fc40:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800fc42:	4649      	mov	r1, r9
 800fc44:	4798      	blx	r3
 800fc46:	6166      	str	r6, [r4, #20]
 800fc48:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fc4a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fc4e:	2600      	movs	r6, #0
 800fc50:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800fc54:	616e      	str	r6, [r5, #20]
 800fc56:	6426      	str	r6, [r4, #64]	@ 0x40
 800fc58:	2f00      	cmp	r7, #0
 800fc5a:	f040 80ad 	bne.w	800fdb8 <rcl_wait_set_resize+0x23c>
 800fc5e:	6928      	ldr	r0, [r5, #16]
 800fc60:	b138      	cbz	r0, 800fc72 <rcl_wait_set_resize+0xf6>
 800fc62:	4649      	mov	r1, r9
 800fc64:	47d0      	blx	sl
 800fc66:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fc68:	612f      	str	r7, [r5, #16]
 800fc6a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800fc6e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fc72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc74:	2600      	movs	r6, #0
 800fc76:	61ee      	str	r6, [r5, #28]
 800fc78:	61a6      	str	r6, [r4, #24]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	f040 80af 	bne.w	800fdde <rcl_wait_set_resize+0x262>
 800fc80:	69a8      	ldr	r0, [r5, #24]
 800fc82:	b120      	cbz	r0, 800fc8e <rcl_wait_set_resize+0x112>
 800fc84:	4649      	mov	r1, r9
 800fc86:	47d0      	blx	sl
 800fc88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc8a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fc8c:	61ab      	str	r3, [r5, #24]
 800fc8e:	6a20      	ldr	r0, [r4, #32]
 800fc90:	b128      	cbz	r0, 800fc9e <rcl_wait_set_resize+0x122>
 800fc92:	4649      	mov	r1, r9
 800fc94:	47d0      	blx	sl
 800fc96:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fc98:	2300      	movs	r3, #0
 800fc9a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800fc9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fca0:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800fca2:	2600      	movs	r6, #0
 800fca4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800fca8:	626e      	str	r6, [r5, #36]	@ 0x24
 800fcaa:	6266      	str	r6, [r4, #36]	@ 0x24
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	f000 80b6 	beq.w	800fe1e <rcl_wait_set_resize+0x2a2>
 800fcb2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800fcb6:	6a28      	ldr	r0, [r5, #32]
 800fcb8:	463a      	mov	r2, r7
 800fcba:	4651      	mov	r1, sl
 800fcbc:	47c8      	blx	r9
 800fcbe:	6228      	str	r0, [r5, #32]
 800fcc0:	2800      	cmp	r0, #0
 800fcc2:	d04c      	beq.n	800fd5e <rcl_wait_set_resize+0x1e2>
 800fcc4:	4652      	mov	r2, sl
 800fcc6:	4631      	mov	r1, r6
 800fcc8:	f005 fdc2 	bl	8015850 <memset>
 800fccc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fcce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fcd0:	626b      	str	r3, [r5, #36]	@ 0x24
 800fcd2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800fcd4:	62a6      	str	r6, [r4, #40]	@ 0x28
 800fcd6:	463a      	mov	r2, r7
 800fcd8:	4651      	mov	r1, sl
 800fcda:	47c8      	blx	r9
 800fcdc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fcde:	62e0      	str	r0, [r4, #44]	@ 0x2c
 800fce0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800fce2:	2c00      	cmp	r4, #0
 800fce4:	f000 80f0 	beq.w	800fec8 <rcl_wait_set_resize+0x34c>
 800fce8:	4620      	mov	r0, r4
 800fcea:	4652      	mov	r2, sl
 800fcec:	4631      	mov	r1, r6
 800fcee:	f005 fdaf 	bl	8015850 <memset>
 800fcf2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fcf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcf6:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800fcf8:	2600      	movs	r6, #0
 800fcfa:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800fcfe:	62ee      	str	r6, [r5, #44]	@ 0x2c
 800fd00:	6326      	str	r6, [r4, #48]	@ 0x30
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	f040 809d 	bne.w	800fe42 <rcl_wait_set_resize+0x2c6>
 800fd08:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800fd0a:	b120      	cbz	r0, 800fd16 <rcl_wait_set_resize+0x19a>
 800fd0c:	4639      	mov	r1, r7
 800fd0e:	47c0      	blx	r8
 800fd10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd12:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fd14:	62ab      	str	r3, [r5, #40]	@ 0x28
 800fd16:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800fd18:	b310      	cbz	r0, 800fd60 <rcl_wait_set_resize+0x1e4>
 800fd1a:	4639      	mov	r1, r7
 800fd1c:	47c0      	blx	r8
 800fd1e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fd20:	2000      	movs	r0, #0
 800fd22:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 800fd26:	b003      	add	sp, #12
 800fd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd2c:	6800      	ldr	r0, [r0, #0]
 800fd2e:	b120      	cbz	r0, 800fd3a <rcl_wait_set_resize+0x1be>
 800fd30:	4651      	mov	r1, sl
 800fd32:	47d8      	blx	fp
 800fd34:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fd36:	f8c5 8000 	str.w	r8, [r5]
 800fd3a:	68a0      	ldr	r0, [r4, #8]
 800fd3c:	2800      	cmp	r0, #0
 800fd3e:	f43f af61 	beq.w	800fc04 <rcl_wait_set_resize+0x88>
 800fd42:	4651      	mov	r1, sl
 800fd44:	47d8      	blx	fp
 800fd46:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fd48:	2300      	movs	r3, #0
 800fd4a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800fd4e:	e759      	b.n	800fc04 <rcl_wait_set_resize+0x88>
 800fd50:	6828      	ldr	r0, [r5, #0]
 800fd52:	9301      	str	r3, [sp, #4]
 800fd54:	4651      	mov	r1, sl
 800fd56:	47d8      	blx	fp
 800fd58:	9b01      	ldr	r3, [sp, #4]
 800fd5a:	e9c5 3300 	strd	r3, r3, [r5]
 800fd5e:	200a      	movs	r0, #10
 800fd60:	b003      	add	sp, #12
 800fd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd66:	00b4      	lsls	r4, r6, #2
 800fd68:	68a8      	ldr	r0, [r5, #8]
 800fd6a:	464a      	mov	r2, r9
 800fd6c:	4621      	mov	r1, r4
 800fd6e:	4798      	blx	r3
 800fd70:	60a8      	str	r0, [r5, #8]
 800fd72:	2800      	cmp	r0, #0
 800fd74:	d0f3      	beq.n	800fd5e <rcl_wait_set_resize+0x1e2>
 800fd76:	4622      	mov	r2, r4
 800fd78:	4641      	mov	r1, r8
 800fd7a:	f005 fd69 	bl	8015850 <memset>
 800fd7e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fd80:	60ee      	str	r6, [r5, #12]
 800fd82:	f04f 0800 	mov.w	r8, #0
 800fd86:	19f6      	adds	r6, r6, r7
 800fd88:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fd8c:	f8c4 8010 	str.w	r8, [r4, #16]
 800fd90:	f43f af54 	beq.w	800fc3c <rcl_wait_set_resize+0xc0>
 800fd94:	00b6      	lsls	r6, r6, #2
 800fd96:	464a      	mov	r2, r9
 800fd98:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800fd9a:	6960      	ldr	r0, [r4, #20]
 800fd9c:	4631      	mov	r1, r6
 800fd9e:	4798      	blx	r3
 800fda0:	4681      	mov	r9, r0
 800fda2:	6160      	str	r0, [r4, #20]
 800fda4:	2800      	cmp	r0, #0
 800fda6:	d076      	beq.n	800fe96 <rcl_wait_set_resize+0x31a>
 800fda8:	4632      	mov	r2, r6
 800fdaa:	4641      	mov	r1, r8
 800fdac:	f005 fd50 	bl	8015850 <memset>
 800fdb0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fdb2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fdb6:	e74a      	b.n	800fc4e <rcl_wait_set_resize+0xd2>
 800fdb8:	00bc      	lsls	r4, r7, #2
 800fdba:	6928      	ldr	r0, [r5, #16]
 800fdbc:	464a      	mov	r2, r9
 800fdbe:	4621      	mov	r1, r4
 800fdc0:	47c0      	blx	r8
 800fdc2:	6128      	str	r0, [r5, #16]
 800fdc4:	2800      	cmp	r0, #0
 800fdc6:	d0ca      	beq.n	800fd5e <rcl_wait_set_resize+0x1e2>
 800fdc8:	4622      	mov	r2, r4
 800fdca:	4631      	mov	r1, r6
 800fdcc:	f005 fd40 	bl	8015850 <memset>
 800fdd0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fdd2:	616f      	str	r7, [r5, #20]
 800fdd4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800fdd8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fddc:	e749      	b.n	800fc72 <rcl_wait_set_resize+0xf6>
 800fdde:	009c      	lsls	r4, r3, #2
 800fde0:	69a8      	ldr	r0, [r5, #24]
 800fde2:	464a      	mov	r2, r9
 800fde4:	4621      	mov	r1, r4
 800fde6:	47c0      	blx	r8
 800fde8:	61a8      	str	r0, [r5, #24]
 800fdea:	2800      	cmp	r0, #0
 800fdec:	d0b7      	beq.n	800fd5e <rcl_wait_set_resize+0x1e2>
 800fdee:	4622      	mov	r2, r4
 800fdf0:	4631      	mov	r1, r6
 800fdf2:	f005 fd2d 	bl	8015850 <memset>
 800fdf6:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 800fdf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fdfa:	61eb      	str	r3, [r5, #28]
 800fdfc:	6a38      	ldr	r0, [r7, #32]
 800fdfe:	61fe      	str	r6, [r7, #28]
 800fe00:	464a      	mov	r2, r9
 800fe02:	4621      	mov	r1, r4
 800fe04:	47c0      	blx	r8
 800fe06:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fe08:	6238      	str	r0, [r7, #32]
 800fe0a:	6a1f      	ldr	r7, [r3, #32]
 800fe0c:	2f00      	cmp	r7, #0
 800fe0e:	d054      	beq.n	800feba <rcl_wait_set_resize+0x33e>
 800fe10:	4622      	mov	r2, r4
 800fe12:	4631      	mov	r1, r6
 800fe14:	4638      	mov	r0, r7
 800fe16:	f005 fd1b 	bl	8015850 <memset>
 800fe1a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fe1c:	e73f      	b.n	800fc9e <rcl_wait_set_resize+0x122>
 800fe1e:	6a28      	ldr	r0, [r5, #32]
 800fe20:	b120      	cbz	r0, 800fe2c <rcl_wait_set_resize+0x2b0>
 800fe22:	4639      	mov	r1, r7
 800fe24:	47c0      	blx	r8
 800fe26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fe28:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fe2a:	622b      	str	r3, [r5, #32]
 800fe2c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	f43f af60 	beq.w	800fcf4 <rcl_wait_set_resize+0x178>
 800fe34:	4639      	mov	r1, r7
 800fe36:	47c0      	blx	r8
 800fe38:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 800fe40:	e758      	b.n	800fcf4 <rcl_wait_set_resize+0x178>
 800fe42:	009c      	lsls	r4, r3, #2
 800fe44:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800fe46:	463a      	mov	r2, r7
 800fe48:	4621      	mov	r1, r4
 800fe4a:	47c8      	blx	r9
 800fe4c:	62a8      	str	r0, [r5, #40]	@ 0x28
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	d085      	beq.n	800fd5e <rcl_wait_set_resize+0x1e2>
 800fe52:	4622      	mov	r2, r4
 800fe54:	4631      	mov	r1, r6
 800fe56:	f005 fcfb 	bl	8015850 <memset>
 800fe5a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 800fe5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe60:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800fe62:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 800fe66:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 800fe6a:	463a      	mov	r2, r7
 800fe6c:	4621      	mov	r1, r4
 800fe6e:	47c8      	blx	r9
 800fe70:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fe72:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 800fe76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe78:	b36b      	cbz	r3, 800fed6 <rcl_wait_set_resize+0x35a>
 800fe7a:	4622      	mov	r2, r4
 800fe7c:	4631      	mov	r1, r6
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f005 fce6 	bl	8015850 <memset>
 800fe84:	4630      	mov	r0, r6
 800fe86:	b003      	add	sp, #12
 800fe88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe8c:	200b      	movs	r0, #11
 800fe8e:	4770      	bx	lr
 800fe90:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800fe94:	e764      	b.n	800fd60 <rcl_wait_set_resize+0x1e4>
 800fe96:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fe98:	68a8      	ldr	r0, [r5, #8]
 800fe9a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800fe9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe9e:	4798      	blx	r3
 800fea0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fea2:	6928      	ldr	r0, [r5, #16]
 800fea4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fea6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800fea8:	f8c5 900c 	str.w	r9, [r5, #12]
 800feac:	f8c5 9008 	str.w	r9, [r5, #8]
 800feb0:	4790      	blx	r2
 800feb2:	e9c5 9904 	strd	r9, r9, [r5, #16]
 800feb6:	200a      	movs	r0, #10
 800feb8:	e752      	b.n	800fd60 <rcl_wait_set_resize+0x1e4>
 800feba:	69a8      	ldr	r0, [r5, #24]
 800febc:	4649      	mov	r1, r9
 800febe:	47d0      	blx	sl
 800fec0:	e9c5 7706 	strd	r7, r7, [r5, #24]
 800fec4:	200a      	movs	r0, #10
 800fec6:	e74b      	b.n	800fd60 <rcl_wait_set_resize+0x1e4>
 800fec8:	6a28      	ldr	r0, [r5, #32]
 800feca:	4639      	mov	r1, r7
 800fecc:	47c0      	blx	r8
 800fece:	e9c5 4408 	strd	r4, r4, [r5, #32]
 800fed2:	200a      	movs	r0, #10
 800fed4:	e744      	b.n	800fd60 <rcl_wait_set_resize+0x1e4>
 800fed6:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800fed8:	9301      	str	r3, [sp, #4]
 800feda:	4639      	mov	r1, r7
 800fedc:	47c0      	blx	r8
 800fede:	9b01      	ldr	r3, [sp, #4]
 800fee0:	200a      	movs	r0, #10
 800fee2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800fee6:	e73b      	b.n	800fd60 <rcl_wait_set_resize+0x1e4>

0800fee8 <rcl_wait_set_init>:
 800fee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800feec:	b084      	sub	sp, #16
 800feee:	4604      	mov	r4, r0
 800fef0:	a810      	add	r0, sp, #64	@ 0x40
 800fef2:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 800fef6:	460f      	mov	r7, r1
 800fef8:	4690      	mov	r8, r2
 800fefa:	4699      	mov	r9, r3
 800fefc:	f7fa fda4 	bl	800aa48 <rcutils_allocator_is_valid>
 800ff00:	2800      	cmp	r0, #0
 800ff02:	d06b      	beq.n	800ffdc <rcl_wait_set_init+0xf4>
 800ff04:	2c00      	cmp	r4, #0
 800ff06:	d069      	beq.n	800ffdc <rcl_wait_set_init+0xf4>
 800ff08:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ff0a:	b125      	cbz	r5, 800ff16 <rcl_wait_set_init+0x2e>
 800ff0c:	2564      	movs	r5, #100	@ 0x64
 800ff0e:	4628      	mov	r0, r5
 800ff10:	b004      	add	sp, #16
 800ff12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff16:	f1ba 0f00 	cmp.w	sl, #0
 800ff1a:	d05f      	beq.n	800ffdc <rcl_wait_set_init+0xf4>
 800ff1c:	4650      	mov	r0, sl
 800ff1e:	f7fe fb3f 	bl	800e5a0 <rcl_context_is_valid>
 800ff22:	2800      	cmp	r0, #0
 800ff24:	d067      	beq.n	800fff6 <rcl_wait_set_init+0x10e>
 800ff26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ff28:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800ff2a:	205c      	movs	r0, #92	@ 0x5c
 800ff2c:	4798      	blx	r3
 800ff2e:	6320      	str	r0, [r4, #48]	@ 0x30
 800ff30:	2800      	cmp	r0, #0
 800ff32:	d062      	beq.n	800fffa <rcl_wait_set_init+0x112>
 800ff34:	4629      	mov	r1, r5
 800ff36:	225c      	movs	r2, #92	@ 0x5c
 800ff38:	f005 fc8a 	bl	8015850 <memset>
 800ff3c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 800ff40:	eb03 0e02 	add.w	lr, r3, r2
 800ff44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff46:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800ff48:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800ff4c:	449e      	add	lr, r3
 800ff4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ff52:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800ff56:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800ff5a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 800ff5e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 800ff62:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 800ff66:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 800ff6a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 800ff6e:	f8da a000 	ldr.w	sl, [sl]
 800ff72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ff74:	44c6      	add	lr, r8
 800ff76:	f8dc 3000 	ldr.w	r3, [ip]
 800ff7a:	602b      	str	r3, [r5, #0]
 800ff7c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 800ff80:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 800ff84:	f002 fe6c 	bl	8012c60 <rmw_create_wait_set>
 800ff88:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ff8a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 800ff8c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ff8e:	b350      	cbz	r0, 800ffe6 <rcl_wait_set_init+0xfe>
 800ff90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff92:	9302      	str	r3, [sp, #8]
 800ff94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ff96:	9301      	str	r3, [sp, #4]
 800ff98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff9a:	9300      	str	r3, [sp, #0]
 800ff9c:	4642      	mov	r2, r8
 800ff9e:	464b      	mov	r3, r9
 800ffa0:	4639      	mov	r1, r7
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	f7ff fdea 	bl	800fb7c <rcl_wait_set_resize>
 800ffa8:	4605      	mov	r5, r0
 800ffaa:	2800      	cmp	r0, #0
 800ffac:	d0af      	beq.n	800ff0e <rcl_wait_set_init+0x26>
 800ffae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ffb0:	bb2b      	cbnz	r3, 800fffe <rcl_wait_set_init+0x116>
 800ffb2:	2600      	movs	r6, #0
 800ffb4:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800ffb8:	9600      	str	r6, [sp, #0]
 800ffba:	4633      	mov	r3, r6
 800ffbc:	4632      	mov	r2, r6
 800ffbe:	4631      	mov	r1, r6
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f7ff fddb 	bl	800fb7c <rcl_wait_set_resize>
 800ffc6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800ffc8:	2800      	cmp	r0, #0
 800ffca:	d0a0      	beq.n	800ff0e <rcl_wait_set_init+0x26>
 800ffcc:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800ffce:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800ffd0:	4798      	blx	r3
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	6326      	str	r6, [r4, #48]	@ 0x30
 800ffd6:	b004      	add	sp, #16
 800ffd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffdc:	250b      	movs	r5, #11
 800ffde:	4628      	mov	r0, r5
 800ffe0:	b004      	add	sp, #16
 800ffe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffe6:	2501      	movs	r5, #1
 800ffe8:	f002 fe44 	bl	8012c74 <rmw_destroy_wait_set>
 800ffec:	2800      	cmp	r0, #0
 800ffee:	bf18      	it	ne
 800fff0:	f44f 7561 	movne.w	r5, #900	@ 0x384
 800fff4:	e7dd      	b.n	800ffb2 <rcl_wait_set_init+0xca>
 800fff6:	2565      	movs	r5, #101	@ 0x65
 800fff8:	e789      	b.n	800ff0e <rcl_wait_set_init+0x26>
 800fffa:	250a      	movs	r5, #10
 800fffc:	e787      	b.n	800ff0e <rcl_wait_set_init+0x26>
 800fffe:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010000:	e7f2      	b.n	800ffe8 <rcl_wait_set_init+0x100>
 8010002:	bf00      	nop

08010004 <rcl_wait_set_add_guard_condition>:
 8010004:	b318      	cbz	r0, 801004e <rcl_wait_set_add_guard_condition+0x4a>
 8010006:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010008:	b570      	push	{r4, r5, r6, lr}
 801000a:	4604      	mov	r4, r0
 801000c:	b30b      	cbz	r3, 8010052 <rcl_wait_set_add_guard_condition+0x4e>
 801000e:	b319      	cbz	r1, 8010058 <rcl_wait_set_add_guard_condition+0x54>
 8010010:	68dd      	ldr	r5, [r3, #12]
 8010012:	68c0      	ldr	r0, [r0, #12]
 8010014:	4285      	cmp	r5, r0
 8010016:	d217      	bcs.n	8010048 <rcl_wait_set_add_guard_condition+0x44>
 8010018:	68a0      	ldr	r0, [r4, #8]
 801001a:	1c6e      	adds	r6, r5, #1
 801001c:	60de      	str	r6, [r3, #12]
 801001e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010022:	b102      	cbz	r2, 8010026 <rcl_wait_set_add_guard_condition+0x22>
 8010024:	6015      	str	r5, [r2, #0]
 8010026:	4608      	mov	r0, r1
 8010028:	f004 fe18 	bl	8014c5c <rcl_guard_condition_get_rmw_handle>
 801002c:	b150      	cbz	r0, 8010044 <rcl_wait_set_add_guard_condition+0x40>
 801002e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010030:	6842      	ldr	r2, [r0, #4]
 8010032:	695b      	ldr	r3, [r3, #20]
 8010034:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010038:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801003a:	6913      	ldr	r3, [r2, #16]
 801003c:	3301      	adds	r3, #1
 801003e:	2000      	movs	r0, #0
 8010040:	6113      	str	r3, [r2, #16]
 8010042:	bd70      	pop	{r4, r5, r6, pc}
 8010044:	2001      	movs	r0, #1
 8010046:	bd70      	pop	{r4, r5, r6, pc}
 8010048:	f240 3086 	movw	r0, #902	@ 0x386
 801004c:	bd70      	pop	{r4, r5, r6, pc}
 801004e:	200b      	movs	r0, #11
 8010050:	4770      	bx	lr
 8010052:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010056:	bd70      	pop	{r4, r5, r6, pc}
 8010058:	200b      	movs	r0, #11
 801005a:	bd70      	pop	{r4, r5, r6, pc}

0801005c <rcl_wait_set_add_timer>:
 801005c:	b328      	cbz	r0, 80100aa <rcl_wait_set_add_timer+0x4e>
 801005e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010060:	b570      	push	{r4, r5, r6, lr}
 8010062:	4604      	mov	r4, r0
 8010064:	b31b      	cbz	r3, 80100ae <rcl_wait_set_add_timer+0x52>
 8010066:	b329      	cbz	r1, 80100b4 <rcl_wait_set_add_timer+0x58>
 8010068:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801006a:	6965      	ldr	r5, [r4, #20]
 801006c:	42a8      	cmp	r0, r5
 801006e:	d219      	bcs.n	80100a4 <rcl_wait_set_add_timer+0x48>
 8010070:	6925      	ldr	r5, [r4, #16]
 8010072:	1c46      	adds	r6, r0, #1
 8010074:	641e      	str	r6, [r3, #64]	@ 0x40
 8010076:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801007a:	b102      	cbz	r2, 801007e <rcl_wait_set_add_timer+0x22>
 801007c:	6010      	str	r0, [r2, #0]
 801007e:	4608      	mov	r0, r1
 8010080:	f7ff fba6 	bl	800f7d0 <rcl_timer_get_guard_condition>
 8010084:	b168      	cbz	r0, 80100a2 <rcl_wait_set_add_timer+0x46>
 8010086:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010088:	68e3      	ldr	r3, [r4, #12]
 801008a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801008c:	3b01      	subs	r3, #1
 801008e:	441d      	add	r5, r3
 8010090:	f004 fde4 	bl	8014c5c <rcl_guard_condition_get_rmw_handle>
 8010094:	b180      	cbz	r0, 80100b8 <rcl_wait_set_add_timer+0x5c>
 8010096:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010098:	6842      	ldr	r2, [r0, #4]
 801009a:	695b      	ldr	r3, [r3, #20]
 801009c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80100a0:	2000      	movs	r0, #0
 80100a2:	bd70      	pop	{r4, r5, r6, pc}
 80100a4:	f240 3086 	movw	r0, #902	@ 0x386
 80100a8:	bd70      	pop	{r4, r5, r6, pc}
 80100aa:	200b      	movs	r0, #11
 80100ac:	4770      	bx	lr
 80100ae:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80100b2:	bd70      	pop	{r4, r5, r6, pc}
 80100b4:	200b      	movs	r0, #11
 80100b6:	bd70      	pop	{r4, r5, r6, pc}
 80100b8:	2001      	movs	r0, #1
 80100ba:	bd70      	pop	{r4, r5, r6, pc}

080100bc <rcl_wait_set_add_client>:
 80100bc:	b318      	cbz	r0, 8010106 <rcl_wait_set_add_client+0x4a>
 80100be:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80100c0:	b570      	push	{r4, r5, r6, lr}
 80100c2:	4604      	mov	r4, r0
 80100c4:	b30b      	cbz	r3, 801010a <rcl_wait_set_add_client+0x4e>
 80100c6:	b319      	cbz	r1, 8010110 <rcl_wait_set_add_client+0x54>
 80100c8:	699d      	ldr	r5, [r3, #24]
 80100ca:	69c0      	ldr	r0, [r0, #28]
 80100cc:	4285      	cmp	r5, r0
 80100ce:	d217      	bcs.n	8010100 <rcl_wait_set_add_client+0x44>
 80100d0:	69a0      	ldr	r0, [r4, #24]
 80100d2:	1c6e      	adds	r6, r5, #1
 80100d4:	619e      	str	r6, [r3, #24]
 80100d6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80100da:	b102      	cbz	r2, 80100de <rcl_wait_set_add_client+0x22>
 80100dc:	6015      	str	r5, [r2, #0]
 80100de:	4608      	mov	r0, r1
 80100e0:	f7fe f9b2 	bl	800e448 <rcl_client_get_rmw_handle>
 80100e4:	b150      	cbz	r0, 80100fc <rcl_wait_set_add_client+0x40>
 80100e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80100e8:	6842      	ldr	r2, [r0, #4]
 80100ea:	6a1b      	ldr	r3, [r3, #32]
 80100ec:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80100f0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80100f2:	69d3      	ldr	r3, [r2, #28]
 80100f4:	3301      	adds	r3, #1
 80100f6:	2000      	movs	r0, #0
 80100f8:	61d3      	str	r3, [r2, #28]
 80100fa:	bd70      	pop	{r4, r5, r6, pc}
 80100fc:	2001      	movs	r0, #1
 80100fe:	bd70      	pop	{r4, r5, r6, pc}
 8010100:	f240 3086 	movw	r0, #902	@ 0x386
 8010104:	bd70      	pop	{r4, r5, r6, pc}
 8010106:	200b      	movs	r0, #11
 8010108:	4770      	bx	lr
 801010a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801010e:	bd70      	pop	{r4, r5, r6, pc}
 8010110:	200b      	movs	r0, #11
 8010112:	bd70      	pop	{r4, r5, r6, pc}

08010114 <rcl_wait_set_add_service>:
 8010114:	b318      	cbz	r0, 801015e <rcl_wait_set_add_service+0x4a>
 8010116:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010118:	b570      	push	{r4, r5, r6, lr}
 801011a:	4604      	mov	r4, r0
 801011c:	b30b      	cbz	r3, 8010162 <rcl_wait_set_add_service+0x4e>
 801011e:	b319      	cbz	r1, 8010168 <rcl_wait_set_add_service+0x54>
 8010120:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8010122:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8010124:	4285      	cmp	r5, r0
 8010126:	d217      	bcs.n	8010158 <rcl_wait_set_add_service+0x44>
 8010128:	6a20      	ldr	r0, [r4, #32]
 801012a:	1c6e      	adds	r6, r5, #1
 801012c:	625e      	str	r6, [r3, #36]	@ 0x24
 801012e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010132:	b102      	cbz	r2, 8010136 <rcl_wait_set_add_service+0x22>
 8010134:	6015      	str	r5, [r2, #0]
 8010136:	4608      	mov	r0, r1
 8010138:	f7ff f804 	bl	800f144 <rcl_service_get_rmw_handle>
 801013c:	b150      	cbz	r0, 8010154 <rcl_wait_set_add_service+0x40>
 801013e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010140:	6842      	ldr	r2, [r0, #4]
 8010142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010144:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010148:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801014a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801014c:	3301      	adds	r3, #1
 801014e:	2000      	movs	r0, #0
 8010150:	6293      	str	r3, [r2, #40]	@ 0x28
 8010152:	bd70      	pop	{r4, r5, r6, pc}
 8010154:	2001      	movs	r0, #1
 8010156:	bd70      	pop	{r4, r5, r6, pc}
 8010158:	f240 3086 	movw	r0, #902	@ 0x386
 801015c:	bd70      	pop	{r4, r5, r6, pc}
 801015e:	200b      	movs	r0, #11
 8010160:	4770      	bx	lr
 8010162:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010166:	bd70      	pop	{r4, r5, r6, pc}
 8010168:	200b      	movs	r0, #11
 801016a:	bd70      	pop	{r4, r5, r6, pc}
 801016c:	0000      	movs	r0, r0
	...

08010170 <rcl_wait>:
 8010170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010174:	ed2d 8b02 	vpush	{d8}
 8010178:	b08d      	sub	sp, #52	@ 0x34
 801017a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801017e:	2800      	cmp	r0, #0
 8010180:	f000 8143 	beq.w	801040a <rcl_wait+0x29a>
 8010184:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8010186:	4605      	mov	r5, r0
 8010188:	2e00      	cmp	r6, #0
 801018a:	f000 8112 	beq.w	80103b2 <rcl_wait+0x242>
 801018e:	6843      	ldr	r3, [r0, #4]
 8010190:	b983      	cbnz	r3, 80101b4 <rcl_wait+0x44>
 8010192:	68eb      	ldr	r3, [r5, #12]
 8010194:	b973      	cbnz	r3, 80101b4 <rcl_wait+0x44>
 8010196:	696b      	ldr	r3, [r5, #20]
 8010198:	b963      	cbnz	r3, 80101b4 <rcl_wait+0x44>
 801019a:	69eb      	ldr	r3, [r5, #28]
 801019c:	b953      	cbnz	r3, 80101b4 <rcl_wait+0x44>
 801019e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80101a0:	b943      	cbnz	r3, 80101b4 <rcl_wait+0x44>
 80101a2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80101a4:	b933      	cbnz	r3, 80101b4 <rcl_wait+0x44>
 80101a6:	f240 3085 	movw	r0, #901	@ 0x385
 80101aa:	b00d      	add	sp, #52	@ 0x34
 80101ac:	ecbd 8b02 	vpop	{d8}
 80101b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101b4:	9b04      	ldr	r3, [sp, #16]
 80101b6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	9b05      	ldr	r3, [sp, #20]
 80101bc:	f173 0300 	sbcs.w	r3, r3, #0
 80101c0:	f2c0 80f0 	blt.w	80103a4 <rcl_wait+0x234>
 80101c4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80101c8:	4643      	mov	r3, r8
 80101ca:	2a00      	cmp	r2, #0
 80101cc:	f000 8133 	beq.w	8010436 <rcl_wait+0x2c6>
 80101d0:	2400      	movs	r4, #0
 80101d2:	4613      	mov	r3, r2
 80101d4:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8010448 <rcl_wait+0x2d8>
 80101d8:	46a2      	mov	sl, r4
 80101da:	46a3      	mov	fp, r4
 80101dc:	f240 3921 	movw	r9, #801	@ 0x321
 80101e0:	4632      	mov	r2, r6
 80101e2:	e014      	b.n	801020e <rcl_wait+0x9e>
 80101e4:	2800      	cmp	r0, #0
 80101e6:	d1e0      	bne.n	80101aa <rcl_wait+0x3a>
 80101e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80101ec:	4542      	cmp	r2, r8
 80101ee:	eb73 0107 	sbcs.w	r1, r3, r7
 80101f2:	da03      	bge.n	80101fc <rcl_wait+0x8c>
 80101f4:	4690      	mov	r8, r2
 80101f6:	461f      	mov	r7, r3
 80101f8:	f04f 0b01 	mov.w	fp, #1
 80101fc:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80101fe:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8010200:	3401      	adds	r4, #1
 8010202:	f14a 0a00 	adc.w	sl, sl, #0
 8010206:	429c      	cmp	r4, r3
 8010208:	f17a 0100 	sbcs.w	r1, sl, #0
 801020c:	d228      	bcs.n	8010260 <rcl_wait+0xf0>
 801020e:	6928      	ldr	r0, [r5, #16]
 8010210:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010214:	a908      	add	r1, sp, #32
 8010216:	00a6      	lsls	r6, r4, #2
 8010218:	2800      	cmp	r0, #0
 801021a:	d0f1      	beq.n	8010200 <rcl_wait+0x90>
 801021c:	68eb      	ldr	r3, [r5, #12]
 801021e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8010222:	4423      	add	r3, r4
 8010224:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8010228:	f1be 0f00 	cmp.w	lr, #0
 801022c:	d006      	beq.n	801023c <rcl_wait+0xcc>
 801022e:	6913      	ldr	r3, [r2, #16]
 8010230:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8010234:	3301      	adds	r3, #1
 8010236:	6113      	str	r3, [r2, #16]
 8010238:	692b      	ldr	r3, [r5, #16]
 801023a:	5998      	ldr	r0, [r3, r6]
 801023c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8010240:	f7ff fa94 	bl	800f76c <rcl_timer_get_time_until_next_call>
 8010244:	4548      	cmp	r0, r9
 8010246:	d1cd      	bne.n	80101e4 <rcl_wait+0x74>
 8010248:	692b      	ldr	r3, [r5, #16]
 801024a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801024c:	2100      	movs	r1, #0
 801024e:	5199      	str	r1, [r3, r6]
 8010250:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8010252:	3401      	adds	r4, #1
 8010254:	f14a 0a00 	adc.w	sl, sl, #0
 8010258:	429c      	cmp	r4, r3
 801025a:	f17a 0100 	sbcs.w	r1, sl, #0
 801025e:	d3d6      	bcc.n	801020e <rcl_wait+0x9e>
 8010260:	4616      	mov	r6, r2
 8010262:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8010266:	4313      	orrs	r3, r2
 8010268:	46d9      	mov	r9, fp
 801026a:	f040 80a9 	bne.w	80103c0 <rcl_wait+0x250>
 801026e:	2300      	movs	r3, #0
 8010270:	2200      	movs	r2, #0
 8010272:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010276:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801027a:	ab08      	add	r3, sp, #32
 801027c:	9302      	str	r3, [sp, #8]
 801027e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8010280:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8010284:	e9cd 3200 	strd	r3, r2, [sp]
 8010288:	f106 0110 	add.w	r1, r6, #16
 801028c:	f106 031c 	add.w	r3, r6, #28
 8010290:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8010294:	1d30      	adds	r0, r6, #4
 8010296:	f002 fb6b 	bl	8012970 <rmw_wait>
 801029a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801029c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801029e:	4680      	mov	r8, r0
 80102a0:	b1ca      	cbz	r2, 80102d6 <rcl_wait+0x166>
 80102a2:	2400      	movs	r4, #0
 80102a4:	4627      	mov	r7, r4
 80102a6:	692a      	ldr	r2, [r5, #16]
 80102a8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80102ac:	f10d 011f 	add.w	r1, sp, #31
 80102b0:	00a6      	lsls	r6, r4, #2
 80102b2:	b160      	cbz	r0, 80102ce <rcl_wait+0x15e>
 80102b4:	f88d 701f 	strb.w	r7, [sp, #31]
 80102b8:	f7ff fa1e 	bl	800f6f8 <rcl_timer_is_ready>
 80102bc:	2800      	cmp	r0, #0
 80102be:	f47f af74 	bne.w	80101aa <rcl_wait+0x3a>
 80102c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80102c6:	b90b      	cbnz	r3, 80102cc <rcl_wait+0x15c>
 80102c8:	692a      	ldr	r2, [r5, #16]
 80102ca:	5193      	str	r3, [r2, r6]
 80102cc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80102ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80102d0:	3401      	adds	r4, #1
 80102d2:	42a2      	cmp	r2, r4
 80102d4:	d8e7      	bhi.n	80102a6 <rcl_wait+0x136>
 80102d6:	f038 0002 	bics.w	r0, r8, #2
 80102da:	f040 8090 	bne.w	80103fe <rcl_wait+0x28e>
 80102de:	686e      	ldr	r6, [r5, #4]
 80102e0:	4602      	mov	r2, r0
 80102e2:	b91e      	cbnz	r6, 80102ec <rcl_wait+0x17c>
 80102e4:	e00d      	b.n	8010302 <rcl_wait+0x192>
 80102e6:	3201      	adds	r2, #1
 80102e8:	42b2      	cmp	r2, r6
 80102ea:	d00a      	beq.n	8010302 <rcl_wait+0x192>
 80102ec:	6899      	ldr	r1, [r3, #8]
 80102ee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80102f2:	2900      	cmp	r1, #0
 80102f4:	d1f7      	bne.n	80102e6 <rcl_wait+0x176>
 80102f6:	682c      	ldr	r4, [r5, #0]
 80102f8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80102fc:	3201      	adds	r2, #1
 80102fe:	42b2      	cmp	r2, r6
 8010300:	d1f4      	bne.n	80102ec <rcl_wait+0x17c>
 8010302:	68ee      	ldr	r6, [r5, #12]
 8010304:	2200      	movs	r2, #0
 8010306:	b91e      	cbnz	r6, 8010310 <rcl_wait+0x1a0>
 8010308:	e00d      	b.n	8010326 <rcl_wait+0x1b6>
 801030a:	3201      	adds	r2, #1
 801030c:	42b2      	cmp	r2, r6
 801030e:	d00a      	beq.n	8010326 <rcl_wait+0x1b6>
 8010310:	6959      	ldr	r1, [r3, #20]
 8010312:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010316:	2900      	cmp	r1, #0
 8010318:	d1f7      	bne.n	801030a <rcl_wait+0x19a>
 801031a:	68ac      	ldr	r4, [r5, #8]
 801031c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010320:	3201      	adds	r2, #1
 8010322:	42b2      	cmp	r2, r6
 8010324:	d1f4      	bne.n	8010310 <rcl_wait+0x1a0>
 8010326:	69ee      	ldr	r6, [r5, #28]
 8010328:	2200      	movs	r2, #0
 801032a:	b91e      	cbnz	r6, 8010334 <rcl_wait+0x1c4>
 801032c:	e00d      	b.n	801034a <rcl_wait+0x1da>
 801032e:	3201      	adds	r2, #1
 8010330:	42b2      	cmp	r2, r6
 8010332:	d00a      	beq.n	801034a <rcl_wait+0x1da>
 8010334:	6a19      	ldr	r1, [r3, #32]
 8010336:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801033a:	2900      	cmp	r1, #0
 801033c:	d1f7      	bne.n	801032e <rcl_wait+0x1be>
 801033e:	69ac      	ldr	r4, [r5, #24]
 8010340:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010344:	3201      	adds	r2, #1
 8010346:	42b2      	cmp	r2, r6
 8010348:	d1f4      	bne.n	8010334 <rcl_wait+0x1c4>
 801034a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 801034c:	2200      	movs	r2, #0
 801034e:	b91e      	cbnz	r6, 8010358 <rcl_wait+0x1e8>
 8010350:	e00d      	b.n	801036e <rcl_wait+0x1fe>
 8010352:	3201      	adds	r2, #1
 8010354:	4296      	cmp	r6, r2
 8010356:	d00a      	beq.n	801036e <rcl_wait+0x1fe>
 8010358:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801035a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801035e:	2900      	cmp	r1, #0
 8010360:	d1f7      	bne.n	8010352 <rcl_wait+0x1e2>
 8010362:	6a2c      	ldr	r4, [r5, #32]
 8010364:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010368:	3201      	adds	r2, #1
 801036a:	4296      	cmp	r6, r2
 801036c:	d1f4      	bne.n	8010358 <rcl_wait+0x1e8>
 801036e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8010370:	2200      	movs	r2, #0
 8010372:	b91e      	cbnz	r6, 801037c <rcl_wait+0x20c>
 8010374:	e00d      	b.n	8010392 <rcl_wait+0x222>
 8010376:	3201      	adds	r2, #1
 8010378:	42b2      	cmp	r2, r6
 801037a:	d00a      	beq.n	8010392 <rcl_wait+0x222>
 801037c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801037e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010382:	2900      	cmp	r1, #0
 8010384:	d1f7      	bne.n	8010376 <rcl_wait+0x206>
 8010386:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8010388:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801038c:	3201      	adds	r2, #1
 801038e:	42b2      	cmp	r2, r6
 8010390:	d1f4      	bne.n	801037c <rcl_wait+0x20c>
 8010392:	f1b8 0f02 	cmp.w	r8, #2
 8010396:	f47f af08 	bne.w	80101aa <rcl_wait+0x3a>
 801039a:	464b      	mov	r3, r9
 801039c:	2b00      	cmp	r3, #0
 801039e:	bf08      	it	eq
 80103a0:	2002      	moveq	r0, #2
 80103a2:	e702      	b.n	80101aa <rcl_wait+0x3a>
 80103a4:	2a00      	cmp	r2, #0
 80103a6:	d03a      	beq.n	801041e <rcl_wait+0x2ae>
 80103a8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80103ac:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80103b0:	e70e      	b.n	80101d0 <rcl_wait+0x60>
 80103b2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80103b6:	b00d      	add	sp, #52	@ 0x34
 80103b8:	ecbd 8b02 	vpop	{d8}
 80103bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103c0:	9b04      	ldr	r3, [sp, #16]
 80103c2:	2b01      	cmp	r3, #1
 80103c4:	9b05      	ldr	r3, [sp, #20]
 80103c6:	f173 0300 	sbcs.w	r3, r3, #0
 80103ca:	db24      	blt.n	8010416 <rcl_wait+0x2a6>
 80103cc:	2f00      	cmp	r7, #0
 80103ce:	bfbc      	itt	lt
 80103d0:	f04f 0800 	movlt.w	r8, #0
 80103d4:	4647      	movlt	r7, r8
 80103d6:	a31e      	add	r3, pc, #120	@ (adr r3, 8010450 <rcl_wait+0x2e0>)
 80103d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103dc:	4640      	mov	r0, r8
 80103de:	4639      	mov	r1, r7
 80103e0:	f7f0 f938 	bl	8000654 <__aeabi_ldivmod>
 80103e4:	a31a      	add	r3, pc, #104	@ (adr r3, 8010450 <rcl_wait+0x2e0>)
 80103e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ea:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80103ee:	4640      	mov	r0, r8
 80103f0:	4639      	mov	r1, r7
 80103f2:	f7f0 f92f 	bl	8000654 <__aeabi_ldivmod>
 80103f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80103fa:	ab08      	add	r3, sp, #32
 80103fc:	e73e      	b.n	801027c <rcl_wait+0x10c>
 80103fe:	2001      	movs	r0, #1
 8010400:	b00d      	add	sp, #52	@ 0x34
 8010402:	ecbd 8b02 	vpop	{d8}
 8010406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801040a:	200b      	movs	r0, #11
 801040c:	b00d      	add	sp, #52	@ 0x34
 801040e:	ecbd 8b02 	vpop	{d8}
 8010412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010416:	465b      	mov	r3, fp
 8010418:	2b00      	cmp	r3, #0
 801041a:	d1d7      	bne.n	80103cc <rcl_wait+0x25c>
 801041c:	e72e      	b.n	801027c <rcl_wait+0x10c>
 801041e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8010422:	430b      	orrs	r3, r1
 8010424:	bf08      	it	eq
 8010426:	4691      	moveq	r9, r2
 8010428:	f43f af21 	beq.w	801026e <rcl_wait+0xfe>
 801042c:	9b04      	ldr	r3, [sp, #16]
 801042e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8010432:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8010436:	2b01      	cmp	r3, #1
 8010438:	9b05      	ldr	r3, [sp, #20]
 801043a:	f173 0300 	sbcs.w	r3, r3, #0
 801043e:	f04f 0300 	mov.w	r3, #0
 8010442:	4699      	mov	r9, r3
 8010444:	dac2      	bge.n	80103cc <rcl_wait+0x25c>
 8010446:	e719      	b.n	801027c <rcl_wait+0x10c>
 8010448:	ffffffff 	.word	0xffffffff
 801044c:	7fffffff 	.word	0x7fffffff
 8010450:	3b9aca00 	.word	0x3b9aca00
 8010454:	00000000 	.word	0x00000000

08010458 <rcl_action_take_goal_response>:
 8010458:	2800      	cmp	r0, #0
 801045a:	d039      	beq.n	80104d0 <rcl_action_take_goal_response+0x78>
 801045c:	b570      	push	{r4, r5, r6, lr}
 801045e:	4604      	mov	r4, r0
 8010460:	6800      	ldr	r0, [r0, #0]
 8010462:	b380      	cbz	r0, 80104c6 <rcl_action_take_goal_response+0x6e>
 8010464:	460d      	mov	r5, r1
 8010466:	4616      	mov	r6, r2
 8010468:	f7fe f872 	bl	800e550 <rcl_client_is_valid>
 801046c:	b330      	cbz	r0, 80104bc <rcl_action_take_goal_response+0x64>
 801046e:	6820      	ldr	r0, [r4, #0]
 8010470:	3004      	adds	r0, #4
 8010472:	f7fe f86d 	bl	800e550 <rcl_client_is_valid>
 8010476:	b308      	cbz	r0, 80104bc <rcl_action_take_goal_response+0x64>
 8010478:	6820      	ldr	r0, [r4, #0]
 801047a:	3008      	adds	r0, #8
 801047c:	f7fe f868 	bl	800e550 <rcl_client_is_valid>
 8010480:	b1e0      	cbz	r0, 80104bc <rcl_action_take_goal_response+0x64>
 8010482:	6820      	ldr	r0, [r4, #0]
 8010484:	300c      	adds	r0, #12
 8010486:	f7fe ffff 	bl	800f488 <rcl_subscription_is_valid>
 801048a:	b1b8      	cbz	r0, 80104bc <rcl_action_take_goal_response+0x64>
 801048c:	6820      	ldr	r0, [r4, #0]
 801048e:	3010      	adds	r0, #16
 8010490:	f7fe fffa 	bl	800f488 <rcl_subscription_is_valid>
 8010494:	b190      	cbz	r0, 80104bc <rcl_action_take_goal_response+0x64>
 8010496:	b1cd      	cbz	r5, 80104cc <rcl_action_take_goal_response+0x74>
 8010498:	b1c6      	cbz	r6, 80104cc <rcl_action_take_goal_response+0x74>
 801049a:	6820      	ldr	r0, [r4, #0]
 801049c:	4632      	mov	r2, r6
 801049e:	4629      	mov	r1, r5
 80104a0:	f7fe f80e 	bl	800e4c0 <rcl_take_response>
 80104a4:	b148      	cbz	r0, 80104ba <rcl_action_take_goal_response+0x62>
 80104a6:	280a      	cmp	r0, #10
 80104a8:	d007      	beq.n	80104ba <rcl_action_take_goal_response+0x62>
 80104aa:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80104ae:	f640 0337 	movw	r3, #2103	@ 0x837
 80104b2:	4290      	cmp	r0, r2
 80104b4:	bf0c      	ite	eq
 80104b6:	4618      	moveq	r0, r3
 80104b8:	2001      	movne	r0, #1
 80104ba:	bd70      	pop	{r4, r5, r6, pc}
 80104bc:	f7fa fae8 	bl	800aa90 <rcutils_reset_error>
 80104c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80104c4:	bd70      	pop	{r4, r5, r6, pc}
 80104c6:	f640 0036 	movw	r0, #2102	@ 0x836
 80104ca:	bd70      	pop	{r4, r5, r6, pc}
 80104cc:	200b      	movs	r0, #11
 80104ce:	bd70      	pop	{r4, r5, r6, pc}
 80104d0:	f640 0036 	movw	r0, #2102	@ 0x836
 80104d4:	4770      	bx	lr
 80104d6:	bf00      	nop

080104d8 <rcl_action_send_result_request>:
 80104d8:	b390      	cbz	r0, 8010540 <rcl_action_send_result_request+0x68>
 80104da:	b570      	push	{r4, r5, r6, lr}
 80104dc:	4604      	mov	r4, r0
 80104de:	6800      	ldr	r0, [r0, #0]
 80104e0:	b348      	cbz	r0, 8010536 <rcl_action_send_result_request+0x5e>
 80104e2:	460d      	mov	r5, r1
 80104e4:	4616      	mov	r6, r2
 80104e6:	f7fe f833 	bl	800e550 <rcl_client_is_valid>
 80104ea:	b1f8      	cbz	r0, 801052c <rcl_action_send_result_request+0x54>
 80104ec:	6820      	ldr	r0, [r4, #0]
 80104ee:	3004      	adds	r0, #4
 80104f0:	f7fe f82e 	bl	800e550 <rcl_client_is_valid>
 80104f4:	b1d0      	cbz	r0, 801052c <rcl_action_send_result_request+0x54>
 80104f6:	6820      	ldr	r0, [r4, #0]
 80104f8:	3008      	adds	r0, #8
 80104fa:	f7fe f829 	bl	800e550 <rcl_client_is_valid>
 80104fe:	b1a8      	cbz	r0, 801052c <rcl_action_send_result_request+0x54>
 8010500:	6820      	ldr	r0, [r4, #0]
 8010502:	300c      	adds	r0, #12
 8010504:	f7fe ffc0 	bl	800f488 <rcl_subscription_is_valid>
 8010508:	b180      	cbz	r0, 801052c <rcl_action_send_result_request+0x54>
 801050a:	6820      	ldr	r0, [r4, #0]
 801050c:	3010      	adds	r0, #16
 801050e:	f7fe ffbb 	bl	800f488 <rcl_subscription_is_valid>
 8010512:	b158      	cbz	r0, 801052c <rcl_action_send_result_request+0x54>
 8010514:	b195      	cbz	r5, 801053c <rcl_action_send_result_request+0x64>
 8010516:	b18e      	cbz	r6, 801053c <rcl_action_send_result_request+0x64>
 8010518:	6820      	ldr	r0, [r4, #0]
 801051a:	4632      	mov	r2, r6
 801051c:	4629      	mov	r1, r5
 801051e:	3008      	adds	r0, #8
 8010520:	f7fd ff98 	bl	800e454 <rcl_send_request>
 8010524:	3800      	subs	r0, #0
 8010526:	bf18      	it	ne
 8010528:	2001      	movne	r0, #1
 801052a:	bd70      	pop	{r4, r5, r6, pc}
 801052c:	f7fa fab0 	bl	800aa90 <rcutils_reset_error>
 8010530:	f640 0036 	movw	r0, #2102	@ 0x836
 8010534:	bd70      	pop	{r4, r5, r6, pc}
 8010536:	f640 0036 	movw	r0, #2102	@ 0x836
 801053a:	bd70      	pop	{r4, r5, r6, pc}
 801053c:	200b      	movs	r0, #11
 801053e:	bd70      	pop	{r4, r5, r6, pc}
 8010540:	f640 0036 	movw	r0, #2102	@ 0x836
 8010544:	4770      	bx	lr
 8010546:	bf00      	nop

08010548 <rcl_action_take_result_response>:
 8010548:	2800      	cmp	r0, #0
 801054a:	d03a      	beq.n	80105c2 <rcl_action_take_result_response+0x7a>
 801054c:	b570      	push	{r4, r5, r6, lr}
 801054e:	4604      	mov	r4, r0
 8010550:	6800      	ldr	r0, [r0, #0]
 8010552:	b388      	cbz	r0, 80105b8 <rcl_action_take_result_response+0x70>
 8010554:	460d      	mov	r5, r1
 8010556:	4616      	mov	r6, r2
 8010558:	f7fd fffa 	bl	800e550 <rcl_client_is_valid>
 801055c:	b338      	cbz	r0, 80105ae <rcl_action_take_result_response+0x66>
 801055e:	6820      	ldr	r0, [r4, #0]
 8010560:	3004      	adds	r0, #4
 8010562:	f7fd fff5 	bl	800e550 <rcl_client_is_valid>
 8010566:	b310      	cbz	r0, 80105ae <rcl_action_take_result_response+0x66>
 8010568:	6820      	ldr	r0, [r4, #0]
 801056a:	3008      	adds	r0, #8
 801056c:	f7fd fff0 	bl	800e550 <rcl_client_is_valid>
 8010570:	b1e8      	cbz	r0, 80105ae <rcl_action_take_result_response+0x66>
 8010572:	6820      	ldr	r0, [r4, #0]
 8010574:	300c      	adds	r0, #12
 8010576:	f7fe ff87 	bl	800f488 <rcl_subscription_is_valid>
 801057a:	b1c0      	cbz	r0, 80105ae <rcl_action_take_result_response+0x66>
 801057c:	6820      	ldr	r0, [r4, #0]
 801057e:	3010      	adds	r0, #16
 8010580:	f7fe ff82 	bl	800f488 <rcl_subscription_is_valid>
 8010584:	b198      	cbz	r0, 80105ae <rcl_action_take_result_response+0x66>
 8010586:	b1d5      	cbz	r5, 80105be <rcl_action_take_result_response+0x76>
 8010588:	b1ce      	cbz	r6, 80105be <rcl_action_take_result_response+0x76>
 801058a:	6820      	ldr	r0, [r4, #0]
 801058c:	4632      	mov	r2, r6
 801058e:	4629      	mov	r1, r5
 8010590:	3008      	adds	r0, #8
 8010592:	f7fd ff95 	bl	800e4c0 <rcl_take_response>
 8010596:	b148      	cbz	r0, 80105ac <rcl_action_take_result_response+0x64>
 8010598:	280a      	cmp	r0, #10
 801059a:	d007      	beq.n	80105ac <rcl_action_take_result_response+0x64>
 801059c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80105a0:	f640 0337 	movw	r3, #2103	@ 0x837
 80105a4:	4290      	cmp	r0, r2
 80105a6:	bf0c      	ite	eq
 80105a8:	4618      	moveq	r0, r3
 80105aa:	2001      	movne	r0, #1
 80105ac:	bd70      	pop	{r4, r5, r6, pc}
 80105ae:	f7fa fa6f 	bl	800aa90 <rcutils_reset_error>
 80105b2:	f640 0036 	movw	r0, #2102	@ 0x836
 80105b6:	bd70      	pop	{r4, r5, r6, pc}
 80105b8:	f640 0036 	movw	r0, #2102	@ 0x836
 80105bc:	bd70      	pop	{r4, r5, r6, pc}
 80105be:	200b      	movs	r0, #11
 80105c0:	bd70      	pop	{r4, r5, r6, pc}
 80105c2:	f640 0036 	movw	r0, #2102	@ 0x836
 80105c6:	4770      	bx	lr

080105c8 <rcl_action_take_cancel_response>:
 80105c8:	2800      	cmp	r0, #0
 80105ca:	d03a      	beq.n	8010642 <rcl_action_take_cancel_response+0x7a>
 80105cc:	b570      	push	{r4, r5, r6, lr}
 80105ce:	4604      	mov	r4, r0
 80105d0:	6800      	ldr	r0, [r0, #0]
 80105d2:	b388      	cbz	r0, 8010638 <rcl_action_take_cancel_response+0x70>
 80105d4:	460d      	mov	r5, r1
 80105d6:	4616      	mov	r6, r2
 80105d8:	f7fd ffba 	bl	800e550 <rcl_client_is_valid>
 80105dc:	b338      	cbz	r0, 801062e <rcl_action_take_cancel_response+0x66>
 80105de:	6820      	ldr	r0, [r4, #0]
 80105e0:	3004      	adds	r0, #4
 80105e2:	f7fd ffb5 	bl	800e550 <rcl_client_is_valid>
 80105e6:	b310      	cbz	r0, 801062e <rcl_action_take_cancel_response+0x66>
 80105e8:	6820      	ldr	r0, [r4, #0]
 80105ea:	3008      	adds	r0, #8
 80105ec:	f7fd ffb0 	bl	800e550 <rcl_client_is_valid>
 80105f0:	b1e8      	cbz	r0, 801062e <rcl_action_take_cancel_response+0x66>
 80105f2:	6820      	ldr	r0, [r4, #0]
 80105f4:	300c      	adds	r0, #12
 80105f6:	f7fe ff47 	bl	800f488 <rcl_subscription_is_valid>
 80105fa:	b1c0      	cbz	r0, 801062e <rcl_action_take_cancel_response+0x66>
 80105fc:	6820      	ldr	r0, [r4, #0]
 80105fe:	3010      	adds	r0, #16
 8010600:	f7fe ff42 	bl	800f488 <rcl_subscription_is_valid>
 8010604:	b198      	cbz	r0, 801062e <rcl_action_take_cancel_response+0x66>
 8010606:	b1d5      	cbz	r5, 801063e <rcl_action_take_cancel_response+0x76>
 8010608:	b1ce      	cbz	r6, 801063e <rcl_action_take_cancel_response+0x76>
 801060a:	6820      	ldr	r0, [r4, #0]
 801060c:	4632      	mov	r2, r6
 801060e:	4629      	mov	r1, r5
 8010610:	3004      	adds	r0, #4
 8010612:	f7fd ff55 	bl	800e4c0 <rcl_take_response>
 8010616:	b148      	cbz	r0, 801062c <rcl_action_take_cancel_response+0x64>
 8010618:	280a      	cmp	r0, #10
 801061a:	d007      	beq.n	801062c <rcl_action_take_cancel_response+0x64>
 801061c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8010620:	f640 0337 	movw	r3, #2103	@ 0x837
 8010624:	4290      	cmp	r0, r2
 8010626:	bf0c      	ite	eq
 8010628:	4618      	moveq	r0, r3
 801062a:	2001      	movne	r0, #1
 801062c:	bd70      	pop	{r4, r5, r6, pc}
 801062e:	f7fa fa2f 	bl	800aa90 <rcutils_reset_error>
 8010632:	f640 0036 	movw	r0, #2102	@ 0x836
 8010636:	bd70      	pop	{r4, r5, r6, pc}
 8010638:	f640 0036 	movw	r0, #2102	@ 0x836
 801063c:	bd70      	pop	{r4, r5, r6, pc}
 801063e:	200b      	movs	r0, #11
 8010640:	bd70      	pop	{r4, r5, r6, pc}
 8010642:	f640 0036 	movw	r0, #2102	@ 0x836
 8010646:	4770      	bx	lr

08010648 <rcl_action_take_feedback>:
 8010648:	2800      	cmp	r0, #0
 801064a:	d038      	beq.n	80106be <rcl_action_take_feedback+0x76>
 801064c:	b530      	push	{r4, r5, lr}
 801064e:	4604      	mov	r4, r0
 8010650:	6800      	ldr	r0, [r0, #0]
 8010652:	b091      	sub	sp, #68	@ 0x44
 8010654:	b378      	cbz	r0, 80106b6 <rcl_action_take_feedback+0x6e>
 8010656:	460d      	mov	r5, r1
 8010658:	f7fd ff7a 	bl	800e550 <rcl_client_is_valid>
 801065c:	b328      	cbz	r0, 80106aa <rcl_action_take_feedback+0x62>
 801065e:	6820      	ldr	r0, [r4, #0]
 8010660:	3004      	adds	r0, #4
 8010662:	f7fd ff75 	bl	800e550 <rcl_client_is_valid>
 8010666:	b300      	cbz	r0, 80106aa <rcl_action_take_feedback+0x62>
 8010668:	6820      	ldr	r0, [r4, #0]
 801066a:	3008      	adds	r0, #8
 801066c:	f7fd ff70 	bl	800e550 <rcl_client_is_valid>
 8010670:	b1d8      	cbz	r0, 80106aa <rcl_action_take_feedback+0x62>
 8010672:	6820      	ldr	r0, [r4, #0]
 8010674:	300c      	adds	r0, #12
 8010676:	f7fe ff07 	bl	800f488 <rcl_subscription_is_valid>
 801067a:	b1b0      	cbz	r0, 80106aa <rcl_action_take_feedback+0x62>
 801067c:	6820      	ldr	r0, [r4, #0]
 801067e:	3010      	adds	r0, #16
 8010680:	f7fe ff02 	bl	800f488 <rcl_subscription_is_valid>
 8010684:	b188      	cbz	r0, 80106aa <rcl_action_take_feedback+0x62>
 8010686:	b1ed      	cbz	r5, 80106c4 <rcl_action_take_feedback+0x7c>
 8010688:	6820      	ldr	r0, [r4, #0]
 801068a:	2300      	movs	r3, #0
 801068c:	466a      	mov	r2, sp
 801068e:	4629      	mov	r1, r5
 8010690:	300c      	adds	r0, #12
 8010692:	f7fe fe9b 	bl	800f3cc <rcl_take>
 8010696:	b160      	cbz	r0, 80106b2 <rcl_action_take_feedback+0x6a>
 8010698:	f240 1391 	movw	r3, #401	@ 0x191
 801069c:	4298      	cmp	r0, r3
 801069e:	d014      	beq.n	80106ca <rcl_action_take_feedback+0x82>
 80106a0:	280a      	cmp	r0, #10
 80106a2:	bf18      	it	ne
 80106a4:	2001      	movne	r0, #1
 80106a6:	b011      	add	sp, #68	@ 0x44
 80106a8:	bd30      	pop	{r4, r5, pc}
 80106aa:	f7fa f9f1 	bl	800aa90 <rcutils_reset_error>
 80106ae:	f640 0036 	movw	r0, #2102	@ 0x836
 80106b2:	b011      	add	sp, #68	@ 0x44
 80106b4:	bd30      	pop	{r4, r5, pc}
 80106b6:	f640 0036 	movw	r0, #2102	@ 0x836
 80106ba:	b011      	add	sp, #68	@ 0x44
 80106bc:	bd30      	pop	{r4, r5, pc}
 80106be:	f640 0036 	movw	r0, #2102	@ 0x836
 80106c2:	4770      	bx	lr
 80106c4:	200b      	movs	r0, #11
 80106c6:	b011      	add	sp, #68	@ 0x44
 80106c8:	bd30      	pop	{r4, r5, pc}
 80106ca:	f640 0037 	movw	r0, #2103	@ 0x837
 80106ce:	e7f0      	b.n	80106b2 <rcl_action_take_feedback+0x6a>

080106d0 <rcl_action_wait_set_add_action_client>:
 80106d0:	2800      	cmp	r0, #0
 80106d2:	d048      	beq.n	8010766 <rcl_action_wait_set_add_action_client+0x96>
 80106d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106d6:	460c      	mov	r4, r1
 80106d8:	2900      	cmp	r1, #0
 80106da:	d03c      	beq.n	8010756 <rcl_action_wait_set_add_action_client+0x86>
 80106dc:	4605      	mov	r5, r0
 80106de:	6808      	ldr	r0, [r1, #0]
 80106e0:	2800      	cmp	r0, #0
 80106e2:	d038      	beq.n	8010756 <rcl_action_wait_set_add_action_client+0x86>
 80106e4:	4617      	mov	r7, r2
 80106e6:	461e      	mov	r6, r3
 80106e8:	f7fd ff32 	bl	800e550 <rcl_client_is_valid>
 80106ec:	b3b0      	cbz	r0, 801075c <rcl_action_wait_set_add_action_client+0x8c>
 80106ee:	6820      	ldr	r0, [r4, #0]
 80106f0:	3004      	adds	r0, #4
 80106f2:	f7fd ff2d 	bl	800e550 <rcl_client_is_valid>
 80106f6:	b388      	cbz	r0, 801075c <rcl_action_wait_set_add_action_client+0x8c>
 80106f8:	6820      	ldr	r0, [r4, #0]
 80106fa:	3008      	adds	r0, #8
 80106fc:	f7fd ff28 	bl	800e550 <rcl_client_is_valid>
 8010700:	b360      	cbz	r0, 801075c <rcl_action_wait_set_add_action_client+0x8c>
 8010702:	6820      	ldr	r0, [r4, #0]
 8010704:	300c      	adds	r0, #12
 8010706:	f7fe febf 	bl	800f488 <rcl_subscription_is_valid>
 801070a:	b338      	cbz	r0, 801075c <rcl_action_wait_set_add_action_client+0x8c>
 801070c:	6820      	ldr	r0, [r4, #0]
 801070e:	3010      	adds	r0, #16
 8010710:	f7fe feba 	bl	800f488 <rcl_subscription_is_valid>
 8010714:	b310      	cbz	r0, 801075c <rcl_action_wait_set_add_action_client+0x8c>
 8010716:	6821      	ldr	r1, [r4, #0]
 8010718:	4628      	mov	r0, r5
 801071a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801071e:	f7ff fccd 	bl	80100bc <rcl_wait_set_add_client>
 8010722:	b9b8      	cbnz	r0, 8010754 <rcl_action_wait_set_add_action_client+0x84>
 8010724:	6821      	ldr	r1, [r4, #0]
 8010726:	4628      	mov	r0, r5
 8010728:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801072c:	3104      	adds	r1, #4
 801072e:	f7ff fcc5 	bl	80100bc <rcl_wait_set_add_client>
 8010732:	b978      	cbnz	r0, 8010754 <rcl_action_wait_set_add_action_client+0x84>
 8010734:	6821      	ldr	r1, [r4, #0]
 8010736:	4628      	mov	r0, r5
 8010738:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801073c:	3108      	adds	r1, #8
 801073e:	f7ff fcbd 	bl	80100bc <rcl_wait_set_add_client>
 8010742:	b938      	cbnz	r0, 8010754 <rcl_action_wait_set_add_action_client+0x84>
 8010744:	6821      	ldr	r1, [r4, #0]
 8010746:	4628      	mov	r0, r5
 8010748:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801074c:	310c      	adds	r1, #12
 801074e:	f7ff f96d 	bl	800fa2c <rcl_wait_set_add_subscription>
 8010752:	b158      	cbz	r0, 801076c <rcl_action_wait_set_add_action_client+0x9c>
 8010754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010756:	f640 0036 	movw	r0, #2102	@ 0x836
 801075a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801075c:	f7fa f998 	bl	800aa90 <rcutils_reset_error>
 8010760:	f640 0036 	movw	r0, #2102	@ 0x836
 8010764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010766:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801076a:	4770      	bx	lr
 801076c:	6821      	ldr	r1, [r4, #0]
 801076e:	4628      	mov	r0, r5
 8010770:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8010774:	3110      	adds	r1, #16
 8010776:	f7ff f959 	bl	800fa2c <rcl_wait_set_add_subscription>
 801077a:	2800      	cmp	r0, #0
 801077c:	d1ea      	bne.n	8010754 <rcl_action_wait_set_add_action_client+0x84>
 801077e:	b11f      	cbz	r7, 8010788 <rcl_action_wait_set_add_action_client+0xb8>
 8010780:	6823      	ldr	r3, [r4, #0]
 8010782:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8010786:	603b      	str	r3, [r7, #0]
 8010788:	2e00      	cmp	r6, #0
 801078a:	d0e3      	beq.n	8010754 <rcl_action_wait_set_add_action_client+0x84>
 801078c:	6823      	ldr	r3, [r4, #0]
 801078e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8010792:	6033      	str	r3, [r6, #0]
 8010794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010796:	bf00      	nop

08010798 <rcl_action_client_wait_set_get_entities_ready>:
 8010798:	2800      	cmp	r0, #0
 801079a:	f000 808d 	beq.w	80108b8 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801079e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107a2:	460c      	mov	r4, r1
 80107a4:	2900      	cmp	r1, #0
 80107a6:	d077      	beq.n	8010898 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80107a8:	4605      	mov	r5, r0
 80107aa:	6808      	ldr	r0, [r1, #0]
 80107ac:	2800      	cmp	r0, #0
 80107ae:	d073      	beq.n	8010898 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80107b0:	4616      	mov	r6, r2
 80107b2:	461f      	mov	r7, r3
 80107b4:	f7fd fecc 	bl	800e550 <rcl_client_is_valid>
 80107b8:	2800      	cmp	r0, #0
 80107ba:	d071      	beq.n	80108a0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80107bc:	6820      	ldr	r0, [r4, #0]
 80107be:	3004      	adds	r0, #4
 80107c0:	f7fd fec6 	bl	800e550 <rcl_client_is_valid>
 80107c4:	2800      	cmp	r0, #0
 80107c6:	d06b      	beq.n	80108a0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80107c8:	6820      	ldr	r0, [r4, #0]
 80107ca:	3008      	adds	r0, #8
 80107cc:	f7fd fec0 	bl	800e550 <rcl_client_is_valid>
 80107d0:	2800      	cmp	r0, #0
 80107d2:	d065      	beq.n	80108a0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80107d4:	6820      	ldr	r0, [r4, #0]
 80107d6:	300c      	adds	r0, #12
 80107d8:	f7fe fe56 	bl	800f488 <rcl_subscription_is_valid>
 80107dc:	2800      	cmp	r0, #0
 80107de:	d05f      	beq.n	80108a0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80107e0:	6820      	ldr	r0, [r4, #0]
 80107e2:	3010      	adds	r0, #16
 80107e4:	f7fe fe50 	bl	800f488 <rcl_subscription_is_valid>
 80107e8:	2800      	cmp	r0, #0
 80107ea:	d059      	beq.n	80108a0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80107ec:	2e00      	cmp	r6, #0
 80107ee:	d060      	beq.n	80108b2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80107f0:	2f00      	cmp	r7, #0
 80107f2:	d05e      	beq.n	80108b2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80107f4:	9b06      	ldr	r3, [sp, #24]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d05b      	beq.n	80108b2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80107fa:	9b07      	ldr	r3, [sp, #28]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d058      	beq.n	80108b2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010800:	9b08      	ldr	r3, [sp, #32]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d055      	beq.n	80108b2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010806:	6823      	ldr	r3, [r4, #0]
 8010808:	686a      	ldr	r2, [r5, #4]
 801080a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801080e:	428a      	cmp	r2, r1
 8010810:	d94c      	bls.n	80108ac <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010812:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8010816:	4282      	cmp	r2, r0
 8010818:	d948      	bls.n	80108ac <rcl_action_client_wait_set_get_entities_ready+0x114>
 801081a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801081e:	69ea      	ldr	r2, [r5, #28]
 8010820:	42a2      	cmp	r2, r4
 8010822:	d943      	bls.n	80108ac <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010824:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8010828:	4562      	cmp	r2, ip
 801082a:	d93f      	bls.n	80108ac <rcl_action_client_wait_set_get_entities_ready+0x114>
 801082c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8010830:	4572      	cmp	r2, lr
 8010832:	d93b      	bls.n	80108ac <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010834:	69aa      	ldr	r2, [r5, #24]
 8010836:	682d      	ldr	r5, [r5, #0]
 8010838:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801083c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8010840:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8010844:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8010848:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801084c:	f103 0c0c 	add.w	ip, r3, #12
 8010850:	eba5 050c 	sub.w	r5, r5, ip
 8010854:	fab5 f585 	clz	r5, r5
 8010858:	096d      	lsrs	r5, r5, #5
 801085a:	7035      	strb	r5, [r6, #0]
 801085c:	f103 0510 	add.w	r5, r3, #16
 8010860:	1b64      	subs	r4, r4, r5
 8010862:	fab4 f484 	clz	r4, r4
 8010866:	0964      	lsrs	r4, r4, #5
 8010868:	703c      	strb	r4, [r7, #0]
 801086a:	eba3 0008 	sub.w	r0, r3, r8
 801086e:	1d1c      	adds	r4, r3, #4
 8010870:	3308      	adds	r3, #8
 8010872:	1ad3      	subs	r3, r2, r3
 8010874:	fab0 f080 	clz	r0, r0
 8010878:	9a06      	ldr	r2, [sp, #24]
 801087a:	0940      	lsrs	r0, r0, #5
 801087c:	1b09      	subs	r1, r1, r4
 801087e:	7010      	strb	r0, [r2, #0]
 8010880:	fab1 f181 	clz	r1, r1
 8010884:	9a07      	ldr	r2, [sp, #28]
 8010886:	0949      	lsrs	r1, r1, #5
 8010888:	7011      	strb	r1, [r2, #0]
 801088a:	fab3 f383 	clz	r3, r3
 801088e:	9a08      	ldr	r2, [sp, #32]
 8010890:	095b      	lsrs	r3, r3, #5
 8010892:	2000      	movs	r0, #0
 8010894:	7013      	strb	r3, [r2, #0]
 8010896:	e001      	b.n	801089c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8010898:	f640 0036 	movw	r0, #2102	@ 0x836
 801089c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108a0:	f7fa f8f6 	bl	800aa90 <rcutils_reset_error>
 80108a4:	f640 0036 	movw	r0, #2102	@ 0x836
 80108a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108ac:	2001      	movs	r0, #1
 80108ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108b2:	200b      	movs	r0, #11
 80108b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108b8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80108bc:	4770      	bx	lr
 80108be:	bf00      	nop

080108c0 <rcl_action_take_goal_request>:
 80108c0:	2800      	cmp	r0, #0
 80108c2:	d039      	beq.n	8010938 <rcl_action_take_goal_request+0x78>
 80108c4:	b570      	push	{r4, r5, r6, lr}
 80108c6:	4604      	mov	r4, r0
 80108c8:	6800      	ldr	r0, [r0, #0]
 80108ca:	b380      	cbz	r0, 801092e <rcl_action_take_goal_request+0x6e>
 80108cc:	460d      	mov	r5, r1
 80108ce:	4616      	mov	r6, r2
 80108d0:	f7fe fc96 	bl	800f200 <rcl_service_is_valid>
 80108d4:	b330      	cbz	r0, 8010924 <rcl_action_take_goal_request+0x64>
 80108d6:	6820      	ldr	r0, [r4, #0]
 80108d8:	3004      	adds	r0, #4
 80108da:	f7fe fc91 	bl	800f200 <rcl_service_is_valid>
 80108de:	b308      	cbz	r0, 8010924 <rcl_action_take_goal_request+0x64>
 80108e0:	6820      	ldr	r0, [r4, #0]
 80108e2:	3008      	adds	r0, #8
 80108e4:	f7fe fc8c 	bl	800f200 <rcl_service_is_valid>
 80108e8:	b1e0      	cbz	r0, 8010924 <rcl_action_take_goal_request+0x64>
 80108ea:	6820      	ldr	r0, [r4, #0]
 80108ec:	300c      	adds	r0, #12
 80108ee:	f7f9 f93d 	bl	8009b6c <rcl_publisher_is_valid>
 80108f2:	b1b8      	cbz	r0, 8010924 <rcl_action_take_goal_request+0x64>
 80108f4:	6820      	ldr	r0, [r4, #0]
 80108f6:	3010      	adds	r0, #16
 80108f8:	f7f9 f938 	bl	8009b6c <rcl_publisher_is_valid>
 80108fc:	b190      	cbz	r0, 8010924 <rcl_action_take_goal_request+0x64>
 80108fe:	b1cd      	cbz	r5, 8010934 <rcl_action_take_goal_request+0x74>
 8010900:	b1c6      	cbz	r6, 8010934 <rcl_action_take_goal_request+0x74>
 8010902:	6820      	ldr	r0, [r4, #0]
 8010904:	4632      	mov	r2, r6
 8010906:	4629      	mov	r1, r5
 8010908:	f7fe fc22 	bl	800f150 <rcl_take_request>
 801090c:	b148      	cbz	r0, 8010922 <rcl_action_take_goal_request+0x62>
 801090e:	280a      	cmp	r0, #10
 8010910:	d007      	beq.n	8010922 <rcl_action_take_goal_request+0x62>
 8010912:	f240 2259 	movw	r2, #601	@ 0x259
 8010916:	f640 0399 	movw	r3, #2201	@ 0x899
 801091a:	4290      	cmp	r0, r2
 801091c:	bf0c      	ite	eq
 801091e:	4618      	moveq	r0, r3
 8010920:	2001      	movne	r0, #1
 8010922:	bd70      	pop	{r4, r5, r6, pc}
 8010924:	f7fa f8b4 	bl	800aa90 <rcutils_reset_error>
 8010928:	f640 0098 	movw	r0, #2200	@ 0x898
 801092c:	bd70      	pop	{r4, r5, r6, pc}
 801092e:	f640 0098 	movw	r0, #2200	@ 0x898
 8010932:	bd70      	pop	{r4, r5, r6, pc}
 8010934:	200b      	movs	r0, #11
 8010936:	bd70      	pop	{r4, r5, r6, pc}
 8010938:	f640 0098 	movw	r0, #2200	@ 0x898
 801093c:	4770      	bx	lr
 801093e:	bf00      	nop

08010940 <rcl_action_send_goal_response>:
 8010940:	b390      	cbz	r0, 80109a8 <rcl_action_send_goal_response+0x68>
 8010942:	b570      	push	{r4, r5, r6, lr}
 8010944:	4604      	mov	r4, r0
 8010946:	6800      	ldr	r0, [r0, #0]
 8010948:	b348      	cbz	r0, 801099e <rcl_action_send_goal_response+0x5e>
 801094a:	460d      	mov	r5, r1
 801094c:	4616      	mov	r6, r2
 801094e:	f7fe fc57 	bl	800f200 <rcl_service_is_valid>
 8010952:	b1f8      	cbz	r0, 8010994 <rcl_action_send_goal_response+0x54>
 8010954:	6820      	ldr	r0, [r4, #0]
 8010956:	3004      	adds	r0, #4
 8010958:	f7fe fc52 	bl	800f200 <rcl_service_is_valid>
 801095c:	b1d0      	cbz	r0, 8010994 <rcl_action_send_goal_response+0x54>
 801095e:	6820      	ldr	r0, [r4, #0]
 8010960:	3008      	adds	r0, #8
 8010962:	f7fe fc4d 	bl	800f200 <rcl_service_is_valid>
 8010966:	b1a8      	cbz	r0, 8010994 <rcl_action_send_goal_response+0x54>
 8010968:	6820      	ldr	r0, [r4, #0]
 801096a:	300c      	adds	r0, #12
 801096c:	f7f9 f8fe 	bl	8009b6c <rcl_publisher_is_valid>
 8010970:	b180      	cbz	r0, 8010994 <rcl_action_send_goal_response+0x54>
 8010972:	6820      	ldr	r0, [r4, #0]
 8010974:	3010      	adds	r0, #16
 8010976:	f7f9 f8f9 	bl	8009b6c <rcl_publisher_is_valid>
 801097a:	b158      	cbz	r0, 8010994 <rcl_action_send_goal_response+0x54>
 801097c:	b195      	cbz	r5, 80109a4 <rcl_action_send_goal_response+0x64>
 801097e:	b18e      	cbz	r6, 80109a4 <rcl_action_send_goal_response+0x64>
 8010980:	6820      	ldr	r0, [r4, #0]
 8010982:	4632      	mov	r2, r6
 8010984:	4629      	mov	r1, r5
 8010986:	f7fe fc23 	bl	800f1d0 <rcl_send_response>
 801098a:	b110      	cbz	r0, 8010992 <rcl_action_send_goal_response+0x52>
 801098c:	2802      	cmp	r0, #2
 801098e:	bf18      	it	ne
 8010990:	2001      	movne	r0, #1
 8010992:	bd70      	pop	{r4, r5, r6, pc}
 8010994:	f7fa f87c 	bl	800aa90 <rcutils_reset_error>
 8010998:	f640 0098 	movw	r0, #2200	@ 0x898
 801099c:	bd70      	pop	{r4, r5, r6, pc}
 801099e:	f640 0098 	movw	r0, #2200	@ 0x898
 80109a2:	bd70      	pop	{r4, r5, r6, pc}
 80109a4:	200b      	movs	r0, #11
 80109a6:	bd70      	pop	{r4, r5, r6, pc}
 80109a8:	f640 0098 	movw	r0, #2200	@ 0x898
 80109ac:	4770      	bx	lr
 80109ae:	bf00      	nop

080109b0 <rcl_action_take_result_request>:
 80109b0:	2800      	cmp	r0, #0
 80109b2:	d03a      	beq.n	8010a2a <rcl_action_take_result_request+0x7a>
 80109b4:	b570      	push	{r4, r5, r6, lr}
 80109b6:	4604      	mov	r4, r0
 80109b8:	6800      	ldr	r0, [r0, #0]
 80109ba:	b388      	cbz	r0, 8010a20 <rcl_action_take_result_request+0x70>
 80109bc:	460d      	mov	r5, r1
 80109be:	4616      	mov	r6, r2
 80109c0:	f7fe fc1e 	bl	800f200 <rcl_service_is_valid>
 80109c4:	b338      	cbz	r0, 8010a16 <rcl_action_take_result_request+0x66>
 80109c6:	6820      	ldr	r0, [r4, #0]
 80109c8:	3004      	adds	r0, #4
 80109ca:	f7fe fc19 	bl	800f200 <rcl_service_is_valid>
 80109ce:	b310      	cbz	r0, 8010a16 <rcl_action_take_result_request+0x66>
 80109d0:	6820      	ldr	r0, [r4, #0]
 80109d2:	3008      	adds	r0, #8
 80109d4:	f7fe fc14 	bl	800f200 <rcl_service_is_valid>
 80109d8:	b1e8      	cbz	r0, 8010a16 <rcl_action_take_result_request+0x66>
 80109da:	6820      	ldr	r0, [r4, #0]
 80109dc:	300c      	adds	r0, #12
 80109de:	f7f9 f8c5 	bl	8009b6c <rcl_publisher_is_valid>
 80109e2:	b1c0      	cbz	r0, 8010a16 <rcl_action_take_result_request+0x66>
 80109e4:	6820      	ldr	r0, [r4, #0]
 80109e6:	3010      	adds	r0, #16
 80109e8:	f7f9 f8c0 	bl	8009b6c <rcl_publisher_is_valid>
 80109ec:	b198      	cbz	r0, 8010a16 <rcl_action_take_result_request+0x66>
 80109ee:	b1d5      	cbz	r5, 8010a26 <rcl_action_take_result_request+0x76>
 80109f0:	b1ce      	cbz	r6, 8010a26 <rcl_action_take_result_request+0x76>
 80109f2:	6820      	ldr	r0, [r4, #0]
 80109f4:	4632      	mov	r2, r6
 80109f6:	4629      	mov	r1, r5
 80109f8:	3008      	adds	r0, #8
 80109fa:	f7fe fba9 	bl	800f150 <rcl_take_request>
 80109fe:	b148      	cbz	r0, 8010a14 <rcl_action_take_result_request+0x64>
 8010a00:	280a      	cmp	r0, #10
 8010a02:	d007      	beq.n	8010a14 <rcl_action_take_result_request+0x64>
 8010a04:	f240 2259 	movw	r2, #601	@ 0x259
 8010a08:	f640 0399 	movw	r3, #2201	@ 0x899
 8010a0c:	4290      	cmp	r0, r2
 8010a0e:	bf0c      	ite	eq
 8010a10:	4618      	moveq	r0, r3
 8010a12:	2001      	movne	r0, #1
 8010a14:	bd70      	pop	{r4, r5, r6, pc}
 8010a16:	f7fa f83b 	bl	800aa90 <rcutils_reset_error>
 8010a1a:	f640 0098 	movw	r0, #2200	@ 0x898
 8010a1e:	bd70      	pop	{r4, r5, r6, pc}
 8010a20:	f640 0098 	movw	r0, #2200	@ 0x898
 8010a24:	bd70      	pop	{r4, r5, r6, pc}
 8010a26:	200b      	movs	r0, #11
 8010a28:	bd70      	pop	{r4, r5, r6, pc}
 8010a2a:	f640 0098 	movw	r0, #2200	@ 0x898
 8010a2e:	4770      	bx	lr

08010a30 <rcl_action_take_cancel_request>:
 8010a30:	2800      	cmp	r0, #0
 8010a32:	d03a      	beq.n	8010aaa <rcl_action_take_cancel_request+0x7a>
 8010a34:	b570      	push	{r4, r5, r6, lr}
 8010a36:	4604      	mov	r4, r0
 8010a38:	6800      	ldr	r0, [r0, #0]
 8010a3a:	b388      	cbz	r0, 8010aa0 <rcl_action_take_cancel_request+0x70>
 8010a3c:	460d      	mov	r5, r1
 8010a3e:	4616      	mov	r6, r2
 8010a40:	f7fe fbde 	bl	800f200 <rcl_service_is_valid>
 8010a44:	b338      	cbz	r0, 8010a96 <rcl_action_take_cancel_request+0x66>
 8010a46:	6820      	ldr	r0, [r4, #0]
 8010a48:	3004      	adds	r0, #4
 8010a4a:	f7fe fbd9 	bl	800f200 <rcl_service_is_valid>
 8010a4e:	b310      	cbz	r0, 8010a96 <rcl_action_take_cancel_request+0x66>
 8010a50:	6820      	ldr	r0, [r4, #0]
 8010a52:	3008      	adds	r0, #8
 8010a54:	f7fe fbd4 	bl	800f200 <rcl_service_is_valid>
 8010a58:	b1e8      	cbz	r0, 8010a96 <rcl_action_take_cancel_request+0x66>
 8010a5a:	6820      	ldr	r0, [r4, #0]
 8010a5c:	300c      	adds	r0, #12
 8010a5e:	f7f9 f885 	bl	8009b6c <rcl_publisher_is_valid>
 8010a62:	b1c0      	cbz	r0, 8010a96 <rcl_action_take_cancel_request+0x66>
 8010a64:	6820      	ldr	r0, [r4, #0]
 8010a66:	3010      	adds	r0, #16
 8010a68:	f7f9 f880 	bl	8009b6c <rcl_publisher_is_valid>
 8010a6c:	b198      	cbz	r0, 8010a96 <rcl_action_take_cancel_request+0x66>
 8010a6e:	b1d5      	cbz	r5, 8010aa6 <rcl_action_take_cancel_request+0x76>
 8010a70:	b1ce      	cbz	r6, 8010aa6 <rcl_action_take_cancel_request+0x76>
 8010a72:	6820      	ldr	r0, [r4, #0]
 8010a74:	4632      	mov	r2, r6
 8010a76:	4629      	mov	r1, r5
 8010a78:	3004      	adds	r0, #4
 8010a7a:	f7fe fb69 	bl	800f150 <rcl_take_request>
 8010a7e:	b148      	cbz	r0, 8010a94 <rcl_action_take_cancel_request+0x64>
 8010a80:	280a      	cmp	r0, #10
 8010a82:	d007      	beq.n	8010a94 <rcl_action_take_cancel_request+0x64>
 8010a84:	f240 2259 	movw	r2, #601	@ 0x259
 8010a88:	f640 0399 	movw	r3, #2201	@ 0x899
 8010a8c:	4290      	cmp	r0, r2
 8010a8e:	bf0c      	ite	eq
 8010a90:	4618      	moveq	r0, r3
 8010a92:	2001      	movne	r0, #1
 8010a94:	bd70      	pop	{r4, r5, r6, pc}
 8010a96:	f7f9 fffb 	bl	800aa90 <rcutils_reset_error>
 8010a9a:	f640 0098 	movw	r0, #2200	@ 0x898
 8010a9e:	bd70      	pop	{r4, r5, r6, pc}
 8010aa0:	f640 0098 	movw	r0, #2200	@ 0x898
 8010aa4:	bd70      	pop	{r4, r5, r6, pc}
 8010aa6:	200b      	movs	r0, #11
 8010aa8:	bd70      	pop	{r4, r5, r6, pc}
 8010aaa:	f640 0098 	movw	r0, #2200	@ 0x898
 8010aae:	4770      	bx	lr

08010ab0 <rcl_action_send_cancel_response>:
 8010ab0:	b398      	cbz	r0, 8010b1a <rcl_action_send_cancel_response+0x6a>
 8010ab2:	b570      	push	{r4, r5, r6, lr}
 8010ab4:	4604      	mov	r4, r0
 8010ab6:	6800      	ldr	r0, [r0, #0]
 8010ab8:	b350      	cbz	r0, 8010b10 <rcl_action_send_cancel_response+0x60>
 8010aba:	460d      	mov	r5, r1
 8010abc:	4616      	mov	r6, r2
 8010abe:	f7fe fb9f 	bl	800f200 <rcl_service_is_valid>
 8010ac2:	b300      	cbz	r0, 8010b06 <rcl_action_send_cancel_response+0x56>
 8010ac4:	6820      	ldr	r0, [r4, #0]
 8010ac6:	3004      	adds	r0, #4
 8010ac8:	f7fe fb9a 	bl	800f200 <rcl_service_is_valid>
 8010acc:	b1d8      	cbz	r0, 8010b06 <rcl_action_send_cancel_response+0x56>
 8010ace:	6820      	ldr	r0, [r4, #0]
 8010ad0:	3008      	adds	r0, #8
 8010ad2:	f7fe fb95 	bl	800f200 <rcl_service_is_valid>
 8010ad6:	b1b0      	cbz	r0, 8010b06 <rcl_action_send_cancel_response+0x56>
 8010ad8:	6820      	ldr	r0, [r4, #0]
 8010ada:	300c      	adds	r0, #12
 8010adc:	f7f9 f846 	bl	8009b6c <rcl_publisher_is_valid>
 8010ae0:	b188      	cbz	r0, 8010b06 <rcl_action_send_cancel_response+0x56>
 8010ae2:	6820      	ldr	r0, [r4, #0]
 8010ae4:	3010      	adds	r0, #16
 8010ae6:	f7f9 f841 	bl	8009b6c <rcl_publisher_is_valid>
 8010aea:	b160      	cbz	r0, 8010b06 <rcl_action_send_cancel_response+0x56>
 8010aec:	b19d      	cbz	r5, 8010b16 <rcl_action_send_cancel_response+0x66>
 8010aee:	b196      	cbz	r6, 8010b16 <rcl_action_send_cancel_response+0x66>
 8010af0:	6820      	ldr	r0, [r4, #0]
 8010af2:	4632      	mov	r2, r6
 8010af4:	4629      	mov	r1, r5
 8010af6:	3004      	adds	r0, #4
 8010af8:	f7fe fb6a 	bl	800f1d0 <rcl_send_response>
 8010afc:	b110      	cbz	r0, 8010b04 <rcl_action_send_cancel_response+0x54>
 8010afe:	2802      	cmp	r0, #2
 8010b00:	bf18      	it	ne
 8010b02:	2001      	movne	r0, #1
 8010b04:	bd70      	pop	{r4, r5, r6, pc}
 8010b06:	f7f9 ffc3 	bl	800aa90 <rcutils_reset_error>
 8010b0a:	f640 0098 	movw	r0, #2200	@ 0x898
 8010b0e:	bd70      	pop	{r4, r5, r6, pc}
 8010b10:	f640 0098 	movw	r0, #2200	@ 0x898
 8010b14:	bd70      	pop	{r4, r5, r6, pc}
 8010b16:	200b      	movs	r0, #11
 8010b18:	bd70      	pop	{r4, r5, r6, pc}
 8010b1a:	f640 0098 	movw	r0, #2200	@ 0x898
 8010b1e:	4770      	bx	lr

08010b20 <rcl_action_wait_set_add_action_server>:
 8010b20:	2800      	cmp	r0, #0
 8010b22:	d04d      	beq.n	8010bc0 <rcl_action_wait_set_add_action_server+0xa0>
 8010b24:	b570      	push	{r4, r5, r6, lr}
 8010b26:	460c      	mov	r4, r1
 8010b28:	b159      	cbz	r1, 8010b42 <rcl_action_wait_set_add_action_server+0x22>
 8010b2a:	4605      	mov	r5, r0
 8010b2c:	6808      	ldr	r0, [r1, #0]
 8010b2e:	b140      	cbz	r0, 8010b42 <rcl_action_wait_set_add_action_server+0x22>
 8010b30:	4616      	mov	r6, r2
 8010b32:	f7fe fb65 	bl	800f200 <rcl_service_is_valid>
 8010b36:	b120      	cbz	r0, 8010b42 <rcl_action_wait_set_add_action_server+0x22>
 8010b38:	6820      	ldr	r0, [r4, #0]
 8010b3a:	3004      	adds	r0, #4
 8010b3c:	f7fe fb60 	bl	800f200 <rcl_service_is_valid>
 8010b40:	b910      	cbnz	r0, 8010b48 <rcl_action_wait_set_add_action_server+0x28>
 8010b42:	f640 0098 	movw	r0, #2200	@ 0x898
 8010b46:	bd70      	pop	{r4, r5, r6, pc}
 8010b48:	6820      	ldr	r0, [r4, #0]
 8010b4a:	3008      	adds	r0, #8
 8010b4c:	f7fe fb58 	bl	800f200 <rcl_service_is_valid>
 8010b50:	2800      	cmp	r0, #0
 8010b52:	d0f6      	beq.n	8010b42 <rcl_action_wait_set_add_action_server+0x22>
 8010b54:	6820      	ldr	r0, [r4, #0]
 8010b56:	300c      	adds	r0, #12
 8010b58:	f7f9 f820 	bl	8009b9c <rcl_publisher_is_valid_except_context>
 8010b5c:	2800      	cmp	r0, #0
 8010b5e:	d0f0      	beq.n	8010b42 <rcl_action_wait_set_add_action_server+0x22>
 8010b60:	6820      	ldr	r0, [r4, #0]
 8010b62:	3010      	adds	r0, #16
 8010b64:	f7f9 f81a 	bl	8009b9c <rcl_publisher_is_valid_except_context>
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	d0ea      	beq.n	8010b42 <rcl_action_wait_set_add_action_server+0x22>
 8010b6c:	6821      	ldr	r1, [r4, #0]
 8010b6e:	4628      	mov	r0, r5
 8010b70:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8010b74:	f7ff face 	bl	8010114 <rcl_wait_set_add_service>
 8010b78:	2800      	cmp	r0, #0
 8010b7a:	d1e4      	bne.n	8010b46 <rcl_action_wait_set_add_action_server+0x26>
 8010b7c:	6821      	ldr	r1, [r4, #0]
 8010b7e:	4628      	mov	r0, r5
 8010b80:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8010b84:	3104      	adds	r1, #4
 8010b86:	f7ff fac5 	bl	8010114 <rcl_wait_set_add_service>
 8010b8a:	2800      	cmp	r0, #0
 8010b8c:	d1db      	bne.n	8010b46 <rcl_action_wait_set_add_action_server+0x26>
 8010b8e:	6821      	ldr	r1, [r4, #0]
 8010b90:	4628      	mov	r0, r5
 8010b92:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8010b96:	3108      	adds	r1, #8
 8010b98:	f7ff fabc 	bl	8010114 <rcl_wait_set_add_service>
 8010b9c:	2800      	cmp	r0, #0
 8010b9e:	d1d2      	bne.n	8010b46 <rcl_action_wait_set_add_action_server+0x26>
 8010ba0:	6821      	ldr	r1, [r4, #0]
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8010ba8:	3114      	adds	r1, #20
 8010baa:	f7ff fa57 	bl	801005c <rcl_wait_set_add_timer>
 8010bae:	2800      	cmp	r0, #0
 8010bb0:	d1c9      	bne.n	8010b46 <rcl_action_wait_set_add_action_server+0x26>
 8010bb2:	2e00      	cmp	r6, #0
 8010bb4:	d0c7      	beq.n	8010b46 <rcl_action_wait_set_add_action_server+0x26>
 8010bb6:	6823      	ldr	r3, [r4, #0]
 8010bb8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8010bbc:	6033      	str	r3, [r6, #0]
 8010bbe:	bd70      	pop	{r4, r5, r6, pc}
 8010bc0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop

08010bc8 <rcl_action_server_wait_set_get_entities_ready>:
 8010bc8:	2800      	cmp	r0, #0
 8010bca:	d05a      	beq.n	8010c82 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8010bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bce:	460c      	mov	r4, r1
 8010bd0:	b161      	cbz	r1, 8010bec <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010bd2:	4605      	mov	r5, r0
 8010bd4:	6808      	ldr	r0, [r1, #0]
 8010bd6:	b148      	cbz	r0, 8010bec <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010bd8:	4616      	mov	r6, r2
 8010bda:	461f      	mov	r7, r3
 8010bdc:	f7fe fb10 	bl	800f200 <rcl_service_is_valid>
 8010be0:	b120      	cbz	r0, 8010bec <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010be2:	6820      	ldr	r0, [r4, #0]
 8010be4:	3004      	adds	r0, #4
 8010be6:	f7fe fb0b 	bl	800f200 <rcl_service_is_valid>
 8010bea:	b910      	cbnz	r0, 8010bf2 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8010bec:	f640 0098 	movw	r0, #2200	@ 0x898
 8010bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bf2:	6820      	ldr	r0, [r4, #0]
 8010bf4:	3008      	adds	r0, #8
 8010bf6:	f7fe fb03 	bl	800f200 <rcl_service_is_valid>
 8010bfa:	2800      	cmp	r0, #0
 8010bfc:	d0f6      	beq.n	8010bec <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010bfe:	6820      	ldr	r0, [r4, #0]
 8010c00:	300c      	adds	r0, #12
 8010c02:	f7f8 ffcb 	bl	8009b9c <rcl_publisher_is_valid_except_context>
 8010c06:	2800      	cmp	r0, #0
 8010c08:	d0f0      	beq.n	8010bec <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010c0a:	6820      	ldr	r0, [r4, #0]
 8010c0c:	3010      	adds	r0, #16
 8010c0e:	f7f8 ffc5 	bl	8009b9c <rcl_publisher_is_valid_except_context>
 8010c12:	2800      	cmp	r0, #0
 8010c14:	d0ea      	beq.n	8010bec <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010c16:	b3be      	cbz	r6, 8010c88 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8010c18:	b3b7      	cbz	r7, 8010c88 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8010c1a:	9b06      	ldr	r3, [sp, #24]
 8010c1c:	b3a3      	cbz	r3, 8010c88 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8010c1e:	9b07      	ldr	r3, [sp, #28]
 8010c20:	b393      	cbz	r3, 8010c88 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8010c22:	6821      	ldr	r1, [r4, #0]
 8010c24:	692a      	ldr	r2, [r5, #16]
 8010c26:	6a2c      	ldr	r4, [r5, #32]
 8010c28:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8010c2c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8010c30:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8010c34:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8010c38:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8010c3c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8010c40:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8010c44:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8010c48:	1a64      	subs	r4, r4, r1
 8010c4a:	fab4 f484 	clz	r4, r4
 8010c4e:	0964      	lsrs	r4, r4, #5
 8010c50:	7034      	strb	r4, [r6, #0]
 8010c52:	1d0c      	adds	r4, r1, #4
 8010c54:	1b1b      	subs	r3, r3, r4
 8010c56:	fab3 f383 	clz	r3, r3
 8010c5a:	095b      	lsrs	r3, r3, #5
 8010c5c:	f101 0408 	add.w	r4, r1, #8
 8010c60:	703b      	strb	r3, [r7, #0]
 8010c62:	f101 0314 	add.w	r3, r1, #20
 8010c66:	1b01      	subs	r1, r0, r4
 8010c68:	1ad3      	subs	r3, r2, r3
 8010c6a:	fab1 f181 	clz	r1, r1
 8010c6e:	9a06      	ldr	r2, [sp, #24]
 8010c70:	0949      	lsrs	r1, r1, #5
 8010c72:	7011      	strb	r1, [r2, #0]
 8010c74:	fab3 f383 	clz	r3, r3
 8010c78:	9a07      	ldr	r2, [sp, #28]
 8010c7a:	095b      	lsrs	r3, r3, #5
 8010c7c:	2000      	movs	r0, #0
 8010c7e:	7013      	strb	r3, [r2, #0]
 8010c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c82:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010c86:	4770      	bx	lr
 8010c88:	200b      	movs	r0, #11
 8010c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010c8c <_execute_event_handler>:
 8010c8c:	2002      	movs	r0, #2
 8010c8e:	4770      	bx	lr

08010c90 <_cancel_goal_event_handler>:
 8010c90:	2003      	movs	r0, #3
 8010c92:	4770      	bx	lr

08010c94 <_succeed_event_handler>:
 8010c94:	2004      	movs	r0, #4
 8010c96:	4770      	bx	lr

08010c98 <_abort_event_handler>:
 8010c98:	2006      	movs	r0, #6
 8010c9a:	4770      	bx	lr

08010c9c <_canceled_event_handler>:
 8010c9c:	2005      	movs	r0, #5
 8010c9e:	4770      	bx	lr

08010ca0 <rcl_action_transition_goal_state>:
 8010ca0:	b2c2      	uxtb	r2, r0
 8010ca2:	2a06      	cmp	r2, #6
 8010ca4:	d80c      	bhi.n	8010cc0 <rcl_action_transition_goal_state+0x20>
 8010ca6:	2904      	cmp	r1, #4
 8010ca8:	d80a      	bhi.n	8010cc0 <rcl_action_transition_goal_state+0x20>
 8010caa:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8010cae:	b410      	push	{r4}
 8010cb0:	1853      	adds	r3, r2, r1
 8010cb2:	4c06      	ldr	r4, [pc, #24]	@ (8010ccc <rcl_action_transition_goal_state+0x2c>)
 8010cb4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8010cb8:	b123      	cbz	r3, 8010cc4 <rcl_action_transition_goal_state+0x24>
 8010cba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cbe:	4718      	bx	r3
 8010cc0:	2000      	movs	r0, #0
 8010cc2:	4770      	bx	lr
 8010cc4:	2000      	movs	r0, #0
 8010cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cca:	4770      	bx	lr
 8010ccc:	08016f14 	.word	0x08016f14

08010cd0 <rcl_action_get_zero_initialized_cancel_response>:
 8010cd0:	b510      	push	{r4, lr}
 8010cd2:	4c07      	ldr	r4, [pc, #28]	@ (8010cf0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8010cd4:	4686      	mov	lr, r0
 8010cd6:	4684      	mov	ip, r0
 8010cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010cda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010cde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ce0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ce4:	6823      	ldr	r3, [r4, #0]
 8010ce6:	f8cc 3000 	str.w	r3, [ip]
 8010cea:	4670      	mov	r0, lr
 8010cec:	bd10      	pop	{r4, pc}
 8010cee:	bf00      	nop
 8010cf0:	08016fa0 	.word	0x08016fa0

08010cf4 <rclc_action_send_result_request>:
 8010cf4:	b1d0      	cbz	r0, 8010d2c <rclc_action_send_result_request+0x38>
 8010cf6:	b500      	push	{lr}
 8010cf8:	4684      	mov	ip, r0
 8010cfa:	b087      	sub	sp, #28
 8010cfc:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8010d00:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8010d04:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8010d08:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8010d0c:	f10d 0e08 	add.w	lr, sp, #8
 8010d10:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010d14:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8010d18:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8010d1c:	a902      	add	r1, sp, #8
 8010d1e:	3010      	adds	r0, #16
 8010d20:	f7ff fbda 	bl	80104d8 <rcl_action_send_result_request>
 8010d24:	b920      	cbnz	r0, 8010d30 <rclc_action_send_result_request+0x3c>
 8010d26:	b007      	add	sp, #28
 8010d28:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d2c:	200b      	movs	r0, #11
 8010d2e:	4770      	bx	lr
 8010d30:	9001      	str	r0, [sp, #4]
 8010d32:	f7f9 fead 	bl	800aa90 <rcutils_reset_error>
 8010d36:	9801      	ldr	r0, [sp, #4]
 8010d38:	b007      	add	sp, #28
 8010d3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d3e:	bf00      	nop

08010d40 <rclc_action_take_goal_handle>:
 8010d40:	b160      	cbz	r0, 8010d5c <rclc_action_take_goal_handle+0x1c>
 8010d42:	6883      	ldr	r3, [r0, #8]
 8010d44:	b143      	cbz	r3, 8010d58 <rclc_action_take_goal_handle+0x18>
 8010d46:	6819      	ldr	r1, [r3, #0]
 8010d48:	6081      	str	r1, [r0, #8]
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	721a      	strb	r2, [r3, #8]
 8010d4e:	68c1      	ldr	r1, [r0, #12]
 8010d50:	6019      	str	r1, [r3, #0]
 8010d52:	621a      	str	r2, [r3, #32]
 8010d54:	849a      	strh	r2, [r3, #36]	@ 0x24
 8010d56:	60c3      	str	r3, [r0, #12]
 8010d58:	4618      	mov	r0, r3
 8010d5a:	4770      	bx	lr
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	e7fb      	b.n	8010d58 <rclc_action_take_goal_handle+0x18>

08010d60 <rclc_action_remove_used_goal_handle>:
 8010d60:	b180      	cbz	r0, 8010d84 <rclc_action_remove_used_goal_handle+0x24>
 8010d62:	b179      	cbz	r1, 8010d84 <rclc_action_remove_used_goal_handle+0x24>
 8010d64:	68c3      	ldr	r3, [r0, #12]
 8010d66:	4299      	cmp	r1, r3
 8010d68:	d00d      	beq.n	8010d86 <rclc_action_remove_used_goal_handle+0x26>
 8010d6a:	b12b      	cbz	r3, 8010d78 <rclc_action_remove_used_goal_handle+0x18>
 8010d6c:	681a      	ldr	r2, [r3, #0]
 8010d6e:	4291      	cmp	r1, r2
 8010d70:	d003      	beq.n	8010d7a <rclc_action_remove_used_goal_handle+0x1a>
 8010d72:	4613      	mov	r3, r2
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d1f9      	bne.n	8010d6c <rclc_action_remove_used_goal_handle+0xc>
 8010d78:	4770      	bx	lr
 8010d7a:	680a      	ldr	r2, [r1, #0]
 8010d7c:	601a      	str	r2, [r3, #0]
 8010d7e:	6883      	ldr	r3, [r0, #8]
 8010d80:	600b      	str	r3, [r1, #0]
 8010d82:	6081      	str	r1, [r0, #8]
 8010d84:	4770      	bx	lr
 8010d86:	680b      	ldr	r3, [r1, #0]
 8010d88:	60c3      	str	r3, [r0, #12]
 8010d8a:	e7f8      	b.n	8010d7e <rclc_action_remove_used_goal_handle+0x1e>

08010d8c <rclc_action_find_goal_handle_by_uuid>:
 8010d8c:	b538      	push	{r3, r4, r5, lr}
 8010d8e:	b180      	cbz	r0, 8010db2 <rclc_action_find_goal_handle_by_uuid+0x26>
 8010d90:	460d      	mov	r5, r1
 8010d92:	b181      	cbz	r1, 8010db6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8010d94:	68c4      	ldr	r4, [r0, #12]
 8010d96:	b914      	cbnz	r4, 8010d9e <rclc_action_find_goal_handle_by_uuid+0x12>
 8010d98:	e009      	b.n	8010dae <rclc_action_find_goal_handle_by_uuid+0x22>
 8010d9a:	6824      	ldr	r4, [r4, #0]
 8010d9c:	b13c      	cbz	r4, 8010dae <rclc_action_find_goal_handle_by_uuid+0x22>
 8010d9e:	f104 0009 	add.w	r0, r4, #9
 8010da2:	2210      	movs	r2, #16
 8010da4:	4629      	mov	r1, r5
 8010da6:	f004 fd29 	bl	80157fc <memcmp>
 8010daa:	2800      	cmp	r0, #0
 8010dac:	d1f5      	bne.n	8010d9a <rclc_action_find_goal_handle_by_uuid+0xe>
 8010dae:	4620      	mov	r0, r4
 8010db0:	bd38      	pop	{r3, r4, r5, pc}
 8010db2:	4604      	mov	r4, r0
 8010db4:	e7fb      	b.n	8010dae <rclc_action_find_goal_handle_by_uuid+0x22>
 8010db6:	460c      	mov	r4, r1
 8010db8:	e7f9      	b.n	8010dae <rclc_action_find_goal_handle_by_uuid+0x22>
 8010dba:	bf00      	nop

08010dbc <rclc_action_find_first_handle_by_status>:
 8010dbc:	b140      	cbz	r0, 8010dd0 <rclc_action_find_first_handle_by_status+0x14>
 8010dbe:	68c0      	ldr	r0, [r0, #12]
 8010dc0:	b910      	cbnz	r0, 8010dc8 <rclc_action_find_first_handle_by_status+0xc>
 8010dc2:	e005      	b.n	8010dd0 <rclc_action_find_first_handle_by_status+0x14>
 8010dc4:	6800      	ldr	r0, [r0, #0]
 8010dc6:	b118      	cbz	r0, 8010dd0 <rclc_action_find_first_handle_by_status+0x14>
 8010dc8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010dcc:	428b      	cmp	r3, r1
 8010dce:	d1f9      	bne.n	8010dc4 <rclc_action_find_first_handle_by_status+0x8>
 8010dd0:	4770      	bx	lr
 8010dd2:	bf00      	nop

08010dd4 <rclc_action_find_first_terminated_handle>:
 8010dd4:	b140      	cbz	r0, 8010de8 <rclc_action_find_first_terminated_handle+0x14>
 8010dd6:	68c0      	ldr	r0, [r0, #12]
 8010dd8:	b910      	cbnz	r0, 8010de0 <rclc_action_find_first_terminated_handle+0xc>
 8010dda:	e005      	b.n	8010de8 <rclc_action_find_first_terminated_handle+0x14>
 8010ddc:	6800      	ldr	r0, [r0, #0]
 8010dde:	b118      	cbz	r0, 8010de8 <rclc_action_find_first_terminated_handle+0x14>
 8010de0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010de4:	2b03      	cmp	r3, #3
 8010de6:	ddf9      	ble.n	8010ddc <rclc_action_find_first_terminated_handle+0x8>
 8010de8:	4770      	bx	lr
 8010dea:	bf00      	nop

08010dec <rclc_action_find_handle_by_goal_request_sequence_number>:
 8010dec:	b170      	cbz	r0, 8010e0c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8010dee:	68c0      	ldr	r0, [r0, #12]
 8010df0:	b160      	cbz	r0, 8010e0c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8010df2:	b410      	push	{r4}
 8010df4:	e001      	b.n	8010dfa <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8010df6:	6800      	ldr	r0, [r0, #0]
 8010df8:	b128      	cbz	r0, 8010e06 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8010dfa:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8010dfe:	4299      	cmp	r1, r3
 8010e00:	bf08      	it	eq
 8010e02:	4294      	cmpeq	r4, r2
 8010e04:	d1f7      	bne.n	8010df6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8010e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e0a:	4770      	bx	lr
 8010e0c:	4770      	bx	lr
 8010e0e:	bf00      	nop

08010e10 <rclc_action_find_handle_by_result_request_sequence_number>:
 8010e10:	b170      	cbz	r0, 8010e30 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8010e12:	68c0      	ldr	r0, [r0, #12]
 8010e14:	b160      	cbz	r0, 8010e30 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8010e16:	b410      	push	{r4}
 8010e18:	e001      	b.n	8010e1e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8010e1a:	6800      	ldr	r0, [r0, #0]
 8010e1c:	b128      	cbz	r0, 8010e2a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8010e1e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8010e22:	4299      	cmp	r1, r3
 8010e24:	bf08      	it	eq
 8010e26:	4294      	cmpeq	r4, r2
 8010e28:	d1f7      	bne.n	8010e1a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8010e2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e2e:	4770      	bx	lr
 8010e30:	4770      	bx	lr
 8010e32:	bf00      	nop

08010e34 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8010e34:	b170      	cbz	r0, 8010e54 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8010e36:	68c0      	ldr	r0, [r0, #12]
 8010e38:	b160      	cbz	r0, 8010e54 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8010e3a:	b410      	push	{r4}
 8010e3c:	e001      	b.n	8010e42 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8010e3e:	6800      	ldr	r0, [r0, #0]
 8010e40:	b128      	cbz	r0, 8010e4e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8010e42:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8010e46:	4299      	cmp	r1, r3
 8010e48:	bf08      	it	eq
 8010e4a:	4294      	cmpeq	r4, r2
 8010e4c:	d1f7      	bne.n	8010e3e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8010e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e52:	4770      	bx	lr
 8010e54:	4770      	bx	lr
 8010e56:	bf00      	nop

08010e58 <rclc_action_find_first_handle_with_goal_response>:
 8010e58:	b140      	cbz	r0, 8010e6c <rclc_action_find_first_handle_with_goal_response+0x14>
 8010e5a:	68c0      	ldr	r0, [r0, #12]
 8010e5c:	b910      	cbnz	r0, 8010e64 <rclc_action_find_first_handle_with_goal_response+0xc>
 8010e5e:	e005      	b.n	8010e6c <rclc_action_find_first_handle_with_goal_response+0x14>
 8010e60:	6800      	ldr	r0, [r0, #0]
 8010e62:	b118      	cbz	r0, 8010e6c <rclc_action_find_first_handle_with_goal_response+0x14>
 8010e64:	f890 3020 	ldrb.w	r3, [r0, #32]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d0f9      	beq.n	8010e60 <rclc_action_find_first_handle_with_goal_response+0x8>
 8010e6c:	4770      	bx	lr
 8010e6e:	bf00      	nop

08010e70 <rclc_action_find_first_handle_with_result_response>:
 8010e70:	b140      	cbz	r0, 8010e84 <rclc_action_find_first_handle_with_result_response+0x14>
 8010e72:	68c0      	ldr	r0, [r0, #12]
 8010e74:	b910      	cbnz	r0, 8010e7c <rclc_action_find_first_handle_with_result_response+0xc>
 8010e76:	e005      	b.n	8010e84 <rclc_action_find_first_handle_with_result_response+0x14>
 8010e78:	6800      	ldr	r0, [r0, #0]
 8010e7a:	b118      	cbz	r0, 8010e84 <rclc_action_find_first_handle_with_result_response+0x14>
 8010e7c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d0f9      	beq.n	8010e78 <rclc_action_find_first_handle_with_result_response+0x8>
 8010e84:	4770      	bx	lr
 8010e86:	bf00      	nop

08010e88 <rclc_action_server_response_goal_request>:
 8010e88:	b198      	cbz	r0, 8010eb2 <rclc_action_server_response_goal_request+0x2a>
 8010e8a:	b510      	push	{r4, lr}
 8010e8c:	6844      	ldr	r4, [r0, #4]
 8010e8e:	b086      	sub	sp, #24
 8010e90:	2200      	movs	r2, #0
 8010e92:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8010e96:	460b      	mov	r3, r1
 8010e98:	9205      	str	r2, [sp, #20]
 8010e9a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8010e9e:	aa03      	add	r2, sp, #12
 8010ea0:	f104 0010 	add.w	r0, r4, #16
 8010ea4:	f88d 300c 	strb.w	r3, [sp, #12]
 8010ea8:	f7ff fd4a 	bl	8010940 <rcl_action_send_goal_response>
 8010eac:	b918      	cbnz	r0, 8010eb6 <rclc_action_server_response_goal_request+0x2e>
 8010eae:	b006      	add	sp, #24
 8010eb0:	bd10      	pop	{r4, pc}
 8010eb2:	200b      	movs	r0, #11
 8010eb4:	4770      	bx	lr
 8010eb6:	9001      	str	r0, [sp, #4]
 8010eb8:	f7f9 fdea 	bl	800aa90 <rcutils_reset_error>
 8010ebc:	9801      	ldr	r0, [sp, #4]
 8010ebe:	b006      	add	sp, #24
 8010ec0:	bd10      	pop	{r4, pc}
 8010ec2:	bf00      	nop
 8010ec4:	0000      	movs	r0, r0
	...

08010ec8 <rclc_action_server_goal_cancel_accept>:
 8010ec8:	b310      	cbz	r0, 8010f10 <rclc_action_server_goal_cancel_accept+0x48>
 8010eca:	b510      	push	{r4, lr}
 8010ecc:	b090      	sub	sp, #64	@ 0x40
 8010ece:	4604      	mov	r4, r0
 8010ed0:	a806      	add	r0, sp, #24
 8010ed2:	f7ff fefd 	bl	8010cd0 <rcl_action_get_zero_initialized_cancel_response>
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8010edc:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8010ee0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8010ee4:	f88d 3018 	strb.w	r3, [sp, #24]
 8010ee8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8010eec:	f8cd d01c 	str.w	sp, [sp, #28]
 8010ef0:	46ec      	mov	ip, sp
 8010ef2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ef6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8010f18 <rclc_action_server_goal_cancel_accept+0x50>
 8010efa:	6860      	ldr	r0, [r4, #4]
 8010efc:	aa06      	add	r2, sp, #24
 8010efe:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8010f02:	3010      	adds	r0, #16
 8010f04:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010f08:	f7ff fdd2 	bl	8010ab0 <rcl_action_send_cancel_response>
 8010f0c:	b010      	add	sp, #64	@ 0x40
 8010f0e:	bd10      	pop	{r4, pc}
 8010f10:	200b      	movs	r0, #11
 8010f12:	4770      	bx	lr
 8010f14:	f3af 8000 	nop.w
 8010f18:	00000001 	.word	0x00000001
 8010f1c:	00000001 	.word	0x00000001

08010f20 <rclc_action_server_goal_cancel_reject>:
 8010f20:	b082      	sub	sp, #8
 8010f22:	b530      	push	{r4, r5, lr}
 8010f24:	b08b      	sub	sp, #44	@ 0x2c
 8010f26:	ac0e      	add	r4, sp, #56	@ 0x38
 8010f28:	e884 000c 	stmia.w	r4, {r2, r3}
 8010f2c:	b188      	cbz	r0, 8010f52 <rclc_action_server_goal_cancel_reject+0x32>
 8010f2e:	4604      	mov	r4, r0
 8010f30:	a801      	add	r0, sp, #4
 8010f32:	460d      	mov	r5, r1
 8010f34:	f7ff fecc 	bl	8010cd0 <rcl_action_get_zero_initialized_cancel_response>
 8010f38:	aa01      	add	r2, sp, #4
 8010f3a:	a90e      	add	r1, sp, #56	@ 0x38
 8010f3c:	f104 0010 	add.w	r0, r4, #16
 8010f40:	f88d 5004 	strb.w	r5, [sp, #4]
 8010f44:	f7ff fdb4 	bl	8010ab0 <rcl_action_send_cancel_response>
 8010f48:	b00b      	add	sp, #44	@ 0x2c
 8010f4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f4e:	b002      	add	sp, #8
 8010f50:	4770      	bx	lr
 8010f52:	200b      	movs	r0, #11
 8010f54:	b00b      	add	sp, #44	@ 0x2c
 8010f56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f5a:	b002      	add	sp, #8
 8010f5c:	4770      	bx	lr
 8010f5e:	bf00      	nop

08010f60 <__atomic_load_8>:
 8010f60:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010f64:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8010f68:	4a15      	ldr	r2, [pc, #84]	@ (8010fc0 <__atomic_load_8+0x60>)
 8010f6a:	4b16      	ldr	r3, [pc, #88]	@ (8010fc4 <__atomic_load_8+0x64>)
 8010f6c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8010f70:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010f74:	fb02 f101 	mul.w	r1, r2, r1
 8010f78:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8010f7c:	fba3 2301 	umull	r2, r3, r3, r1
 8010f80:	091b      	lsrs	r3, r3, #4
 8010f82:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8010f86:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8010f8a:	b4d0      	push	{r4, r6, r7}
 8010f8c:	4c0e      	ldr	r4, [pc, #56]	@ (8010fc8 <__atomic_load_8+0x68>)
 8010f8e:	1ac9      	subs	r1, r1, r3
 8010f90:	1862      	adds	r2, r4, r1
 8010f92:	f04f 0c01 	mov.w	ip, #1
 8010f96:	e8d2 3f4f 	ldrexb	r3, [r2]
 8010f9a:	e8c2 cf46 	strexb	r6, ip, [r2]
 8010f9e:	2e00      	cmp	r6, #0
 8010fa0:	d1f9      	bne.n	8010f96 <__atomic_load_8+0x36>
 8010fa2:	f3bf 8f5b 	dmb	ish
 8010fa6:	b2db      	uxtb	r3, r3
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d1f4      	bne.n	8010f96 <__atomic_load_8+0x36>
 8010fac:	e9d0 6700 	ldrd	r6, r7, [r0]
 8010fb0:	f3bf 8f5b 	dmb	ish
 8010fb4:	5463      	strb	r3, [r4, r1]
 8010fb6:	4630      	mov	r0, r6
 8010fb8:	4639      	mov	r1, r7
 8010fba:	bcd0      	pop	{r4, r6, r7}
 8010fbc:	4770      	bx	lr
 8010fbe:	bf00      	nop
 8010fc0:	27d4eb2d 	.word	0x27d4eb2d
 8010fc4:	b21642c9 	.word	0xb21642c9
 8010fc8:	2000dc20 	.word	0x2000dc20

08010fcc <__atomic_store_8>:
 8010fcc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010fd0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8010fd4:	b570      	push	{r4, r5, r6, lr}
 8010fd6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8010fda:	4c14      	ldr	r4, [pc, #80]	@ (801102c <__atomic_store_8+0x60>)
 8010fdc:	4d14      	ldr	r5, [pc, #80]	@ (8011030 <__atomic_store_8+0x64>)
 8010fde:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010fe2:	fb04 f101 	mul.w	r1, r4, r1
 8010fe6:	4c13      	ldr	r4, [pc, #76]	@ (8011034 <__atomic_store_8+0x68>)
 8010fe8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8010fec:	fba4 4e01 	umull	r4, lr, r4, r1
 8010ff0:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8010ff4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8010ff8:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8010ffc:	eba1 0e0e 	sub.w	lr, r1, lr
 8011000:	eb05 0c0e 	add.w	ip, r5, lr
 8011004:	f04f 0401 	mov.w	r4, #1
 8011008:	e8dc 1f4f 	ldrexb	r1, [ip]
 801100c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8011010:	2e00      	cmp	r6, #0
 8011012:	d1f9      	bne.n	8011008 <__atomic_store_8+0x3c>
 8011014:	f3bf 8f5b 	dmb	ish
 8011018:	b2c9      	uxtb	r1, r1
 801101a:	2900      	cmp	r1, #0
 801101c:	d1f4      	bne.n	8011008 <__atomic_store_8+0x3c>
 801101e:	e9c0 2300 	strd	r2, r3, [r0]
 8011022:	f3bf 8f5b 	dmb	ish
 8011026:	f805 100e 	strb.w	r1, [r5, lr]
 801102a:	bd70      	pop	{r4, r5, r6, pc}
 801102c:	27d4eb2d 	.word	0x27d4eb2d
 8011030:	2000dc20 	.word	0x2000dc20
 8011034:	b21642c9 	.word	0xb21642c9

08011038 <__atomic_exchange_8>:
 8011038:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801103c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8011040:	4916      	ldr	r1, [pc, #88]	@ (801109c <__atomic_exchange_8+0x64>)
 8011042:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8011046:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801104a:	fb01 fc0c 	mul.w	ip, r1, ip
 801104e:	4914      	ldr	r1, [pc, #80]	@ (80110a0 <__atomic_exchange_8+0x68>)
 8011050:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8011054:	b570      	push	{r4, r5, r6, lr}
 8011056:	4605      	mov	r5, r0
 8011058:	fba1 010c 	umull	r0, r1, r1, ip
 801105c:	0909      	lsrs	r1, r1, #4
 801105e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8011062:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8011066:	4e0f      	ldr	r6, [pc, #60]	@ (80110a4 <__atomic_exchange_8+0x6c>)
 8011068:	ebac 0c01 	sub.w	ip, ip, r1
 801106c:	eb06 010c 	add.w	r1, r6, ip
 8011070:	f04f 0e01 	mov.w	lr, #1
 8011074:	e8d1 4f4f 	ldrexb	r4, [r1]
 8011078:	e8c1 ef40 	strexb	r0, lr, [r1]
 801107c:	2800      	cmp	r0, #0
 801107e:	d1f9      	bne.n	8011074 <__atomic_exchange_8+0x3c>
 8011080:	f3bf 8f5b 	dmb	ish
 8011084:	b2e4      	uxtb	r4, r4
 8011086:	2c00      	cmp	r4, #0
 8011088:	d1f4      	bne.n	8011074 <__atomic_exchange_8+0x3c>
 801108a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801108e:	e9c5 2300 	strd	r2, r3, [r5]
 8011092:	f3bf 8f5b 	dmb	ish
 8011096:	f806 400c 	strb.w	r4, [r6, ip]
 801109a:	bd70      	pop	{r4, r5, r6, pc}
 801109c:	27d4eb2d 	.word	0x27d4eb2d
 80110a0:	b21642c9 	.word	0xb21642c9
 80110a4:	2000dc20 	.word	0x2000dc20

080110a8 <rcutils_get_env>:
 80110a8:	b168      	cbz	r0, 80110c6 <rcutils_get_env+0x1e>
 80110aa:	b510      	push	{r4, lr}
 80110ac:	460c      	mov	r4, r1
 80110ae:	b129      	cbz	r1, 80110bc <rcutils_get_env+0x14>
 80110b0:	f004 f800 	bl	80150b4 <getenv>
 80110b4:	b120      	cbz	r0, 80110c0 <rcutils_get_env+0x18>
 80110b6:	6020      	str	r0, [r4, #0]
 80110b8:	2000      	movs	r0, #0
 80110ba:	bd10      	pop	{r4, pc}
 80110bc:	4803      	ldr	r0, [pc, #12]	@ (80110cc <rcutils_get_env+0x24>)
 80110be:	bd10      	pop	{r4, pc}
 80110c0:	4b03      	ldr	r3, [pc, #12]	@ (80110d0 <rcutils_get_env+0x28>)
 80110c2:	6023      	str	r3, [r4, #0]
 80110c4:	bd10      	pop	{r4, pc}
 80110c6:	4803      	ldr	r0, [pc, #12]	@ (80110d4 <rcutils_get_env+0x2c>)
 80110c8:	4770      	bx	lr
 80110ca:	bf00      	nop
 80110cc:	08016fe0 	.word	0x08016fe0
 80110d0:	08017104 	.word	0x08017104
 80110d4:	08016fc4 	.word	0x08016fc4

080110d8 <rcutils_is_directory>:
 80110d8:	2000      	movs	r0, #0
 80110da:	4770      	bx	lr

080110dc <rcutils_join_path>:
 80110dc:	b082      	sub	sp, #8
 80110de:	e88d 000c 	stmia.w	sp, {r2, r3}
 80110e2:	2000      	movs	r0, #0
 80110e4:	b002      	add	sp, #8
 80110e6:	4770      	bx	lr

080110e8 <rcutils_to_native_path>:
 80110e8:	b084      	sub	sp, #16
 80110ea:	a801      	add	r0, sp, #4
 80110ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80110f0:	b004      	add	sp, #16
 80110f2:	2000      	movs	r0, #0
 80110f4:	4770      	bx	lr
 80110f6:	bf00      	nop

080110f8 <rcutils_format_string_limit>:
 80110f8:	b40f      	push	{r0, r1, r2, r3}
 80110fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110fc:	b083      	sub	sp, #12
 80110fe:	ac08      	add	r4, sp, #32
 8011100:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8011102:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011106:	b34e      	cbz	r6, 801115c <rcutils_format_string_limit+0x64>
 8011108:	a808      	add	r0, sp, #32
 801110a:	f7f9 fc9d 	bl	800aa48 <rcutils_allocator_is_valid>
 801110e:	b328      	cbz	r0, 801115c <rcutils_format_string_limit+0x64>
 8011110:	2100      	movs	r1, #0
 8011112:	ab0f      	add	r3, sp, #60	@ 0x3c
 8011114:	4632      	mov	r2, r6
 8011116:	4608      	mov	r0, r1
 8011118:	e9cd 3300 	strd	r3, r3, [sp]
 801111c:	f000 f8f4 	bl	8011308 <rcutils_vsnprintf>
 8011120:	1c43      	adds	r3, r0, #1
 8011122:	4605      	mov	r5, r0
 8011124:	d01a      	beq.n	801115c <rcutils_format_string_limit+0x64>
 8011126:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011128:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801112a:	1c47      	adds	r7, r0, #1
 801112c:	429f      	cmp	r7, r3
 801112e:	bf84      	itt	hi
 8011130:	461f      	movhi	r7, r3
 8011132:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8011136:	4638      	mov	r0, r7
 8011138:	9b08      	ldr	r3, [sp, #32]
 801113a:	4798      	blx	r3
 801113c:	4604      	mov	r4, r0
 801113e:	b168      	cbz	r0, 801115c <rcutils_format_string_limit+0x64>
 8011140:	9b01      	ldr	r3, [sp, #4]
 8011142:	4632      	mov	r2, r6
 8011144:	4639      	mov	r1, r7
 8011146:	f000 f8df 	bl	8011308 <rcutils_vsnprintf>
 801114a:	2800      	cmp	r0, #0
 801114c:	db02      	blt.n	8011154 <rcutils_format_string_limit+0x5c>
 801114e:	2300      	movs	r3, #0
 8011150:	5563      	strb	r3, [r4, r5]
 8011152:	e004      	b.n	801115e <rcutils_format_string_limit+0x66>
 8011154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011156:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011158:	4620      	mov	r0, r4
 801115a:	4798      	blx	r3
 801115c:	2400      	movs	r4, #0
 801115e:	4620      	mov	r0, r4
 8011160:	b003      	add	sp, #12
 8011162:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011166:	b004      	add	sp, #16
 8011168:	4770      	bx	lr
 801116a:	bf00      	nop

0801116c <rcutils_repl_str>:
 801116c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011170:	ed2d 8b02 	vpush	{d8}
 8011174:	b087      	sub	sp, #28
 8011176:	4680      	mov	r8, r0
 8011178:	4608      	mov	r0, r1
 801117a:	f8cd 8004 	str.w	r8, [sp, #4]
 801117e:	ee08 2a10 	vmov	s16, r2
 8011182:	468a      	mov	sl, r1
 8011184:	4699      	mov	r9, r3
 8011186:	f7ef f835 	bl	80001f4 <strlen>
 801118a:	2600      	movs	r6, #0
 801118c:	4647      	mov	r7, r8
 801118e:	9002      	str	r0, [sp, #8]
 8011190:	46b3      	mov	fp, r6
 8011192:	2510      	movs	r5, #16
 8011194:	46b0      	mov	r8, r6
 8011196:	e01d      	b.n	80111d4 <rcutils_repl_str+0x68>
 8011198:	f10b 0b01 	add.w	fp, fp, #1
 801119c:	455e      	cmp	r6, fp
 801119e:	d211      	bcs.n	80111c4 <rcutils_repl_str+0x58>
 80111a0:	442e      	add	r6, r5
 80111a2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80111a6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80111aa:	00b1      	lsls	r1, r6, #2
 80111ac:	4798      	blx	r3
 80111ae:	2800      	cmp	r0, #0
 80111b0:	f000 8088 	beq.w	80112c4 <rcutils_repl_str+0x158>
 80111b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80111b8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80111bc:	4680      	mov	r8, r0
 80111be:	bf28      	it	cs
 80111c0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80111c4:	9a01      	ldr	r2, [sp, #4]
 80111c6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80111ca:	1aa2      	subs	r2, r4, r2
 80111cc:	f843 2c04 	str.w	r2, [r3, #-4]
 80111d0:	9b02      	ldr	r3, [sp, #8]
 80111d2:	18e7      	adds	r7, r4, r3
 80111d4:	4651      	mov	r1, sl
 80111d6:	4638      	mov	r0, r7
 80111d8:	f004 fb61 	bl	801589e <strstr>
 80111dc:	4604      	mov	r4, r0
 80111de:	4640      	mov	r0, r8
 80111e0:	2c00      	cmp	r4, #0
 80111e2:	d1d9      	bne.n	8011198 <rcutils_repl_str+0x2c>
 80111e4:	46b8      	mov	r8, r7
 80111e6:	4607      	mov	r7, r0
 80111e8:	4640      	mov	r0, r8
 80111ea:	f7ef f803 	bl	80001f4 <strlen>
 80111ee:	9b01      	ldr	r3, [sp, #4]
 80111f0:	eba8 0303 	sub.w	r3, r8, r3
 80111f4:	181c      	adds	r4, r3, r0
 80111f6:	9404      	str	r4, [sp, #16]
 80111f8:	f1bb 0f00 	cmp.w	fp, #0
 80111fc:	d04a      	beq.n	8011294 <rcutils_repl_str+0x128>
 80111fe:	ee18 0a10 	vmov	r0, s16
 8011202:	f7ee fff7 	bl	80001f4 <strlen>
 8011206:	9b02      	ldr	r3, [sp, #8]
 8011208:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801120c:	1ac3      	subs	r3, r0, r3
 801120e:	fb0b 4303 	mla	r3, fp, r3, r4
 8011212:	461a      	mov	r2, r3
 8011214:	9305      	str	r3, [sp, #20]
 8011216:	4606      	mov	r6, r0
 8011218:	f8d9 3000 	ldr.w	r3, [r9]
 801121c:	1c50      	adds	r0, r2, #1
 801121e:	4798      	blx	r3
 8011220:	9003      	str	r0, [sp, #12]
 8011222:	2800      	cmp	r0, #0
 8011224:	d04f      	beq.n	80112c6 <rcutils_repl_str+0x15a>
 8011226:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801122a:	683a      	ldr	r2, [r7, #0]
 801122c:	4641      	mov	r1, r8
 801122e:	f004 fbd8 	bl	80159e2 <memcpy>
 8011232:	683d      	ldr	r5, [r7, #0]
 8011234:	9b03      	ldr	r3, [sp, #12]
 8011236:	9701      	str	r7, [sp, #4]
 8011238:	46ba      	mov	sl, r7
 801123a:	441d      	add	r5, r3
 801123c:	9f02      	ldr	r7, [sp, #8]
 801123e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011242:	2401      	movs	r4, #1
 8011244:	46d1      	mov	r9, sl
 8011246:	ee18 aa10 	vmov	sl, s16
 801124a:	e00a      	b.n	8011262 <rcutils_repl_str+0xf6>
 801124c:	f8d9 5000 	ldr.w	r5, [r9]
 8011250:	1aaa      	subs	r2, r5, r2
 8011252:	1885      	adds	r5, r0, r2
 8011254:	f004 fbc5 	bl	80159e2 <memcpy>
 8011258:	45a3      	cmp	fp, r4
 801125a:	f104 0201 	add.w	r2, r4, #1
 801125e:	d935      	bls.n	80112cc <rcutils_repl_str+0x160>
 8011260:	4614      	mov	r4, r2
 8011262:	4632      	mov	r2, r6
 8011264:	4651      	mov	r1, sl
 8011266:	4628      	mov	r0, r5
 8011268:	f004 fbbb 	bl	80159e2 <memcpy>
 801126c:	f859 2b04 	ldr.w	r2, [r9], #4
 8011270:	45a3      	cmp	fp, r4
 8011272:	443a      	add	r2, r7
 8011274:	eb05 0006 	add.w	r0, r5, r6
 8011278:	eb08 0102 	add.w	r1, r8, r2
 801127c:	d1e6      	bne.n	801124c <rcutils_repl_str+0xe0>
 801127e:	9b04      	ldr	r3, [sp, #16]
 8011280:	1a9a      	subs	r2, r3, r2
 8011282:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8011286:	f004 fbac 	bl	80159e2 <memcpy>
 801128a:	9a03      	ldr	r2, [sp, #12]
 801128c:	9905      	ldr	r1, [sp, #20]
 801128e:	2300      	movs	r3, #0
 8011290:	5453      	strb	r3, [r2, r1]
 8011292:	e00b      	b.n	80112ac <rcutils_repl_str+0x140>
 8011294:	4620      	mov	r0, r4
 8011296:	f8d9 3000 	ldr.w	r3, [r9]
 801129a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801129e:	3001      	adds	r0, #1
 80112a0:	4798      	blx	r3
 80112a2:	9003      	str	r0, [sp, #12]
 80112a4:	b110      	cbz	r0, 80112ac <rcutils_repl_str+0x140>
 80112a6:	9901      	ldr	r1, [sp, #4]
 80112a8:	f004 fb93 	bl	80159d2 <strcpy>
 80112ac:	4638      	mov	r0, r7
 80112ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80112b2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80112b6:	4798      	blx	r3
 80112b8:	9803      	ldr	r0, [sp, #12]
 80112ba:	b007      	add	sp, #28
 80112bc:	ecbd 8b02 	vpop	{d8}
 80112c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112c4:	4647      	mov	r7, r8
 80112c6:	2300      	movs	r3, #0
 80112c8:	9303      	str	r3, [sp, #12]
 80112ca:	e7ef      	b.n	80112ac <rcutils_repl_str+0x140>
 80112cc:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80112d0:	e7db      	b.n	801128a <rcutils_repl_str+0x11e>
 80112d2:	bf00      	nop

080112d4 <rcutils_snprintf>:
 80112d4:	b40c      	push	{r2, r3}
 80112d6:	b530      	push	{r4, r5, lr}
 80112d8:	b083      	sub	sp, #12
 80112da:	ab06      	add	r3, sp, #24
 80112dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80112e0:	9301      	str	r3, [sp, #4]
 80112e2:	b152      	cbz	r2, 80112fa <rcutils_snprintf+0x26>
 80112e4:	b138      	cbz	r0, 80112f6 <rcutils_snprintf+0x22>
 80112e6:	b141      	cbz	r1, 80112fa <rcutils_snprintf+0x26>
 80112e8:	f004 fa7a 	bl	80157e0 <vsniprintf>
 80112ec:	b003      	add	sp, #12
 80112ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80112f2:	b002      	add	sp, #8
 80112f4:	4770      	bx	lr
 80112f6:	2900      	cmp	r1, #0
 80112f8:	d0f6      	beq.n	80112e8 <rcutils_snprintf+0x14>
 80112fa:	f004 fb3d 	bl	8015978 <__errno>
 80112fe:	2316      	movs	r3, #22
 8011300:	6003      	str	r3, [r0, #0]
 8011302:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011306:	e7f1      	b.n	80112ec <rcutils_snprintf+0x18>

08011308 <rcutils_vsnprintf>:
 8011308:	b570      	push	{r4, r5, r6, lr}
 801130a:	b13a      	cbz	r2, 801131c <rcutils_vsnprintf+0x14>
 801130c:	b120      	cbz	r0, 8011318 <rcutils_vsnprintf+0x10>
 801130e:	b129      	cbz	r1, 801131c <rcutils_vsnprintf+0x14>
 8011310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011314:	f004 ba64 	b.w	80157e0 <vsniprintf>
 8011318:	2900      	cmp	r1, #0
 801131a:	d0f9      	beq.n	8011310 <rcutils_vsnprintf+0x8>
 801131c:	f004 fb2c 	bl	8015978 <__errno>
 8011320:	2316      	movs	r3, #22
 8011322:	6003      	str	r3, [r0, #0]
 8011324:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011328:	bd70      	pop	{r4, r5, r6, pc}
 801132a:	bf00      	nop

0801132c <rcutils_strdup>:
 801132c:	b084      	sub	sp, #16
 801132e:	b570      	push	{r4, r5, r6, lr}
 8011330:	b082      	sub	sp, #8
 8011332:	ac07      	add	r4, sp, #28
 8011334:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8011338:	4605      	mov	r5, r0
 801133a:	b1b0      	cbz	r0, 801136a <rcutils_strdup+0x3e>
 801133c:	f7ee ff5a 	bl	80001f4 <strlen>
 8011340:	1c42      	adds	r2, r0, #1
 8011342:	9b07      	ldr	r3, [sp, #28]
 8011344:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011346:	9201      	str	r2, [sp, #4]
 8011348:	4606      	mov	r6, r0
 801134a:	4610      	mov	r0, r2
 801134c:	4798      	blx	r3
 801134e:	4604      	mov	r4, r0
 8011350:	b128      	cbz	r0, 801135e <rcutils_strdup+0x32>
 8011352:	9a01      	ldr	r2, [sp, #4]
 8011354:	4629      	mov	r1, r5
 8011356:	f004 fb44 	bl	80159e2 <memcpy>
 801135a:	2300      	movs	r3, #0
 801135c:	55a3      	strb	r3, [r4, r6]
 801135e:	4620      	mov	r0, r4
 8011360:	b002      	add	sp, #8
 8011362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011366:	b004      	add	sp, #16
 8011368:	4770      	bx	lr
 801136a:	4604      	mov	r4, r0
 801136c:	e7f7      	b.n	801135e <rcutils_strdup+0x32>
 801136e:	bf00      	nop

08011370 <rcutils_strndup>:
 8011370:	b082      	sub	sp, #8
 8011372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011374:	ac06      	add	r4, sp, #24
 8011376:	e884 000c 	stmia.w	r4, {r2, r3}
 801137a:	4605      	mov	r5, r0
 801137c:	b188      	cbz	r0, 80113a2 <rcutils_strndup+0x32>
 801137e:	1c4f      	adds	r7, r1, #1
 8011380:	460e      	mov	r6, r1
 8011382:	4638      	mov	r0, r7
 8011384:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011386:	4790      	blx	r2
 8011388:	4604      	mov	r4, r0
 801138a:	b128      	cbz	r0, 8011398 <rcutils_strndup+0x28>
 801138c:	463a      	mov	r2, r7
 801138e:	4629      	mov	r1, r5
 8011390:	f004 fb27 	bl	80159e2 <memcpy>
 8011394:	2300      	movs	r3, #0
 8011396:	55a3      	strb	r3, [r4, r6]
 8011398:	4620      	mov	r0, r4
 801139a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801139e:	b002      	add	sp, #8
 80113a0:	4770      	bx	lr
 80113a2:	4604      	mov	r4, r0
 80113a4:	e7f8      	b.n	8011398 <rcutils_strndup+0x28>
 80113a6:	bf00      	nop

080113a8 <rcutils_get_zero_initialized_string_map>:
 80113a8:	4b01      	ldr	r3, [pc, #4]	@ (80113b0 <rcutils_get_zero_initialized_string_map+0x8>)
 80113aa:	2000      	movs	r0, #0
 80113ac:	6018      	str	r0, [r3, #0]
 80113ae:	4770      	bx	lr
 80113b0:	2000dc38 	.word	0x2000dc38

080113b4 <rcutils_string_map_reserve>:
 80113b4:	2800      	cmp	r0, #0
 80113b6:	d05f      	beq.n	8011478 <rcutils_string_map_reserve+0xc4>
 80113b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113bc:	460c      	mov	r4, r1
 80113be:	6801      	ldr	r1, [r0, #0]
 80113c0:	b082      	sub	sp, #8
 80113c2:	4605      	mov	r5, r0
 80113c4:	b129      	cbz	r1, 80113d2 <rcutils_string_map_reserve+0x1e>
 80113c6:	68cb      	ldr	r3, [r1, #12]
 80113c8:	42a3      	cmp	r3, r4
 80113ca:	d906      	bls.n	80113da <rcutils_string_map_reserve+0x26>
 80113cc:	461c      	mov	r4, r3
 80113ce:	2900      	cmp	r1, #0
 80113d0:	d1f9      	bne.n	80113c6 <rcutils_string_map_reserve+0x12>
 80113d2:	201f      	movs	r0, #31
 80113d4:	b002      	add	sp, #8
 80113d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113da:	688b      	ldr	r3, [r1, #8]
 80113dc:	42a3      	cmp	r3, r4
 80113de:	d047      	beq.n	8011470 <rcutils_string_map_reserve+0xbc>
 80113e0:	6a0e      	ldr	r6, [r1, #32]
 80113e2:	2c00      	cmp	r4, #0
 80113e4:	d034      	beq.n	8011450 <rcutils_string_map_reserve+0x9c>
 80113e6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80113ea:	d243      	bcs.n	8011474 <rcutils_string_map_reserve+0xc0>
 80113ec:	00a7      	lsls	r7, r4, #2
 80113ee:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80113f2:	6808      	ldr	r0, [r1, #0]
 80113f4:	4632      	mov	r2, r6
 80113f6:	4639      	mov	r1, r7
 80113f8:	47c0      	blx	r8
 80113fa:	2800      	cmp	r0, #0
 80113fc:	d03a      	beq.n	8011474 <rcutils_string_map_reserve+0xc0>
 80113fe:	682b      	ldr	r3, [r5, #0]
 8011400:	4632      	mov	r2, r6
 8011402:	6018      	str	r0, [r3, #0]
 8011404:	4639      	mov	r1, r7
 8011406:	6858      	ldr	r0, [r3, #4]
 8011408:	47c0      	blx	r8
 801140a:	2800      	cmp	r0, #0
 801140c:	d032      	beq.n	8011474 <rcutils_string_map_reserve+0xc0>
 801140e:	682d      	ldr	r5, [r5, #0]
 8011410:	68ab      	ldr	r3, [r5, #8]
 8011412:	6068      	str	r0, [r5, #4]
 8011414:	42a3      	cmp	r3, r4
 8011416:	d226      	bcs.n	8011466 <rcutils_string_map_reserve+0xb2>
 8011418:	682a      	ldr	r2, [r5, #0]
 801141a:	eb00 0c07 	add.w	ip, r0, r7
 801141e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8011422:	45e6      	cmp	lr, ip
 8011424:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8011428:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801142c:	d203      	bcs.n	8011436 <rcutils_string_map_reserve+0x82>
 801142e:	eb02 0c07 	add.w	ip, r2, r7
 8011432:	4566      	cmp	r6, ip
 8011434:	d322      	bcc.n	801147c <rcutils_string_map_reserve+0xc8>
 8011436:	1ae3      	subs	r3, r4, r3
 8011438:	009a      	lsls	r2, r3, #2
 801143a:	4670      	mov	r0, lr
 801143c:	2100      	movs	r1, #0
 801143e:	9201      	str	r2, [sp, #4]
 8011440:	f004 fa06 	bl	8015850 <memset>
 8011444:	9a01      	ldr	r2, [sp, #4]
 8011446:	2100      	movs	r1, #0
 8011448:	4630      	mov	r0, r6
 801144a:	f004 fa01 	bl	8015850 <memset>
 801144e:	e00a      	b.n	8011466 <rcutils_string_map_reserve+0xb2>
 8011450:	694f      	ldr	r7, [r1, #20]
 8011452:	6808      	ldr	r0, [r1, #0]
 8011454:	4631      	mov	r1, r6
 8011456:	47b8      	blx	r7
 8011458:	682b      	ldr	r3, [r5, #0]
 801145a:	4631      	mov	r1, r6
 801145c:	6858      	ldr	r0, [r3, #4]
 801145e:	601c      	str	r4, [r3, #0]
 8011460:	47b8      	blx	r7
 8011462:	682d      	ldr	r5, [r5, #0]
 8011464:	606c      	str	r4, [r5, #4]
 8011466:	2000      	movs	r0, #0
 8011468:	60ac      	str	r4, [r5, #8]
 801146a:	b002      	add	sp, #8
 801146c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011470:	2000      	movs	r0, #0
 8011472:	e7af      	b.n	80113d4 <rcutils_string_map_reserve+0x20>
 8011474:	200a      	movs	r0, #10
 8011476:	e7ad      	b.n	80113d4 <rcutils_string_map_reserve+0x20>
 8011478:	200b      	movs	r0, #11
 801147a:	4770      	bx	lr
 801147c:	1f0b      	subs	r3, r1, #4
 801147e:	4418      	add	r0, r3
 8011480:	4413      	add	r3, r2
 8011482:	3a04      	subs	r2, #4
 8011484:	4417      	add	r7, r2
 8011486:	2200      	movs	r2, #0
 8011488:	f843 2f04 	str.w	r2, [r3, #4]!
 801148c:	42bb      	cmp	r3, r7
 801148e:	f840 2f04 	str.w	r2, [r0, #4]!
 8011492:	d1f9      	bne.n	8011488 <rcutils_string_map_reserve+0xd4>
 8011494:	e7e7      	b.n	8011466 <rcutils_string_map_reserve+0xb2>
 8011496:	bf00      	nop

08011498 <rcutils_string_map_init>:
 8011498:	b082      	sub	sp, #8
 801149a:	b570      	push	{r4, r5, r6, lr}
 801149c:	ac04      	add	r4, sp, #16
 801149e:	e884 000c 	stmia.w	r4, {r2, r3}
 80114a2:	b380      	cbz	r0, 8011506 <rcutils_string_map_init+0x6e>
 80114a4:	6806      	ldr	r6, [r0, #0]
 80114a6:	4604      	mov	r4, r0
 80114a8:	b12e      	cbz	r6, 80114b6 <rcutils_string_map_init+0x1e>
 80114aa:	251e      	movs	r5, #30
 80114ac:	4628      	mov	r0, r5
 80114ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114b2:	b002      	add	sp, #8
 80114b4:	4770      	bx	lr
 80114b6:	a804      	add	r0, sp, #16
 80114b8:	460d      	mov	r5, r1
 80114ba:	f7f9 fac5 	bl	800aa48 <rcutils_allocator_is_valid>
 80114be:	b310      	cbz	r0, 8011506 <rcutils_string_map_init+0x6e>
 80114c0:	9b04      	ldr	r3, [sp, #16]
 80114c2:	9908      	ldr	r1, [sp, #32]
 80114c4:	2024      	movs	r0, #36	@ 0x24
 80114c6:	4798      	blx	r3
 80114c8:	6020      	str	r0, [r4, #0]
 80114ca:	b310      	cbz	r0, 8011512 <rcutils_string_map_init+0x7a>
 80114cc:	f10d 0e10 	add.w	lr, sp, #16
 80114d0:	e9c0 6600 	strd	r6, r6, [r0]
 80114d4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80114d8:	f100 0c10 	add.w	ip, r0, #16
 80114dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80114e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80114e4:	f8de 3000 	ldr.w	r3, [lr]
 80114e8:	f8cc 3000 	str.w	r3, [ip]
 80114ec:	4629      	mov	r1, r5
 80114ee:	4620      	mov	r0, r4
 80114f0:	f7ff ff60 	bl	80113b4 <rcutils_string_map_reserve>
 80114f4:	4605      	mov	r5, r0
 80114f6:	2800      	cmp	r0, #0
 80114f8:	d0d8      	beq.n	80114ac <rcutils_string_map_init+0x14>
 80114fa:	9b05      	ldr	r3, [sp, #20]
 80114fc:	9908      	ldr	r1, [sp, #32]
 80114fe:	6820      	ldr	r0, [r4, #0]
 8011500:	4798      	blx	r3
 8011502:	6026      	str	r6, [r4, #0]
 8011504:	e7d2      	b.n	80114ac <rcutils_string_map_init+0x14>
 8011506:	250b      	movs	r5, #11
 8011508:	4628      	mov	r0, r5
 801150a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801150e:	b002      	add	sp, #8
 8011510:	4770      	bx	lr
 8011512:	250a      	movs	r5, #10
 8011514:	e7ca      	b.n	80114ac <rcutils_string_map_init+0x14>
 8011516:	bf00      	nop

08011518 <rcutils_string_map_fini>:
 8011518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801151c:	b082      	sub	sp, #8
 801151e:	2800      	cmp	r0, #0
 8011520:	d03a      	beq.n	8011598 <rcutils_string_map_fini+0x80>
 8011522:	6804      	ldr	r4, [r0, #0]
 8011524:	4606      	mov	r6, r0
 8011526:	2c00      	cmp	r4, #0
 8011528:	d032      	beq.n	8011590 <rcutils_string_map_fini+0x78>
 801152a:	68a3      	ldr	r3, [r4, #8]
 801152c:	b32b      	cbz	r3, 801157a <rcutils_string_map_fini+0x62>
 801152e:	2500      	movs	r5, #0
 8011530:	6822      	ldr	r2, [r4, #0]
 8011532:	462f      	mov	r7, r5
 8011534:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8011538:	b1e0      	cbz	r0, 8011574 <rcutils_string_map_fini+0x5c>
 801153a:	6a21      	ldr	r1, [r4, #32]
 801153c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8011540:	9101      	str	r1, [sp, #4]
 8011542:	47c0      	blx	r8
 8011544:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011548:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801154c:	9901      	ldr	r1, [sp, #4]
 801154e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011552:	47c0      	blx	r8
 8011554:	68e3      	ldr	r3, [r4, #12]
 8011556:	6862      	ldr	r2, [r4, #4]
 8011558:	3b01      	subs	r3, #1
 801155a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801155e:	60e3      	str	r3, [r4, #12]
 8011560:	6834      	ldr	r4, [r6, #0]
 8011562:	68a3      	ldr	r3, [r4, #8]
 8011564:	3501      	adds	r5, #1
 8011566:	429d      	cmp	r5, r3
 8011568:	d207      	bcs.n	801157a <rcutils_string_map_fini+0x62>
 801156a:	6822      	ldr	r2, [r4, #0]
 801156c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8011570:	2800      	cmp	r0, #0
 8011572:	d1e2      	bne.n	801153a <rcutils_string_map_fini+0x22>
 8011574:	3501      	adds	r5, #1
 8011576:	429d      	cmp	r5, r3
 8011578:	d3dc      	bcc.n	8011534 <rcutils_string_map_fini+0x1c>
 801157a:	2100      	movs	r1, #0
 801157c:	4630      	mov	r0, r6
 801157e:	f7ff ff19 	bl	80113b4 <rcutils_string_map_reserve>
 8011582:	4604      	mov	r4, r0
 8011584:	b920      	cbnz	r0, 8011590 <rcutils_string_map_fini+0x78>
 8011586:	6830      	ldr	r0, [r6, #0]
 8011588:	6943      	ldr	r3, [r0, #20]
 801158a:	6a01      	ldr	r1, [r0, #32]
 801158c:	4798      	blx	r3
 801158e:	6034      	str	r4, [r6, #0]
 8011590:	4620      	mov	r0, r4
 8011592:	b002      	add	sp, #8
 8011594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011598:	240b      	movs	r4, #11
 801159a:	4620      	mov	r0, r4
 801159c:	b002      	add	sp, #8
 801159e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115a2:	bf00      	nop

080115a4 <rcutils_string_map_getn>:
 80115a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115a8:	b300      	cbz	r0, 80115ec <rcutils_string_map_getn+0x48>
 80115aa:	6807      	ldr	r7, [r0, #0]
 80115ac:	b1ff      	cbz	r7, 80115ee <rcutils_string_map_getn+0x4a>
 80115ae:	4688      	mov	r8, r1
 80115b0:	b1e1      	cbz	r1, 80115ec <rcutils_string_map_getn+0x48>
 80115b2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80115b6:	683e      	ldr	r6, [r7, #0]
 80115b8:	f1ba 0f00 	cmp.w	sl, #0
 80115bc:	d016      	beq.n	80115ec <rcutils_string_map_getn+0x48>
 80115be:	4691      	mov	r9, r2
 80115c0:	3e04      	subs	r6, #4
 80115c2:	2400      	movs	r4, #0
 80115c4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80115c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80115cc:	4628      	mov	r0, r5
 80115ce:	3401      	adds	r4, #1
 80115d0:	b155      	cbz	r5, 80115e8 <rcutils_string_map_getn+0x44>
 80115d2:	f7ee fe0f 	bl	80001f4 <strlen>
 80115d6:	4548      	cmp	r0, r9
 80115d8:	4602      	mov	r2, r0
 80115da:	4629      	mov	r1, r5
 80115dc:	bf38      	it	cc
 80115de:	464a      	movcc	r2, r9
 80115e0:	4640      	mov	r0, r8
 80115e2:	f004 f94a 	bl	801587a <strncmp>
 80115e6:	b128      	cbz	r0, 80115f4 <rcutils_string_map_getn+0x50>
 80115e8:	45a2      	cmp	sl, r4
 80115ea:	d1eb      	bne.n	80115c4 <rcutils_string_map_getn+0x20>
 80115ec:	2700      	movs	r7, #0
 80115ee:	4638      	mov	r0, r7
 80115f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f853 700b 	ldr.w	r7, [r3, fp]
 80115fa:	4638      	mov	r0, r7
 80115fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011600 <rmw_get_zero_initialized_context>:
 8011600:	b510      	push	{r4, lr}
 8011602:	4604      	mov	r4, r0
 8011604:	3010      	adds	r0, #16
 8011606:	f000 f80b 	bl	8011620 <rmw_get_zero_initialized_init_options>
 801160a:	2300      	movs	r3, #0
 801160c:	2000      	movs	r0, #0
 801160e:	2100      	movs	r1, #0
 8011610:	e9c4 0100 	strd	r0, r1, [r4]
 8011614:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8011618:	60a3      	str	r3, [r4, #8]
 801161a:	4620      	mov	r0, r4
 801161c:	bd10      	pop	{r4, pc}
 801161e:	bf00      	nop

08011620 <rmw_get_zero_initialized_init_options>:
 8011620:	b510      	push	{r4, lr}
 8011622:	2238      	movs	r2, #56	@ 0x38
 8011624:	4604      	mov	r4, r0
 8011626:	2100      	movs	r1, #0
 8011628:	f004 f912 	bl	8015850 <memset>
 801162c:	f104 0010 	add.w	r0, r4, #16
 8011630:	f000 f806 	bl	8011640 <rmw_get_default_security_options>
 8011634:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011638:	60e3      	str	r3, [r4, #12]
 801163a:	4620      	mov	r0, r4
 801163c:	bd10      	pop	{r4, pc}
 801163e:	bf00      	nop

08011640 <rmw_get_default_security_options>:
 8011640:	2200      	movs	r2, #0
 8011642:	7002      	strb	r2, [r0, #0]
 8011644:	6042      	str	r2, [r0, #4]
 8011646:	4770      	bx	lr

08011648 <rmw_subscription_content_filter_options_fini>:
 8011648:	b1b0      	cbz	r0, 8011678 <rmw_subscription_content_filter_options_fini+0x30>
 801164a:	b538      	push	{r3, r4, r5, lr}
 801164c:	4604      	mov	r4, r0
 801164e:	4608      	mov	r0, r1
 8011650:	460d      	mov	r5, r1
 8011652:	f7f9 f9f9 	bl	800aa48 <rcutils_allocator_is_valid>
 8011656:	b168      	cbz	r0, 8011674 <rmw_subscription_content_filter_options_fini+0x2c>
 8011658:	6820      	ldr	r0, [r4, #0]
 801165a:	b120      	cbz	r0, 8011666 <rmw_subscription_content_filter_options_fini+0x1e>
 801165c:	686b      	ldr	r3, [r5, #4]
 801165e:	6929      	ldr	r1, [r5, #16]
 8011660:	4798      	blx	r3
 8011662:	2300      	movs	r3, #0
 8011664:	6023      	str	r3, [r4, #0]
 8011666:	1d20      	adds	r0, r4, #4
 8011668:	f003 fbd0 	bl	8014e0c <rcutils_string_array_fini>
 801166c:	3800      	subs	r0, #0
 801166e:	bf18      	it	ne
 8011670:	2001      	movne	r0, #1
 8011672:	bd38      	pop	{r3, r4, r5, pc}
 8011674:	200b      	movs	r0, #11
 8011676:	bd38      	pop	{r3, r4, r5, pc}
 8011678:	200b      	movs	r0, #11
 801167a:	4770      	bx	lr

0801167c <rmw_get_default_subscription_options>:
 801167c:	2200      	movs	r2, #0
 801167e:	e9c0 2200 	strd	r2, r2, [r0]
 8011682:	6082      	str	r2, [r0, #8]
 8011684:	4770      	bx	lr
 8011686:	bf00      	nop

08011688 <rmw_time_equal>:
 8011688:	b4f0      	push	{r4, r5, r6, r7}
 801168a:	b084      	sub	sp, #16
 801168c:	ac04      	add	r4, sp, #16
 801168e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8011692:	4603      	mov	r3, r0
 8011694:	4924      	ldr	r1, [pc, #144]	@ (8011728 <rmw_time_equal+0xa0>)
 8011696:	9e03      	ldr	r6, [sp, #12]
 8011698:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801169c:	2202      	movs	r2, #2
 801169e:	4299      	cmp	r1, r3
 80116a0:	41aa      	sbcs	r2, r5
 80116a2:	d330      	bcc.n	8011706 <rmw_time_equal+0x7e>
 80116a4:	4c21      	ldr	r4, [pc, #132]	@ (801172c <rmw_time_equal+0xa4>)
 80116a6:	fba3 3204 	umull	r3, r2, r3, r4
 80116aa:	fb04 2205 	mla	r2, r4, r5, r2
 80116ae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80116b2:	43dd      	mvns	r5, r3
 80116b4:	1a8c      	subs	r4, r1, r2
 80116b6:	4285      	cmp	r5, r0
 80116b8:	41b4      	sbcs	r4, r6
 80116ba:	d332      	bcc.n	8011722 <rmw_time_equal+0x9a>
 80116bc:	eb10 0c03 	adds.w	ip, r0, r3
 80116c0:	eb42 0106 	adc.w	r1, r2, r6
 80116c4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80116c8:	4817      	ldr	r0, [pc, #92]	@ (8011728 <rmw_time_equal+0xa0>)
 80116ca:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80116cc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80116ce:	2202      	movs	r2, #2
 80116d0:	4298      	cmp	r0, r3
 80116d2:	41b2      	sbcs	r2, r6
 80116d4:	d31c      	bcc.n	8011710 <rmw_time_equal+0x88>
 80116d6:	4c15      	ldr	r4, [pc, #84]	@ (801172c <rmw_time_equal+0xa4>)
 80116d8:	fba3 3204 	umull	r3, r2, r3, r4
 80116dc:	fb04 2206 	mla	r2, r4, r6, r2
 80116e0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80116e4:	43de      	mvns	r6, r3
 80116e6:	1a84      	subs	r4, r0, r2
 80116e8:	42ae      	cmp	r6, r5
 80116ea:	41bc      	sbcs	r4, r7
 80116ec:	d315      	bcc.n	801171a <rmw_time_equal+0x92>
 80116ee:	195b      	adds	r3, r3, r5
 80116f0:	eb42 0207 	adc.w	r2, r2, r7
 80116f4:	428a      	cmp	r2, r1
 80116f6:	bf08      	it	eq
 80116f8:	4563      	cmpeq	r3, ip
 80116fa:	bf0c      	ite	eq
 80116fc:	2001      	moveq	r0, #1
 80116fe:	2000      	movne	r0, #0
 8011700:	b004      	add	sp, #16
 8011702:	bcf0      	pop	{r4, r5, r6, r7}
 8011704:	4770      	bx	lr
 8011706:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801170a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801170e:	e7d9      	b.n	80116c4 <rmw_time_equal+0x3c>
 8011710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011714:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8011718:	e7ec      	b.n	80116f4 <rmw_time_equal+0x6c>
 801171a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801171e:	4602      	mov	r2, r0
 8011720:	e7e8      	b.n	80116f4 <rmw_time_equal+0x6c>
 8011722:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8011726:	e7cd      	b.n	80116c4 <rmw_time_equal+0x3c>
 8011728:	25c17d04 	.word	0x25c17d04
 801172c:	3b9aca00 	.word	0x3b9aca00

08011730 <rmw_time_total_nsec>:
 8011730:	b470      	push	{r4, r5, r6}
 8011732:	b085      	sub	sp, #20
 8011734:	ac04      	add	r4, sp, #16
 8011736:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801173a:	4603      	mov	r3, r0
 801173c:	4912      	ldr	r1, [pc, #72]	@ (8011788 <rmw_time_total_nsec+0x58>)
 801173e:	9e03      	ldr	r6, [sp, #12]
 8011740:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8011744:	2202      	movs	r2, #2
 8011746:	4299      	cmp	r1, r3
 8011748:	41aa      	sbcs	r2, r5
 801174a:	d311      	bcc.n	8011770 <rmw_time_total_nsec+0x40>
 801174c:	4c0f      	ldr	r4, [pc, #60]	@ (801178c <rmw_time_total_nsec+0x5c>)
 801174e:	fba3 3204 	umull	r3, r2, r3, r4
 8011752:	fb04 2205 	mla	r2, r4, r5, r2
 8011756:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801175a:	43dd      	mvns	r5, r3
 801175c:	1a8c      	subs	r4, r1, r2
 801175e:	4285      	cmp	r5, r0
 8011760:	41b4      	sbcs	r4, r6
 8011762:	d30c      	bcc.n	801177e <rmw_time_total_nsec+0x4e>
 8011764:	1818      	adds	r0, r3, r0
 8011766:	eb42 0106 	adc.w	r1, r2, r6
 801176a:	b005      	add	sp, #20
 801176c:	bc70      	pop	{r4, r5, r6}
 801176e:	4770      	bx	lr
 8011770:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011774:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011778:	b005      	add	sp, #20
 801177a:	bc70      	pop	{r4, r5, r6}
 801177c:	4770      	bx	lr
 801177e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011782:	b005      	add	sp, #20
 8011784:	bc70      	pop	{r4, r5, r6}
 8011786:	4770      	bx	lr
 8011788:	25c17d04 	.word	0x25c17d04
 801178c:	3b9aca00 	.word	0x3b9aca00

08011790 <rmw_get_zero_initialized_message_info>:
 8011790:	b510      	push	{r4, lr}
 8011792:	2240      	movs	r2, #64	@ 0x40
 8011794:	4604      	mov	r4, r0
 8011796:	2100      	movs	r1, #0
 8011798:	f004 f85a 	bl	8015850 <memset>
 801179c:	4620      	mov	r0, r4
 801179e:	bd10      	pop	{r4, pc}

080117a0 <rmw_validate_full_topic_name>:
 80117a0:	2800      	cmp	r0, #0
 80117a2:	d057      	beq.n	8011854 <rmw_validate_full_topic_name+0xb4>
 80117a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117a8:	460d      	mov	r5, r1
 80117aa:	2900      	cmp	r1, #0
 80117ac:	d054      	beq.n	8011858 <rmw_validate_full_topic_name+0xb8>
 80117ae:	4616      	mov	r6, r2
 80117b0:	4604      	mov	r4, r0
 80117b2:	f7ee fd1f 	bl	80001f4 <strlen>
 80117b6:	b148      	cbz	r0, 80117cc <rmw_validate_full_topic_name+0x2c>
 80117b8:	7823      	ldrb	r3, [r4, #0]
 80117ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80117bc:	d00d      	beq.n	80117da <rmw_validate_full_topic_name+0x3a>
 80117be:	2302      	movs	r3, #2
 80117c0:	602b      	str	r3, [r5, #0]
 80117c2:	b13e      	cbz	r6, 80117d4 <rmw_validate_full_topic_name+0x34>
 80117c4:	2000      	movs	r0, #0
 80117c6:	6030      	str	r0, [r6, #0]
 80117c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117cc:	2301      	movs	r3, #1
 80117ce:	602b      	str	r3, [r5, #0]
 80117d0:	2e00      	cmp	r6, #0
 80117d2:	d1f7      	bne.n	80117c4 <rmw_validate_full_topic_name+0x24>
 80117d4:	2000      	movs	r0, #0
 80117d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117da:	1e43      	subs	r3, r0, #1
 80117dc:	5ce2      	ldrb	r2, [r4, r3]
 80117de:	2a2f      	cmp	r2, #47	@ 0x2f
 80117e0:	d03c      	beq.n	801185c <rmw_validate_full_topic_name+0xbc>
 80117e2:	1e63      	subs	r3, r4, #1
 80117e4:	eb03 0800 	add.w	r8, r3, r0
 80117e8:	f1c4 0e01 	rsb	lr, r4, #1
 80117ec:	eb0e 0703 	add.w	r7, lr, r3
 80117f0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80117f4:	f021 0220 	bic.w	r2, r1, #32
 80117f8:	3a41      	subs	r2, #65	@ 0x41
 80117fa:	2a19      	cmp	r2, #25
 80117fc:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8011800:	d90b      	bls.n	801181a <rmw_validate_full_topic_name+0x7a>
 8011802:	295f      	cmp	r1, #95	@ 0x5f
 8011804:	d009      	beq.n	801181a <rmw_validate_full_topic_name+0x7a>
 8011806:	f1bc 0f0a 	cmp.w	ip, #10
 801180a:	d906      	bls.n	801181a <rmw_validate_full_topic_name+0x7a>
 801180c:	2304      	movs	r3, #4
 801180e:	602b      	str	r3, [r5, #0]
 8011810:	2e00      	cmp	r6, #0
 8011812:	d0df      	beq.n	80117d4 <rmw_validate_full_topic_name+0x34>
 8011814:	6037      	str	r7, [r6, #0]
 8011816:	2000      	movs	r0, #0
 8011818:	e7d6      	b.n	80117c8 <rmw_validate_full_topic_name+0x28>
 801181a:	4543      	cmp	r3, r8
 801181c:	d1e6      	bne.n	80117ec <rmw_validate_full_topic_name+0x4c>
 801181e:	4f1a      	ldr	r7, [pc, #104]	@ (8011888 <rmw_validate_full_topic_name+0xe8>)
 8011820:	2301      	movs	r3, #1
 8011822:	e004      	b.n	801182e <rmw_validate_full_topic_name+0x8e>
 8011824:	4298      	cmp	r0, r3
 8011826:	f104 0401 	add.w	r4, r4, #1
 801182a:	d91c      	bls.n	8011866 <rmw_validate_full_topic_name+0xc6>
 801182c:	4613      	mov	r3, r2
 801182e:	4298      	cmp	r0, r3
 8011830:	f103 0201 	add.w	r2, r3, #1
 8011834:	d0f6      	beq.n	8011824 <rmw_validate_full_topic_name+0x84>
 8011836:	7821      	ldrb	r1, [r4, #0]
 8011838:	292f      	cmp	r1, #47	@ 0x2f
 801183a:	d1f3      	bne.n	8011824 <rmw_validate_full_topic_name+0x84>
 801183c:	7861      	ldrb	r1, [r4, #1]
 801183e:	292f      	cmp	r1, #47	@ 0x2f
 8011840:	d01c      	beq.n	801187c <rmw_validate_full_topic_name+0xdc>
 8011842:	5dc9      	ldrb	r1, [r1, r7]
 8011844:	0749      	lsls	r1, r1, #29
 8011846:	d5ed      	bpl.n	8011824 <rmw_validate_full_topic_name+0x84>
 8011848:	2206      	movs	r2, #6
 801184a:	602a      	str	r2, [r5, #0]
 801184c:	2e00      	cmp	r6, #0
 801184e:	d0c1      	beq.n	80117d4 <rmw_validate_full_topic_name+0x34>
 8011850:	6033      	str	r3, [r6, #0]
 8011852:	e7bf      	b.n	80117d4 <rmw_validate_full_topic_name+0x34>
 8011854:	200b      	movs	r0, #11
 8011856:	4770      	bx	lr
 8011858:	200b      	movs	r0, #11
 801185a:	e7b5      	b.n	80117c8 <rmw_validate_full_topic_name+0x28>
 801185c:	2203      	movs	r2, #3
 801185e:	602a      	str	r2, [r5, #0]
 8011860:	2e00      	cmp	r6, #0
 8011862:	d1f5      	bne.n	8011850 <rmw_validate_full_topic_name+0xb0>
 8011864:	e7b6      	b.n	80117d4 <rmw_validate_full_topic_name+0x34>
 8011866:	28f7      	cmp	r0, #247	@ 0xf7
 8011868:	d802      	bhi.n	8011870 <rmw_validate_full_topic_name+0xd0>
 801186a:	2000      	movs	r0, #0
 801186c:	6028      	str	r0, [r5, #0]
 801186e:	e7ab      	b.n	80117c8 <rmw_validate_full_topic_name+0x28>
 8011870:	2307      	movs	r3, #7
 8011872:	602b      	str	r3, [r5, #0]
 8011874:	2e00      	cmp	r6, #0
 8011876:	d0ad      	beq.n	80117d4 <rmw_validate_full_topic_name+0x34>
 8011878:	23f6      	movs	r3, #246	@ 0xf6
 801187a:	e7e9      	b.n	8011850 <rmw_validate_full_topic_name+0xb0>
 801187c:	2205      	movs	r2, #5
 801187e:	602a      	str	r2, [r5, #0]
 8011880:	2e00      	cmp	r6, #0
 8011882:	d1e5      	bne.n	8011850 <rmw_validate_full_topic_name+0xb0>
 8011884:	e7a6      	b.n	80117d4 <rmw_validate_full_topic_name+0x34>
 8011886:	bf00      	nop
 8011888:	080175dc 	.word	0x080175dc

0801188c <rmw_validate_namespace_with_size>:
 801188c:	b340      	cbz	r0, 80118e0 <rmw_validate_namespace_with_size+0x54>
 801188e:	b570      	push	{r4, r5, r6, lr}
 8011890:	4614      	mov	r4, r2
 8011892:	b0c2      	sub	sp, #264	@ 0x108
 8011894:	b332      	cbz	r2, 80118e4 <rmw_validate_namespace_with_size+0x58>
 8011896:	2901      	cmp	r1, #1
 8011898:	460d      	mov	r5, r1
 801189a:	461e      	mov	r6, r3
 801189c:	d102      	bne.n	80118a4 <rmw_validate_namespace_with_size+0x18>
 801189e:	7803      	ldrb	r3, [r0, #0]
 80118a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80118a2:	d012      	beq.n	80118ca <rmw_validate_namespace_with_size+0x3e>
 80118a4:	aa01      	add	r2, sp, #4
 80118a6:	4669      	mov	r1, sp
 80118a8:	f7ff ff7a 	bl	80117a0 <rmw_validate_full_topic_name>
 80118ac:	b978      	cbnz	r0, 80118ce <rmw_validate_namespace_with_size+0x42>
 80118ae:	9b00      	ldr	r3, [sp, #0]
 80118b0:	b14b      	cbz	r3, 80118c6 <rmw_validate_namespace_with_size+0x3a>
 80118b2:	2b07      	cmp	r3, #7
 80118b4:	d007      	beq.n	80118c6 <rmw_validate_namespace_with_size+0x3a>
 80118b6:	1e5a      	subs	r2, r3, #1
 80118b8:	2a05      	cmp	r2, #5
 80118ba:	d82b      	bhi.n	8011914 <rmw_validate_namespace_with_size+0x88>
 80118bc:	e8df f002 	tbb	[pc, r2]
 80118c0:	1e212427 	.word	0x1e212427
 80118c4:	141b      	.short	0x141b
 80118c6:	2df5      	cmp	r5, #245	@ 0xf5
 80118c8:	d803      	bhi.n	80118d2 <rmw_validate_namespace_with_size+0x46>
 80118ca:	2000      	movs	r0, #0
 80118cc:	6020      	str	r0, [r4, #0]
 80118ce:	b042      	add	sp, #264	@ 0x108
 80118d0:	bd70      	pop	{r4, r5, r6, pc}
 80118d2:	2307      	movs	r3, #7
 80118d4:	6023      	str	r3, [r4, #0]
 80118d6:	2e00      	cmp	r6, #0
 80118d8:	d0f9      	beq.n	80118ce <rmw_validate_namespace_with_size+0x42>
 80118da:	23f4      	movs	r3, #244	@ 0xf4
 80118dc:	6033      	str	r3, [r6, #0]
 80118de:	e7f6      	b.n	80118ce <rmw_validate_namespace_with_size+0x42>
 80118e0:	200b      	movs	r0, #11
 80118e2:	4770      	bx	lr
 80118e4:	200b      	movs	r0, #11
 80118e6:	e7f2      	b.n	80118ce <rmw_validate_namespace_with_size+0x42>
 80118e8:	2306      	movs	r3, #6
 80118ea:	6023      	str	r3, [r4, #0]
 80118ec:	2e00      	cmp	r6, #0
 80118ee:	d0ee      	beq.n	80118ce <rmw_validate_namespace_with_size+0x42>
 80118f0:	9b01      	ldr	r3, [sp, #4]
 80118f2:	6033      	str	r3, [r6, #0]
 80118f4:	e7eb      	b.n	80118ce <rmw_validate_namespace_with_size+0x42>
 80118f6:	2305      	movs	r3, #5
 80118f8:	6023      	str	r3, [r4, #0]
 80118fa:	e7f7      	b.n	80118ec <rmw_validate_namespace_with_size+0x60>
 80118fc:	2304      	movs	r3, #4
 80118fe:	6023      	str	r3, [r4, #0]
 8011900:	e7f4      	b.n	80118ec <rmw_validate_namespace_with_size+0x60>
 8011902:	2303      	movs	r3, #3
 8011904:	6023      	str	r3, [r4, #0]
 8011906:	e7f1      	b.n	80118ec <rmw_validate_namespace_with_size+0x60>
 8011908:	2302      	movs	r3, #2
 801190a:	6023      	str	r3, [r4, #0]
 801190c:	e7ee      	b.n	80118ec <rmw_validate_namespace_with_size+0x60>
 801190e:	2301      	movs	r3, #1
 8011910:	6023      	str	r3, [r4, #0]
 8011912:	e7eb      	b.n	80118ec <rmw_validate_namespace_with_size+0x60>
 8011914:	4a03      	ldr	r2, [pc, #12]	@ (8011924 <rmw_validate_namespace_with_size+0x98>)
 8011916:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801191a:	a802      	add	r0, sp, #8
 801191c:	f7ff fcda 	bl	80112d4 <rcutils_snprintf>
 8011920:	2001      	movs	r0, #1
 8011922:	e7d4      	b.n	80118ce <rmw_validate_namespace_with_size+0x42>
 8011924:	08016ffc 	.word	0x08016ffc

08011928 <rmw_validate_namespace>:
 8011928:	b168      	cbz	r0, 8011946 <rmw_validate_namespace+0x1e>
 801192a:	b570      	push	{r4, r5, r6, lr}
 801192c:	460d      	mov	r5, r1
 801192e:	4616      	mov	r6, r2
 8011930:	4604      	mov	r4, r0
 8011932:	f7ee fc5f 	bl	80001f4 <strlen>
 8011936:	4633      	mov	r3, r6
 8011938:	4601      	mov	r1, r0
 801193a:	462a      	mov	r2, r5
 801193c:	4620      	mov	r0, r4
 801193e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011942:	f7ff bfa3 	b.w	801188c <rmw_validate_namespace_with_size>
 8011946:	200b      	movs	r0, #11
 8011948:	4770      	bx	lr
 801194a:	bf00      	nop

0801194c <rmw_namespace_validation_result_string>:
 801194c:	2807      	cmp	r0, #7
 801194e:	bf9a      	itte	ls
 8011950:	4b02      	ldrls	r3, [pc, #8]	@ (801195c <rmw_namespace_validation_result_string+0x10>)
 8011952:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8011956:	4802      	ldrhi	r0, [pc, #8]	@ (8011960 <rmw_namespace_validation_result_string+0x14>)
 8011958:	4770      	bx	lr
 801195a:	bf00      	nop
 801195c:	080171f4 	.word	0x080171f4
 8011960:	0801704c 	.word	0x0801704c

08011964 <rmw_validate_node_name>:
 8011964:	2800      	cmp	r0, #0
 8011966:	d03b      	beq.n	80119e0 <rmw_validate_node_name+0x7c>
 8011968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801196c:	460d      	mov	r5, r1
 801196e:	2900      	cmp	r1, #0
 8011970:	d038      	beq.n	80119e4 <rmw_validate_node_name+0x80>
 8011972:	4616      	mov	r6, r2
 8011974:	4604      	mov	r4, r0
 8011976:	f7ee fc3d 	bl	80001f4 <strlen>
 801197a:	b1e0      	cbz	r0, 80119b6 <rmw_validate_node_name+0x52>
 801197c:	1e63      	subs	r3, r4, #1
 801197e:	eb03 0800 	add.w	r8, r3, r0
 8011982:	f1c4 0101 	rsb	r1, r4, #1
 8011986:	18cf      	adds	r7, r1, r3
 8011988:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801198c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8011990:	f02e 0c20 	bic.w	ip, lr, #32
 8011994:	2a09      	cmp	r2, #9
 8011996:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801199a:	d914      	bls.n	80119c6 <rmw_validate_node_name+0x62>
 801199c:	f1bc 0f19 	cmp.w	ip, #25
 80119a0:	d911      	bls.n	80119c6 <rmw_validate_node_name+0x62>
 80119a2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80119a6:	d00e      	beq.n	80119c6 <rmw_validate_node_name+0x62>
 80119a8:	2302      	movs	r3, #2
 80119aa:	602b      	str	r3, [r5, #0]
 80119ac:	b106      	cbz	r6, 80119b0 <rmw_validate_node_name+0x4c>
 80119ae:	6037      	str	r7, [r6, #0]
 80119b0:	2000      	movs	r0, #0
 80119b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119b6:	2301      	movs	r3, #1
 80119b8:	602b      	str	r3, [r5, #0]
 80119ba:	2e00      	cmp	r6, #0
 80119bc:	d0f8      	beq.n	80119b0 <rmw_validate_node_name+0x4c>
 80119be:	2000      	movs	r0, #0
 80119c0:	6030      	str	r0, [r6, #0]
 80119c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119c6:	4543      	cmp	r3, r8
 80119c8:	d1dd      	bne.n	8011986 <rmw_validate_node_name+0x22>
 80119ca:	7822      	ldrb	r2, [r4, #0]
 80119cc:	4b0d      	ldr	r3, [pc, #52]	@ (8011a04 <rmw_validate_node_name+0xa0>)
 80119ce:	5cd3      	ldrb	r3, [r2, r3]
 80119d0:	f013 0304 	ands.w	r3, r3, #4
 80119d4:	d110      	bne.n	80119f8 <rmw_validate_node_name+0x94>
 80119d6:	28ff      	cmp	r0, #255	@ 0xff
 80119d8:	d806      	bhi.n	80119e8 <rmw_validate_node_name+0x84>
 80119da:	602b      	str	r3, [r5, #0]
 80119dc:	4618      	mov	r0, r3
 80119de:	e7e8      	b.n	80119b2 <rmw_validate_node_name+0x4e>
 80119e0:	200b      	movs	r0, #11
 80119e2:	4770      	bx	lr
 80119e4:	200b      	movs	r0, #11
 80119e6:	e7e4      	b.n	80119b2 <rmw_validate_node_name+0x4e>
 80119e8:	2204      	movs	r2, #4
 80119ea:	602a      	str	r2, [r5, #0]
 80119ec:	2e00      	cmp	r6, #0
 80119ee:	d0df      	beq.n	80119b0 <rmw_validate_node_name+0x4c>
 80119f0:	22fe      	movs	r2, #254	@ 0xfe
 80119f2:	6032      	str	r2, [r6, #0]
 80119f4:	4618      	mov	r0, r3
 80119f6:	e7dc      	b.n	80119b2 <rmw_validate_node_name+0x4e>
 80119f8:	2303      	movs	r3, #3
 80119fa:	602b      	str	r3, [r5, #0]
 80119fc:	2e00      	cmp	r6, #0
 80119fe:	d1de      	bne.n	80119be <rmw_validate_node_name+0x5a>
 8011a00:	e7d6      	b.n	80119b0 <rmw_validate_node_name+0x4c>
 8011a02:	bf00      	nop
 8011a04:	080175dc 	.word	0x080175dc

08011a08 <rmw_node_name_validation_result_string>:
 8011a08:	2804      	cmp	r0, #4
 8011a0a:	bf9a      	itte	ls
 8011a0c:	4b02      	ldrls	r3, [pc, #8]	@ (8011a18 <rmw_node_name_validation_result_string+0x10>)
 8011a0e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8011a12:	4802      	ldrhi	r0, [pc, #8]	@ (8011a1c <rmw_node_name_validation_result_string+0x14>)
 8011a14:	4770      	bx	lr
 8011a16:	bf00      	nop
 8011a18:	08017300 	.word	0x08017300
 8011a1c:	08017214 	.word	0x08017214

08011a20 <get_memory>:
 8011a20:	4603      	mov	r3, r0
 8011a22:	6840      	ldr	r0, [r0, #4]
 8011a24:	b158      	cbz	r0, 8011a3e <get_memory+0x1e>
 8011a26:	6842      	ldr	r2, [r0, #4]
 8011a28:	605a      	str	r2, [r3, #4]
 8011a2a:	b10a      	cbz	r2, 8011a30 <get_memory+0x10>
 8011a2c:	2100      	movs	r1, #0
 8011a2e:	6011      	str	r1, [r2, #0]
 8011a30:	681a      	ldr	r2, [r3, #0]
 8011a32:	6042      	str	r2, [r0, #4]
 8011a34:	b102      	cbz	r2, 8011a38 <get_memory+0x18>
 8011a36:	6010      	str	r0, [r2, #0]
 8011a38:	2200      	movs	r2, #0
 8011a3a:	6002      	str	r2, [r0, #0]
 8011a3c:	6018      	str	r0, [r3, #0]
 8011a3e:	4770      	bx	lr

08011a40 <put_memory>:
 8011a40:	680b      	ldr	r3, [r1, #0]
 8011a42:	b10b      	cbz	r3, 8011a48 <put_memory+0x8>
 8011a44:	684a      	ldr	r2, [r1, #4]
 8011a46:	605a      	str	r2, [r3, #4]
 8011a48:	684a      	ldr	r2, [r1, #4]
 8011a4a:	b102      	cbz	r2, 8011a4e <put_memory+0xe>
 8011a4c:	6013      	str	r3, [r2, #0]
 8011a4e:	6803      	ldr	r3, [r0, #0]
 8011a50:	428b      	cmp	r3, r1
 8011a52:	6843      	ldr	r3, [r0, #4]
 8011a54:	bf08      	it	eq
 8011a56:	6002      	streq	r2, [r0, #0]
 8011a58:	604b      	str	r3, [r1, #4]
 8011a5a:	b103      	cbz	r3, 8011a5e <put_memory+0x1e>
 8011a5c:	6019      	str	r1, [r3, #0]
 8011a5e:	2300      	movs	r3, #0
 8011a60:	600b      	str	r3, [r1, #0]
 8011a62:	6041      	str	r1, [r0, #4]
 8011a64:	4770      	bx	lr
 8011a66:	bf00      	nop

08011a68 <rmw_destroy_client>:
 8011a68:	b570      	push	{r4, r5, r6, lr}
 8011a6a:	b128      	cbz	r0, 8011a78 <rmw_destroy_client+0x10>
 8011a6c:	4604      	mov	r4, r0
 8011a6e:	6800      	ldr	r0, [r0, #0]
 8011a70:	460d      	mov	r5, r1
 8011a72:	f7f9 fd8f 	bl	800b594 <is_uxrce_rmw_identifier_valid>
 8011a76:	b910      	cbnz	r0, 8011a7e <rmw_destroy_client+0x16>
 8011a78:	2401      	movs	r4, #1
 8011a7a:	4620      	mov	r0, r4
 8011a7c:	bd70      	pop	{r4, r5, r6, pc}
 8011a7e:	6863      	ldr	r3, [r4, #4]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d0f9      	beq.n	8011a78 <rmw_destroy_client+0x10>
 8011a84:	2d00      	cmp	r5, #0
 8011a86:	d0f7      	beq.n	8011a78 <rmw_destroy_client+0x10>
 8011a88:	6828      	ldr	r0, [r5, #0]
 8011a8a:	f7f9 fd83 	bl	800b594 <is_uxrce_rmw_identifier_valid>
 8011a8e:	2800      	cmp	r0, #0
 8011a90:	d0f2      	beq.n	8011a78 <rmw_destroy_client+0x10>
 8011a92:	686e      	ldr	r6, [r5, #4]
 8011a94:	2e00      	cmp	r6, #0
 8011a96:	d0ef      	beq.n	8011a78 <rmw_destroy_client+0x10>
 8011a98:	6864      	ldr	r4, [r4, #4]
 8011a9a:	6932      	ldr	r2, [r6, #16]
 8011a9c:	6920      	ldr	r0, [r4, #16]
 8011a9e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011aa2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011aa6:	6819      	ldr	r1, [r3, #0]
 8011aa8:	f002 f8ec 	bl	8013c84 <uxr_buffer_cancel_data>
 8011aac:	4602      	mov	r2, r0
 8011aae:	6920      	ldr	r0, [r4, #16]
 8011ab0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011ab4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011ab8:	f7f9 fcec 	bl	800b494 <run_xrce_session>
 8011abc:	6920      	ldr	r0, [r4, #16]
 8011abe:	6932      	ldr	r2, [r6, #16]
 8011ac0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011ac4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011ac8:	6819      	ldr	r1, [r3, #0]
 8011aca:	f7f9 fe39 	bl	800b740 <uxr_buffer_delete_entity>
 8011ace:	4602      	mov	r2, r0
 8011ad0:	6920      	ldr	r0, [r4, #16]
 8011ad2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011ad6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011ada:	f7f9 fcdb 	bl	800b494 <run_xrce_session>
 8011ade:	2800      	cmp	r0, #0
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	bf14      	ite	ne
 8011ae4:	2400      	movne	r4, #0
 8011ae6:	2402      	moveq	r4, #2
 8011ae8:	f7f9 fbbc 	bl	800b264 <rmw_uxrce_fini_client_memory>
 8011aec:	e7c5      	b.n	8011a7a <rmw_destroy_client+0x12>
 8011aee:	bf00      	nop

08011af0 <rmw_get_implementation_identifier>:
 8011af0:	4b01      	ldr	r3, [pc, #4]	@ (8011af8 <rmw_get_implementation_identifier+0x8>)
 8011af2:	6818      	ldr	r0, [r3, #0]
 8011af4:	4770      	bx	lr
 8011af6:	bf00      	nop
 8011af8:	0801732c 	.word	0x0801732c

08011afc <rmw_init_options_init>:
 8011afc:	b084      	sub	sp, #16
 8011afe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b00:	b083      	sub	sp, #12
 8011b02:	ad09      	add	r5, sp, #36	@ 0x24
 8011b04:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8011b08:	b130      	cbz	r0, 8011b18 <rmw_init_options_init+0x1c>
 8011b0a:	4604      	mov	r4, r0
 8011b0c:	4628      	mov	r0, r5
 8011b0e:	f7f8 ff9b 	bl	800aa48 <rcutils_allocator_is_valid>
 8011b12:	b108      	cbz	r0, 8011b18 <rmw_init_options_init+0x1c>
 8011b14:	68a6      	ldr	r6, [r4, #8]
 8011b16:	b12e      	cbz	r6, 8011b24 <rmw_init_options_init+0x28>
 8011b18:	200b      	movs	r0, #11
 8011b1a:	b003      	add	sp, #12
 8011b1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011b20:	b004      	add	sp, #16
 8011b22:	4770      	bx	lr
 8011b24:	2200      	movs	r2, #0
 8011b26:	2300      	movs	r3, #0
 8011b28:	e9c4 2300 	strd	r2, r3, [r4]
 8011b2c:	4b22      	ldr	r3, [pc, #136]	@ (8011bb8 <rmw_init_options_init+0xbc>)
 8011b2e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8011bc8 <rmw_init_options_init+0xcc>
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	60a3      	str	r3, [r4, #8]
 8011b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b38:	f104 0c20 	add.w	ip, r4, #32
 8011b3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b40:	466f      	mov	r7, sp
 8011b42:	682b      	ldr	r3, [r5, #0]
 8011b44:	f8cc 3000 	str.w	r3, [ip]
 8011b48:	4638      	mov	r0, r7
 8011b4a:	f8c4 e01c 	str.w	lr, [r4, #28]
 8011b4e:	60e6      	str	r6, [r4, #12]
 8011b50:	f7ff fd76 	bl	8011640 <rmw_get_default_security_options>
 8011b54:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011b58:	f104 0310 	add.w	r3, r4, #16
 8011b5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8011b60:	2203      	movs	r2, #3
 8011b62:	4816      	ldr	r0, [pc, #88]	@ (8011bbc <rmw_init_options_init+0xc0>)
 8011b64:	4916      	ldr	r1, [pc, #88]	@ (8011bc0 <rmw_init_options_init+0xc4>)
 8011b66:	7626      	strb	r6, [r4, #24]
 8011b68:	f7f9 fabc 	bl	800b0e4 <rmw_uxrce_init_init_options_impl_memory>
 8011b6c:	4813      	ldr	r0, [pc, #76]	@ (8011bbc <rmw_init_options_init+0xc0>)
 8011b6e:	f7ff ff57 	bl	8011a20 <get_memory>
 8011b72:	b1f0      	cbz	r0, 8011bb2 <rmw_init_options_init+0xb6>
 8011b74:	4a13      	ldr	r2, [pc, #76]	@ (8011bc4 <rmw_init_options_init+0xc8>)
 8011b76:	6883      	ldr	r3, [r0, #8]
 8011b78:	6851      	ldr	r1, [r2, #4]
 8011b7a:	7810      	ldrb	r0, [r2, #0]
 8011b7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8011b7e:	7418      	strb	r0, [r3, #16]
 8011b80:	6159      	str	r1, [r3, #20]
 8011b82:	68d1      	ldr	r1, [r2, #12]
 8011b84:	61d9      	str	r1, [r3, #28]
 8011b86:	6911      	ldr	r1, [r2, #16]
 8011b88:	6219      	str	r1, [r3, #32]
 8011b8a:	6951      	ldr	r1, [r2, #20]
 8011b8c:	6892      	ldr	r2, [r2, #8]
 8011b8e:	619a      	str	r2, [r3, #24]
 8011b90:	6259      	str	r1, [r3, #36]	@ 0x24
 8011b92:	f7fb fa31 	bl	800cff8 <uxr_nanos>
 8011b96:	f003 fb93 	bl	80152c0 <srand>
 8011b9a:	f003 fbbf 	bl	801531c <rand>
 8011b9e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011ba0:	6298      	str	r0, [r3, #40]	@ 0x28
 8011ba2:	2800      	cmp	r0, #0
 8011ba4:	d0f9      	beq.n	8011b9a <rmw_init_options_init+0x9e>
 8011ba6:	2000      	movs	r0, #0
 8011ba8:	b003      	add	sp, #12
 8011baa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011bae:	b004      	add	sp, #16
 8011bb0:	4770      	bx	lr
 8011bb2:	2001      	movs	r0, #1
 8011bb4:	e7b1      	b.n	8011b1a <rmw_init_options_init+0x1e>
 8011bb6:	bf00      	nop
 8011bb8:	0801732c 	.word	0x0801732c
 8011bbc:	2000db1c 	.word	0x2000db1c
 8011bc0:	200093b8 	.word	0x200093b8
 8011bc4:	20009244 	.word	0x20009244
 8011bc8:	08016d94 	.word	0x08016d94

08011bcc <rmw_init_options_copy>:
 8011bcc:	b570      	push	{r4, r5, r6, lr}
 8011bce:	b158      	cbz	r0, 8011be8 <rmw_init_options_copy+0x1c>
 8011bd0:	460d      	mov	r5, r1
 8011bd2:	b149      	cbz	r1, 8011be8 <rmw_init_options_copy+0x1c>
 8011bd4:	4604      	mov	r4, r0
 8011bd6:	6880      	ldr	r0, [r0, #8]
 8011bd8:	b120      	cbz	r0, 8011be4 <rmw_init_options_copy+0x18>
 8011bda:	4b1e      	ldr	r3, [pc, #120]	@ (8011c54 <rmw_init_options_copy+0x88>)
 8011bdc:	6819      	ldr	r1, [r3, #0]
 8011bde:	f7ee faff 	bl	80001e0 <strcmp>
 8011be2:	bb90      	cbnz	r0, 8011c4a <rmw_init_options_copy+0x7e>
 8011be4:	68ab      	ldr	r3, [r5, #8]
 8011be6:	b113      	cbz	r3, 8011bee <rmw_init_options_copy+0x22>
 8011be8:	250b      	movs	r5, #11
 8011bea:	4628      	mov	r0, r5
 8011bec:	bd70      	pop	{r4, r5, r6, pc}
 8011bee:	4623      	mov	r3, r4
 8011bf0:	462a      	mov	r2, r5
 8011bf2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8011bf6:	f8d3 c000 	ldr.w	ip, [r3]
 8011bfa:	6858      	ldr	r0, [r3, #4]
 8011bfc:	6899      	ldr	r1, [r3, #8]
 8011bfe:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8011c02:	f8c2 e00c 	str.w	lr, [r2, #12]
 8011c06:	3310      	adds	r3, #16
 8011c08:	42b3      	cmp	r3, r6
 8011c0a:	f8c2 c000 	str.w	ip, [r2]
 8011c0e:	6050      	str	r0, [r2, #4]
 8011c10:	6091      	str	r1, [r2, #8]
 8011c12:	f102 0210 	add.w	r2, r2, #16
 8011c16:	d1ee      	bne.n	8011bf6 <rmw_init_options_copy+0x2a>
 8011c18:	6819      	ldr	r1, [r3, #0]
 8011c1a:	685b      	ldr	r3, [r3, #4]
 8011c1c:	480e      	ldr	r0, [pc, #56]	@ (8011c58 <rmw_init_options_copy+0x8c>)
 8011c1e:	6053      	str	r3, [r2, #4]
 8011c20:	6011      	str	r1, [r2, #0]
 8011c22:	f7ff fefd 	bl	8011a20 <get_memory>
 8011c26:	b198      	cbz	r0, 8011c50 <rmw_init_options_copy+0x84>
 8011c28:	6883      	ldr	r3, [r0, #8]
 8011c2a:	636b      	str	r3, [r5, #52]	@ 0x34
 8011c2c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8011c2e:	f102 0c10 	add.w	ip, r2, #16
 8011c32:	f103 0410 	add.w	r4, r3, #16
 8011c36:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c3c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011c40:	2500      	movs	r5, #0
 8011c42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011c46:	4628      	mov	r0, r5
 8011c48:	bd70      	pop	{r4, r5, r6, pc}
 8011c4a:	250c      	movs	r5, #12
 8011c4c:	4628      	mov	r0, r5
 8011c4e:	bd70      	pop	{r4, r5, r6, pc}
 8011c50:	2501      	movs	r5, #1
 8011c52:	e7ca      	b.n	8011bea <rmw_init_options_copy+0x1e>
 8011c54:	0801732c 	.word	0x0801732c
 8011c58:	2000db1c 	.word	0x2000db1c

08011c5c <rmw_init_options_fini>:
 8011c5c:	2800      	cmp	r0, #0
 8011c5e:	d03d      	beq.n	8011cdc <rmw_init_options_fini+0x80>
 8011c60:	b510      	push	{r4, lr}
 8011c62:	4604      	mov	r4, r0
 8011c64:	b08e      	sub	sp, #56	@ 0x38
 8011c66:	3020      	adds	r0, #32
 8011c68:	f7f8 feee 	bl	800aa48 <rcutils_allocator_is_valid>
 8011c6c:	b360      	cbz	r0, 8011cc8 <rmw_init_options_fini+0x6c>
 8011c6e:	68a0      	ldr	r0, [r4, #8]
 8011c70:	b120      	cbz	r0, 8011c7c <rmw_init_options_fini+0x20>
 8011c72:	4b1c      	ldr	r3, [pc, #112]	@ (8011ce4 <rmw_init_options_fini+0x88>)
 8011c74:	6819      	ldr	r1, [r3, #0]
 8011c76:	f7ee fab3 	bl	80001e0 <strcmp>
 8011c7a:	bb68      	cbnz	r0, 8011cd8 <rmw_init_options_fini+0x7c>
 8011c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8011ce8 <rmw_init_options_fini+0x8c>)
 8011c7e:	6819      	ldr	r1, [r3, #0]
 8011c80:	b331      	cbz	r1, 8011cd0 <rmw_init_options_fini+0x74>
 8011c82:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8011c84:	e001      	b.n	8011c8a <rmw_init_options_fini+0x2e>
 8011c86:	6849      	ldr	r1, [r1, #4]
 8011c88:	b311      	cbz	r1, 8011cd0 <rmw_init_options_fini+0x74>
 8011c8a:	688b      	ldr	r3, [r1, #8]
 8011c8c:	429a      	cmp	r2, r3
 8011c8e:	d1fa      	bne.n	8011c86 <rmw_init_options_fini+0x2a>
 8011c90:	4815      	ldr	r0, [pc, #84]	@ (8011ce8 <rmw_init_options_fini+0x8c>)
 8011c92:	f7ff fed5 	bl	8011a40 <put_memory>
 8011c96:	4668      	mov	r0, sp
 8011c98:	f7ff fcc2 	bl	8011620 <rmw_get_zero_initialized_init_options>
 8011c9c:	46ee      	mov	lr, sp
 8011c9e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011ca2:	46a4      	mov	ip, r4
 8011ca4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ca8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011cac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011cb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011cb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011cb8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011cbc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	b00e      	add	sp, #56	@ 0x38
 8011cc6:	bd10      	pop	{r4, pc}
 8011cc8:	230b      	movs	r3, #11
 8011cca:	4618      	mov	r0, r3
 8011ccc:	b00e      	add	sp, #56	@ 0x38
 8011cce:	bd10      	pop	{r4, pc}
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	b00e      	add	sp, #56	@ 0x38
 8011cd6:	bd10      	pop	{r4, pc}
 8011cd8:	230c      	movs	r3, #12
 8011cda:	e7f2      	b.n	8011cc2 <rmw_init_options_fini+0x66>
 8011cdc:	230b      	movs	r3, #11
 8011cde:	4618      	mov	r0, r3
 8011ce0:	4770      	bx	lr
 8011ce2:	bf00      	nop
 8011ce4:	0801732c 	.word	0x0801732c
 8011ce8:	2000db1c 	.word	0x2000db1c

08011cec <rmw_init>:
 8011cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011cf0:	b083      	sub	sp, #12
 8011cf2:	2800      	cmp	r0, #0
 8011cf4:	f000 80d3 	beq.w	8011e9e <rmw_init+0x1b2>
 8011cf8:	460e      	mov	r6, r1
 8011cfa:	2900      	cmp	r1, #0
 8011cfc:	f000 80cf 	beq.w	8011e9e <rmw_init+0x1b2>
 8011d00:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011d02:	4605      	mov	r5, r0
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	f000 80ca 	beq.w	8011e9e <rmw_init+0x1b2>
 8011d0a:	4b78      	ldr	r3, [pc, #480]	@ (8011eec <rmw_init+0x200>)
 8011d0c:	6880      	ldr	r0, [r0, #8]
 8011d0e:	681f      	ldr	r7, [r3, #0]
 8011d10:	b128      	cbz	r0, 8011d1e <rmw_init+0x32>
 8011d12:	4639      	mov	r1, r7
 8011d14:	f7ee fa64 	bl	80001e0 <strcmp>
 8011d18:	2800      	cmp	r0, #0
 8011d1a:	f040 80ca 	bne.w	8011eb2 <rmw_init+0x1c6>
 8011d1e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011d22:	4c73      	ldr	r4, [pc, #460]	@ (8011ef0 <rmw_init+0x204>)
 8011d24:	4973      	ldr	r1, [pc, #460]	@ (8011ef4 <rmw_init+0x208>)
 8011d26:	4874      	ldr	r0, [pc, #464]	@ (8011ef8 <rmw_init+0x20c>)
 8011d28:	60b7      	str	r7, [r6, #8]
 8011d2a:	e9c6 2300 	strd	r2, r3, [r6]
 8011d2e:	68eb      	ldr	r3, [r5, #12]
 8011d30:	64b3      	str	r3, [r6, #72]	@ 0x48
 8011d32:	2201      	movs	r2, #1
 8011d34:	f7f9 f976 	bl	800b024 <rmw_uxrce_init_session_memory>
 8011d38:	4620      	mov	r0, r4
 8011d3a:	4970      	ldr	r1, [pc, #448]	@ (8011efc <rmw_init+0x210>)
 8011d3c:	2204      	movs	r2, #4
 8011d3e:	f7f9 f9b1 	bl	800b0a4 <rmw_uxrce_init_static_input_buffer_memory>
 8011d42:	f04f 0800 	mov.w	r8, #0
 8011d46:	486c      	ldr	r0, [pc, #432]	@ (8011ef8 <rmw_init+0x20c>)
 8011d48:	f884 800d 	strb.w	r8, [r4, #13]
 8011d4c:	f7ff fe68 	bl	8011a20 <get_memory>
 8011d50:	2800      	cmp	r0, #0
 8011d52:	f000 80a9 	beq.w	8011ea8 <rmw_init+0x1bc>
 8011d56:	6884      	ldr	r4, [r0, #8]
 8011d58:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8011d5a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8011d5c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8011d60:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8011d64:	9101      	str	r1, [sp, #4]
 8011d66:	6a00      	ldr	r0, [r0, #32]
 8011d68:	9000      	str	r0, [sp, #0]
 8011d6a:	f104 0910 	add.w	r9, r4, #16
 8011d6e:	4661      	mov	r1, ip
 8011d70:	4648      	mov	r0, r9
 8011d72:	f001 f9bf 	bl	80130f4 <uxr_set_custom_transport_callbacks>
 8011d76:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8011d7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011d7e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8011d82:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8011d86:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8011d8a:	495d      	ldr	r1, [pc, #372]	@ (8011f00 <rmw_init+0x214>)
 8011d8c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8011d90:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8011d94:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8011d98:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8011d9c:	4859      	ldr	r0, [pc, #356]	@ (8011f04 <rmw_init+0x218>)
 8011d9e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8011da2:	2201      	movs	r2, #1
 8011da4:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8011da6:	f7f9 f91d 	bl	800afe4 <rmw_uxrce_init_node_memory>
 8011daa:	4957      	ldr	r1, [pc, #348]	@ (8011f08 <rmw_init+0x21c>)
 8011dac:	4857      	ldr	r0, [pc, #348]	@ (8011f0c <rmw_init+0x220>)
 8011dae:	2205      	movs	r2, #5
 8011db0:	f7f9 f8f8 	bl	800afa4 <rmw_uxrce_init_subscription_memory>
 8011db4:	4956      	ldr	r1, [pc, #344]	@ (8011f10 <rmw_init+0x224>)
 8011db6:	4857      	ldr	r0, [pc, #348]	@ (8011f14 <rmw_init+0x228>)
 8011db8:	220a      	movs	r2, #10
 8011dba:	f7f9 f8d3 	bl	800af64 <rmw_uxrce_init_publisher_memory>
 8011dbe:	4956      	ldr	r1, [pc, #344]	@ (8011f18 <rmw_init+0x22c>)
 8011dc0:	4856      	ldr	r0, [pc, #344]	@ (8011f1c <rmw_init+0x230>)
 8011dc2:	2201      	movs	r2, #1
 8011dc4:	f7f9 f88e 	bl	800aee4 <rmw_uxrce_init_service_memory>
 8011dc8:	4955      	ldr	r1, [pc, #340]	@ (8011f20 <rmw_init+0x234>)
 8011dca:	4856      	ldr	r0, [pc, #344]	@ (8011f24 <rmw_init+0x238>)
 8011dcc:	2201      	movs	r2, #1
 8011dce:	f7f9 f8a9 	bl	800af24 <rmw_uxrce_init_client_memory>
 8011dd2:	4955      	ldr	r1, [pc, #340]	@ (8011f28 <rmw_init+0x23c>)
 8011dd4:	4855      	ldr	r0, [pc, #340]	@ (8011f2c <rmw_init+0x240>)
 8011dd6:	220f      	movs	r2, #15
 8011dd8:	f7f9 f944 	bl	800b064 <rmw_uxrce_init_topic_memory>
 8011ddc:	4954      	ldr	r1, [pc, #336]	@ (8011f30 <rmw_init+0x244>)
 8011dde:	4855      	ldr	r0, [pc, #340]	@ (8011f34 <rmw_init+0x248>)
 8011de0:	2203      	movs	r2, #3
 8011de2:	f7f9 f97f 	bl	800b0e4 <rmw_uxrce_init_init_options_impl_memory>
 8011de6:	4954      	ldr	r1, [pc, #336]	@ (8011f38 <rmw_init+0x24c>)
 8011de8:	4854      	ldr	r0, [pc, #336]	@ (8011f3c <rmw_init+0x250>)
 8011dea:	2204      	movs	r2, #4
 8011dec:	f7f9 f99a 	bl	800b124 <rmw_uxrce_init_wait_set_memory>
 8011df0:	4953      	ldr	r1, [pc, #332]	@ (8011f40 <rmw_init+0x254>)
 8011df2:	4854      	ldr	r0, [pc, #336]	@ (8011f44 <rmw_init+0x258>)
 8011df4:	2204      	movs	r2, #4
 8011df6:	f7f9 f9b5 	bl	800b164 <rmw_uxrce_init_guard_condition_memory>
 8011dfa:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8011dfc:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8011dfe:	4642      	mov	r2, r8
 8011e00:	f000 fd9e 	bl	8012940 <rmw_uxrce_transport_init>
 8011e04:	4607      	mov	r7, r0
 8011e06:	2800      	cmp	r0, #0
 8011e08:	d158      	bne.n	8011ebc <rmw_init+0x1d0>
 8011e0a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8011e0c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8011e10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011e12:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8011e16:	4628      	mov	r0, r5
 8011e18:	f7f9 ff52 	bl	800bcc0 <uxr_init_session>
 8011e1c:	494a      	ldr	r1, [pc, #296]	@ (8011f48 <rmw_init+0x25c>)
 8011e1e:	4622      	mov	r2, r4
 8011e20:	4628      	mov	r0, r5
 8011e22:	f7f9 ff71 	bl	800bd08 <uxr_set_topic_callback>
 8011e26:	4949      	ldr	r1, [pc, #292]	@ (8011f4c <rmw_init+0x260>)
 8011e28:	463a      	mov	r2, r7
 8011e2a:	4628      	mov	r0, r5
 8011e2c:	f7f9 ff68 	bl	800bd00 <uxr_set_status_callback>
 8011e30:	4947      	ldr	r1, [pc, #284]	@ (8011f50 <rmw_init+0x264>)
 8011e32:	463a      	mov	r2, r7
 8011e34:	4628      	mov	r0, r5
 8011e36:	f7f9 ff6b 	bl	800bd10 <uxr_set_request_callback>
 8011e3a:	4946      	ldr	r1, [pc, #280]	@ (8011f54 <rmw_init+0x268>)
 8011e3c:	463a      	mov	r2, r7
 8011e3e:	4628      	mov	r0, r5
 8011e40:	f7f9 ff6a 	bl	800bd18 <uxr_set_reply_callback>
 8011e44:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8011e48:	2304      	movs	r3, #4
 8011e4a:	0092      	lsls	r2, r2, #2
 8011e4c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8011e50:	4628      	mov	r0, r5
 8011e52:	f7f9 ff9f 	bl	800bd94 <uxr_create_input_reliable_stream>
 8011e56:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8011e5a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8011e5e:	0092      	lsls	r2, r2, #2
 8011e60:	2304      	movs	r3, #4
 8011e62:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8011e66:	4628      	mov	r0, r5
 8011e68:	f7f9 ff6c 	bl	800bd44 <uxr_create_output_reliable_stream>
 8011e6c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8011e70:	4628      	mov	r0, r5
 8011e72:	f7f9 ff89 	bl	800bd88 <uxr_create_input_best_effort_stream>
 8011e76:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8011e7a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8011e7e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8011e82:	3114      	adds	r1, #20
 8011e84:	4628      	mov	r0, r5
 8011e86:	f7f9 ff4b 	bl	800bd20 <uxr_create_output_best_effort_stream>
 8011e8a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8011e8e:	4628      	mov	r0, r5
 8011e90:	f7fa fcd6 	bl	800c840 <uxr_create_session>
 8011e94:	b1f8      	cbz	r0, 8011ed6 <rmw_init+0x1ea>
 8011e96:	4638      	mov	r0, r7
 8011e98:	b003      	add	sp, #12
 8011e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e9e:	270b      	movs	r7, #11
 8011ea0:	4638      	mov	r0, r7
 8011ea2:	b003      	add	sp, #12
 8011ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ea8:	2701      	movs	r7, #1
 8011eaa:	4638      	mov	r0, r7
 8011eac:	b003      	add	sp, #12
 8011eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011eb2:	270c      	movs	r7, #12
 8011eb4:	4638      	mov	r0, r7
 8011eb6:	b003      	add	sp, #12
 8011eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ebc:	4648      	mov	r0, r9
 8011ebe:	f001 f95b 	bl	8013178 <uxr_close_custom_transport>
 8011ec2:	480d      	ldr	r0, [pc, #52]	@ (8011ef8 <rmw_init+0x20c>)
 8011ec4:	4621      	mov	r1, r4
 8011ec6:	f7ff fdbb 	bl	8011a40 <put_memory>
 8011eca:	4638      	mov	r0, r7
 8011ecc:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8011ed0:	b003      	add	sp, #12
 8011ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ed6:	4648      	mov	r0, r9
 8011ed8:	f001 f94e 	bl	8013178 <uxr_close_custom_transport>
 8011edc:	4806      	ldr	r0, [pc, #24]	@ (8011ef8 <rmw_init+0x20c>)
 8011ede:	4621      	mov	r1, r4
 8011ee0:	f7ff fdae 	bl	8011a40 <put_memory>
 8011ee4:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8011ee6:	2701      	movs	r7, #1
 8011ee8:	e7d5      	b.n	8011e96 <rmw_init+0x1aa>
 8011eea:	bf00      	nop
 8011eec:	0801732c 	.word	0x0801732c
 8011ef0:	2000db6c 	.word	0x2000db6c
 8011ef4:	20009e18 	.word	0x20009e18
 8011ef8:	2000db5c 	.word	0x2000db5c
 8011efc:	2000b3c0 	.word	0x2000b3c0
 8011f00:	2000943c 	.word	0x2000943c
 8011f04:	2000db2c 	.word	0x2000db2c
 8011f08:	2000d4c0 	.word	0x2000d4c0
 8011f0c:	2000db7c 	.word	0x2000db7c
 8011f10:	200094e0 	.word	0x200094e0
 8011f14:	2000db3c 	.word	0x2000db3c
 8011f18:	20009d50 	.word	0x20009d50
 8011f1c:	2000db4c 	.word	0x2000db4c
 8011f20:	20009270 	.word	0x20009270
 8011f24:	20009260 	.word	0x20009260
 8011f28:	2000d8f8 	.word	0x2000d8f8
 8011f2c:	2000db8c 	.word	0x2000db8c
 8011f30:	200093b8 	.word	0x200093b8
 8011f34:	2000db1c 	.word	0x2000db1c
 8011f38:	2000da9c 	.word	0x2000da9c
 8011f3c:	2000db9c 	.word	0x2000db9c
 8011f40:	20009338 	.word	0x20009338
 8011f44:	2000db0c 	.word	0x2000db0c
 8011f48:	08014e65 	.word	0x08014e65
 8011f4c:	08014e5d 	.word	0x08014e5d
 8011f50:	08014efd 	.word	0x08014efd
 8011f54:	08014f99 	.word	0x08014f99

08011f58 <rmw_context_fini>:
 8011f58:	4b17      	ldr	r3, [pc, #92]	@ (8011fb8 <rmw_context_fini+0x60>)
 8011f5a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8011f5c:	b570      	push	{r4, r5, r6, lr}
 8011f5e:	681c      	ldr	r4, [r3, #0]
 8011f60:	4605      	mov	r5, r0
 8011f62:	b334      	cbz	r4, 8011fb2 <rmw_context_fini+0x5a>
 8011f64:	2600      	movs	r6, #0
 8011f66:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8011f6a:	6902      	ldr	r2, [r0, #16]
 8011f6c:	428a      	cmp	r2, r1
 8011f6e:	d018      	beq.n	8011fa2 <rmw_context_fini+0x4a>
 8011f70:	2c00      	cmp	r4, #0
 8011f72:	d1f8      	bne.n	8011f66 <rmw_context_fini+0xe>
 8011f74:	b189      	cbz	r1, 8011f9a <rmw_context_fini+0x42>
 8011f76:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8011f7a:	789b      	ldrb	r3, [r3, #2]
 8011f7c:	2b01      	cmp	r3, #1
 8011f7e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8011f82:	bf14      	ite	ne
 8011f84:	210a      	movne	r1, #10
 8011f86:	2100      	moveq	r1, #0
 8011f88:	f7fa fc32 	bl	800c7f0 <uxr_delete_session_retries>
 8011f8c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8011f8e:	f7f9 f909 	bl	800b1a4 <rmw_uxrce_fini_session_memory>
 8011f92:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8011f94:	3010      	adds	r0, #16
 8011f96:	f001 f8ef 	bl	8013178 <uxr_close_custom_transport>
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8011f9e:	4630      	mov	r0, r6
 8011fa0:	bd70      	pop	{r4, r5, r6, pc}
 8011fa2:	3018      	adds	r0, #24
 8011fa4:	f000 f90e 	bl	80121c4 <rmw_destroy_node>
 8011fa8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8011faa:	4606      	mov	r6, r0
 8011fac:	2c00      	cmp	r4, #0
 8011fae:	d1da      	bne.n	8011f66 <rmw_context_fini+0xe>
 8011fb0:	e7e0      	b.n	8011f74 <rmw_context_fini+0x1c>
 8011fb2:	4626      	mov	r6, r4
 8011fb4:	e7de      	b.n	8011f74 <rmw_context_fini+0x1c>
 8011fb6:	bf00      	nop
 8011fb8:	2000db2c 	.word	0x2000db2c

08011fbc <create_topic>:
 8011fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fc0:	4605      	mov	r5, r0
 8011fc2:	b084      	sub	sp, #16
 8011fc4:	4822      	ldr	r0, [pc, #136]	@ (8012050 <create_topic+0x94>)
 8011fc6:	460f      	mov	r7, r1
 8011fc8:	4616      	mov	r6, r2
 8011fca:	f7ff fd29 	bl	8011a20 <get_memory>
 8011fce:	4604      	mov	r4, r0
 8011fd0:	2800      	cmp	r0, #0
 8011fd2:	d039      	beq.n	8012048 <create_topic+0x8c>
 8011fd4:	692b      	ldr	r3, [r5, #16]
 8011fd6:	6884      	ldr	r4, [r0, #8]
 8011fd8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8012058 <create_topic+0x9c>
 8011fdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011fe0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8011fe4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8011fe8:	1c42      	adds	r2, r0, #1
 8011fea:	2102      	movs	r1, #2
 8011fec:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8011ff0:	f7f9 fda8 	bl	800bb44 <uxr_object_id>
 8011ff4:	223c      	movs	r2, #60	@ 0x3c
 8011ff6:	6120      	str	r0, [r4, #16]
 8011ff8:	4641      	mov	r1, r8
 8011ffa:	4638      	mov	r0, r7
 8011ffc:	f7f9 fab0 	bl	800b560 <generate_topic_name>
 8012000:	b1f0      	cbz	r0, 8012040 <create_topic+0x84>
 8012002:	4f14      	ldr	r7, [pc, #80]	@ (8012054 <create_topic+0x98>)
 8012004:	4630      	mov	r0, r6
 8012006:	2264      	movs	r2, #100	@ 0x64
 8012008:	4639      	mov	r1, r7
 801200a:	f7f9 fa79 	bl	800b500 <generate_type_name>
 801200e:	b1b8      	cbz	r0, 8012040 <create_topic+0x84>
 8012010:	6928      	ldr	r0, [r5, #16]
 8012012:	2306      	movs	r3, #6
 8012014:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8012018:	f8cd 8000 	str.w	r8, [sp]
 801201c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8012020:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012024:	6811      	ldr	r1, [r2, #0]
 8012026:	696b      	ldr	r3, [r5, #20]
 8012028:	6922      	ldr	r2, [r4, #16]
 801202a:	f7f9 fc07 	bl	800b83c <uxr_buffer_create_topic_bin>
 801202e:	4602      	mov	r2, r0
 8012030:	6928      	ldr	r0, [r5, #16]
 8012032:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8012036:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801203a:	f7f9 fa2b 	bl	800b494 <run_xrce_session>
 801203e:	b918      	cbnz	r0, 8012048 <create_topic+0x8c>
 8012040:	4620      	mov	r0, r4
 8012042:	f7f9 f925 	bl	800b290 <rmw_uxrce_fini_topic_memory>
 8012046:	2400      	movs	r4, #0
 8012048:	4620      	mov	r0, r4
 801204a:	b004      	add	sp, #16
 801204c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012050:	2000db8c 	.word	0x2000db8c
 8012054:	2000dc78 	.word	0x2000dc78
 8012058:	2000dc3c 	.word	0x2000dc3c

0801205c <destroy_topic>:
 801205c:	b538      	push	{r3, r4, r5, lr}
 801205e:	6985      	ldr	r5, [r0, #24]
 8012060:	b1d5      	cbz	r5, 8012098 <destroy_topic+0x3c>
 8012062:	4604      	mov	r4, r0
 8012064:	6928      	ldr	r0, [r5, #16]
 8012066:	6922      	ldr	r2, [r4, #16]
 8012068:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801206c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012070:	6819      	ldr	r1, [r3, #0]
 8012072:	f7f9 fb65 	bl	800b740 <uxr_buffer_delete_entity>
 8012076:	4602      	mov	r2, r0
 8012078:	6928      	ldr	r0, [r5, #16]
 801207a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801207e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012082:	f7f9 fa07 	bl	800b494 <run_xrce_session>
 8012086:	2800      	cmp	r0, #0
 8012088:	4620      	mov	r0, r4
 801208a:	bf14      	ite	ne
 801208c:	2400      	movne	r4, #0
 801208e:	2402      	moveq	r4, #2
 8012090:	f7f9 f8fe 	bl	800b290 <rmw_uxrce_fini_topic_memory>
 8012094:	4620      	mov	r0, r4
 8012096:	bd38      	pop	{r3, r4, r5, pc}
 8012098:	2401      	movs	r4, #1
 801209a:	4620      	mov	r0, r4
 801209c:	bd38      	pop	{r3, r4, r5, pc}
 801209e:	bf00      	nop

080120a0 <create_node>:
 80120a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80120a4:	b083      	sub	sp, #12
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d05f      	beq.n	801216a <create_node+0xca>
 80120aa:	4606      	mov	r6, r0
 80120ac:	4835      	ldr	r0, [pc, #212]	@ (8012184 <create_node+0xe4>)
 80120ae:	460f      	mov	r7, r1
 80120b0:	4690      	mov	r8, r2
 80120b2:	461d      	mov	r5, r3
 80120b4:	f7ff fcb4 	bl	8011a20 <get_memory>
 80120b8:	2800      	cmp	r0, #0
 80120ba:	d056      	beq.n	801216a <create_node+0xca>
 80120bc:	6884      	ldr	r4, [r0, #8]
 80120be:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80120c0:	6123      	str	r3, [r4, #16]
 80120c2:	f7ff fd15 	bl	8011af0 <rmw_get_implementation_identifier>
 80120c6:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80120ca:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80120ce:	f8c4 9020 	str.w	r9, [r4, #32]
 80120d2:	4630      	mov	r0, r6
 80120d4:	f7ee f88e 	bl	80001f4 <strlen>
 80120d8:	1c42      	adds	r2, r0, #1
 80120da:	2a3c      	cmp	r2, #60	@ 0x3c
 80120dc:	f104 0518 	add.w	r5, r4, #24
 80120e0:	d840      	bhi.n	8012164 <create_node+0xc4>
 80120e2:	4648      	mov	r0, r9
 80120e4:	4631      	mov	r1, r6
 80120e6:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80120ea:	f003 fc7a 	bl	80159e2 <memcpy>
 80120ee:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 80120f2:	4638      	mov	r0, r7
 80120f4:	f7ee f87e 	bl	80001f4 <strlen>
 80120f8:	1c42      	adds	r2, r0, #1
 80120fa:	2a3c      	cmp	r2, #60	@ 0x3c
 80120fc:	d832      	bhi.n	8012164 <create_node+0xc4>
 80120fe:	4639      	mov	r1, r7
 8012100:	4648      	mov	r0, r9
 8012102:	f003 fc6e 	bl	80159e2 <memcpy>
 8012106:	6923      	ldr	r3, [r4, #16]
 8012108:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801210c:	2101      	movs	r1, #1
 801210e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8012112:	1842      	adds	r2, r0, r1
 8012114:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8012118:	f7f9 fd14 	bl	800bb44 <uxr_object_id>
 801211c:	6160      	str	r0, [r4, #20]
 801211e:	783b      	ldrb	r3, [r7, #0]
 8012120:	2b2f      	cmp	r3, #47	@ 0x2f
 8012122:	d127      	bne.n	8012174 <create_node+0xd4>
 8012124:	787b      	ldrb	r3, [r7, #1]
 8012126:	bb2b      	cbnz	r3, 8012174 <create_node+0xd4>
 8012128:	4a17      	ldr	r2, [pc, #92]	@ (8012188 <create_node+0xe8>)
 801212a:	4818      	ldr	r0, [pc, #96]	@ (801218c <create_node+0xec>)
 801212c:	4633      	mov	r3, r6
 801212e:	213c      	movs	r1, #60	@ 0x3c
 8012130:	f003 fab4 	bl	801569c <sniprintf>
 8012134:	6920      	ldr	r0, [r4, #16]
 8012136:	4915      	ldr	r1, [pc, #84]	@ (801218c <create_node+0xec>)
 8012138:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801213c:	9100      	str	r1, [sp, #0]
 801213e:	2106      	movs	r1, #6
 8012140:	9101      	str	r1, [sp, #4]
 8012142:	6811      	ldr	r1, [r2, #0]
 8012144:	6962      	ldr	r2, [r4, #20]
 8012146:	fa1f f388 	uxth.w	r3, r8
 801214a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801214e:	f7f9 fb43 	bl	800b7d8 <uxr_buffer_create_participant_bin>
 8012152:	4602      	mov	r2, r0
 8012154:	6920      	ldr	r0, [r4, #16]
 8012156:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801215a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801215e:	f7f9 f999 	bl	800b494 <run_xrce_session>
 8012162:	b918      	cbnz	r0, 801216c <create_node+0xcc>
 8012164:	4628      	mov	r0, r5
 8012166:	f7f9 f823 	bl	800b1b0 <rmw_uxrce_fini_node_memory>
 801216a:	2500      	movs	r5, #0
 801216c:	4628      	mov	r0, r5
 801216e:	b003      	add	sp, #12
 8012170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012174:	4a06      	ldr	r2, [pc, #24]	@ (8012190 <create_node+0xf0>)
 8012176:	9600      	str	r6, [sp, #0]
 8012178:	463b      	mov	r3, r7
 801217a:	213c      	movs	r1, #60	@ 0x3c
 801217c:	4803      	ldr	r0, [pc, #12]	@ (801218c <create_node+0xec>)
 801217e:	f003 fa8d 	bl	801569c <sniprintf>
 8012182:	e7d7      	b.n	8012134 <create_node+0x94>
 8012184:	2000db2c 	.word	0x2000db2c
 8012188:	08016c18 	.word	0x08016c18
 801218c:	2000dcdc 	.word	0x2000dcdc
 8012190:	08016d9c 	.word	0x08016d9c

08012194 <rmw_create_node>:
 8012194:	b199      	cbz	r1, 80121be <rmw_create_node+0x2a>
 8012196:	780b      	ldrb	r3, [r1, #0]
 8012198:	468c      	mov	ip, r1
 801219a:	b183      	cbz	r3, 80121be <rmw_create_node+0x2a>
 801219c:	b410      	push	{r4}
 801219e:	4614      	mov	r4, r2
 80121a0:	b14a      	cbz	r2, 80121b6 <rmw_create_node+0x22>
 80121a2:	7813      	ldrb	r3, [r2, #0]
 80121a4:	b13b      	cbz	r3, 80121b6 <rmw_create_node+0x22>
 80121a6:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80121a8:	4603      	mov	r3, r0
 80121aa:	4621      	mov	r1, r4
 80121ac:	4660      	mov	r0, ip
 80121ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121b2:	f7ff bf75 	b.w	80120a0 <create_node>
 80121b6:	2000      	movs	r0, #0
 80121b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121bc:	4770      	bx	lr
 80121be:	2000      	movs	r0, #0
 80121c0:	4770      	bx	lr
 80121c2:	bf00      	nop

080121c4 <rmw_destroy_node>:
 80121c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121c6:	b328      	cbz	r0, 8012214 <rmw_destroy_node+0x50>
 80121c8:	4607      	mov	r7, r0
 80121ca:	6800      	ldr	r0, [r0, #0]
 80121cc:	b120      	cbz	r0, 80121d8 <rmw_destroy_node+0x14>
 80121ce:	4b36      	ldr	r3, [pc, #216]	@ (80122a8 <rmw_destroy_node+0xe4>)
 80121d0:	6819      	ldr	r1, [r3, #0]
 80121d2:	f7ee f805 	bl	80001e0 <strcmp>
 80121d6:	b9e8      	cbnz	r0, 8012214 <rmw_destroy_node+0x50>
 80121d8:	687d      	ldr	r5, [r7, #4]
 80121da:	b1dd      	cbz	r5, 8012214 <rmw_destroy_node+0x50>
 80121dc:	4b33      	ldr	r3, [pc, #204]	@ (80122ac <rmw_destroy_node+0xe8>)
 80121de:	681c      	ldr	r4, [r3, #0]
 80121e0:	2c00      	cmp	r4, #0
 80121e2:	d05f      	beq.n	80122a4 <rmw_destroy_node+0xe0>
 80121e4:	2600      	movs	r6, #0
 80121e6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80121ea:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80121ee:	429d      	cmp	r5, r3
 80121f0:	d013      	beq.n	801221a <rmw_destroy_node+0x56>
 80121f2:	2c00      	cmp	r4, #0
 80121f4:	d1f7      	bne.n	80121e6 <rmw_destroy_node+0x22>
 80121f6:	4b2e      	ldr	r3, [pc, #184]	@ (80122b0 <rmw_destroy_node+0xec>)
 80121f8:	681c      	ldr	r4, [r3, #0]
 80121fa:	b1c4      	cbz	r4, 801222e <rmw_destroy_node+0x6a>
 80121fc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012200:	6a0b      	ldr	r3, [r1, #32]
 8012202:	429d      	cmp	r5, r3
 8012204:	d1f9      	bne.n	80121fa <rmw_destroy_node+0x36>
 8012206:	317c      	adds	r1, #124	@ 0x7c
 8012208:	4638      	mov	r0, r7
 801220a:	f000 fae5 	bl	80127d8 <rmw_destroy_subscription>
 801220e:	2801      	cmp	r0, #1
 8012210:	4606      	mov	r6, r0
 8012212:	d1f2      	bne.n	80121fa <rmw_destroy_node+0x36>
 8012214:	2601      	movs	r6, #1
 8012216:	4630      	mov	r0, r6
 8012218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801221a:	3184      	adds	r1, #132	@ 0x84
 801221c:	4638      	mov	r0, r7
 801221e:	f7f8 fe0f 	bl	800ae40 <rmw_destroy_publisher>
 8012222:	2801      	cmp	r0, #1
 8012224:	4606      	mov	r6, r0
 8012226:	d0f5      	beq.n	8012214 <rmw_destroy_node+0x50>
 8012228:	2c00      	cmp	r4, #0
 801222a:	d1dc      	bne.n	80121e6 <rmw_destroy_node+0x22>
 801222c:	e7e3      	b.n	80121f6 <rmw_destroy_node+0x32>
 801222e:	4b21      	ldr	r3, [pc, #132]	@ (80122b4 <rmw_destroy_node+0xf0>)
 8012230:	681c      	ldr	r4, [r3, #0]
 8012232:	b16c      	cbz	r4, 8012250 <rmw_destroy_node+0x8c>
 8012234:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012238:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801223a:	429d      	cmp	r5, r3
 801223c:	d1f9      	bne.n	8012232 <rmw_destroy_node+0x6e>
 801223e:	317c      	adds	r1, #124	@ 0x7c
 8012240:	4638      	mov	r0, r7
 8012242:	f000 f993 	bl	801256c <rmw_destroy_service>
 8012246:	2801      	cmp	r0, #1
 8012248:	4606      	mov	r6, r0
 801224a:	d0e3      	beq.n	8012214 <rmw_destroy_node+0x50>
 801224c:	2c00      	cmp	r4, #0
 801224e:	d1f1      	bne.n	8012234 <rmw_destroy_node+0x70>
 8012250:	4b19      	ldr	r3, [pc, #100]	@ (80122b8 <rmw_destroy_node+0xf4>)
 8012252:	681c      	ldr	r4, [r3, #0]
 8012254:	b16c      	cbz	r4, 8012272 <rmw_destroy_node+0xae>
 8012256:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801225a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801225c:	429d      	cmp	r5, r3
 801225e:	d1f9      	bne.n	8012254 <rmw_destroy_node+0x90>
 8012260:	317c      	adds	r1, #124	@ 0x7c
 8012262:	4638      	mov	r0, r7
 8012264:	f7ff fc00 	bl	8011a68 <rmw_destroy_client>
 8012268:	2801      	cmp	r0, #1
 801226a:	4606      	mov	r6, r0
 801226c:	d0d2      	beq.n	8012214 <rmw_destroy_node+0x50>
 801226e:	2c00      	cmp	r4, #0
 8012270:	d1f1      	bne.n	8012256 <rmw_destroy_node+0x92>
 8012272:	6928      	ldr	r0, [r5, #16]
 8012274:	696a      	ldr	r2, [r5, #20]
 8012276:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801227a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801227e:	6819      	ldr	r1, [r3, #0]
 8012280:	f7f9 fa5e 	bl	800b740 <uxr_buffer_delete_entity>
 8012284:	4602      	mov	r2, r0
 8012286:	6928      	ldr	r0, [r5, #16]
 8012288:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801228c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012290:	f7f9 f900 	bl	800b494 <run_xrce_session>
 8012294:	2800      	cmp	r0, #0
 8012296:	bf08      	it	eq
 8012298:	2602      	moveq	r6, #2
 801229a:	4638      	mov	r0, r7
 801229c:	f7f8 ff88 	bl	800b1b0 <rmw_uxrce_fini_node_memory>
 80122a0:	4630      	mov	r0, r6
 80122a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122a4:	4626      	mov	r6, r4
 80122a6:	e7a6      	b.n	80121f6 <rmw_destroy_node+0x32>
 80122a8:	0801732c 	.word	0x0801732c
 80122ac:	2000db3c 	.word	0x2000db3c
 80122b0:	2000db7c 	.word	0x2000db7c
 80122b4:	2000db4c 	.word	0x2000db4c
 80122b8:	20009260 	.word	0x20009260

080122bc <rmw_node_get_graph_guard_condition>:
 80122bc:	6843      	ldr	r3, [r0, #4]
 80122be:	6918      	ldr	r0, [r3, #16]
 80122c0:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80122c4:	4770      	bx	lr
 80122c6:	bf00      	nop

080122c8 <rmw_send_request>:
 80122c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80122cc:	4604      	mov	r4, r0
 80122ce:	6800      	ldr	r0, [r0, #0]
 80122d0:	b08b      	sub	sp, #44	@ 0x2c
 80122d2:	460e      	mov	r6, r1
 80122d4:	4615      	mov	r5, r2
 80122d6:	b128      	cbz	r0, 80122e4 <rmw_send_request+0x1c>
 80122d8:	4b21      	ldr	r3, [pc, #132]	@ (8012360 <rmw_send_request+0x98>)
 80122da:	6819      	ldr	r1, [r3, #0]
 80122dc:	f7ed ff80 	bl	80001e0 <strcmp>
 80122e0:	2800      	cmp	r0, #0
 80122e2:	d139      	bne.n	8012358 <rmw_send_request+0x90>
 80122e4:	6864      	ldr	r4, [r4, #4]
 80122e6:	6963      	ldr	r3, [r4, #20]
 80122e8:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80122ec:	689b      	ldr	r3, [r3, #8]
 80122ee:	4798      	blx	r3
 80122f0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80122f4:	4630      	mov	r0, r6
 80122f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80122fa:	4798      	blx	r3
 80122fc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012300:	9000      	str	r0, [sp, #0]
 8012302:	6922      	ldr	r2, [r4, #16]
 8012304:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8012306:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801230a:	ab02      	add	r3, sp, #8
 801230c:	f7fa ff14 	bl	800d138 <uxr_prepare_output_stream>
 8012310:	2700      	movs	r7, #0
 8012312:	6028      	str	r0, [r5, #0]
 8012314:	606f      	str	r7, [r5, #4]
 8012316:	b198      	cbz	r0, 8012340 <rmw_send_request+0x78>
 8012318:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801231c:	a902      	add	r1, sp, #8
 801231e:	4630      	mov	r0, r6
 8012320:	4798      	blx	r3
 8012322:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8012326:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801232a:	2b01      	cmp	r3, #1
 801232c:	d00c      	beq.n	8012348 <rmw_send_request+0x80>
 801232e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8012330:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012334:	f7fa f914 	bl	800c560 <uxr_run_session_until_confirm_delivery>
 8012338:	4638      	mov	r0, r7
 801233a:	b00b      	add	sp, #44	@ 0x2c
 801233c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012340:	2001      	movs	r0, #1
 8012342:	b00b      	add	sp, #44	@ 0x2c
 8012344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012348:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801234c:	f7f9 fd48 	bl	800bde0 <uxr_flash_output_streams>
 8012350:	4638      	mov	r0, r7
 8012352:	b00b      	add	sp, #44	@ 0x2c
 8012354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012358:	200c      	movs	r0, #12
 801235a:	b00b      	add	sp, #44	@ 0x2c
 801235c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012360:	0801732c 	.word	0x0801732c

08012364 <rmw_take_request>:
 8012364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012368:	4605      	mov	r5, r0
 801236a:	6800      	ldr	r0, [r0, #0]
 801236c:	b089      	sub	sp, #36	@ 0x24
 801236e:	460c      	mov	r4, r1
 8012370:	4690      	mov	r8, r2
 8012372:	461e      	mov	r6, r3
 8012374:	b128      	cbz	r0, 8012382 <rmw_take_request+0x1e>
 8012376:	4b28      	ldr	r3, [pc, #160]	@ (8012418 <rmw_take_request+0xb4>)
 8012378:	6819      	ldr	r1, [r3, #0]
 801237a:	f7ed ff31 	bl	80001e0 <strcmp>
 801237e:	2800      	cmp	r0, #0
 8012380:	d146      	bne.n	8012410 <rmw_take_request+0xac>
 8012382:	b10e      	cbz	r6, 8012388 <rmw_take_request+0x24>
 8012384:	2300      	movs	r3, #0
 8012386:	7033      	strb	r3, [r6, #0]
 8012388:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801238c:	f7f9 f804 	bl	800b398 <rmw_uxrce_clean_expired_static_input_buffer>
 8012390:	4648      	mov	r0, r9
 8012392:	f7f8 ffd9 	bl	800b348 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012396:	4607      	mov	r7, r0
 8012398:	b3b0      	cbz	r0, 8012408 <rmw_take_request+0xa4>
 801239a:	6885      	ldr	r5, [r0, #8]
 801239c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80123a0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80123a4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80123a8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80123ac:	7423      	strb	r3, [r4, #16]
 80123ae:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80123b2:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80123b6:	74e2      	strb	r2, [r4, #19]
 80123b8:	f8a4 3011 	strh.w	r3, [r4, #17]
 80123bc:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80123c0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80123c4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80123c8:	61e1      	str	r1, [r4, #28]
 80123ca:	6162      	str	r2, [r4, #20]
 80123cc:	61a3      	str	r3, [r4, #24]
 80123ce:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80123d2:	689b      	ldr	r3, [r3, #8]
 80123d4:	4798      	blx	r3
 80123d6:	6844      	ldr	r4, [r0, #4]
 80123d8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80123dc:	f105 0110 	add.w	r1, r5, #16
 80123e0:	4668      	mov	r0, sp
 80123e2:	f7f7 fa65 	bl	80098b0 <ucdr_init_buffer>
 80123e6:	68e3      	ldr	r3, [r4, #12]
 80123e8:	4641      	mov	r1, r8
 80123ea:	4668      	mov	r0, sp
 80123ec:	4798      	blx	r3
 80123ee:	4639      	mov	r1, r7
 80123f0:	4604      	mov	r4, r0
 80123f2:	480a      	ldr	r0, [pc, #40]	@ (801241c <rmw_take_request+0xb8>)
 80123f4:	f7ff fb24 	bl	8011a40 <put_memory>
 80123f8:	b106      	cbz	r6, 80123fc <rmw_take_request+0x98>
 80123fa:	7034      	strb	r4, [r6, #0]
 80123fc:	f084 0001 	eor.w	r0, r4, #1
 8012400:	b2c0      	uxtb	r0, r0
 8012402:	b009      	add	sp, #36	@ 0x24
 8012404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012408:	2001      	movs	r0, #1
 801240a:	b009      	add	sp, #36	@ 0x24
 801240c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012410:	200c      	movs	r0, #12
 8012412:	b009      	add	sp, #36	@ 0x24
 8012414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012418:	0801732c 	.word	0x0801732c
 801241c:	2000db6c 	.word	0x2000db6c

08012420 <rmw_send_response>:
 8012420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012422:	4605      	mov	r5, r0
 8012424:	6800      	ldr	r0, [r0, #0]
 8012426:	b091      	sub	sp, #68	@ 0x44
 8012428:	460c      	mov	r4, r1
 801242a:	4616      	mov	r6, r2
 801242c:	b128      	cbz	r0, 801243a <rmw_send_response+0x1a>
 801242e:	4b29      	ldr	r3, [pc, #164]	@ (80124d4 <rmw_send_response+0xb4>)
 8012430:	6819      	ldr	r1, [r3, #0]
 8012432:	f7ed fed5 	bl	80001e0 <strcmp>
 8012436:	2800      	cmp	r0, #0
 8012438:	d141      	bne.n	80124be <rmw_send_response+0x9e>
 801243a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801243e:	9306      	str	r3, [sp, #24]
 8012440:	4623      	mov	r3, r4
 8012442:	9207      	str	r2, [sp, #28]
 8012444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012448:	686d      	ldr	r5, [r5, #4]
 801244a:	789b      	ldrb	r3, [r3, #2]
 801244c:	68a1      	ldr	r1, [r4, #8]
 801244e:	f88d 2017 	strb.w	r2, [sp, #23]
 8012452:	f88d 3016 	strb.w	r3, [sp, #22]
 8012456:	68e2      	ldr	r2, [r4, #12]
 8012458:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801245c:	6860      	ldr	r0, [r4, #4]
 801245e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012462:	ab02      	add	r3, sp, #8
 8012464:	c307      	stmia	r3!, {r0, r1, r2}
 8012466:	696b      	ldr	r3, [r5, #20]
 8012468:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801246a:	68db      	ldr	r3, [r3, #12]
 801246c:	4798      	blx	r3
 801246e:	6844      	ldr	r4, [r0, #4]
 8012470:	4630      	mov	r0, r6
 8012472:	6923      	ldr	r3, [r4, #16]
 8012474:	4798      	blx	r3
 8012476:	f100 0318 	add.w	r3, r0, #24
 801247a:	6938      	ldr	r0, [r7, #16]
 801247c:	9300      	str	r3, [sp, #0]
 801247e:	692a      	ldr	r2, [r5, #16]
 8012480:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8012482:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012486:	ab08      	add	r3, sp, #32
 8012488:	f7fa fe56 	bl	800d138 <uxr_prepare_output_stream>
 801248c:	b910      	cbnz	r0, 8012494 <rmw_send_response+0x74>
 801248e:	2001      	movs	r0, #1
 8012490:	b011      	add	sp, #68	@ 0x44
 8012492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012494:	a902      	add	r1, sp, #8
 8012496:	a808      	add	r0, sp, #32
 8012498:	f7fb ff86 	bl	800e3a8 <uxr_serialize_SampleIdentity>
 801249c:	68a3      	ldr	r3, [r4, #8]
 801249e:	a908      	add	r1, sp, #32
 80124a0:	4630      	mov	r0, r6
 80124a2:	4798      	blx	r3
 80124a4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80124a8:	6938      	ldr	r0, [r7, #16]
 80124aa:	2b01      	cmp	r3, #1
 80124ac:	d00a      	beq.n	80124c4 <rmw_send_response+0xa4>
 80124ae:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80124b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80124b4:	f7fa f854 	bl	800c560 <uxr_run_session_until_confirm_delivery>
 80124b8:	2000      	movs	r0, #0
 80124ba:	b011      	add	sp, #68	@ 0x44
 80124bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124be:	200c      	movs	r0, #12
 80124c0:	b011      	add	sp, #68	@ 0x44
 80124c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80124c8:	f7f9 fc8a 	bl	800bde0 <uxr_flash_output_streams>
 80124cc:	2000      	movs	r0, #0
 80124ce:	b011      	add	sp, #68	@ 0x44
 80124d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124d2:	bf00      	nop
 80124d4:	0801732c 	.word	0x0801732c

080124d8 <rmw_take_response>:
 80124d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124dc:	4604      	mov	r4, r0
 80124de:	6800      	ldr	r0, [r0, #0]
 80124e0:	b088      	sub	sp, #32
 80124e2:	4688      	mov	r8, r1
 80124e4:	4617      	mov	r7, r2
 80124e6:	461d      	mov	r5, r3
 80124e8:	b120      	cbz	r0, 80124f4 <rmw_take_response+0x1c>
 80124ea:	4b1e      	ldr	r3, [pc, #120]	@ (8012564 <rmw_take_response+0x8c>)
 80124ec:	6819      	ldr	r1, [r3, #0]
 80124ee:	f7ed fe77 	bl	80001e0 <strcmp>
 80124f2:	bb78      	cbnz	r0, 8012554 <rmw_take_response+0x7c>
 80124f4:	b10d      	cbz	r5, 80124fa <rmw_take_response+0x22>
 80124f6:	2300      	movs	r3, #0
 80124f8:	702b      	strb	r3, [r5, #0]
 80124fa:	6864      	ldr	r4, [r4, #4]
 80124fc:	f7f8 ff4c 	bl	800b398 <rmw_uxrce_clean_expired_static_input_buffer>
 8012500:	4620      	mov	r0, r4
 8012502:	f7f8 ff21 	bl	800b348 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012506:	4606      	mov	r6, r0
 8012508:	b340      	cbz	r0, 801255c <rmw_take_response+0x84>
 801250a:	6963      	ldr	r3, [r4, #20]
 801250c:	6884      	ldr	r4, [r0, #8]
 801250e:	68db      	ldr	r3, [r3, #12]
 8012510:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8012514:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8012518:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801251c:	4798      	blx	r3
 801251e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012522:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8012526:	f104 0110 	add.w	r1, r4, #16
 801252a:	4668      	mov	r0, sp
 801252c:	f7f7 f9c0 	bl	80098b0 <ucdr_init_buffer>
 8012530:	4639      	mov	r1, r7
 8012532:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012536:	4668      	mov	r0, sp
 8012538:	4798      	blx	r3
 801253a:	4631      	mov	r1, r6
 801253c:	4604      	mov	r4, r0
 801253e:	480a      	ldr	r0, [pc, #40]	@ (8012568 <rmw_take_response+0x90>)
 8012540:	f7ff fa7e 	bl	8011a40 <put_memory>
 8012544:	b105      	cbz	r5, 8012548 <rmw_take_response+0x70>
 8012546:	702c      	strb	r4, [r5, #0]
 8012548:	f084 0001 	eor.w	r0, r4, #1
 801254c:	b2c0      	uxtb	r0, r0
 801254e:	b008      	add	sp, #32
 8012550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012554:	200c      	movs	r0, #12
 8012556:	b008      	add	sp, #32
 8012558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801255c:	2001      	movs	r0, #1
 801255e:	b008      	add	sp, #32
 8012560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012564:	0801732c 	.word	0x0801732c
 8012568:	2000db6c 	.word	0x2000db6c

0801256c <rmw_destroy_service>:
 801256c:	b570      	push	{r4, r5, r6, lr}
 801256e:	b128      	cbz	r0, 801257c <rmw_destroy_service+0x10>
 8012570:	4604      	mov	r4, r0
 8012572:	6800      	ldr	r0, [r0, #0]
 8012574:	460d      	mov	r5, r1
 8012576:	f7f9 f80d 	bl	800b594 <is_uxrce_rmw_identifier_valid>
 801257a:	b910      	cbnz	r0, 8012582 <rmw_destroy_service+0x16>
 801257c:	2401      	movs	r4, #1
 801257e:	4620      	mov	r0, r4
 8012580:	bd70      	pop	{r4, r5, r6, pc}
 8012582:	6863      	ldr	r3, [r4, #4]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d0f9      	beq.n	801257c <rmw_destroy_service+0x10>
 8012588:	2d00      	cmp	r5, #0
 801258a:	d0f7      	beq.n	801257c <rmw_destroy_service+0x10>
 801258c:	6828      	ldr	r0, [r5, #0]
 801258e:	f7f9 f801 	bl	800b594 <is_uxrce_rmw_identifier_valid>
 8012592:	2800      	cmp	r0, #0
 8012594:	d0f2      	beq.n	801257c <rmw_destroy_service+0x10>
 8012596:	686e      	ldr	r6, [r5, #4]
 8012598:	2e00      	cmp	r6, #0
 801259a:	d0ef      	beq.n	801257c <rmw_destroy_service+0x10>
 801259c:	6864      	ldr	r4, [r4, #4]
 801259e:	6932      	ldr	r2, [r6, #16]
 80125a0:	6920      	ldr	r0, [r4, #16]
 80125a2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80125a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80125aa:	6819      	ldr	r1, [r3, #0]
 80125ac:	f001 fb6a 	bl	8013c84 <uxr_buffer_cancel_data>
 80125b0:	4602      	mov	r2, r0
 80125b2:	6920      	ldr	r0, [r4, #16]
 80125b4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80125b8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80125bc:	f7f8 ff6a 	bl	800b494 <run_xrce_session>
 80125c0:	6920      	ldr	r0, [r4, #16]
 80125c2:	6932      	ldr	r2, [r6, #16]
 80125c4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80125c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80125cc:	6819      	ldr	r1, [r3, #0]
 80125ce:	f7f9 f8b7 	bl	800b740 <uxr_buffer_delete_entity>
 80125d2:	4602      	mov	r2, r0
 80125d4:	6920      	ldr	r0, [r4, #16]
 80125d6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80125da:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80125de:	f7f8 ff59 	bl	800b494 <run_xrce_session>
 80125e2:	2800      	cmp	r0, #0
 80125e4:	4628      	mov	r0, r5
 80125e6:	bf14      	ite	ne
 80125e8:	2400      	movne	r4, #0
 80125ea:	2402      	moveq	r4, #2
 80125ec:	f7f8 fe24 	bl	800b238 <rmw_uxrce_fini_service_memory>
 80125f0:	e7c5      	b.n	801257e <rmw_destroy_service+0x12>
 80125f2:	bf00      	nop

080125f4 <rmw_create_subscription>:
 80125f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125f8:	b08d      	sub	sp, #52	@ 0x34
 80125fa:	2800      	cmp	r0, #0
 80125fc:	f000 80d1 	beq.w	80127a2 <rmw_create_subscription+0x1ae>
 8012600:	460e      	mov	r6, r1
 8012602:	2900      	cmp	r1, #0
 8012604:	f000 80cd 	beq.w	80127a2 <rmw_create_subscription+0x1ae>
 8012608:	4604      	mov	r4, r0
 801260a:	6800      	ldr	r0, [r0, #0]
 801260c:	4615      	mov	r5, r2
 801260e:	4698      	mov	r8, r3
 8012610:	f7f8 ffc0 	bl	800b594 <is_uxrce_rmw_identifier_valid>
 8012614:	2800      	cmp	r0, #0
 8012616:	f000 80c4 	beq.w	80127a2 <rmw_create_subscription+0x1ae>
 801261a:	2d00      	cmp	r5, #0
 801261c:	f000 80c1 	beq.w	80127a2 <rmw_create_subscription+0x1ae>
 8012620:	782b      	ldrb	r3, [r5, #0]
 8012622:	2b00      	cmp	r3, #0
 8012624:	f000 80bd 	beq.w	80127a2 <rmw_create_subscription+0x1ae>
 8012628:	f1b8 0f00 	cmp.w	r8, #0
 801262c:	f000 80b9 	beq.w	80127a2 <rmw_create_subscription+0x1ae>
 8012630:	485e      	ldr	r0, [pc, #376]	@ (80127ac <rmw_create_subscription+0x1b8>)
 8012632:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012636:	f7ff f9f3 	bl	8011a20 <get_memory>
 801263a:	4604      	mov	r4, r0
 801263c:	2800      	cmp	r0, #0
 801263e:	f000 80b1 	beq.w	80127a4 <rmw_create_subscription+0x1b0>
 8012642:	6887      	ldr	r7, [r0, #8]
 8012644:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8012648:	f7ff fa52 	bl	8011af0 <rmw_get_implementation_identifier>
 801264c:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 8012650:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8012652:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8012656:	4628      	mov	r0, r5
 8012658:	f7ed fdcc 	bl	80001f4 <strlen>
 801265c:	3001      	adds	r0, #1
 801265e:	283c      	cmp	r0, #60	@ 0x3c
 8012660:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8012664:	f200 8096 	bhi.w	8012794 <rmw_create_subscription+0x1a0>
 8012668:	4a51      	ldr	r2, [pc, #324]	@ (80127b0 <rmw_create_subscription+0x1bc>)
 801266a:	462b      	mov	r3, r5
 801266c:	213c      	movs	r1, #60	@ 0x3c
 801266e:	4650      	mov	r0, sl
 8012670:	f003 f814 	bl	801569c <sniprintf>
 8012674:	4641      	mov	r1, r8
 8012676:	f8c7 9020 	str.w	r9, [r7, #32]
 801267a:	2250      	movs	r2, #80	@ 0x50
 801267c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8012680:	f003 f9af 	bl	80159e2 <memcpy>
 8012684:	494b      	ldr	r1, [pc, #300]	@ (80127b4 <rmw_create_subscription+0x1c0>)
 8012686:	4630      	mov	r0, r6
 8012688:	f7f8 ff92 	bl	800b5b0 <get_message_typesupport_handle>
 801268c:	2800      	cmp	r0, #0
 801268e:	f000 8081 	beq.w	8012794 <rmw_create_subscription+0x1a0>
 8012692:	6842      	ldr	r2, [r0, #4]
 8012694:	61ba      	str	r2, [r7, #24]
 8012696:	2a00      	cmp	r2, #0
 8012698:	d07c      	beq.n	8012794 <rmw_create_subscription+0x1a0>
 801269a:	4629      	mov	r1, r5
 801269c:	4643      	mov	r3, r8
 801269e:	4648      	mov	r0, r9
 80126a0:	f7ff fc8c 	bl	8011fbc <create_topic>
 80126a4:	61f8      	str	r0, [r7, #28]
 80126a6:	2800      	cmp	r0, #0
 80126a8:	d078      	beq.n	801279c <rmw_create_subscription+0x1a8>
 80126aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80126ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80126b2:	2104      	movs	r1, #4
 80126b4:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 80126b8:	1c42      	adds	r2, r0, #1
 80126ba:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 80126be:	f7f9 fa41 	bl	800bb44 <uxr_object_id>
 80126c2:	6138      	str	r0, [r7, #16]
 80126c4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80126c8:	2506      	movs	r5, #6
 80126ca:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 80126ce:	9500      	str	r5, [sp, #0]
 80126d0:	6819      	ldr	r1, [r3, #0]
 80126d2:	693a      	ldr	r2, [r7, #16]
 80126d4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80126d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80126dc:	f7f9 f914 	bl	800b908 <uxr_buffer_create_subscriber_bin>
 80126e0:	4602      	mov	r2, r0
 80126e2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80126e6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80126ea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80126ee:	f7f8 fed1 	bl	800b494 <run_xrce_session>
 80126f2:	2800      	cmp	r0, #0
 80126f4:	d04e      	beq.n	8012794 <rmw_create_subscription+0x1a0>
 80126f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80126fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80126fe:	4629      	mov	r1, r5
 8012700:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8012704:	1c42      	adds	r2, r0, #1
 8012706:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801270a:	f7f9 fa1b 	bl	800bb44 <uxr_object_id>
 801270e:	ae08      	add	r6, sp, #32
 8012710:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012714:	69fb      	ldr	r3, [r7, #28]
 8012716:	6178      	str	r0, [r7, #20]
 8012718:	4641      	mov	r1, r8
 801271a:	4630      	mov	r0, r6
 801271c:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8012720:	9305      	str	r3, [sp, #20]
 8012722:	f7f8 fed3 	bl	800b4cc <convert_qos_profile>
 8012726:	9503      	str	r5, [sp, #12]
 8012728:	e896 0003 	ldmia.w	r6, {r0, r1}
 801272c:	9b05      	ldr	r3, [sp, #20]
 801272e:	9001      	str	r0, [sp, #4]
 8012730:	f8ad 1008 	strh.w	r1, [sp, #8]
 8012734:	691b      	ldr	r3, [r3, #16]
 8012736:	9300      	str	r3, [sp, #0]
 8012738:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 801273c:	f8db 1000 	ldr.w	r1, [fp]
 8012740:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8012744:	f7f9 f986 	bl	800ba54 <uxr_buffer_create_datareader_bin>
 8012748:	4602      	mov	r2, r0
 801274a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801274e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8012752:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8012756:	f7f8 fe9d 	bl	800b494 <run_xrce_session>
 801275a:	b1d8      	cbz	r0, 8012794 <rmw_create_subscription+0x1a0>
 801275c:	f898 3008 	ldrb.w	r3, [r8, #8]
 8012760:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8012764:	2b02      	cmp	r3, #2
 8012766:	bf0c      	ite	eq
 8012768:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 801276c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8012770:	9307      	str	r3, [sp, #28]
 8012772:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8012776:	2200      	movs	r2, #0
 8012778:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 801277c:	ab0a      	add	r3, sp, #40	@ 0x28
 801277e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8012782:	9300      	str	r3, [sp, #0]
 8012784:	697a      	ldr	r2, [r7, #20]
 8012786:	9b07      	ldr	r3, [sp, #28]
 8012788:	6809      	ldr	r1, [r1, #0]
 801278a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801278e:	f001 fa3f 	bl	8013c10 <uxr_buffer_request_data>
 8012792:	e007      	b.n	80127a4 <rmw_create_subscription+0x1b0>
 8012794:	69f8      	ldr	r0, [r7, #28]
 8012796:	b108      	cbz	r0, 801279c <rmw_create_subscription+0x1a8>
 8012798:	f7f8 fd7a 	bl	800b290 <rmw_uxrce_fini_topic_memory>
 801279c:	4620      	mov	r0, r4
 801279e:	f7f8 fd35 	bl	800b20c <rmw_uxrce_fini_subscription_memory>
 80127a2:	2400      	movs	r4, #0
 80127a4:	4620      	mov	r0, r4
 80127a6:	b00d      	add	sp, #52	@ 0x34
 80127a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127ac:	2000db7c 	.word	0x2000db7c
 80127b0:	08016c18 	.word	0x08016c18
 80127b4:	080169a8 	.word	0x080169a8

080127b8 <rmw_subscription_get_actual_qos>:
 80127b8:	b150      	cbz	r0, 80127d0 <rmw_subscription_get_actual_qos+0x18>
 80127ba:	b508      	push	{r3, lr}
 80127bc:	460b      	mov	r3, r1
 80127be:	b149      	cbz	r1, 80127d4 <rmw_subscription_get_actual_qos+0x1c>
 80127c0:	6841      	ldr	r1, [r0, #4]
 80127c2:	2250      	movs	r2, #80	@ 0x50
 80127c4:	3128      	adds	r1, #40	@ 0x28
 80127c6:	4618      	mov	r0, r3
 80127c8:	f003 f90b 	bl	80159e2 <memcpy>
 80127cc:	2000      	movs	r0, #0
 80127ce:	bd08      	pop	{r3, pc}
 80127d0:	200b      	movs	r0, #11
 80127d2:	4770      	bx	lr
 80127d4:	200b      	movs	r0, #11
 80127d6:	bd08      	pop	{r3, pc}

080127d8 <rmw_destroy_subscription>:
 80127d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127da:	b128      	cbz	r0, 80127e8 <rmw_destroy_subscription+0x10>
 80127dc:	4604      	mov	r4, r0
 80127de:	6800      	ldr	r0, [r0, #0]
 80127e0:	460d      	mov	r5, r1
 80127e2:	f7f8 fed7 	bl	800b594 <is_uxrce_rmw_identifier_valid>
 80127e6:	b910      	cbnz	r0, 80127ee <rmw_destroy_subscription+0x16>
 80127e8:	2401      	movs	r4, #1
 80127ea:	4620      	mov	r0, r4
 80127ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127ee:	6863      	ldr	r3, [r4, #4]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d0f9      	beq.n	80127e8 <rmw_destroy_subscription+0x10>
 80127f4:	2d00      	cmp	r5, #0
 80127f6:	d0f7      	beq.n	80127e8 <rmw_destroy_subscription+0x10>
 80127f8:	6828      	ldr	r0, [r5, #0]
 80127fa:	f7f8 fecb 	bl	800b594 <is_uxrce_rmw_identifier_valid>
 80127fe:	2800      	cmp	r0, #0
 8012800:	d0f2      	beq.n	80127e8 <rmw_destroy_subscription+0x10>
 8012802:	686c      	ldr	r4, [r5, #4]
 8012804:	2c00      	cmp	r4, #0
 8012806:	d0ef      	beq.n	80127e8 <rmw_destroy_subscription+0x10>
 8012808:	6a26      	ldr	r6, [r4, #32]
 801280a:	6962      	ldr	r2, [r4, #20]
 801280c:	6930      	ldr	r0, [r6, #16]
 801280e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012812:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012816:	6819      	ldr	r1, [r3, #0]
 8012818:	f001 fa34 	bl	8013c84 <uxr_buffer_cancel_data>
 801281c:	4602      	mov	r2, r0
 801281e:	6930      	ldr	r0, [r6, #16]
 8012820:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012824:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012828:	f7f8 fe34 	bl	800b494 <run_xrce_session>
 801282c:	69e0      	ldr	r0, [r4, #28]
 801282e:	f7ff fc15 	bl	801205c <destroy_topic>
 8012832:	6a23      	ldr	r3, [r4, #32]
 8012834:	6962      	ldr	r2, [r4, #20]
 8012836:	6918      	ldr	r0, [r3, #16]
 8012838:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801283c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012840:	6819      	ldr	r1, [r3, #0]
 8012842:	f7f8 ff7d 	bl	800b740 <uxr_buffer_delete_entity>
 8012846:	6a23      	ldr	r3, [r4, #32]
 8012848:	6922      	ldr	r2, [r4, #16]
 801284a:	691b      	ldr	r3, [r3, #16]
 801284c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8012850:	4604      	mov	r4, r0
 8012852:	6809      	ldr	r1, [r1, #0]
 8012854:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8012858:	f7f8 ff72 	bl	800b740 <uxr_buffer_delete_entity>
 801285c:	6937      	ldr	r7, [r6, #16]
 801285e:	4622      	mov	r2, r4
 8012860:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8012864:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8012868:	4604      	mov	r4, r0
 801286a:	4638      	mov	r0, r7
 801286c:	f7f8 fe12 	bl	800b494 <run_xrce_session>
 8012870:	6936      	ldr	r6, [r6, #16]
 8012872:	4622      	mov	r2, r4
 8012874:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8012878:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 801287c:	4604      	mov	r4, r0
 801287e:	4630      	mov	r0, r6
 8012880:	f7f8 fe08 	bl	800b494 <run_xrce_session>
 8012884:	b12c      	cbz	r4, 8012892 <rmw_destroy_subscription+0xba>
 8012886:	b120      	cbz	r0, 8012892 <rmw_destroy_subscription+0xba>
 8012888:	2400      	movs	r4, #0
 801288a:	4628      	mov	r0, r5
 801288c:	f7f8 fcbe 	bl	800b20c <rmw_uxrce_fini_subscription_memory>
 8012890:	e7ab      	b.n	80127ea <rmw_destroy_subscription+0x12>
 8012892:	2402      	movs	r4, #2
 8012894:	e7f9      	b.n	801288a <rmw_destroy_subscription+0xb2>
 8012896:	bf00      	nop

08012898 <rmw_take_with_info>:
 8012898:	b5f0      	push	{r4, r5, r6, r7, lr}
 801289a:	4604      	mov	r4, r0
 801289c:	6800      	ldr	r0, [r0, #0]
 801289e:	b089      	sub	sp, #36	@ 0x24
 80128a0:	460f      	mov	r7, r1
 80128a2:	4615      	mov	r5, r2
 80128a4:	b128      	cbz	r0, 80128b2 <rmw_take_with_info+0x1a>
 80128a6:	4b24      	ldr	r3, [pc, #144]	@ (8012938 <rmw_take_with_info+0xa0>)
 80128a8:	6819      	ldr	r1, [r3, #0]
 80128aa:	f7ed fc99 	bl	80001e0 <strcmp>
 80128ae:	2800      	cmp	r0, #0
 80128b0:	d13e      	bne.n	8012930 <rmw_take_with_info+0x98>
 80128b2:	b305      	cbz	r5, 80128f6 <rmw_take_with_info+0x5e>
 80128b4:	6864      	ldr	r4, [r4, #4]
 80128b6:	2300      	movs	r3, #0
 80128b8:	702b      	strb	r3, [r5, #0]
 80128ba:	f7f8 fd6d 	bl	800b398 <rmw_uxrce_clean_expired_static_input_buffer>
 80128be:	4620      	mov	r0, r4
 80128c0:	f7f8 fd42 	bl	800b348 <rmw_uxrce_find_static_input_buffer_by_owner>
 80128c4:	4606      	mov	r6, r0
 80128c6:	b1f0      	cbz	r0, 8012906 <rmw_take_with_info+0x6e>
 80128c8:	6881      	ldr	r1, [r0, #8]
 80128ca:	4668      	mov	r0, sp
 80128cc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80128d0:	3110      	adds	r1, #16
 80128d2:	f7f6 ffed 	bl	80098b0 <ucdr_init_buffer>
 80128d6:	69a3      	ldr	r3, [r4, #24]
 80128d8:	4639      	mov	r1, r7
 80128da:	68db      	ldr	r3, [r3, #12]
 80128dc:	4668      	mov	r0, sp
 80128de:	4798      	blx	r3
 80128e0:	4631      	mov	r1, r6
 80128e2:	4604      	mov	r4, r0
 80128e4:	4815      	ldr	r0, [pc, #84]	@ (801293c <rmw_take_with_info+0xa4>)
 80128e6:	f7ff f8ab 	bl	8011a40 <put_memory>
 80128ea:	702c      	strb	r4, [r5, #0]
 80128ec:	f084 0001 	eor.w	r0, r4, #1
 80128f0:	b2c0      	uxtb	r0, r0
 80128f2:	b009      	add	sp, #36	@ 0x24
 80128f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128f6:	6864      	ldr	r4, [r4, #4]
 80128f8:	f7f8 fd4e 	bl	800b398 <rmw_uxrce_clean_expired_static_input_buffer>
 80128fc:	4620      	mov	r0, r4
 80128fe:	f7f8 fd23 	bl	800b348 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012902:	4605      	mov	r5, r0
 8012904:	b910      	cbnz	r0, 801290c <rmw_take_with_info+0x74>
 8012906:	2001      	movs	r0, #1
 8012908:	b009      	add	sp, #36	@ 0x24
 801290a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801290c:	68a9      	ldr	r1, [r5, #8]
 801290e:	4668      	mov	r0, sp
 8012910:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8012914:	3110      	adds	r1, #16
 8012916:	f7f6 ffcb 	bl	80098b0 <ucdr_init_buffer>
 801291a:	69a3      	ldr	r3, [r4, #24]
 801291c:	4639      	mov	r1, r7
 801291e:	68db      	ldr	r3, [r3, #12]
 8012920:	4668      	mov	r0, sp
 8012922:	4798      	blx	r3
 8012924:	4629      	mov	r1, r5
 8012926:	4604      	mov	r4, r0
 8012928:	4804      	ldr	r0, [pc, #16]	@ (801293c <rmw_take_with_info+0xa4>)
 801292a:	f7ff f889 	bl	8011a40 <put_memory>
 801292e:	e7dd      	b.n	80128ec <rmw_take_with_info+0x54>
 8012930:	200c      	movs	r0, #12
 8012932:	b009      	add	sp, #36	@ 0x24
 8012934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012936:	bf00      	nop
 8012938:	0801732c 	.word	0x0801732c
 801293c:	2000db6c 	.word	0x2000db6c

08012940 <rmw_uxrce_transport_init>:
 8012940:	b508      	push	{r3, lr}
 8012942:	b108      	cbz	r0, 8012948 <rmw_uxrce_transport_init+0x8>
 8012944:	f100 0210 	add.w	r2, r0, #16
 8012948:	b139      	cbz	r1, 801295a <rmw_uxrce_transport_init+0x1a>
 801294a:	6949      	ldr	r1, [r1, #20]
 801294c:	4610      	mov	r0, r2
 801294e:	f000 fbdf 	bl	8013110 <uxr_init_custom_transport>
 8012952:	f080 0001 	eor.w	r0, r0, #1
 8012956:	b2c0      	uxtb	r0, r0
 8012958:	bd08      	pop	{r3, pc}
 801295a:	4b04      	ldr	r3, [pc, #16]	@ (801296c <rmw_uxrce_transport_init+0x2c>)
 801295c:	4610      	mov	r0, r2
 801295e:	6859      	ldr	r1, [r3, #4]
 8012960:	f000 fbd6 	bl	8013110 <uxr_init_custom_transport>
 8012964:	f080 0001 	eor.w	r0, r0, #1
 8012968:	b2c0      	uxtb	r0, r0
 801296a:	bd08      	pop	{r3, pc}
 801296c:	20009244 	.word	0x20009244

08012970 <rmw_wait>:
 8012970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012974:	b089      	sub	sp, #36	@ 0x24
 8012976:	4605      	mov	r5, r0
 8012978:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801297a:	460e      	mov	r6, r1
 801297c:	4698      	mov	r8, r3
 801297e:	4691      	mov	r9, r2
 8012980:	2a00      	cmp	r2, #0
 8012982:	f000 810a 	beq.w	8012b9a <rmw_wait+0x22a>
 8012986:	b16c      	cbz	r4, 80129a4 <rmw_wait+0x34>
 8012988:	4bae      	ldr	r3, [pc, #696]	@ (8012c44 <rmw_wait+0x2d4>)
 801298a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801298c:	af04      	add	r7, sp, #16
 801298e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8012992:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012996:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801299a:	f7fe fe75 	bl	8011688 <rmw_time_equal>
 801299e:	2800      	cmp	r0, #0
 80129a0:	f000 8127 	beq.w	8012bf2 <rmw_wait+0x282>
 80129a4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80129a8:	f7f8 fcf6 	bl	800b398 <rmw_uxrce_clean_expired_static_input_buffer>
 80129ac:	4ba6      	ldr	r3, [pc, #664]	@ (8012c48 <rmw_wait+0x2d8>)
 80129ae:	681c      	ldr	r4, [r3, #0]
 80129b0:	b14c      	cbz	r4, 80129c6 <rmw_wait+0x56>
 80129b2:	4623      	mov	r3, r4
 80129b4:	2100      	movs	r1, #0
 80129b6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80129ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80129be:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d1f7      	bne.n	80129b6 <rmw_wait+0x46>
 80129c6:	f1b9 0f00 	cmp.w	r9, #0
 80129ca:	d011      	beq.n	80129f0 <rmw_wait+0x80>
 80129cc:	f8d9 1000 	ldr.w	r1, [r9]
 80129d0:	b171      	cbz	r1, 80129f0 <rmw_wait+0x80>
 80129d2:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80129d6:	2300      	movs	r3, #0
 80129d8:	2001      	movs	r0, #1
 80129da:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80129de:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80129e0:	6912      	ldr	r2, [r2, #16]
 80129e2:	3301      	adds	r3, #1
 80129e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80129e8:	4299      	cmp	r1, r3
 80129ea:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80129ee:	d1f4      	bne.n	80129da <rmw_wait+0x6a>
 80129f0:	f1b8 0f00 	cmp.w	r8, #0
 80129f4:	d011      	beq.n	8012a1a <rmw_wait+0xaa>
 80129f6:	f8d8 1000 	ldr.w	r1, [r8]
 80129fa:	b171      	cbz	r1, 8012a1a <rmw_wait+0xaa>
 80129fc:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8012a00:	2300      	movs	r3, #0
 8012a02:	2001      	movs	r0, #1
 8012a04:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8012a08:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8012a0a:	6912      	ldr	r2, [r2, #16]
 8012a0c:	3301      	adds	r3, #1
 8012a0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8012a12:	4299      	cmp	r1, r3
 8012a14:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8012a18:	d1f4      	bne.n	8012a04 <rmw_wait+0x94>
 8012a1a:	b185      	cbz	r5, 8012a3e <rmw_wait+0xce>
 8012a1c:	6829      	ldr	r1, [r5, #0]
 8012a1e:	b171      	cbz	r1, 8012a3e <rmw_wait+0xce>
 8012a20:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8012a24:	2300      	movs	r3, #0
 8012a26:	2001      	movs	r0, #1
 8012a28:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8012a2c:	6a12      	ldr	r2, [r2, #32]
 8012a2e:	6912      	ldr	r2, [r2, #16]
 8012a30:	3301      	adds	r3, #1
 8012a32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8012a36:	4299      	cmp	r1, r3
 8012a38:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8012a3c:	d1f4      	bne.n	8012a28 <rmw_wait+0xb8>
 8012a3e:	b34c      	cbz	r4, 8012a94 <rmw_wait+0x124>
 8012a40:	4622      	mov	r2, r4
 8012a42:	2300      	movs	r3, #0
 8012a44:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8012a48:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8012a4c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8012a50:	440b      	add	r3, r1
 8012a52:	b2db      	uxtb	r3, r3
 8012a54:	2a00      	cmp	r2, #0
 8012a56:	d1f5      	bne.n	8012a44 <rmw_wait+0xd4>
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	f000 8084 	beq.w	8012b66 <rmw_wait+0x1f6>
 8012a5e:	1c7a      	adds	r2, r7, #1
 8012a60:	d00d      	beq.n	8012a7e <rmw_wait+0x10e>
 8012a62:	ee07 7a90 	vmov	s15, r7
 8012a66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012a6a:	ee07 3a90 	vmov	s15, r3
 8012a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012a76:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8012a7a:	ee17 7a90 	vmov	r7, s15
 8012a7e:	68a0      	ldr	r0, [r4, #8]
 8012a80:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8012a84:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	f040 8090 	bne.w	8012bae <rmw_wait+0x23e>
 8012a8e:	6864      	ldr	r4, [r4, #4]
 8012a90:	2c00      	cmp	r4, #0
 8012a92:	d1f4      	bne.n	8012a7e <rmw_wait+0x10e>
 8012a94:	f1b9 0f00 	cmp.w	r9, #0
 8012a98:	f000 80bc 	beq.w	8012c14 <rmw_wait+0x2a4>
 8012a9c:	f8d9 7000 	ldr.w	r7, [r9]
 8012aa0:	2f00      	cmp	r7, #0
 8012aa2:	f000 808e 	beq.w	8012bc2 <rmw_wait+0x252>
 8012aa6:	2400      	movs	r4, #0
 8012aa8:	4627      	mov	r7, r4
 8012aaa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012aae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012ab2:	f7f8 fc49 	bl	800b348 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012ab6:	2800      	cmp	r0, #0
 8012ab8:	d05f      	beq.n	8012b7a <rmw_wait+0x20a>
 8012aba:	f8d9 3000 	ldr.w	r3, [r9]
 8012abe:	3401      	adds	r4, #1
 8012ac0:	42a3      	cmp	r3, r4
 8012ac2:	f04f 0701 	mov.w	r7, #1
 8012ac6:	d8f0      	bhi.n	8012aaa <rmw_wait+0x13a>
 8012ac8:	f1b8 0f00 	cmp.w	r8, #0
 8012acc:	d012      	beq.n	8012af4 <rmw_wait+0x184>
 8012ace:	f8d8 3000 	ldr.w	r3, [r8]
 8012ad2:	b17b      	cbz	r3, 8012af4 <rmw_wait+0x184>
 8012ad4:	2400      	movs	r4, #0
 8012ad6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012ada:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012ade:	f7f8 fc33 	bl	800b348 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012ae2:	2800      	cmp	r0, #0
 8012ae4:	d051      	beq.n	8012b8a <rmw_wait+0x21a>
 8012ae6:	f8d8 3000 	ldr.w	r3, [r8]
 8012aea:	3401      	adds	r4, #1
 8012aec:	42a3      	cmp	r3, r4
 8012aee:	f04f 0701 	mov.w	r7, #1
 8012af2:	d8f0      	bhi.n	8012ad6 <rmw_wait+0x166>
 8012af4:	b1dd      	cbz	r5, 8012b2e <rmw_wait+0x1be>
 8012af6:	682b      	ldr	r3, [r5, #0]
 8012af8:	b1cb      	cbz	r3, 8012b2e <rmw_wait+0x1be>
 8012afa:	2400      	movs	r4, #0
 8012afc:	686b      	ldr	r3, [r5, #4]
 8012afe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012b02:	f7f8 fc21 	bl	800b348 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012b06:	b158      	cbz	r0, 8012b20 <rmw_wait+0x1b0>
 8012b08:	682b      	ldr	r3, [r5, #0]
 8012b0a:	3401      	adds	r4, #1
 8012b0c:	42a3      	cmp	r3, r4
 8012b0e:	d969      	bls.n	8012be4 <rmw_wait+0x274>
 8012b10:	686b      	ldr	r3, [r5, #4]
 8012b12:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012b16:	2701      	movs	r7, #1
 8012b18:	f7f8 fc16 	bl	800b348 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012b1c:	2800      	cmp	r0, #0
 8012b1e:	d1f3      	bne.n	8012b08 <rmw_wait+0x198>
 8012b20:	e9d5 3200 	ldrd	r3, r2, [r5]
 8012b24:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8012b28:	3401      	adds	r4, #1
 8012b2a:	42a3      	cmp	r3, r4
 8012b2c:	d8e6      	bhi.n	8012afc <rmw_wait+0x18c>
 8012b2e:	b1a6      	cbz	r6, 8012b5a <rmw_wait+0x1ea>
 8012b30:	6834      	ldr	r4, [r6, #0]
 8012b32:	b194      	cbz	r4, 8012b5a <rmw_wait+0x1ea>
 8012b34:	2300      	movs	r3, #0
 8012b36:	461d      	mov	r5, r3
 8012b38:	e004      	b.n	8012b44 <rmw_wait+0x1d4>
 8012b3a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8012b3e:	3301      	adds	r3, #1
 8012b40:	42a3      	cmp	r3, r4
 8012b42:	d00a      	beq.n	8012b5a <rmw_wait+0x1ea>
 8012b44:	6870      	ldr	r0, [r6, #4]
 8012b46:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8012b4a:	7c0a      	ldrb	r2, [r1, #16]
 8012b4c:	2a00      	cmp	r2, #0
 8012b4e:	d0f4      	beq.n	8012b3a <rmw_wait+0x1ca>
 8012b50:	3301      	adds	r3, #1
 8012b52:	42a3      	cmp	r3, r4
 8012b54:	740d      	strb	r5, [r1, #16]
 8012b56:	4617      	mov	r7, r2
 8012b58:	d1f4      	bne.n	8012b44 <rmw_wait+0x1d4>
 8012b5a:	2f00      	cmp	r7, #0
 8012b5c:	d03e      	beq.n	8012bdc <rmw_wait+0x26c>
 8012b5e:	2000      	movs	r0, #0
 8012b60:	b009      	add	sp, #36	@ 0x24
 8012b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b66:	68a0      	ldr	r0, [r4, #8]
 8012b68:	2100      	movs	r1, #0
 8012b6a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012b6e:	f7f9 fcbd 	bl	800c4ec <uxr_run_session_timeout>
 8012b72:	6864      	ldr	r4, [r4, #4]
 8012b74:	2c00      	cmp	r4, #0
 8012b76:	d1f6      	bne.n	8012b66 <rmw_wait+0x1f6>
 8012b78:	e78c      	b.n	8012a94 <rmw_wait+0x124>
 8012b7a:	e9d9 3200 	ldrd	r3, r2, [r9]
 8012b7e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8012b82:	3401      	adds	r4, #1
 8012b84:	42a3      	cmp	r3, r4
 8012b86:	d890      	bhi.n	8012aaa <rmw_wait+0x13a>
 8012b88:	e79e      	b.n	8012ac8 <rmw_wait+0x158>
 8012b8a:	e9d8 3200 	ldrd	r3, r2, [r8]
 8012b8e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8012b92:	3401      	adds	r4, #1
 8012b94:	429c      	cmp	r4, r3
 8012b96:	d39e      	bcc.n	8012ad6 <rmw_wait+0x166>
 8012b98:	e7ac      	b.n	8012af4 <rmw_wait+0x184>
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	f47f aef3 	bne.w	8012986 <rmw_wait+0x16>
 8012ba0:	2800      	cmp	r0, #0
 8012ba2:	f47f aef0 	bne.w	8012986 <rmw_wait+0x16>
 8012ba6:	2900      	cmp	r1, #0
 8012ba8:	f47f aeed 	bne.w	8012986 <rmw_wait+0x16>
 8012bac:	e7d7      	b.n	8012b5e <rmw_wait+0x1ee>
 8012bae:	4639      	mov	r1, r7
 8012bb0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012bb4:	f7f9 fcb4 	bl	800c520 <uxr_run_session_until_data>
 8012bb8:	6864      	ldr	r4, [r4, #4]
 8012bba:	2c00      	cmp	r4, #0
 8012bbc:	f47f af5f 	bne.w	8012a7e <rmw_wait+0x10e>
 8012bc0:	e768      	b.n	8012a94 <rmw_wait+0x124>
 8012bc2:	f1b8 0f00 	cmp.w	r8, #0
 8012bc6:	d032      	beq.n	8012c2e <rmw_wait+0x2be>
 8012bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d181      	bne.n	8012ad4 <rmw_wait+0x164>
 8012bd0:	461f      	mov	r7, r3
 8012bd2:	2d00      	cmp	r5, #0
 8012bd4:	d18f      	bne.n	8012af6 <rmw_wait+0x186>
 8012bd6:	462f      	mov	r7, r5
 8012bd8:	2e00      	cmp	r6, #0
 8012bda:	d1a9      	bne.n	8012b30 <rmw_wait+0x1c0>
 8012bdc:	2002      	movs	r0, #2
 8012bde:	b009      	add	sp, #36	@ 0x24
 8012be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012be4:	2e00      	cmp	r6, #0
 8012be6:	d0ba      	beq.n	8012b5e <rmw_wait+0x1ee>
 8012be8:	6834      	ldr	r4, [r6, #0]
 8012bea:	2701      	movs	r7, #1
 8012bec:	2c00      	cmp	r4, #0
 8012bee:	d1a1      	bne.n	8012b34 <rmw_wait+0x1c4>
 8012bf0:	e7b5      	b.n	8012b5e <rmw_wait+0x1ee>
 8012bf2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012bf6:	f7fe fd9b 	bl	8011730 <rmw_time_total_nsec>
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	4a13      	ldr	r2, [pc, #76]	@ (8012c4c <rmw_wait+0x2dc>)
 8012bfe:	f7ed fd79 	bl	80006f4 <__aeabi_uldivmod>
 8012c02:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8012c06:	f171 0300 	sbcs.w	r3, r1, #0
 8012c0a:	4607      	mov	r7, r0
 8012c0c:	bfa8      	it	ge
 8012c0e:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8012c12:	e6c9      	b.n	80129a8 <rmw_wait+0x38>
 8012c14:	f1b8 0f00 	cmp.w	r8, #0
 8012c18:	d009      	beq.n	8012c2e <rmw_wait+0x2be>
 8012c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8012c1e:	464f      	mov	r7, r9
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	f47f af57 	bne.w	8012ad4 <rmw_wait+0x164>
 8012c26:	2d00      	cmp	r5, #0
 8012c28:	f47f af65 	bne.w	8012af6 <rmw_wait+0x186>
 8012c2c:	e7d3      	b.n	8012bd6 <rmw_wait+0x266>
 8012c2e:	b17d      	cbz	r5, 8012c50 <rmw_wait+0x2e0>
 8012c30:	682b      	ldr	r3, [r5, #0]
 8012c32:	4647      	mov	r7, r8
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	f47f af60 	bne.w	8012afa <rmw_wait+0x18a>
 8012c3a:	2e00      	cmp	r6, #0
 8012c3c:	f47f af78 	bne.w	8012b30 <rmw_wait+0x1c0>
 8012c40:	e7cc      	b.n	8012bdc <rmw_wait+0x26c>
 8012c42:	bf00      	nop
 8012c44:	08016860 	.word	0x08016860
 8012c48:	2000db5c 	.word	0x2000db5c
 8012c4c:	000f4240 	.word	0x000f4240
 8012c50:	2e00      	cmp	r6, #0
 8012c52:	d0c3      	beq.n	8012bdc <rmw_wait+0x26c>
 8012c54:	6834      	ldr	r4, [r6, #0]
 8012c56:	462f      	mov	r7, r5
 8012c58:	2c00      	cmp	r4, #0
 8012c5a:	f47f af6b 	bne.w	8012b34 <rmw_wait+0x1c4>
 8012c5e:	e7bd      	b.n	8012bdc <rmw_wait+0x26c>

08012c60 <rmw_create_wait_set>:
 8012c60:	b508      	push	{r3, lr}
 8012c62:	4803      	ldr	r0, [pc, #12]	@ (8012c70 <rmw_create_wait_set+0x10>)
 8012c64:	f7fe fedc 	bl	8011a20 <get_memory>
 8012c68:	b108      	cbz	r0, 8012c6e <rmw_create_wait_set+0xe>
 8012c6a:	6880      	ldr	r0, [r0, #8]
 8012c6c:	3010      	adds	r0, #16
 8012c6e:	bd08      	pop	{r3, pc}
 8012c70:	2000db9c 	.word	0x2000db9c

08012c74 <rmw_destroy_wait_set>:
 8012c74:	b508      	push	{r3, lr}
 8012c76:	4b08      	ldr	r3, [pc, #32]	@ (8012c98 <rmw_destroy_wait_set+0x24>)
 8012c78:	6819      	ldr	r1, [r3, #0]
 8012c7a:	b911      	cbnz	r1, 8012c82 <rmw_destroy_wait_set+0xe>
 8012c7c:	e00a      	b.n	8012c94 <rmw_destroy_wait_set+0x20>
 8012c7e:	6849      	ldr	r1, [r1, #4]
 8012c80:	b141      	cbz	r1, 8012c94 <rmw_destroy_wait_set+0x20>
 8012c82:	688b      	ldr	r3, [r1, #8]
 8012c84:	3310      	adds	r3, #16
 8012c86:	4298      	cmp	r0, r3
 8012c88:	d1f9      	bne.n	8012c7e <rmw_destroy_wait_set+0xa>
 8012c8a:	4803      	ldr	r0, [pc, #12]	@ (8012c98 <rmw_destroy_wait_set+0x24>)
 8012c8c:	f7fe fed8 	bl	8011a40 <put_memory>
 8012c90:	2000      	movs	r0, #0
 8012c92:	bd08      	pop	{r3, pc}
 8012c94:	2001      	movs	r0, #1
 8012c96:	bd08      	pop	{r3, pc}
 8012c98:	2000db9c 	.word	0x2000db9c

08012c9c <rmw_uros_epoch_nanos>:
 8012c9c:	4b05      	ldr	r3, [pc, #20]	@ (8012cb4 <rmw_uros_epoch_nanos+0x18>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	b123      	cbz	r3, 8012cac <rmw_uros_epoch_nanos+0x10>
 8012ca2:	6898      	ldr	r0, [r3, #8]
 8012ca4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012ca8:	f7f9 b890 	b.w	800bdcc <uxr_epoch_nanos>
 8012cac:	2000      	movs	r0, #0
 8012cae:	2100      	movs	r1, #0
 8012cb0:	4770      	bx	lr
 8012cb2:	bf00      	nop
 8012cb4:	2000db5c 	.word	0x2000db5c

08012cb8 <std_msgs__msg__Int32__init>:
 8012cb8:	3800      	subs	r0, #0
 8012cba:	bf18      	it	ne
 8012cbc:	2001      	movne	r0, #1
 8012cbe:	4770      	bx	lr

08012cc0 <std_msgs__msg__Int32__fini>:
 8012cc0:	4770      	bx	lr
 8012cc2:	bf00      	nop

08012cc4 <ucdr_serialize_endian_array_char>:
 8012cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cc8:	4619      	mov	r1, r3
 8012cca:	461f      	mov	r7, r3
 8012ccc:	4605      	mov	r5, r0
 8012cce:	4690      	mov	r8, r2
 8012cd0:	f7f6 fd9a 	bl	8009808 <ucdr_check_buffer_available_for>
 8012cd4:	b9e0      	cbnz	r0, 8012d10 <ucdr_serialize_endian_array_char+0x4c>
 8012cd6:	463e      	mov	r6, r7
 8012cd8:	e009      	b.n	8012cee <ucdr_serialize_endian_array_char+0x2a>
 8012cda:	68a8      	ldr	r0, [r5, #8]
 8012cdc:	f002 fe81 	bl	80159e2 <memcpy>
 8012ce0:	68ab      	ldr	r3, [r5, #8]
 8012ce2:	6928      	ldr	r0, [r5, #16]
 8012ce4:	4423      	add	r3, r4
 8012ce6:	4420      	add	r0, r4
 8012ce8:	1b36      	subs	r6, r6, r4
 8012cea:	60ab      	str	r3, [r5, #8]
 8012cec:	6128      	str	r0, [r5, #16]
 8012cee:	4631      	mov	r1, r6
 8012cf0:	2201      	movs	r2, #1
 8012cf2:	4628      	mov	r0, r5
 8012cf4:	f7f6 fe10 	bl	8009918 <ucdr_check_final_buffer_behavior_array>
 8012cf8:	1bb9      	subs	r1, r7, r6
 8012cfa:	4441      	add	r1, r8
 8012cfc:	4604      	mov	r4, r0
 8012cfe:	4602      	mov	r2, r0
 8012d00:	2800      	cmp	r0, #0
 8012d02:	d1ea      	bne.n	8012cda <ucdr_serialize_endian_array_char+0x16>
 8012d04:	2301      	movs	r3, #1
 8012d06:	7da8      	ldrb	r0, [r5, #22]
 8012d08:	756b      	strb	r3, [r5, #21]
 8012d0a:	4058      	eors	r0, r3
 8012d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d10:	463a      	mov	r2, r7
 8012d12:	68a8      	ldr	r0, [r5, #8]
 8012d14:	4641      	mov	r1, r8
 8012d16:	f002 fe64 	bl	80159e2 <memcpy>
 8012d1a:	68aa      	ldr	r2, [r5, #8]
 8012d1c:	692b      	ldr	r3, [r5, #16]
 8012d1e:	443a      	add	r2, r7
 8012d20:	443b      	add	r3, r7
 8012d22:	60aa      	str	r2, [r5, #8]
 8012d24:	612b      	str	r3, [r5, #16]
 8012d26:	e7ed      	b.n	8012d04 <ucdr_serialize_endian_array_char+0x40>

08012d28 <ucdr_deserialize_endian_array_char>:
 8012d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d2c:	4619      	mov	r1, r3
 8012d2e:	461f      	mov	r7, r3
 8012d30:	4605      	mov	r5, r0
 8012d32:	4690      	mov	r8, r2
 8012d34:	f7f6 fd68 	bl	8009808 <ucdr_check_buffer_available_for>
 8012d38:	b9e0      	cbnz	r0, 8012d74 <ucdr_deserialize_endian_array_char+0x4c>
 8012d3a:	463e      	mov	r6, r7
 8012d3c:	e009      	b.n	8012d52 <ucdr_deserialize_endian_array_char+0x2a>
 8012d3e:	68a9      	ldr	r1, [r5, #8]
 8012d40:	f002 fe4f 	bl	80159e2 <memcpy>
 8012d44:	68ab      	ldr	r3, [r5, #8]
 8012d46:	6928      	ldr	r0, [r5, #16]
 8012d48:	4423      	add	r3, r4
 8012d4a:	4420      	add	r0, r4
 8012d4c:	1b36      	subs	r6, r6, r4
 8012d4e:	60ab      	str	r3, [r5, #8]
 8012d50:	6128      	str	r0, [r5, #16]
 8012d52:	2201      	movs	r2, #1
 8012d54:	4631      	mov	r1, r6
 8012d56:	4628      	mov	r0, r5
 8012d58:	f7f6 fdde 	bl	8009918 <ucdr_check_final_buffer_behavior_array>
 8012d5c:	4604      	mov	r4, r0
 8012d5e:	1bb8      	subs	r0, r7, r6
 8012d60:	4440      	add	r0, r8
 8012d62:	4622      	mov	r2, r4
 8012d64:	2c00      	cmp	r4, #0
 8012d66:	d1ea      	bne.n	8012d3e <ucdr_deserialize_endian_array_char+0x16>
 8012d68:	2301      	movs	r3, #1
 8012d6a:	7da8      	ldrb	r0, [r5, #22]
 8012d6c:	756b      	strb	r3, [r5, #21]
 8012d6e:	4058      	eors	r0, r3
 8012d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d74:	463a      	mov	r2, r7
 8012d76:	68a9      	ldr	r1, [r5, #8]
 8012d78:	4640      	mov	r0, r8
 8012d7a:	f002 fe32 	bl	80159e2 <memcpy>
 8012d7e:	68aa      	ldr	r2, [r5, #8]
 8012d80:	692b      	ldr	r3, [r5, #16]
 8012d82:	443a      	add	r2, r7
 8012d84:	443b      	add	r3, r7
 8012d86:	60aa      	str	r2, [r5, #8]
 8012d88:	612b      	str	r3, [r5, #16]
 8012d8a:	e7ed      	b.n	8012d68 <ucdr_deserialize_endian_array_char+0x40>

08012d8c <ucdr_serialize_array_uint8_t>:
 8012d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d90:	4688      	mov	r8, r1
 8012d92:	4611      	mov	r1, r2
 8012d94:	4617      	mov	r7, r2
 8012d96:	4605      	mov	r5, r0
 8012d98:	f7f6 fd36 	bl	8009808 <ucdr_check_buffer_available_for>
 8012d9c:	b9e0      	cbnz	r0, 8012dd8 <ucdr_serialize_array_uint8_t+0x4c>
 8012d9e:	463e      	mov	r6, r7
 8012da0:	e009      	b.n	8012db6 <ucdr_serialize_array_uint8_t+0x2a>
 8012da2:	68a8      	ldr	r0, [r5, #8]
 8012da4:	f002 fe1d 	bl	80159e2 <memcpy>
 8012da8:	68aa      	ldr	r2, [r5, #8]
 8012daa:	692b      	ldr	r3, [r5, #16]
 8012dac:	4422      	add	r2, r4
 8012dae:	4423      	add	r3, r4
 8012db0:	1b36      	subs	r6, r6, r4
 8012db2:	60aa      	str	r2, [r5, #8]
 8012db4:	612b      	str	r3, [r5, #16]
 8012db6:	4631      	mov	r1, r6
 8012db8:	2201      	movs	r2, #1
 8012dba:	4628      	mov	r0, r5
 8012dbc:	f7f6 fdac 	bl	8009918 <ucdr_check_final_buffer_behavior_array>
 8012dc0:	1bb9      	subs	r1, r7, r6
 8012dc2:	4441      	add	r1, r8
 8012dc4:	4604      	mov	r4, r0
 8012dc6:	4602      	mov	r2, r0
 8012dc8:	2800      	cmp	r0, #0
 8012dca:	d1ea      	bne.n	8012da2 <ucdr_serialize_array_uint8_t+0x16>
 8012dcc:	2301      	movs	r3, #1
 8012dce:	7da8      	ldrb	r0, [r5, #22]
 8012dd0:	756b      	strb	r3, [r5, #21]
 8012dd2:	4058      	eors	r0, r3
 8012dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dd8:	463a      	mov	r2, r7
 8012dda:	68a8      	ldr	r0, [r5, #8]
 8012ddc:	4641      	mov	r1, r8
 8012dde:	f002 fe00 	bl	80159e2 <memcpy>
 8012de2:	68aa      	ldr	r2, [r5, #8]
 8012de4:	692b      	ldr	r3, [r5, #16]
 8012de6:	443a      	add	r2, r7
 8012de8:	443b      	add	r3, r7
 8012dea:	60aa      	str	r2, [r5, #8]
 8012dec:	612b      	str	r3, [r5, #16]
 8012dee:	e7ed      	b.n	8012dcc <ucdr_serialize_array_uint8_t+0x40>

08012df0 <ucdr_serialize_endian_array_uint8_t>:
 8012df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012df4:	4619      	mov	r1, r3
 8012df6:	461f      	mov	r7, r3
 8012df8:	4605      	mov	r5, r0
 8012dfa:	4690      	mov	r8, r2
 8012dfc:	f7f6 fd04 	bl	8009808 <ucdr_check_buffer_available_for>
 8012e00:	b9e0      	cbnz	r0, 8012e3c <ucdr_serialize_endian_array_uint8_t+0x4c>
 8012e02:	463e      	mov	r6, r7
 8012e04:	e009      	b.n	8012e1a <ucdr_serialize_endian_array_uint8_t+0x2a>
 8012e06:	68a8      	ldr	r0, [r5, #8]
 8012e08:	f002 fdeb 	bl	80159e2 <memcpy>
 8012e0c:	68ab      	ldr	r3, [r5, #8]
 8012e0e:	6928      	ldr	r0, [r5, #16]
 8012e10:	4423      	add	r3, r4
 8012e12:	4420      	add	r0, r4
 8012e14:	1b36      	subs	r6, r6, r4
 8012e16:	60ab      	str	r3, [r5, #8]
 8012e18:	6128      	str	r0, [r5, #16]
 8012e1a:	4631      	mov	r1, r6
 8012e1c:	2201      	movs	r2, #1
 8012e1e:	4628      	mov	r0, r5
 8012e20:	f7f6 fd7a 	bl	8009918 <ucdr_check_final_buffer_behavior_array>
 8012e24:	1bb9      	subs	r1, r7, r6
 8012e26:	4441      	add	r1, r8
 8012e28:	4604      	mov	r4, r0
 8012e2a:	4602      	mov	r2, r0
 8012e2c:	2800      	cmp	r0, #0
 8012e2e:	d1ea      	bne.n	8012e06 <ucdr_serialize_endian_array_uint8_t+0x16>
 8012e30:	2301      	movs	r3, #1
 8012e32:	7da8      	ldrb	r0, [r5, #22]
 8012e34:	756b      	strb	r3, [r5, #21]
 8012e36:	4058      	eors	r0, r3
 8012e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e3c:	463a      	mov	r2, r7
 8012e3e:	68a8      	ldr	r0, [r5, #8]
 8012e40:	4641      	mov	r1, r8
 8012e42:	f002 fdce 	bl	80159e2 <memcpy>
 8012e46:	68aa      	ldr	r2, [r5, #8]
 8012e48:	692b      	ldr	r3, [r5, #16]
 8012e4a:	443a      	add	r2, r7
 8012e4c:	443b      	add	r3, r7
 8012e4e:	60aa      	str	r2, [r5, #8]
 8012e50:	612b      	str	r3, [r5, #16]
 8012e52:	e7ed      	b.n	8012e30 <ucdr_serialize_endian_array_uint8_t+0x40>

08012e54 <ucdr_deserialize_array_uint8_t>:
 8012e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e58:	4688      	mov	r8, r1
 8012e5a:	4611      	mov	r1, r2
 8012e5c:	4617      	mov	r7, r2
 8012e5e:	4605      	mov	r5, r0
 8012e60:	f7f6 fcd2 	bl	8009808 <ucdr_check_buffer_available_for>
 8012e64:	b9e0      	cbnz	r0, 8012ea0 <ucdr_deserialize_array_uint8_t+0x4c>
 8012e66:	463e      	mov	r6, r7
 8012e68:	e009      	b.n	8012e7e <ucdr_deserialize_array_uint8_t+0x2a>
 8012e6a:	68a9      	ldr	r1, [r5, #8]
 8012e6c:	f002 fdb9 	bl	80159e2 <memcpy>
 8012e70:	68aa      	ldr	r2, [r5, #8]
 8012e72:	692b      	ldr	r3, [r5, #16]
 8012e74:	4422      	add	r2, r4
 8012e76:	4423      	add	r3, r4
 8012e78:	1b36      	subs	r6, r6, r4
 8012e7a:	60aa      	str	r2, [r5, #8]
 8012e7c:	612b      	str	r3, [r5, #16]
 8012e7e:	2201      	movs	r2, #1
 8012e80:	4631      	mov	r1, r6
 8012e82:	4628      	mov	r0, r5
 8012e84:	f7f6 fd48 	bl	8009918 <ucdr_check_final_buffer_behavior_array>
 8012e88:	4604      	mov	r4, r0
 8012e8a:	1bb8      	subs	r0, r7, r6
 8012e8c:	4440      	add	r0, r8
 8012e8e:	4622      	mov	r2, r4
 8012e90:	2c00      	cmp	r4, #0
 8012e92:	d1ea      	bne.n	8012e6a <ucdr_deserialize_array_uint8_t+0x16>
 8012e94:	2301      	movs	r3, #1
 8012e96:	7da8      	ldrb	r0, [r5, #22]
 8012e98:	756b      	strb	r3, [r5, #21]
 8012e9a:	4058      	eors	r0, r3
 8012e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ea0:	463a      	mov	r2, r7
 8012ea2:	68a9      	ldr	r1, [r5, #8]
 8012ea4:	4640      	mov	r0, r8
 8012ea6:	f002 fd9c 	bl	80159e2 <memcpy>
 8012eaa:	68aa      	ldr	r2, [r5, #8]
 8012eac:	692b      	ldr	r3, [r5, #16]
 8012eae:	443a      	add	r2, r7
 8012eb0:	443b      	add	r3, r7
 8012eb2:	60aa      	str	r2, [r5, #8]
 8012eb4:	612b      	str	r3, [r5, #16]
 8012eb6:	e7ed      	b.n	8012e94 <ucdr_deserialize_array_uint8_t+0x40>

08012eb8 <ucdr_deserialize_endian_array_uint8_t>:
 8012eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ebc:	4619      	mov	r1, r3
 8012ebe:	461f      	mov	r7, r3
 8012ec0:	4605      	mov	r5, r0
 8012ec2:	4690      	mov	r8, r2
 8012ec4:	f7f6 fca0 	bl	8009808 <ucdr_check_buffer_available_for>
 8012ec8:	b9e0      	cbnz	r0, 8012f04 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8012eca:	463e      	mov	r6, r7
 8012ecc:	e009      	b.n	8012ee2 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8012ece:	68a9      	ldr	r1, [r5, #8]
 8012ed0:	f002 fd87 	bl	80159e2 <memcpy>
 8012ed4:	68ab      	ldr	r3, [r5, #8]
 8012ed6:	6928      	ldr	r0, [r5, #16]
 8012ed8:	4423      	add	r3, r4
 8012eda:	4420      	add	r0, r4
 8012edc:	1b36      	subs	r6, r6, r4
 8012ede:	60ab      	str	r3, [r5, #8]
 8012ee0:	6128      	str	r0, [r5, #16]
 8012ee2:	2201      	movs	r2, #1
 8012ee4:	4631      	mov	r1, r6
 8012ee6:	4628      	mov	r0, r5
 8012ee8:	f7f6 fd16 	bl	8009918 <ucdr_check_final_buffer_behavior_array>
 8012eec:	4604      	mov	r4, r0
 8012eee:	1bb8      	subs	r0, r7, r6
 8012ef0:	4440      	add	r0, r8
 8012ef2:	4622      	mov	r2, r4
 8012ef4:	2c00      	cmp	r4, #0
 8012ef6:	d1ea      	bne.n	8012ece <ucdr_deserialize_endian_array_uint8_t+0x16>
 8012ef8:	2301      	movs	r3, #1
 8012efa:	7da8      	ldrb	r0, [r5, #22]
 8012efc:	756b      	strb	r3, [r5, #21]
 8012efe:	4058      	eors	r0, r3
 8012f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f04:	463a      	mov	r2, r7
 8012f06:	68a9      	ldr	r1, [r5, #8]
 8012f08:	4640      	mov	r0, r8
 8012f0a:	f002 fd6a 	bl	80159e2 <memcpy>
 8012f0e:	68aa      	ldr	r2, [r5, #8]
 8012f10:	692b      	ldr	r3, [r5, #16]
 8012f12:	443a      	add	r2, r7
 8012f14:	443b      	add	r3, r7
 8012f16:	60aa      	str	r2, [r5, #8]
 8012f18:	612b      	str	r3, [r5, #16]
 8012f1a:	e7ed      	b.n	8012ef8 <ucdr_deserialize_endian_array_uint8_t+0x40>

08012f1c <ucdr_serialize_sequence_char>:
 8012f1c:	b570      	push	{r4, r5, r6, lr}
 8012f1e:	4615      	mov	r5, r2
 8012f20:	460e      	mov	r6, r1
 8012f22:	7d01      	ldrb	r1, [r0, #20]
 8012f24:	4604      	mov	r4, r0
 8012f26:	f7f5 fe2f 	bl	8008b88 <ucdr_serialize_endian_uint32_t>
 8012f2a:	b90d      	cbnz	r5, 8012f30 <ucdr_serialize_sequence_char+0x14>
 8012f2c:	2001      	movs	r0, #1
 8012f2e:	bd70      	pop	{r4, r5, r6, pc}
 8012f30:	7d21      	ldrb	r1, [r4, #20]
 8012f32:	462b      	mov	r3, r5
 8012f34:	4632      	mov	r2, r6
 8012f36:	4620      	mov	r0, r4
 8012f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f3c:	f7ff bec2 	b.w	8012cc4 <ucdr_serialize_endian_array_char>

08012f40 <ucdr_deserialize_sequence_char>:
 8012f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f44:	461d      	mov	r5, r3
 8012f46:	4616      	mov	r6, r2
 8012f48:	460f      	mov	r7, r1
 8012f4a:	461a      	mov	r2, r3
 8012f4c:	7d01      	ldrb	r1, [r0, #20]
 8012f4e:	4604      	mov	r4, r0
 8012f50:	f7f5 ff42 	bl	8008dd8 <ucdr_deserialize_endian_uint32_t>
 8012f54:	682b      	ldr	r3, [r5, #0]
 8012f56:	429e      	cmp	r6, r3
 8012f58:	bf3c      	itt	cc
 8012f5a:	2201      	movcc	r2, #1
 8012f5c:	75a2      	strbcc	r2, [r4, #22]
 8012f5e:	b913      	cbnz	r3, 8012f66 <ucdr_deserialize_sequence_char+0x26>
 8012f60:	2001      	movs	r0, #1
 8012f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f66:	7d21      	ldrb	r1, [r4, #20]
 8012f68:	463a      	mov	r2, r7
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f70:	f7ff beda 	b.w	8012d28 <ucdr_deserialize_endian_array_char>

08012f74 <ucdr_serialize_sequence_uint8_t>:
 8012f74:	b570      	push	{r4, r5, r6, lr}
 8012f76:	4615      	mov	r5, r2
 8012f78:	460e      	mov	r6, r1
 8012f7a:	7d01      	ldrb	r1, [r0, #20]
 8012f7c:	4604      	mov	r4, r0
 8012f7e:	f7f5 fe03 	bl	8008b88 <ucdr_serialize_endian_uint32_t>
 8012f82:	b90d      	cbnz	r5, 8012f88 <ucdr_serialize_sequence_uint8_t+0x14>
 8012f84:	2001      	movs	r0, #1
 8012f86:	bd70      	pop	{r4, r5, r6, pc}
 8012f88:	7d21      	ldrb	r1, [r4, #20]
 8012f8a:	462b      	mov	r3, r5
 8012f8c:	4632      	mov	r2, r6
 8012f8e:	4620      	mov	r0, r4
 8012f90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f94:	f7ff bf2c 	b.w	8012df0 <ucdr_serialize_endian_array_uint8_t>

08012f98 <ucdr_deserialize_sequence_uint8_t>:
 8012f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f9c:	461d      	mov	r5, r3
 8012f9e:	4616      	mov	r6, r2
 8012fa0:	460f      	mov	r7, r1
 8012fa2:	461a      	mov	r2, r3
 8012fa4:	7d01      	ldrb	r1, [r0, #20]
 8012fa6:	4604      	mov	r4, r0
 8012fa8:	f7f5 ff16 	bl	8008dd8 <ucdr_deserialize_endian_uint32_t>
 8012fac:	682b      	ldr	r3, [r5, #0]
 8012fae:	429e      	cmp	r6, r3
 8012fb0:	bf3c      	itt	cc
 8012fb2:	2201      	movcc	r2, #1
 8012fb4:	75a2      	strbcc	r2, [r4, #22]
 8012fb6:	b913      	cbnz	r3, 8012fbe <ucdr_deserialize_sequence_uint8_t+0x26>
 8012fb8:	2001      	movs	r0, #1
 8012fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fbe:	7d21      	ldrb	r1, [r4, #20]
 8012fc0:	463a      	mov	r2, r7
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fc8:	f7ff bf76 	b.w	8012eb8 <ucdr_deserialize_endian_array_uint8_t>

08012fcc <ucdr_serialize_string>:
 8012fcc:	b510      	push	{r4, lr}
 8012fce:	b082      	sub	sp, #8
 8012fd0:	4604      	mov	r4, r0
 8012fd2:	4608      	mov	r0, r1
 8012fd4:	9101      	str	r1, [sp, #4]
 8012fd6:	f7ed f90d 	bl	80001f4 <strlen>
 8012fda:	9901      	ldr	r1, [sp, #4]
 8012fdc:	1c42      	adds	r2, r0, #1
 8012fde:	4620      	mov	r0, r4
 8012fe0:	b002      	add	sp, #8
 8012fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fe6:	f7ff bf99 	b.w	8012f1c <ucdr_serialize_sequence_char>
 8012fea:	bf00      	nop

08012fec <ucdr_deserialize_string>:
 8012fec:	b500      	push	{lr}
 8012fee:	b083      	sub	sp, #12
 8012ff0:	ab01      	add	r3, sp, #4
 8012ff2:	f7ff ffa5 	bl	8012f40 <ucdr_deserialize_sequence_char>
 8012ff6:	b003      	add	sp, #12
 8012ff8:	f85d fb04 	ldr.w	pc, [sp], #4

08012ffc <get_custom_error>:
 8012ffc:	4b01      	ldr	r3, [pc, #4]	@ (8013004 <get_custom_error+0x8>)
 8012ffe:	7818      	ldrb	r0, [r3, #0]
 8013000:	4770      	bx	lr
 8013002:	bf00      	nop
 8013004:	2000dd18 	.word	0x2000dd18

08013008 <recv_custom_msg>:
 8013008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801300c:	4693      	mov	fp, r2
 801300e:	b089      	sub	sp, #36	@ 0x24
 8013010:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8013014:	9305      	str	r3, [sp, #20]
 8013016:	468a      	mov	sl, r1
 8013018:	2100      	movs	r1, #0
 801301a:	4604      	mov	r4, r0
 801301c:	f88d 101e 	strb.w	r1, [sp, #30]
 8013020:	b322      	cbz	r2, 801306c <recv_custom_msg+0x64>
 8013022:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8013026:	f10d 081f 	add.w	r8, sp, #31
 801302a:	af05      	add	r7, sp, #20
 801302c:	f10d 061e 	add.w	r6, sp, #30
 8013030:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8013034:	e002      	b.n	801303c <recv_custom_msg+0x34>
 8013036:	9b05      	ldr	r3, [sp, #20]
 8013038:	2b00      	cmp	r3, #0
 801303a:	dd0f      	ble.n	801305c <recv_custom_msg+0x54>
 801303c:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8013040:	4623      	mov	r3, r4
 8013042:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8013046:	e9cd 5600 	strd	r5, r6, [sp]
 801304a:	4622      	mov	r2, r4
 801304c:	4648      	mov	r0, r9
 801304e:	f001 f92d 	bl	80142ac <uxr_read_framed_msg>
 8013052:	2800      	cmp	r0, #0
 8013054:	d0ef      	beq.n	8013036 <recv_custom_msg+0x2e>
 8013056:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801305a:	b1b3      	cbz	r3, 801308a <recv_custom_msg+0x82>
 801305c:	4b0f      	ldr	r3, [pc, #60]	@ (801309c <recv_custom_msg+0x94>)
 801305e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013062:	701a      	strb	r2, [r3, #0]
 8013064:	2000      	movs	r0, #0
 8013066:	b009      	add	sp, #36	@ 0x24
 8013068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801306c:	f10d 021f 	add.w	r2, sp, #31
 8013070:	9200      	str	r2, [sp, #0]
 8013072:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8013076:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801307a:	4601      	mov	r1, r0
 801307c:	47a8      	blx	r5
 801307e:	2800      	cmp	r0, #0
 8013080:	d0ec      	beq.n	801305c <recv_custom_msg+0x54>
 8013082:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d1e8      	bne.n	801305c <recv_custom_msg+0x54>
 801308a:	f8cb 0000 	str.w	r0, [fp]
 801308e:	2001      	movs	r0, #1
 8013090:	f8ca 4000 	str.w	r4, [sl]
 8013094:	b009      	add	sp, #36	@ 0x24
 8013096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801309a:	bf00      	nop
 801309c:	2000dd18 	.word	0x2000dd18

080130a0 <send_custom_msg>:
 80130a0:	b530      	push	{r4, r5, lr}
 80130a2:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 80130a6:	b087      	sub	sp, #28
 80130a8:	4615      	mov	r5, r2
 80130aa:	b974      	cbnz	r4, 80130ca <send_custom_msg+0x2a>
 80130ac:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 80130b0:	f10d 0317 	add.w	r3, sp, #23
 80130b4:	47a0      	blx	r4
 80130b6:	b108      	cbz	r0, 80130bc <send_custom_msg+0x1c>
 80130b8:	42a8      	cmp	r0, r5
 80130ba:	d015      	beq.n	80130e8 <send_custom_msg+0x48>
 80130bc:	4b0c      	ldr	r3, [pc, #48]	@ (80130f0 <send_custom_msg+0x50>)
 80130be:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80130c2:	701a      	strb	r2, [r3, #0]
 80130c4:	2000      	movs	r0, #0
 80130c6:	b007      	add	sp, #28
 80130c8:	bd30      	pop	{r4, r5, pc}
 80130ca:	460b      	mov	r3, r1
 80130cc:	2200      	movs	r2, #0
 80130ce:	f10d 0117 	add.w	r1, sp, #23
 80130d2:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80130d6:	4602      	mov	r2, r0
 80130d8:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80130dc:	9500      	str	r5, [sp, #0]
 80130de:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80130e2:	f000 feeb 	bl	8013ebc <uxr_write_framed_msg>
 80130e6:	e7e6      	b.n	80130b6 <send_custom_msg+0x16>
 80130e8:	2001      	movs	r0, #1
 80130ea:	b007      	add	sp, #28
 80130ec:	bd30      	pop	{r4, r5, pc}
 80130ee:	bf00      	nop
 80130f0:	2000dd18 	.word	0x2000dd18

080130f4 <uxr_set_custom_transport_callbacks>:
 80130f4:	b410      	push	{r4}
 80130f6:	9c01      	ldr	r4, [sp, #4]
 80130f8:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 80130fc:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8013100:	9b02      	ldr	r3, [sp, #8]
 8013102:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8013106:	f85d 4b04 	ldr.w	r4, [sp], #4
 801310a:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 801310e:	4770      	bx	lr

08013110 <uxr_init_custom_transport>:
 8013110:	b538      	push	{r3, r4, r5, lr}
 8013112:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8013116:	b303      	cbz	r3, 801315a <uxr_init_custom_transport+0x4a>
 8013118:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 801311c:	4604      	mov	r4, r0
 801311e:	b1e2      	cbz	r2, 801315a <uxr_init_custom_transport+0x4a>
 8013120:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8013124:	b1ca      	cbz	r2, 801315a <uxr_init_custom_transport+0x4a>
 8013126:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801312a:	b1b2      	cbz	r2, 801315a <uxr_init_custom_transport+0x4a>
 801312c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8013130:	4798      	blx	r3
 8013132:	4605      	mov	r5, r0
 8013134:	b188      	cbz	r0, 801315a <uxr_init_custom_transport+0x4a>
 8013136:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801313a:	b98b      	cbnz	r3, 8013160 <uxr_init_custom_transport+0x50>
 801313c:	490b      	ldr	r1, [pc, #44]	@ (801316c <uxr_init_custom_transport+0x5c>)
 801313e:	4b0c      	ldr	r3, [pc, #48]	@ (8013170 <uxr_init_custom_transport+0x60>)
 8013140:	4a0c      	ldr	r2, [pc, #48]	@ (8013174 <uxr_init_custom_transport+0x64>)
 8013142:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8013146:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801314a:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801314e:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8013152:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8013156:	4628      	mov	r0, r5
 8013158:	bd38      	pop	{r3, r4, r5, pc}
 801315a:	2500      	movs	r5, #0
 801315c:	4628      	mov	r0, r5
 801315e:	bd38      	pop	{r3, r4, r5, pc}
 8013160:	2100      	movs	r1, #0
 8013162:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8013166:	f000 fea3 	bl	8013eb0 <uxr_init_framing_io>
 801316a:	e7e7      	b.n	801313c <uxr_init_custom_transport+0x2c>
 801316c:	080130a1 	.word	0x080130a1
 8013170:	08013009 	.word	0x08013009
 8013174:	08012ffd 	.word	0x08012ffd

08013178 <uxr_close_custom_transport>:
 8013178:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801317c:	4718      	bx	r3
 801317e:	bf00      	nop

08013180 <uxr_init_input_best_effort_stream>:
 8013180:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013184:	8003      	strh	r3, [r0, #0]
 8013186:	4770      	bx	lr

08013188 <uxr_reset_input_best_effort_stream>:
 8013188:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801318c:	8003      	strh	r3, [r0, #0]
 801318e:	4770      	bx	lr

08013190 <uxr_receive_best_effort_message>:
 8013190:	b538      	push	{r3, r4, r5, lr}
 8013192:	4604      	mov	r4, r0
 8013194:	8800      	ldrh	r0, [r0, #0]
 8013196:	460d      	mov	r5, r1
 8013198:	f000 fe72 	bl	8013e80 <uxr_seq_num_cmp>
 801319c:	4603      	mov	r3, r0
 801319e:	2b00      	cmp	r3, #0
 80131a0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80131a4:	bfb8      	it	lt
 80131a6:	8025      	strhlt	r5, [r4, #0]
 80131a8:	bd38      	pop	{r3, r4, r5, pc}
 80131aa:	bf00      	nop

080131ac <on_full_input_buffer>:
 80131ac:	b570      	push	{r4, r5, r6, lr}
 80131ae:	4605      	mov	r5, r0
 80131b0:	460c      	mov	r4, r1
 80131b2:	682b      	ldr	r3, [r5, #0]
 80131b4:	6809      	ldr	r1, [r1, #0]
 80131b6:	8920      	ldrh	r0, [r4, #8]
 80131b8:	6862      	ldr	r2, [r4, #4]
 80131ba:	fbb2 f2f0 	udiv	r2, r2, r0
 80131be:	eba3 0c01 	sub.w	ip, r3, r1
 80131c2:	fbbc fcf2 	udiv	ip, ip, r2
 80131c6:	f10c 0c01 	add.w	ip, ip, #1
 80131ca:	fa1f f38c 	uxth.w	r3, ip
 80131ce:	fbb3 f6f0 	udiv	r6, r3, r0
 80131d2:	fb00 3316 	mls	r3, r0, r6, r3
 80131d6:	b29b      	uxth	r3, r3
 80131d8:	fb02 f303 	mul.w	r3, r2, r3
 80131dc:	1d18      	adds	r0, r3, #4
 80131de:	4408      	add	r0, r1
 80131e0:	7d26      	ldrb	r6, [r4, #20]
 80131e2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80131e6:	b116      	cbz	r6, 80131ee <on_full_input_buffer+0x42>
 80131e8:	2600      	movs	r6, #0
 80131ea:	f840 6c04 	str.w	r6, [r0, #-4]
 80131ee:	2a03      	cmp	r2, #3
 80131f0:	d801      	bhi.n	80131f6 <on_full_input_buffer+0x4a>
 80131f2:	2001      	movs	r0, #1
 80131f4:	bd70      	pop	{r4, r5, r6, pc}
 80131f6:	3308      	adds	r3, #8
 80131f8:	4419      	add	r1, r3
 80131fa:	4628      	mov	r0, r5
 80131fc:	692b      	ldr	r3, [r5, #16]
 80131fe:	3a04      	subs	r2, #4
 8013200:	f7f6 fb4e 	bl	80098a0 <ucdr_init_buffer_origin>
 8013204:	4628      	mov	r0, r5
 8013206:	4903      	ldr	r1, [pc, #12]	@ (8013214 <on_full_input_buffer+0x68>)
 8013208:	4622      	mov	r2, r4
 801320a:	f7f6 fb25 	bl	8009858 <ucdr_set_on_full_buffer_callback>
 801320e:	2000      	movs	r0, #0
 8013210:	bd70      	pop	{r4, r5, r6, pc}
 8013212:	bf00      	nop
 8013214:	080131ad 	.word	0x080131ad

08013218 <uxr_init_input_reliable_stream>:
 8013218:	b500      	push	{lr}
 801321a:	e9c0 1200 	strd	r1, r2, [r0]
 801321e:	f04f 0e00 	mov.w	lr, #0
 8013222:	9a01      	ldr	r2, [sp, #4]
 8013224:	8103      	strh	r3, [r0, #8]
 8013226:	6102      	str	r2, [r0, #16]
 8013228:	f880 e014 	strb.w	lr, [r0, #20]
 801322c:	b1d3      	cbz	r3, 8013264 <uxr_init_input_reliable_stream+0x4c>
 801322e:	f8c1 e000 	str.w	lr, [r1]
 8013232:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013236:	f1bc 0f01 	cmp.w	ip, #1
 801323a:	d913      	bls.n	8013264 <uxr_init_input_reliable_stream+0x4c>
 801323c:	2301      	movs	r3, #1
 801323e:	fbb3 f1fc 	udiv	r1, r3, ip
 8013242:	fb0c 3111 	mls	r1, ip, r1, r3
 8013246:	b289      	uxth	r1, r1
 8013248:	6842      	ldr	r2, [r0, #4]
 801324a:	fbb2 f2fc 	udiv	r2, r2, ip
 801324e:	fb01 f202 	mul.w	r2, r1, r2
 8013252:	6801      	ldr	r1, [r0, #0]
 8013254:	f841 e002 	str.w	lr, [r1, r2]
 8013258:	3301      	adds	r3, #1
 801325a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801325e:	b29b      	uxth	r3, r3
 8013260:	459c      	cmp	ip, r3
 8013262:	d8ec      	bhi.n	801323e <uxr_init_input_reliable_stream+0x26>
 8013264:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013268:	60c3      	str	r3, [r0, #12]
 801326a:	f85d fb04 	ldr.w	pc, [sp], #4
 801326e:	bf00      	nop

08013270 <uxr_reset_input_reliable_stream>:
 8013270:	8901      	ldrh	r1, [r0, #8]
 8013272:	b1e9      	cbz	r1, 80132b0 <uxr_reset_input_reliable_stream+0x40>
 8013274:	f04f 0c00 	mov.w	ip, #0
 8013278:	b500      	push	{lr}
 801327a:	4663      	mov	r3, ip
 801327c:	46e6      	mov	lr, ip
 801327e:	fbb3 f2f1 	udiv	r2, r3, r1
 8013282:	fb01 3312 	mls	r3, r1, r2, r3
 8013286:	b29b      	uxth	r3, r3
 8013288:	6842      	ldr	r2, [r0, #4]
 801328a:	fbb2 f2f1 	udiv	r2, r2, r1
 801328e:	fb02 f303 	mul.w	r3, r2, r3
 8013292:	6802      	ldr	r2, [r0, #0]
 8013294:	f842 e003 	str.w	lr, [r2, r3]
 8013298:	f10c 0c01 	add.w	ip, ip, #1
 801329c:	8901      	ldrh	r1, [r0, #8]
 801329e:	fa1f f38c 	uxth.w	r3, ip
 80132a2:	4299      	cmp	r1, r3
 80132a4:	d8eb      	bhi.n	801327e <uxr_reset_input_reliable_stream+0xe>
 80132a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80132aa:	60c3      	str	r3, [r0, #12]
 80132ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80132b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80132b4:	60c3      	str	r3, [r0, #12]
 80132b6:	4770      	bx	lr

080132b8 <uxr_receive_reliable_message>:
 80132b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132bc:	4604      	mov	r4, r0
 80132be:	460d      	mov	r5, r1
 80132c0:	8901      	ldrh	r1, [r0, #8]
 80132c2:	8980      	ldrh	r0, [r0, #12]
 80132c4:	4690      	mov	r8, r2
 80132c6:	461f      	mov	r7, r3
 80132c8:	f000 fdd2 	bl	8013e70 <uxr_seq_num_add>
 80132cc:	4629      	mov	r1, r5
 80132ce:	4606      	mov	r6, r0
 80132d0:	89a0      	ldrh	r0, [r4, #12]
 80132d2:	f000 fdd5 	bl	8013e80 <uxr_seq_num_cmp>
 80132d6:	2800      	cmp	r0, #0
 80132d8:	db0a      	blt.n	80132f0 <uxr_receive_reliable_message+0x38>
 80132da:	2600      	movs	r6, #0
 80132dc:	89e0      	ldrh	r0, [r4, #14]
 80132de:	4629      	mov	r1, r5
 80132e0:	f000 fdce 	bl	8013e80 <uxr_seq_num_cmp>
 80132e4:	2800      	cmp	r0, #0
 80132e6:	da00      	bge.n	80132ea <uxr_receive_reliable_message+0x32>
 80132e8:	81e5      	strh	r5, [r4, #14]
 80132ea:	4630      	mov	r0, r6
 80132ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132f0:	4630      	mov	r0, r6
 80132f2:	4629      	mov	r1, r5
 80132f4:	f000 fdc4 	bl	8013e80 <uxr_seq_num_cmp>
 80132f8:	2800      	cmp	r0, #0
 80132fa:	dbee      	blt.n	80132da <uxr_receive_reliable_message+0x22>
 80132fc:	6923      	ldr	r3, [r4, #16]
 80132fe:	4640      	mov	r0, r8
 8013300:	4798      	blx	r3
 8013302:	2101      	movs	r1, #1
 8013304:	4681      	mov	r9, r0
 8013306:	89a0      	ldrh	r0, [r4, #12]
 8013308:	f000 fdb2 	bl	8013e70 <uxr_seq_num_add>
 801330c:	f1b9 0f00 	cmp.w	r9, #0
 8013310:	d101      	bne.n	8013316 <uxr_receive_reliable_message+0x5e>
 8013312:	4285      	cmp	r5, r0
 8013314:	d047      	beq.n	80133a6 <uxr_receive_reliable_message+0xee>
 8013316:	8922      	ldrh	r2, [r4, #8]
 8013318:	fbb5 f0f2 	udiv	r0, r5, r2
 801331c:	fb02 5010 	mls	r0, r2, r0, r5
 8013320:	b280      	uxth	r0, r0
 8013322:	6863      	ldr	r3, [r4, #4]
 8013324:	fbb3 f3f2 	udiv	r3, r3, r2
 8013328:	fb00 f303 	mul.w	r3, r0, r3
 801332c:	6820      	ldr	r0, [r4, #0]
 801332e:	3304      	adds	r3, #4
 8013330:	4418      	add	r0, r3
 8013332:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d1cf      	bne.n	80132da <uxr_receive_reliable_message+0x22>
 801333a:	4641      	mov	r1, r8
 801333c:	463a      	mov	r2, r7
 801333e:	f002 fb50 	bl	80159e2 <memcpy>
 8013342:	8921      	ldrh	r1, [r4, #8]
 8013344:	fbb5 f2f1 	udiv	r2, r5, r1
 8013348:	fb01 5212 	mls	r2, r1, r2, r5
 801334c:	b292      	uxth	r2, r2
 801334e:	6863      	ldr	r3, [r4, #4]
 8013350:	fbb3 f3f1 	udiv	r3, r3, r1
 8013354:	fb02 f303 	mul.w	r3, r2, r3
 8013358:	6822      	ldr	r2, [r4, #0]
 801335a:	50d7      	str	r7, [r2, r3]
 801335c:	9a08      	ldr	r2, [sp, #32]
 801335e:	2301      	movs	r3, #1
 8013360:	7013      	strb	r3, [r2, #0]
 8013362:	f1b9 0f00 	cmp.w	r9, #0
 8013366:	d0b8      	beq.n	80132da <uxr_receive_reliable_message+0x22>
 8013368:	89a6      	ldrh	r6, [r4, #12]
 801336a:	4630      	mov	r0, r6
 801336c:	2101      	movs	r1, #1
 801336e:	f000 fd7f 	bl	8013e70 <uxr_seq_num_add>
 8013372:	8922      	ldrh	r2, [r4, #8]
 8013374:	6863      	ldr	r3, [r4, #4]
 8013376:	fbb3 f3f2 	udiv	r3, r3, r2
 801337a:	4606      	mov	r6, r0
 801337c:	fbb0 f0f2 	udiv	r0, r0, r2
 8013380:	fb02 6010 	mls	r0, r2, r0, r6
 8013384:	b280      	uxth	r0, r0
 8013386:	fb00 f303 	mul.w	r3, r0, r3
 801338a:	6820      	ldr	r0, [r4, #0]
 801338c:	3304      	adds	r3, #4
 801338e:	4418      	add	r0, r3
 8013390:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d0a0      	beq.n	80132da <uxr_receive_reliable_message+0x22>
 8013398:	6923      	ldr	r3, [r4, #16]
 801339a:	4798      	blx	r3
 801339c:	2802      	cmp	r0, #2
 801339e:	d008      	beq.n	80133b2 <uxr_receive_reliable_message+0xfa>
 80133a0:	2801      	cmp	r0, #1
 80133a2:	d0e2      	beq.n	801336a <uxr_receive_reliable_message+0xb2>
 80133a4:	e799      	b.n	80132da <uxr_receive_reliable_message+0x22>
 80133a6:	9b08      	ldr	r3, [sp, #32]
 80133a8:	81a5      	strh	r5, [r4, #12]
 80133aa:	2601      	movs	r6, #1
 80133ac:	f883 9000 	strb.w	r9, [r3]
 80133b0:	e794      	b.n	80132dc <uxr_receive_reliable_message+0x24>
 80133b2:	2601      	movs	r6, #1
 80133b4:	e792      	b.n	80132dc <uxr_receive_reliable_message+0x24>
 80133b6:	bf00      	nop

080133b8 <uxr_next_input_reliable_buffer_available>:
 80133b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133bc:	4604      	mov	r4, r0
 80133be:	460f      	mov	r7, r1
 80133c0:	8980      	ldrh	r0, [r0, #12]
 80133c2:	2101      	movs	r1, #1
 80133c4:	4690      	mov	r8, r2
 80133c6:	f000 fd53 	bl	8013e70 <uxr_seq_num_add>
 80133ca:	8922      	ldrh	r2, [r4, #8]
 80133cc:	fbb0 f6f2 	udiv	r6, r0, r2
 80133d0:	fb02 0616 	mls	r6, r2, r6, r0
 80133d4:	b2b6      	uxth	r6, r6
 80133d6:	6863      	ldr	r3, [r4, #4]
 80133d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80133dc:	fb06 f303 	mul.w	r3, r6, r3
 80133e0:	6826      	ldr	r6, [r4, #0]
 80133e2:	3304      	adds	r3, #4
 80133e4:	441e      	add	r6, r3
 80133e6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80133ea:	f1b9 0f00 	cmp.w	r9, #0
 80133ee:	d023      	beq.n	8013438 <uxr_next_input_reliable_buffer_available+0x80>
 80133f0:	6923      	ldr	r3, [r4, #16]
 80133f2:	4605      	mov	r5, r0
 80133f4:	4630      	mov	r0, r6
 80133f6:	4798      	blx	r3
 80133f8:	4682      	mov	sl, r0
 80133fa:	b300      	cbz	r0, 801343e <uxr_next_input_reliable_buffer_available+0x86>
 80133fc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8013400:	2101      	movs	r1, #1
 8013402:	4650      	mov	r0, sl
 8013404:	f000 fd34 	bl	8013e70 <uxr_seq_num_add>
 8013408:	8921      	ldrh	r1, [r4, #8]
 801340a:	fbb0 f2f1 	udiv	r2, r0, r1
 801340e:	4682      	mov	sl, r0
 8013410:	fb01 0212 	mls	r2, r1, r2, r0
 8013414:	e9d4 0300 	ldrd	r0, r3, [r4]
 8013418:	b292      	uxth	r2, r2
 801341a:	fbb3 f3f1 	udiv	r3, r3, r1
 801341e:	fb02 f303 	mul.w	r3, r2, r3
 8013422:	3304      	adds	r3, #4
 8013424:	4418      	add	r0, r3
 8013426:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801342a:	b12b      	cbz	r3, 8013438 <uxr_next_input_reliable_buffer_available+0x80>
 801342c:	6923      	ldr	r3, [r4, #16]
 801342e:	4798      	blx	r3
 8013430:	2802      	cmp	r0, #2
 8013432:	d01b      	beq.n	801346c <uxr_next_input_reliable_buffer_available+0xb4>
 8013434:	2801      	cmp	r0, #1
 8013436:	d0e3      	beq.n	8013400 <uxr_next_input_reliable_buffer_available+0x48>
 8013438:	2000      	movs	r0, #0
 801343a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801343e:	464a      	mov	r2, r9
 8013440:	4631      	mov	r1, r6
 8013442:	4638      	mov	r0, r7
 8013444:	f7f6 fa34 	bl	80098b0 <ucdr_init_buffer>
 8013448:	8921      	ldrh	r1, [r4, #8]
 801344a:	fbb5 f2f1 	udiv	r2, r5, r1
 801344e:	fb01 5212 	mls	r2, r1, r2, r5
 8013452:	b292      	uxth	r2, r2
 8013454:	6863      	ldr	r3, [r4, #4]
 8013456:	fbb3 f3f1 	udiv	r3, r3, r1
 801345a:	fb02 f303 	mul.w	r3, r2, r3
 801345e:	6822      	ldr	r2, [r4, #0]
 8013460:	f842 a003 	str.w	sl, [r2, r3]
 8013464:	2001      	movs	r0, #1
 8013466:	81a5      	strh	r5, [r4, #12]
 8013468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801346c:	8920      	ldrh	r0, [r4, #8]
 801346e:	fbb5 f3f0 	udiv	r3, r5, r0
 8013472:	fb00 5513 	mls	r5, r0, r3, r5
 8013476:	b2ad      	uxth	r5, r5
 8013478:	6863      	ldr	r3, [r4, #4]
 801347a:	fbb3 f3f0 	udiv	r3, r3, r0
 801347e:	fb03 f505 	mul.w	r5, r3, r5
 8013482:	6823      	ldr	r3, [r4, #0]
 8013484:	2000      	movs	r0, #0
 8013486:	5158      	str	r0, [r3, r5]
 8013488:	eb06 0108 	add.w	r1, r6, r8
 801348c:	eba9 0208 	sub.w	r2, r9, r8
 8013490:	4638      	mov	r0, r7
 8013492:	f7f6 fa0d 	bl	80098b0 <ucdr_init_buffer>
 8013496:	4638      	mov	r0, r7
 8013498:	4903      	ldr	r1, [pc, #12]	@ (80134a8 <uxr_next_input_reliable_buffer_available+0xf0>)
 801349a:	4622      	mov	r2, r4
 801349c:	f7f6 f9dc 	bl	8009858 <ucdr_set_on_full_buffer_callback>
 80134a0:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80134a4:	2001      	movs	r0, #1
 80134a6:	e7c8      	b.n	801343a <uxr_next_input_reliable_buffer_available+0x82>
 80134a8:	080131ad 	.word	0x080131ad

080134ac <uxr_process_heartbeat>:
 80134ac:	b538      	push	{r3, r4, r5, lr}
 80134ae:	4611      	mov	r1, r2
 80134b0:	4604      	mov	r4, r0
 80134b2:	89c0      	ldrh	r0, [r0, #14]
 80134b4:	4615      	mov	r5, r2
 80134b6:	f000 fce3 	bl	8013e80 <uxr_seq_num_cmp>
 80134ba:	2800      	cmp	r0, #0
 80134bc:	bfb8      	it	lt
 80134be:	81e5      	strhlt	r5, [r4, #14]
 80134c0:	bd38      	pop	{r3, r4, r5, pc}
 80134c2:	bf00      	nop

080134c4 <uxr_compute_acknack>:
 80134c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134c8:	8903      	ldrh	r3, [r0, #8]
 80134ca:	8985      	ldrh	r5, [r0, #12]
 80134cc:	4604      	mov	r4, r0
 80134ce:	460e      	mov	r6, r1
 80134d0:	b1d3      	cbz	r3, 8013508 <uxr_compute_acknack+0x44>
 80134d2:	4628      	mov	r0, r5
 80134d4:	2701      	movs	r7, #1
 80134d6:	e003      	b.n	80134e0 <uxr_compute_acknack+0x1c>
 80134d8:	4567      	cmp	r7, ip
 80134da:	d215      	bcs.n	8013508 <uxr_compute_acknack+0x44>
 80134dc:	89a0      	ldrh	r0, [r4, #12]
 80134de:	3701      	adds	r7, #1
 80134e0:	b2b9      	uxth	r1, r7
 80134e2:	f000 fcc5 	bl	8013e70 <uxr_seq_num_add>
 80134e6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80134ea:	fbb0 f3fc 	udiv	r3, r0, ip
 80134ee:	fb0c 0313 	mls	r3, ip, r3, r0
 80134f2:	b29a      	uxth	r2, r3
 80134f4:	e9d4 1300 	ldrd	r1, r3, [r4]
 80134f8:	fbb3 f3fc 	udiv	r3, r3, ip
 80134fc:	fb02 f303 	mul.w	r3, r2, r3
 8013500:	58cb      	ldr	r3, [r1, r3]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d1e8      	bne.n	80134d8 <uxr_compute_acknack+0x14>
 8013506:	4605      	mov	r5, r0
 8013508:	8035      	strh	r5, [r6, #0]
 801350a:	2101      	movs	r1, #1
 801350c:	4628      	mov	r0, r5
 801350e:	89e7      	ldrh	r7, [r4, #14]
 8013510:	f000 fcb2 	bl	8013e78 <uxr_seq_num_sub>
 8013514:	4601      	mov	r1, r0
 8013516:	4638      	mov	r0, r7
 8013518:	f000 fcae 	bl	8013e78 <uxr_seq_num_sub>
 801351c:	4605      	mov	r5, r0
 801351e:	b318      	cbz	r0, 8013568 <uxr_compute_acknack+0xa4>
 8013520:	f04f 0900 	mov.w	r9, #0
 8013524:	464f      	mov	r7, r9
 8013526:	f04f 0801 	mov.w	r8, #1
 801352a:	fa1f f189 	uxth.w	r1, r9
 801352e:	8830      	ldrh	r0, [r6, #0]
 8013530:	f000 fc9e 	bl	8013e70 <uxr_seq_num_add>
 8013534:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013538:	fbb0 f3fc 	udiv	r3, r0, ip
 801353c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8013540:	fb03 001c 	mls	r0, r3, ip, r0
 8013544:	b283      	uxth	r3, r0
 8013546:	fbb2 f2fc 	udiv	r2, r2, ip
 801354a:	fb02 f303 	mul.w	r3, r2, r3
 801354e:	fa08 f209 	lsl.w	r2, r8, r9
 8013552:	58cb      	ldr	r3, [r1, r3]
 8013554:	f109 0901 	add.w	r9, r9, #1
 8013558:	b90b      	cbnz	r3, 801355e <uxr_compute_acknack+0x9a>
 801355a:	4317      	orrs	r7, r2
 801355c:	b2bf      	uxth	r7, r7
 801355e:	454d      	cmp	r5, r9
 8013560:	d1e3      	bne.n	801352a <uxr_compute_acknack+0x66>
 8013562:	4638      	mov	r0, r7
 8013564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013568:	4607      	mov	r7, r0
 801356a:	4638      	mov	r0, r7
 801356c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013570 <uxr_init_output_best_effort_stream>:
 8013570:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8013574:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8013578:	6001      	str	r1, [r0, #0]
 801357a:	7303      	strb	r3, [r0, #12]
 801357c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8013580:	4770      	bx	lr
 8013582:	bf00      	nop

08013584 <uxr_reset_output_best_effort_stream>:
 8013584:	7b02      	ldrb	r2, [r0, #12]
 8013586:	6042      	str	r2, [r0, #4]
 8013588:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801358c:	81c3      	strh	r3, [r0, #14]
 801358e:	4770      	bx	lr

08013590 <uxr_prepare_best_effort_buffer_to_write>:
 8013590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013592:	4604      	mov	r4, r0
 8013594:	b083      	sub	sp, #12
 8013596:	6840      	ldr	r0, [r0, #4]
 8013598:	460d      	mov	r5, r1
 801359a:	4616      	mov	r6, r2
 801359c:	f7f9 fd0c 	bl	800cfb8 <uxr_submessage_padding>
 80135a0:	6863      	ldr	r3, [r4, #4]
 80135a2:	4418      	add	r0, r3
 80135a4:	68a3      	ldr	r3, [r4, #8]
 80135a6:	1942      	adds	r2, r0, r5
 80135a8:	4293      	cmp	r3, r2
 80135aa:	bf2c      	ite	cs
 80135ac:	2701      	movcs	r7, #1
 80135ae:	2700      	movcc	r7, #0
 80135b0:	d202      	bcs.n	80135b8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80135b2:	4638      	mov	r0, r7
 80135b4:	b003      	add	sp, #12
 80135b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135b8:	9000      	str	r0, [sp, #0]
 80135ba:	6821      	ldr	r1, [r4, #0]
 80135bc:	4630      	mov	r0, r6
 80135be:	2300      	movs	r3, #0
 80135c0:	f7f6 f964 	bl	800988c <ucdr_init_buffer_origin_offset>
 80135c4:	6861      	ldr	r1, [r4, #4]
 80135c6:	4638      	mov	r0, r7
 80135c8:	4429      	add	r1, r5
 80135ca:	6061      	str	r1, [r4, #4]
 80135cc:	b003      	add	sp, #12
 80135ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080135d0 <uxr_prepare_best_effort_buffer_to_send>:
 80135d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135d4:	4604      	mov	r4, r0
 80135d6:	461d      	mov	r5, r3
 80135d8:	6840      	ldr	r0, [r0, #4]
 80135da:	7b23      	ldrb	r3, [r4, #12]
 80135dc:	4298      	cmp	r0, r3
 80135de:	bf8c      	ite	hi
 80135e0:	2601      	movhi	r6, #1
 80135e2:	2600      	movls	r6, #0
 80135e4:	d802      	bhi.n	80135ec <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80135e6:	4630      	mov	r0, r6
 80135e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135ec:	4688      	mov	r8, r1
 80135ee:	89e0      	ldrh	r0, [r4, #14]
 80135f0:	2101      	movs	r1, #1
 80135f2:	4617      	mov	r7, r2
 80135f4:	f000 fc3c 	bl	8013e70 <uxr_seq_num_add>
 80135f8:	6823      	ldr	r3, [r4, #0]
 80135fa:	81e0      	strh	r0, [r4, #14]
 80135fc:	8028      	strh	r0, [r5, #0]
 80135fe:	f8c8 3000 	str.w	r3, [r8]
 8013602:	6863      	ldr	r3, [r4, #4]
 8013604:	603b      	str	r3, [r7, #0]
 8013606:	7b23      	ldrb	r3, [r4, #12]
 8013608:	6063      	str	r3, [r4, #4]
 801360a:	4630      	mov	r0, r6
 801360c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013610 <on_full_output_buffer>:
 8013610:	b538      	push	{r3, r4, r5, lr}
 8013612:	6802      	ldr	r2, [r0, #0]
 8013614:	460c      	mov	r4, r1
 8013616:	6809      	ldr	r1, [r1, #0]
 8013618:	8923      	ldrh	r3, [r4, #8]
 801361a:	eba2 0c01 	sub.w	ip, r2, r1
 801361e:	6862      	ldr	r2, [r4, #4]
 8013620:	fbb2 f2f3 	udiv	r2, r2, r3
 8013624:	fbbc fcf2 	udiv	ip, ip, r2
 8013628:	f10c 0c01 	add.w	ip, ip, #1
 801362c:	fa1f fc8c 	uxth.w	ip, ip
 8013630:	fbbc fef3 	udiv	lr, ip, r3
 8013634:	fb03 c31e 	mls	r3, r3, lr, ip
 8013638:	b29b      	uxth	r3, r3
 801363a:	fb02 f303 	mul.w	r3, r2, r3
 801363e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8013642:	58ca      	ldr	r2, [r1, r3]
 8013644:	4463      	add	r3, ip
 8013646:	eba2 020c 	sub.w	r2, r2, ip
 801364a:	3308      	adds	r3, #8
 801364c:	4605      	mov	r5, r0
 801364e:	4419      	add	r1, r3
 8013650:	3a04      	subs	r2, #4
 8013652:	6903      	ldr	r3, [r0, #16]
 8013654:	f7f6 f924 	bl	80098a0 <ucdr_init_buffer_origin>
 8013658:	4628      	mov	r0, r5
 801365a:	4903      	ldr	r1, [pc, #12]	@ (8013668 <on_full_output_buffer+0x58>)
 801365c:	4622      	mov	r2, r4
 801365e:	f7f6 f8fb 	bl	8009858 <ucdr_set_on_full_buffer_callback>
 8013662:	2000      	movs	r0, #0
 8013664:	bd38      	pop	{r3, r4, r5, pc}
 8013666:	bf00      	nop
 8013668:	08013611 	.word	0x08013611

0801366c <uxr_init_output_reliable_stream>:
 801366c:	b410      	push	{r4}
 801366e:	f89d c004 	ldrb.w	ip, [sp, #4]
 8013672:	8103      	strh	r3, [r0, #8]
 8013674:	e9c0 1200 	strd	r1, r2, [r0]
 8013678:	f880 c00c 	strb.w	ip, [r0, #12]
 801367c:	b1d3      	cbz	r3, 80136b4 <uxr_init_output_reliable_stream+0x48>
 801367e:	f8c1 c000 	str.w	ip, [r1]
 8013682:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013686:	f1bc 0f01 	cmp.w	ip, #1
 801368a:	d913      	bls.n	80136b4 <uxr_init_output_reliable_stream+0x48>
 801368c:	2301      	movs	r3, #1
 801368e:	fbb3 f1fc 	udiv	r1, r3, ip
 8013692:	fb0c 3111 	mls	r1, ip, r1, r3
 8013696:	b289      	uxth	r1, r1
 8013698:	6842      	ldr	r2, [r0, #4]
 801369a:	6804      	ldr	r4, [r0, #0]
 801369c:	fbb2 f2fc 	udiv	r2, r2, ip
 80136a0:	fb01 f202 	mul.w	r2, r1, r2
 80136a4:	7b01      	ldrb	r1, [r0, #12]
 80136a6:	50a1      	str	r1, [r4, r2]
 80136a8:	3301      	adds	r3, #1
 80136aa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80136ae:	b29b      	uxth	r3, r3
 80136b0:	459c      	cmp	ip, r3
 80136b2:	d8ec      	bhi.n	801368e <uxr_init_output_reliable_stream+0x22>
 80136b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80136b8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80136bc:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80136c0:	4905      	ldr	r1, [pc, #20]	@ (80136d8 <uxr_init_output_reliable_stream+0x6c>)
 80136c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136c6:	f8c0 100e 	str.w	r1, [r0, #14]
 80136ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80136ce:	2300      	movs	r3, #0
 80136d0:	8242      	strh	r2, [r0, #18]
 80136d2:	8403      	strh	r3, [r0, #32]
 80136d4:	4770      	bx	lr
 80136d6:	bf00      	nop
 80136d8:	ffff0000 	.word	0xffff0000

080136dc <uxr_reset_output_reliable_stream>:
 80136dc:	8901      	ldrh	r1, [r0, #8]
 80136de:	b1b1      	cbz	r1, 801370e <uxr_reset_output_reliable_stream+0x32>
 80136e0:	f04f 0c00 	mov.w	ip, #0
 80136e4:	4663      	mov	r3, ip
 80136e6:	fbb3 f2f1 	udiv	r2, r3, r1
 80136ea:	fb01 3312 	mls	r3, r1, r2, r3
 80136ee:	b29b      	uxth	r3, r3
 80136f0:	6842      	ldr	r2, [r0, #4]
 80136f2:	fbb2 f2f1 	udiv	r2, r2, r1
 80136f6:	6801      	ldr	r1, [r0, #0]
 80136f8:	fb02 f303 	mul.w	r3, r2, r3
 80136fc:	7b02      	ldrb	r2, [r0, #12]
 80136fe:	50ca      	str	r2, [r1, r3]
 8013700:	f10c 0c01 	add.w	ip, ip, #1
 8013704:	8901      	ldrh	r1, [r0, #8]
 8013706:	fa1f f38c 	uxth.w	r3, ip
 801370a:	4299      	cmp	r1, r3
 801370c:	d8eb      	bhi.n	80136e6 <uxr_reset_output_reliable_stream+0xa>
 801370e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013712:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013716:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801371a:	4904      	ldr	r1, [pc, #16]	@ (801372c <uxr_reset_output_reliable_stream+0x50>)
 801371c:	f8c0 100e 	str.w	r1, [r0, #14]
 8013720:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013724:	2300      	movs	r3, #0
 8013726:	8242      	strh	r2, [r0, #18]
 8013728:	8403      	strh	r3, [r0, #32]
 801372a:	4770      	bx	lr
 801372c:	ffff0000 	.word	0xffff0000

08013730 <uxr_prepare_reliable_buffer_to_write>:
 8013730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013734:	4604      	mov	r4, r0
 8013736:	b091      	sub	sp, #68	@ 0x44
 8013738:	8900      	ldrh	r0, [r0, #8]
 801373a:	89e6      	ldrh	r6, [r4, #14]
 801373c:	6823      	ldr	r3, [r4, #0]
 801373e:	9204      	str	r2, [sp, #16]
 8013740:	fbb6 f2f0 	udiv	r2, r6, r0
 8013744:	fb00 6212 	mls	r2, r0, r2, r6
 8013748:	b292      	uxth	r2, r2
 801374a:	6865      	ldr	r5, [r4, #4]
 801374c:	fbb5 f5f0 	udiv	r5, r5, r0
 8013750:	fb05 3202 	mla	r2, r5, r2, r3
 8013754:	3204      	adds	r2, #4
 8013756:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801375a:	f894 900c 	ldrb.w	r9, [r4, #12]
 801375e:	9203      	str	r2, [sp, #12]
 8013760:	468b      	mov	fp, r1
 8013762:	1f2f      	subs	r7, r5, #4
 8013764:	2800      	cmp	r0, #0
 8013766:	f000 814c 	beq.w	8013a02 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801376a:	f04f 0c00 	mov.w	ip, #0
 801376e:	46e2      	mov	sl, ip
 8013770:	4661      	mov	r1, ip
 8013772:	fbb1 f2f0 	udiv	r2, r1, r0
 8013776:	fb00 1212 	mls	r2, r0, r2, r1
 801377a:	b292      	uxth	r2, r2
 801377c:	fb05 f202 	mul.w	r2, r5, r2
 8013780:	f10c 0c01 	add.w	ip, ip, #1
 8013784:	589a      	ldr	r2, [r3, r2]
 8013786:	454a      	cmp	r2, r9
 8013788:	bf08      	it	eq
 801378a:	f10a 0a01 	addeq.w	sl, sl, #1
 801378e:	fa1f f18c 	uxth.w	r1, ip
 8013792:	bf08      	it	eq
 8013794:	fa1f fa8a 	uxtheq.w	sl, sl
 8013798:	4281      	cmp	r1, r0
 801379a:	d3ea      	bcc.n	8013772 <uxr_prepare_reliable_buffer_to_write+0x42>
 801379c:	4640      	mov	r0, r8
 801379e:	2104      	movs	r1, #4
 80137a0:	f8cd a014 	str.w	sl, [sp, #20]
 80137a4:	f7f6 f888 	bl	80098b8 <ucdr_alignment>
 80137a8:	4480      	add	r8, r0
 80137aa:	eb08 020b 	add.w	r2, r8, fp
 80137ae:	42ba      	cmp	r2, r7
 80137b0:	f240 80cd 	bls.w	801394e <uxr_prepare_reliable_buffer_to_write+0x21e>
 80137b4:	7b22      	ldrb	r2, [r4, #12]
 80137b6:	445a      	add	r2, fp
 80137b8:	42ba      	cmp	r2, r7
 80137ba:	f240 80b5 	bls.w	8013928 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80137be:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80137c2:	33fc      	adds	r3, #252	@ 0xfc
 80137c4:	b2ba      	uxth	r2, r7
 80137c6:	4413      	add	r3, r2
 80137c8:	b29b      	uxth	r3, r3
 80137ca:	fb0a f903 	mul.w	r9, sl, r3
 80137ce:	45d9      	cmp	r9, fp
 80137d0:	9305      	str	r3, [sp, #20]
 80137d2:	9306      	str	r3, [sp, #24]
 80137d4:	f0c0 80b7 	bcc.w	8013946 <uxr_prepare_reliable_buffer_to_write+0x216>
 80137d8:	f108 0304 	add.w	r3, r8, #4
 80137dc:	42bb      	cmp	r3, r7
 80137de:	f080 80db 	bcs.w	8013998 <uxr_prepare_reliable_buffer_to_write+0x268>
 80137e2:	f1a2 0904 	sub.w	r9, r2, #4
 80137e6:	eba9 0908 	sub.w	r9, r9, r8
 80137ea:	9b05      	ldr	r3, [sp, #20]
 80137ec:	fa1f f989 	uxth.w	r9, r9
 80137f0:	ebab 0b09 	sub.w	fp, fp, r9
 80137f4:	fbbb f2f3 	udiv	r2, fp, r3
 80137f8:	fb03 b312 	mls	r3, r3, r2, fp
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	f000 80c8 	beq.w	8013992 <uxr_prepare_reliable_buffer_to_write+0x262>
 8013802:	3201      	adds	r2, #1
 8013804:	b292      	uxth	r2, r2
 8013806:	9306      	str	r3, [sp, #24]
 8013808:	4552      	cmp	r2, sl
 801380a:	f200 809c 	bhi.w	8013946 <uxr_prepare_reliable_buffer_to_write+0x216>
 801380e:	f10d 0b20 	add.w	fp, sp, #32
 8013812:	2a00      	cmp	r2, #0
 8013814:	d042      	beq.n	801389c <uxr_prepare_reliable_buffer_to_write+0x16c>
 8013816:	f8cd 801c 	str.w	r8, [sp, #28]
 801381a:	f04f 0a00 	mov.w	sl, #0
 801381e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013822:	9505      	str	r5, [sp, #20]
 8013824:	f10d 0b20 	add.w	fp, sp, #32
 8013828:	4615      	mov	r5, r2
 801382a:	e000      	b.n	801382e <uxr_prepare_reliable_buffer_to_write+0xfe>
 801382c:	46c1      	mov	r9, r8
 801382e:	8920      	ldrh	r0, [r4, #8]
 8013830:	fbb6 f2f0 	udiv	r2, r6, r0
 8013834:	fb00 6112 	mls	r1, r0, r2, r6
 8013838:	b28a      	uxth	r2, r1
 801383a:	6863      	ldr	r3, [r4, #4]
 801383c:	fbb3 f1f0 	udiv	r1, r3, r0
 8013840:	6823      	ldr	r3, [r4, #0]
 8013842:	fb02 f101 	mul.w	r1, r2, r1
 8013846:	3104      	adds	r1, #4
 8013848:	4419      	add	r1, r3
 801384a:	4658      	mov	r0, fp
 801384c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8013850:	9200      	str	r2, [sp, #0]
 8013852:	2300      	movs	r3, #0
 8013854:	463a      	mov	r2, r7
 8013856:	f7f6 f819 	bl	800988c <ucdr_init_buffer_origin_offset>
 801385a:	464a      	mov	r2, r9
 801385c:	2300      	movs	r3, #0
 801385e:	210d      	movs	r1, #13
 8013860:	4658      	mov	r0, fp
 8013862:	f7f9 fb69 	bl	800cf38 <uxr_buffer_submessage_header>
 8013866:	8921      	ldrh	r1, [r4, #8]
 8013868:	fbb6 f2f1 	udiv	r2, r6, r1
 801386c:	fb01 6212 	mls	r2, r1, r2, r6
 8013870:	b292      	uxth	r2, r2
 8013872:	6863      	ldr	r3, [r4, #4]
 8013874:	fbb3 f3f1 	udiv	r3, r3, r1
 8013878:	fb02 f303 	mul.w	r3, r2, r3
 801387c:	6822      	ldr	r2, [r4, #0]
 801387e:	4630      	mov	r0, r6
 8013880:	50d7      	str	r7, [r2, r3]
 8013882:	2101      	movs	r1, #1
 8013884:	f000 faf4 	bl	8013e70 <uxr_seq_num_add>
 8013888:	f10a 0a01 	add.w	sl, sl, #1
 801388c:	fa1f f38a 	uxth.w	r3, sl
 8013890:	429d      	cmp	r5, r3
 8013892:	4606      	mov	r6, r0
 8013894:	d8ca      	bhi.n	801382c <uxr_prepare_reliable_buffer_to_write+0xfc>
 8013896:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801389a:	9d05      	ldr	r5, [sp, #20]
 801389c:	8920      	ldrh	r0, [r4, #8]
 801389e:	fbb6 f3f0 	udiv	r3, r6, r0
 80138a2:	fb00 6313 	mls	r3, r0, r3, r6
 80138a6:	b299      	uxth	r1, r3
 80138a8:	6863      	ldr	r3, [r4, #4]
 80138aa:	fbb3 f3f0 	udiv	r3, r3, r0
 80138ae:	fb01 f303 	mul.w	r3, r1, r3
 80138b2:	6821      	ldr	r1, [r4, #0]
 80138b4:	3304      	adds	r3, #4
 80138b6:	4419      	add	r1, r3
 80138b8:	463a      	mov	r2, r7
 80138ba:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80138be:	9000      	str	r0, [sp, #0]
 80138c0:	2300      	movs	r3, #0
 80138c2:	4658      	mov	r0, fp
 80138c4:	f7f5 ffe2 	bl	800988c <ucdr_init_buffer_origin_offset>
 80138c8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80138cc:	4658      	mov	r0, fp
 80138ce:	fa1f f289 	uxth.w	r2, r9
 80138d2:	2302      	movs	r3, #2
 80138d4:	210d      	movs	r1, #13
 80138d6:	f7f9 fb2f 	bl	800cf38 <uxr_buffer_submessage_header>
 80138da:	9b03      	ldr	r3, [sp, #12]
 80138dc:	8927      	ldrh	r7, [r4, #8]
 80138de:	7b20      	ldrb	r0, [r4, #12]
 80138e0:	f108 0104 	add.w	r1, r8, #4
 80138e4:	440b      	add	r3, r1
 80138e6:	4619      	mov	r1, r3
 80138e8:	fbb6 f3f7 	udiv	r3, r6, r7
 80138ec:	fb07 6313 	mls	r3, r7, r3, r6
 80138f0:	f1a5 0208 	sub.w	r2, r5, #8
 80138f4:	b29d      	uxth	r5, r3
 80138f6:	3004      	adds	r0, #4
 80138f8:	6863      	ldr	r3, [r4, #4]
 80138fa:	fbb3 f3f7 	udiv	r3, r3, r7
 80138fe:	fb05 f303 	mul.w	r3, r5, r3
 8013902:	6825      	ldr	r5, [r4, #0]
 8013904:	4448      	add	r0, r9
 8013906:	50e8      	str	r0, [r5, r3]
 8013908:	9d04      	ldr	r5, [sp, #16]
 801390a:	eba2 0208 	sub.w	r2, r2, r8
 801390e:	4628      	mov	r0, r5
 8013910:	f7f5 ffce 	bl	80098b0 <ucdr_init_buffer>
 8013914:	4628      	mov	r0, r5
 8013916:	493c      	ldr	r1, [pc, #240]	@ (8013a08 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8013918:	4622      	mov	r2, r4
 801391a:	f7f5 ff9d 	bl	8009858 <ucdr_set_on_full_buffer_callback>
 801391e:	2001      	movs	r0, #1
 8013920:	81e6      	strh	r6, [r4, #14]
 8013922:	b011      	add	sp, #68	@ 0x44
 8013924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013928:	2101      	movs	r1, #1
 801392a:	89e0      	ldrh	r0, [r4, #14]
 801392c:	f000 faa0 	bl	8013e70 <uxr_seq_num_add>
 8013930:	8921      	ldrh	r1, [r4, #8]
 8013932:	4605      	mov	r5, r0
 8013934:	8a60      	ldrh	r0, [r4, #18]
 8013936:	f000 fa9b 	bl	8013e70 <uxr_seq_num_add>
 801393a:	4601      	mov	r1, r0
 801393c:	4628      	mov	r0, r5
 801393e:	f000 fa9f 	bl	8013e80 <uxr_seq_num_cmp>
 8013942:	2800      	cmp	r0, #0
 8013944:	dd42      	ble.n	80139cc <uxr_prepare_reliable_buffer_to_write+0x29c>
 8013946:	2000      	movs	r0, #0
 8013948:	b011      	add	sp, #68	@ 0x44
 801394a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801394e:	8921      	ldrh	r1, [r4, #8]
 8013950:	8a60      	ldrh	r0, [r4, #18]
 8013952:	9205      	str	r2, [sp, #20]
 8013954:	f000 fa8c 	bl	8013e70 <uxr_seq_num_add>
 8013958:	4601      	mov	r1, r0
 801395a:	4630      	mov	r0, r6
 801395c:	f000 fa90 	bl	8013e80 <uxr_seq_num_cmp>
 8013960:	2800      	cmp	r0, #0
 8013962:	9a05      	ldr	r2, [sp, #20]
 8013964:	dcef      	bgt.n	8013946 <uxr_prepare_reliable_buffer_to_write+0x216>
 8013966:	8927      	ldrh	r7, [r4, #8]
 8013968:	fbb6 f3f7 	udiv	r3, r6, r7
 801396c:	fb07 6313 	mls	r3, r7, r3, r6
 8013970:	b29d      	uxth	r5, r3
 8013972:	6863      	ldr	r3, [r4, #4]
 8013974:	6824      	ldr	r4, [r4, #0]
 8013976:	fbb3 f3f7 	udiv	r3, r3, r7
 801397a:	fb05 f303 	mul.w	r3, r5, r3
 801397e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8013982:	50e2      	str	r2, [r4, r3]
 8013984:	2300      	movs	r3, #0
 8013986:	f8cd 8000 	str.w	r8, [sp]
 801398a:	f7f5 ff7f 	bl	800988c <ucdr_init_buffer_origin_offset>
 801398e:	2001      	movs	r0, #1
 8013990:	e7da      	b.n	8013948 <uxr_prepare_reliable_buffer_to_write+0x218>
 8013992:	b293      	uxth	r3, r2
 8013994:	461a      	mov	r2, r3
 8013996:	e737      	b.n	8013808 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8013998:	4630      	mov	r0, r6
 801399a:	2101      	movs	r1, #1
 801399c:	9207      	str	r2, [sp, #28]
 801399e:	f000 fa67 	bl	8013e70 <uxr_seq_num_add>
 80139a2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80139a6:	fbb0 f1fc 	udiv	r1, r0, ip
 80139aa:	fb0c 0111 	mls	r1, ip, r1, r0
 80139ae:	4606      	mov	r6, r0
 80139b0:	b288      	uxth	r0, r1
 80139b2:	6863      	ldr	r3, [r4, #4]
 80139b4:	fbb3 f1fc 	udiv	r1, r3, ip
 80139b8:	6823      	ldr	r3, [r4, #0]
 80139ba:	9a07      	ldr	r2, [sp, #28]
 80139bc:	fb00 f101 	mul.w	r1, r0, r1
 80139c0:	3104      	adds	r1, #4
 80139c2:	440b      	add	r3, r1
 80139c4:	9303      	str	r3, [sp, #12]
 80139c6:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80139ca:	e70a      	b.n	80137e2 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80139cc:	8921      	ldrh	r1, [r4, #8]
 80139ce:	fbb5 f3f1 	udiv	r3, r5, r1
 80139d2:	fb01 5313 	mls	r3, r1, r3, r5
 80139d6:	b29a      	uxth	r2, r3
 80139d8:	6863      	ldr	r3, [r4, #4]
 80139da:	fbb3 f3f1 	udiv	r3, r3, r1
 80139de:	6821      	ldr	r1, [r4, #0]
 80139e0:	9804      	ldr	r0, [sp, #16]
 80139e2:	fb02 f303 	mul.w	r3, r2, r3
 80139e6:	3304      	adds	r3, #4
 80139e8:	7b22      	ldrb	r2, [r4, #12]
 80139ea:	4419      	add	r1, r3
 80139ec:	445a      	add	r2, fp
 80139ee:	f841 2c04 	str.w	r2, [r1, #-4]
 80139f2:	7b23      	ldrb	r3, [r4, #12]
 80139f4:	9300      	str	r3, [sp, #0]
 80139f6:	2300      	movs	r3, #0
 80139f8:	f7f5 ff48 	bl	800988c <ucdr_init_buffer_origin_offset>
 80139fc:	81e5      	strh	r5, [r4, #14]
 80139fe:	2001      	movs	r0, #1
 8013a00:	e7a2      	b.n	8013948 <uxr_prepare_reliable_buffer_to_write+0x218>
 8013a02:	4682      	mov	sl, r0
 8013a04:	e6ca      	b.n	801379c <uxr_prepare_reliable_buffer_to_write+0x6c>
 8013a06:	bf00      	nop
 8013a08:	08013611 	.word	0x08013611

08013a0c <uxr_prepare_next_reliable_buffer_to_send>:
 8013a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a0e:	4604      	mov	r4, r0
 8013a10:	460f      	mov	r7, r1
 8013a12:	8a00      	ldrh	r0, [r0, #16]
 8013a14:	2101      	movs	r1, #1
 8013a16:	4616      	mov	r6, r2
 8013a18:	461d      	mov	r5, r3
 8013a1a:	f000 fa29 	bl	8013e70 <uxr_seq_num_add>
 8013a1e:	8028      	strh	r0, [r5, #0]
 8013a20:	8922      	ldrh	r2, [r4, #8]
 8013a22:	fbb0 f3f2 	udiv	r3, r0, r2
 8013a26:	fb02 0c13 	mls	ip, r2, r3, r0
 8013a2a:	fa1f fc8c 	uxth.w	ip, ip
 8013a2e:	6863      	ldr	r3, [r4, #4]
 8013a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a34:	fb0c fc03 	mul.w	ip, ip, r3
 8013a38:	6823      	ldr	r3, [r4, #0]
 8013a3a:	89e1      	ldrh	r1, [r4, #14]
 8013a3c:	f10c 0c04 	add.w	ip, ip, #4
 8013a40:	4463      	add	r3, ip
 8013a42:	603b      	str	r3, [r7, #0]
 8013a44:	6823      	ldr	r3, [r4, #0]
 8013a46:	449c      	add	ip, r3
 8013a48:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8013a4c:	6033      	str	r3, [r6, #0]
 8013a4e:	f000 fa17 	bl	8013e80 <uxr_seq_num_cmp>
 8013a52:	2800      	cmp	r0, #0
 8013a54:	dd01      	ble.n	8013a5a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8013a56:	2000      	movs	r0, #0
 8013a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a5a:	7b23      	ldrb	r3, [r4, #12]
 8013a5c:	6832      	ldr	r2, [r6, #0]
 8013a5e:	429a      	cmp	r2, r3
 8013a60:	d9f9      	bls.n	8013a56 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8013a62:	8a61      	ldrh	r1, [r4, #18]
 8013a64:	8a20      	ldrh	r0, [r4, #16]
 8013a66:	f000 fa07 	bl	8013e78 <uxr_seq_num_sub>
 8013a6a:	8923      	ldrh	r3, [r4, #8]
 8013a6c:	4283      	cmp	r3, r0
 8013a6e:	d0f2      	beq.n	8013a56 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8013a70:	8828      	ldrh	r0, [r5, #0]
 8013a72:	89e3      	ldrh	r3, [r4, #14]
 8013a74:	8220      	strh	r0, [r4, #16]
 8013a76:	4298      	cmp	r0, r3
 8013a78:	d001      	beq.n	8013a7e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8013a7a:	2001      	movs	r0, #1
 8013a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a7e:	2101      	movs	r1, #1
 8013a80:	f000 f9f6 	bl	8013e70 <uxr_seq_num_add>
 8013a84:	81e0      	strh	r0, [r4, #14]
 8013a86:	2001      	movs	r0, #1
 8013a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a8a:	bf00      	nop

08013a8c <uxr_update_output_stream_heartbeat_timestamp>:
 8013a8c:	b570      	push	{r4, r5, r6, lr}
 8013a8e:	8a01      	ldrh	r1, [r0, #16]
 8013a90:	4604      	mov	r4, r0
 8013a92:	8a40      	ldrh	r0, [r0, #18]
 8013a94:	4615      	mov	r5, r2
 8013a96:	461e      	mov	r6, r3
 8013a98:	f000 f9f2 	bl	8013e80 <uxr_seq_num_cmp>
 8013a9c:	2800      	cmp	r0, #0
 8013a9e:	db07      	blt.n	8013ab0 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8013aa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013aa4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013aa8:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8013aac:	2000      	movs	r0, #0
 8013aae:	bd70      	pop	{r4, r5, r6, pc}
 8013ab0:	f894 0020 	ldrb.w	r0, [r4, #32]
 8013ab4:	b940      	cbnz	r0, 8013ac8 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	f884 3020 	strb.w	r3, [r4, #32]
 8013abc:	3564      	adds	r5, #100	@ 0x64
 8013abe:	f146 0600 	adc.w	r6, r6, #0
 8013ac2:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8013ac6:	bd70      	pop	{r4, r5, r6, pc}
 8013ac8:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8013acc:	4295      	cmp	r5, r2
 8013ace:	eb76 0303 	sbcs.w	r3, r6, r3
 8013ad2:	bfa5      	ittet	ge
 8013ad4:	3001      	addge	r0, #1
 8013ad6:	f884 0020 	strbge.w	r0, [r4, #32]
 8013ada:	2000      	movlt	r0, #0
 8013adc:	2001      	movge	r0, #1
 8013ade:	e7ed      	b.n	8013abc <uxr_update_output_stream_heartbeat_timestamp+0x30>

08013ae0 <uxr_begin_output_nack_buffer_it>:
 8013ae0:	8a40      	ldrh	r0, [r0, #18]
 8013ae2:	4770      	bx	lr

08013ae4 <uxr_next_reliable_nack_buffer_to_send>:
 8013ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ae8:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8013aec:	b082      	sub	sp, #8
 8013aee:	f1b8 0f00 	cmp.w	r8, #0
 8013af2:	d011      	beq.n	8013b18 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8013af4:	4604      	mov	r4, r0
 8013af6:	8818      	ldrh	r0, [r3, #0]
 8013af8:	460e      	mov	r6, r1
 8013afa:	4617      	mov	r7, r2
 8013afc:	461d      	mov	r5, r3
 8013afe:	2101      	movs	r1, #1
 8013b00:	f000 f9b6 	bl	8013e70 <uxr_seq_num_add>
 8013b04:	8028      	strh	r0, [r5, #0]
 8013b06:	8a21      	ldrh	r1, [r4, #16]
 8013b08:	f000 f9ba 	bl	8013e80 <uxr_seq_num_cmp>
 8013b0c:	2800      	cmp	r0, #0
 8013b0e:	dd07      	ble.n	8013b20 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8013b10:	f04f 0800 	mov.w	r8, #0
 8013b14:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8013b18:	4640      	mov	r0, r8
 8013b1a:	b002      	add	sp, #8
 8013b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b20:	8921      	ldrh	r1, [r4, #8]
 8013b22:	8828      	ldrh	r0, [r5, #0]
 8013b24:	6823      	ldr	r3, [r4, #0]
 8013b26:	fbb0 f2f1 	udiv	r2, r0, r1
 8013b2a:	fb01 0c12 	mls	ip, r1, r2, r0
 8013b2e:	fa1f f28c 	uxth.w	r2, ip
 8013b32:	9301      	str	r3, [sp, #4]
 8013b34:	6863      	ldr	r3, [r4, #4]
 8013b36:	fbb3 fcf1 	udiv	ip, r3, r1
 8013b3a:	9b01      	ldr	r3, [sp, #4]
 8013b3c:	fb02 fc0c 	mul.w	ip, r2, ip
 8013b40:	f10c 0c04 	add.w	ip, ip, #4
 8013b44:	4463      	add	r3, ip
 8013b46:	6033      	str	r3, [r6, #0]
 8013b48:	6823      	ldr	r3, [r4, #0]
 8013b4a:	4463      	add	r3, ip
 8013b4c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8013b50:	603b      	str	r3, [r7, #0]
 8013b52:	7b22      	ldrb	r2, [r4, #12]
 8013b54:	429a      	cmp	r2, r3
 8013b56:	d0d2      	beq.n	8013afe <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8013b58:	4640      	mov	r0, r8
 8013b5a:	b002      	add	sp, #8
 8013b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013b60 <uxr_process_acknack>:
 8013b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b62:	4604      	mov	r4, r0
 8013b64:	460e      	mov	r6, r1
 8013b66:	4610      	mov	r0, r2
 8013b68:	2101      	movs	r1, #1
 8013b6a:	f000 f985 	bl	8013e78 <uxr_seq_num_sub>
 8013b6e:	8a61      	ldrh	r1, [r4, #18]
 8013b70:	f000 f982 	bl	8013e78 <uxr_seq_num_sub>
 8013b74:	b1c0      	cbz	r0, 8013ba8 <uxr_process_acknack+0x48>
 8013b76:	4605      	mov	r5, r0
 8013b78:	2700      	movs	r7, #0
 8013b7a:	2101      	movs	r1, #1
 8013b7c:	8a60      	ldrh	r0, [r4, #18]
 8013b7e:	f000 f977 	bl	8013e70 <uxr_seq_num_add>
 8013b82:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013b86:	fbb0 f1fc 	udiv	r1, r0, ip
 8013b8a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013b8e:	fb0c 0111 	mls	r1, ip, r1, r0
 8013b92:	b289      	uxth	r1, r1
 8013b94:	3701      	adds	r7, #1
 8013b96:	fbb3 f3fc 	udiv	r3, r3, ip
 8013b9a:	fb01 f303 	mul.w	r3, r1, r3
 8013b9e:	42bd      	cmp	r5, r7
 8013ba0:	7b21      	ldrb	r1, [r4, #12]
 8013ba2:	8260      	strh	r0, [r4, #18]
 8013ba4:	50d1      	str	r1, [r2, r3]
 8013ba6:	d1e8      	bne.n	8013b7a <uxr_process_acknack+0x1a>
 8013ba8:	3e00      	subs	r6, #0
 8013baa:	f04f 0300 	mov.w	r3, #0
 8013bae:	bf18      	it	ne
 8013bb0:	2601      	movne	r6, #1
 8013bb2:	f884 3020 	strb.w	r3, [r4, #32]
 8013bb6:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8013bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013bbc <uxr_is_output_up_to_date>:
 8013bbc:	8a01      	ldrh	r1, [r0, #16]
 8013bbe:	8a40      	ldrh	r0, [r0, #18]
 8013bc0:	b508      	push	{r3, lr}
 8013bc2:	f000 f95d 	bl	8013e80 <uxr_seq_num_cmp>
 8013bc6:	fab0 f080 	clz	r0, r0
 8013bca:	0940      	lsrs	r0, r0, #5
 8013bcc:	bd08      	pop	{r3, pc}
 8013bce:	bf00      	nop

08013bd0 <get_available_free_slots>:
 8013bd0:	8902      	ldrh	r2, [r0, #8]
 8013bd2:	b1da      	cbz	r2, 8013c0c <get_available_free_slots+0x3c>
 8013bd4:	b530      	push	{r4, r5, lr}
 8013bd6:	2100      	movs	r1, #0
 8013bd8:	6843      	ldr	r3, [r0, #4]
 8013bda:	6805      	ldr	r5, [r0, #0]
 8013bdc:	7b04      	ldrb	r4, [r0, #12]
 8013bde:	fbb3 fef2 	udiv	lr, r3, r2
 8013be2:	4608      	mov	r0, r1
 8013be4:	460b      	mov	r3, r1
 8013be6:	fbb3 fcf2 	udiv	ip, r3, r2
 8013bea:	fb02 331c 	mls	r3, r2, ip, r3
 8013bee:	b29b      	uxth	r3, r3
 8013bf0:	fb0e f303 	mul.w	r3, lr, r3
 8013bf4:	3101      	adds	r1, #1
 8013bf6:	f855 c003 	ldr.w	ip, [r5, r3]
 8013bfa:	4564      	cmp	r4, ip
 8013bfc:	bf08      	it	eq
 8013bfe:	3001      	addeq	r0, #1
 8013c00:	b28b      	uxth	r3, r1
 8013c02:	bf08      	it	eq
 8013c04:	b280      	uxtheq	r0, r0
 8013c06:	4293      	cmp	r3, r2
 8013c08:	d3ed      	bcc.n	8013be6 <get_available_free_slots+0x16>
 8013c0a:	bd30      	pop	{r4, r5, pc}
 8013c0c:	4610      	mov	r0, r2
 8013c0e:	4770      	bx	lr

08013c10 <uxr_buffer_request_data>:
 8013c10:	b530      	push	{r4, r5, lr}
 8013c12:	b095      	sub	sp, #84	@ 0x54
 8013c14:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013c18:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8013c1a:	9303      	str	r3, [sp, #12]
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	2d00      	cmp	r5, #0
 8013c20:	bf14      	ite	ne
 8013c22:	2101      	movne	r1, #1
 8013c24:	4611      	moveq	r1, r2
 8013c26:	4604      	mov	r4, r0
 8013c28:	f88d 301c 	strb.w	r3, [sp, #28]
 8013c2c:	f88d 201d 	strb.w	r2, [sp, #29]
 8013c30:	f88d 201e 	strb.w	r2, [sp, #30]
 8013c34:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8013c38:	d021      	beq.n	8013c7e <uxr_buffer_request_data+0x6e>
 8013c3a:	682a      	ldr	r2, [r5, #0]
 8013c3c:	686b      	ldr	r3, [r5, #4]
 8013c3e:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8013c42:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8013c46:	2210      	movs	r2, #16
 8013c48:	2308      	movs	r3, #8
 8013c4a:	2100      	movs	r1, #0
 8013c4c:	e9cd 3100 	strd	r3, r1, [sp]
 8013c50:	4620      	mov	r0, r4
 8013c52:	9905      	ldr	r1, [sp, #20]
 8013c54:	ab0c      	add	r3, sp, #48	@ 0x30
 8013c56:	f7f8 fed1 	bl	800c9fc <uxr_prepare_stream_to_write_submessage>
 8013c5a:	b918      	cbnz	r0, 8013c64 <uxr_buffer_request_data+0x54>
 8013c5c:	4604      	mov	r4, r0
 8013c5e:	4620      	mov	r0, r4
 8013c60:	b015      	add	sp, #84	@ 0x54
 8013c62:	bd30      	pop	{r4, r5, pc}
 8013c64:	9904      	ldr	r1, [sp, #16]
 8013c66:	aa06      	add	r2, sp, #24
 8013c68:	4620      	mov	r0, r4
 8013c6a:	f7f8 fffd 	bl	800cc68 <uxr_init_base_object_request>
 8013c6e:	a906      	add	r1, sp, #24
 8013c70:	4604      	mov	r4, r0
 8013c72:	a80c      	add	r0, sp, #48	@ 0x30
 8013c74:	f7fa faf8 	bl	800e268 <uxr_serialize_READ_DATA_Payload>
 8013c78:	4620      	mov	r0, r4
 8013c7a:	b015      	add	sp, #84	@ 0x54
 8013c7c:	bd30      	pop	{r4, r5, pc}
 8013c7e:	2208      	movs	r2, #8
 8013c80:	e7e2      	b.n	8013c48 <uxr_buffer_request_data+0x38>
 8013c82:	bf00      	nop

08013c84 <uxr_buffer_cancel_data>:
 8013c84:	b510      	push	{r4, lr}
 8013c86:	b094      	sub	sp, #80	@ 0x50
 8013c88:	2300      	movs	r3, #0
 8013c8a:	9202      	str	r2, [sp, #8]
 8013c8c:	9205      	str	r2, [sp, #20]
 8013c8e:	9301      	str	r3, [sp, #4]
 8013c90:	2201      	movs	r2, #1
 8013c92:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013c96:	f88d 301e 	strb.w	r3, [sp, #30]
 8013c9a:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8013c9e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8013ca2:	2308      	movs	r3, #8
 8013ca4:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8013ca8:	9300      	str	r3, [sp, #0]
 8013caa:	2210      	movs	r2, #16
 8013cac:	ab0c      	add	r3, sp, #48	@ 0x30
 8013cae:	4604      	mov	r4, r0
 8013cb0:	9103      	str	r1, [sp, #12]
 8013cb2:	f7f8 fea3 	bl	800c9fc <uxr_prepare_stream_to_write_submessage>
 8013cb6:	b918      	cbnz	r0, 8013cc0 <uxr_buffer_cancel_data+0x3c>
 8013cb8:	4604      	mov	r4, r0
 8013cba:	4620      	mov	r0, r4
 8013cbc:	b014      	add	sp, #80	@ 0x50
 8013cbe:	bd10      	pop	{r4, pc}
 8013cc0:	9905      	ldr	r1, [sp, #20]
 8013cc2:	aa06      	add	r2, sp, #24
 8013cc4:	4620      	mov	r0, r4
 8013cc6:	f7f8 ffcf 	bl	800cc68 <uxr_init_base_object_request>
 8013cca:	a906      	add	r1, sp, #24
 8013ccc:	4604      	mov	r4, r0
 8013cce:	a80c      	add	r0, sp, #48	@ 0x30
 8013cd0:	f7fa faca 	bl	800e268 <uxr_serialize_READ_DATA_Payload>
 8013cd4:	4620      	mov	r0, r4
 8013cd6:	b014      	add	sp, #80	@ 0x50
 8013cd8:	bd10      	pop	{r4, pc}
 8013cda:	bf00      	nop

08013cdc <read_submessage_format>:
 8013cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ce0:	b095      	sub	sp, #84	@ 0x54
 8013ce2:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8013ce6:	b113      	cbz	r3, 8013cee <read_submessage_format+0x12>
 8013ce8:	b015      	add	sp, #84	@ 0x54
 8013cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cee:	460c      	mov	r4, r1
 8013cf0:	4615      	mov	r5, r2
 8013cf2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8013cf6:	4607      	mov	r7, r0
 8013cf8:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8013cfa:	9004      	str	r0, [sp, #16]
 8013cfc:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8013cfe:	9005      	str	r0, [sp, #20]
 8013d00:	1a52      	subs	r2, r2, r1
 8013d02:	a80c      	add	r0, sp, #48	@ 0x30
 8013d04:	4699      	mov	r9, r3
 8013d06:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8013d0a:	f7f5 fdd1 	bl	80098b0 <ucdr_init_buffer>
 8013d0e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013d12:	a80c      	add	r0, sp, #48	@ 0x30
 8013d14:	f7f5 fda0 	bl	8009858 <ucdr_set_on_full_buffer_callback>
 8013d18:	69e2      	ldr	r2, [r4, #28]
 8013d1a:	b19a      	cbz	r2, 8013d44 <read_submessage_format+0x68>
 8013d1c:	f1b8 0f07 	cmp.w	r8, #7
 8013d20:	f882 9014 	strb.w	r9, [r2, #20]
 8013d24:	d040      	beq.n	8013da8 <read_submessage_format+0xcc>
 8013d26:	f1b8 0f08 	cmp.w	r8, #8
 8013d2a:	d02e      	beq.n	8013d8a <read_submessage_format+0xae>
 8013d2c:	f1b8 0f06 	cmp.w	r8, #6
 8013d30:	d011      	beq.n	8013d56 <read_submessage_format+0x7a>
 8013d32:	2301      	movs	r3, #1
 8013d34:	7513      	strb	r3, [r2, #20]
 8013d36:	4629      	mov	r1, r5
 8013d38:	4620      	mov	r0, r4
 8013d3a:	f7f5 fe09 	bl	8009950 <ucdr_advance_buffer>
 8013d3e:	b015      	add	sp, #84	@ 0x54
 8013d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d44:	f1b8 0f07 	cmp.w	r8, #7
 8013d48:	d02e      	beq.n	8013da8 <read_submessage_format+0xcc>
 8013d4a:	f1b8 0f08 	cmp.w	r8, #8
 8013d4e:	d01c      	beq.n	8013d8a <read_submessage_format+0xae>
 8013d50:	f1b8 0f06 	cmp.w	r8, #6
 8013d54:	d1ef      	bne.n	8013d36 <read_submessage_format+0x5a>
 8013d56:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8013d5a:	f1b8 0f00 	cmp.w	r8, #0
 8013d5e:	d011      	beq.n	8013d84 <read_submessage_format+0xa8>
 8013d60:	ab0c      	add	r3, sp, #48	@ 0x30
 8013d62:	e9cd 3500 	strd	r3, r5, [sp]
 8013d66:	2306      	movs	r3, #6
 8013d68:	f88d 3016 	strb.w	r3, [sp, #22]
 8013d6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013d70:	9302      	str	r3, [sp, #8]
 8013d72:	4632      	mov	r2, r6
 8013d74:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013d78:	4638      	mov	r0, r7
 8013d7a:	47c0      	blx	r8
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	69e2      	ldr	r2, [r4, #28]
 8013d80:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8013d84:	2a00      	cmp	r2, #0
 8013d86:	d1d4      	bne.n	8013d32 <read_submessage_format+0x56>
 8013d88:	e7d5      	b.n	8013d36 <read_submessage_format+0x5a>
 8013d8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d0f8      	beq.n	8013d84 <read_submessage_format+0xa8>
 8013d92:	a906      	add	r1, sp, #24
 8013d94:	a80c      	add	r0, sp, #48	@ 0x30
 8013d96:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8013d9a:	f7fa fb2b 	bl	800e3f4 <uxr_deserialize_SampleIdentity>
 8013d9e:	b9a0      	cbnz	r0, 8013dca <read_submessage_format+0xee>
 8013da0:	69e2      	ldr	r2, [r4, #28]
 8013da2:	2a00      	cmp	r2, #0
 8013da4:	d1c5      	bne.n	8013d32 <read_submessage_format+0x56>
 8013da6:	e7c6      	b.n	8013d36 <read_submessage_format+0x5a>
 8013da8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013dac:	b13b      	cbz	r3, 8013dbe <read_submessage_format+0xe2>
 8013dae:	a906      	add	r1, sp, #24
 8013db0:	a80c      	add	r0, sp, #48	@ 0x30
 8013db2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8013db6:	f7f9 fff1 	bl	800dd9c <uxr_deserialize_BaseObjectRequest>
 8013dba:	bb60      	cbnz	r0, 8013e16 <read_submessage_format+0x13a>
 8013dbc:	69e2      	ldr	r2, [r4, #28]
 8013dbe:	68a3      	ldr	r3, [r4, #8]
 8013dc0:	442b      	add	r3, r5
 8013dc2:	60a3      	str	r3, [r4, #8]
 8013dc4:	2a00      	cmp	r2, #0
 8013dc6:	d1b4      	bne.n	8013d32 <read_submessage_format+0x56>
 8013dc8:	e7b5      	b.n	8013d36 <read_submessage_format+0x5a>
 8013dca:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8013dce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013dd0:	1a52      	subs	r2, r2, r1
 8013dd2:	eba8 0803 	sub.w	r8, r8, r3
 8013dd6:	a80c      	add	r0, sp, #48	@ 0x30
 8013dd8:	f7f5 fd6a 	bl	80098b0 <ucdr_init_buffer>
 8013ddc:	44a8      	add	r8, r5
 8013dde:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013de2:	a80c      	add	r0, sp, #48	@ 0x30
 8013de4:	f7f5 fd38 	bl	8009858 <ucdr_set_on_full_buffer_callback>
 8013de8:	fa1f f888 	uxth.w	r8, r8
 8013dec:	ab0c      	add	r3, sp, #48	@ 0x30
 8013dee:	9300      	str	r3, [sp, #0]
 8013df0:	f8cd 8004 	str.w	r8, [sp, #4]
 8013df4:	2108      	movs	r1, #8
 8013df6:	f88d 1016 	strb.w	r1, [sp, #22]
 8013dfa:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8013dfe:	9102      	str	r1, [sp, #8]
 8013e00:	ab06      	add	r3, sp, #24
 8013e02:	4632      	mov	r2, r6
 8013e04:	9905      	ldr	r1, [sp, #20]
 8013e06:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8013e0a:	4638      	mov	r0, r7
 8013e0c:	47b0      	blx	r6
 8013e0e:	2301      	movs	r3, #1
 8013e10:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8013e14:	e7c4      	b.n	8013da0 <read_submessage_format+0xc4>
 8013e16:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8013e1a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013e1c:	1a52      	subs	r2, r2, r1
 8013e1e:	a80c      	add	r0, sp, #48	@ 0x30
 8013e20:	eba8 0803 	sub.w	r8, r8, r3
 8013e24:	f7f5 fd44 	bl	80098b0 <ucdr_init_buffer>
 8013e28:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013e2c:	a80c      	add	r0, sp, #48	@ 0x30
 8013e2e:	f7f5 fd13 	bl	8009858 <ucdr_set_on_full_buffer_callback>
 8013e32:	ab0c      	add	r3, sp, #48	@ 0x30
 8013e34:	9300      	str	r3, [sp, #0]
 8013e36:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8013e3a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013e3e:	44a8      	add	r8, r5
 8013e40:	fa1f f888 	uxth.w	r8, r8
 8013e44:	f8cd 8004 	str.w	r8, [sp, #4]
 8013e48:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013e4c:	2107      	movs	r1, #7
 8013e4e:	f88d 1016 	strb.w	r1, [sp, #22]
 8013e52:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8013e56:	9102      	str	r1, [sp, #8]
 8013e58:	4632      	mov	r2, r6
 8013e5a:	b29b      	uxth	r3, r3
 8013e5c:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8013e60:	9905      	ldr	r1, [sp, #20]
 8013e62:	4638      	mov	r0, r7
 8013e64:	47b0      	blx	r6
 8013e66:	2301      	movs	r3, #1
 8013e68:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8013e6c:	e7a6      	b.n	8013dbc <read_submessage_format+0xe0>
 8013e6e:	bf00      	nop

08013e70 <uxr_seq_num_add>:
 8013e70:	4408      	add	r0, r1
 8013e72:	b280      	uxth	r0, r0
 8013e74:	4770      	bx	lr
 8013e76:	bf00      	nop

08013e78 <uxr_seq_num_sub>:
 8013e78:	1a40      	subs	r0, r0, r1
 8013e7a:	b280      	uxth	r0, r0
 8013e7c:	4770      	bx	lr
 8013e7e:	bf00      	nop

08013e80 <uxr_seq_num_cmp>:
 8013e80:	4288      	cmp	r0, r1
 8013e82:	d011      	beq.n	8013ea8 <uxr_seq_num_cmp+0x28>
 8013e84:	d309      	bcc.n	8013e9a <uxr_seq_num_cmp+0x1a>
 8013e86:	4288      	cmp	r0, r1
 8013e88:	d910      	bls.n	8013eac <uxr_seq_num_cmp+0x2c>
 8013e8a:	1a40      	subs	r0, r0, r1
 8013e8c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8013e90:	bfd4      	ite	le
 8013e92:	2001      	movle	r0, #1
 8013e94:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8013e98:	4770      	bx	lr
 8013e9a:	1a0b      	subs	r3, r1, r0
 8013e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013ea0:	daf1      	bge.n	8013e86 <uxr_seq_num_cmp+0x6>
 8013ea2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013ea6:	4770      	bx	lr
 8013ea8:	2000      	movs	r0, #0
 8013eaa:	4770      	bx	lr
 8013eac:	2001      	movs	r0, #1
 8013eae:	4770      	bx	lr

08013eb0 <uxr_init_framing_io>:
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	7041      	strb	r1, [r0, #1]
 8013eb4:	7003      	strb	r3, [r0, #0]
 8013eb6:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8013eb8:	4770      	bx	lr
 8013eba:	bf00      	nop

08013ebc <uxr_write_framed_msg>:
 8013ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ec0:	4617      	mov	r7, r2
 8013ec2:	7842      	ldrb	r2, [r0, #1]
 8013ec4:	b083      	sub	sp, #12
 8013ec6:	460e      	mov	r6, r1
 8013ec8:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8013ecc:	469a      	mov	sl, r3
 8013ece:	2901      	cmp	r1, #1
 8013ed0:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8013ed4:	4604      	mov	r4, r0
 8013ed6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8013eda:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8013ede:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8013ee2:	f240 8137 	bls.w	8014154 <uxr_write_framed_msg+0x298>
 8013ee6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8013eea:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8013eee:	2901      	cmp	r1, #1
 8013ef0:	f04f 0202 	mov.w	r2, #2
 8013ef4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013ef8:	f240 808f 	bls.w	801401a <uxr_write_framed_msg+0x15e>
 8013efc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013efe:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8013f02:	b2dd      	uxtb	r5, r3
 8013f04:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8013f08:	2203      	movs	r2, #3
 8013f0a:	2901      	cmp	r1, #1
 8013f0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013f10:	f240 809a 	bls.w	8014048 <uxr_write_framed_msg+0x18c>
 8013f14:	18a1      	adds	r1, r4, r2
 8013f16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013f18:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8013f1c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013f20:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8013f24:	3201      	adds	r2, #1
 8013f26:	2801      	cmp	r0, #1
 8013f28:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013f2c:	f240 80a0 	bls.w	8014070 <uxr_write_framed_msg+0x1b4>
 8013f30:	18a0      	adds	r0, r4, r2
 8013f32:	3201      	adds	r2, #1
 8013f34:	b2d2      	uxtb	r2, r2
 8013f36:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8013f3a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	f000 80a9 	beq.w	8014096 <uxr_write_framed_msg+0x1da>
 8013f44:	f04f 0900 	mov.w	r9, #0
 8013f48:	46c8      	mov	r8, r9
 8013f4a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8013f4e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8013f52:	2901      	cmp	r1, #1
 8013f54:	f240 80c3 	bls.w	80140de <uxr_write_framed_msg+0x222>
 8013f58:	2a29      	cmp	r2, #41	@ 0x29
 8013f5a:	f200 809f 	bhi.w	801409c <uxr_write_framed_msg+0x1e0>
 8013f5e:	18a1      	adds	r1, r4, r2
 8013f60:	3201      	adds	r2, #1
 8013f62:	b2d2      	uxtb	r2, r2
 8013f64:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8013f68:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013f6c:	ea89 0303 	eor.w	r3, r9, r3
 8013f70:	498c      	ldr	r1, [pc, #560]	@ (80141a4 <uxr_write_framed_msg+0x2e8>)
 8013f72:	b2db      	uxtb	r3, r3
 8013f74:	f108 0801 	add.w	r8, r8, #1
 8013f78:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013f7c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8013f80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013f82:	4543      	cmp	r3, r8
 8013f84:	d8e1      	bhi.n	8013f4a <uxr_write_framed_msg+0x8e>
 8013f86:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8013f8a:	fa5f f889 	uxtb.w	r8, r9
 8013f8e:	9301      	str	r3, [sp, #4]
 8013f90:	f04f 0900 	mov.w	r9, #0
 8013f94:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8013f98:	fa5f f18a 	uxtb.w	r1, sl
 8013f9c:	2901      	cmp	r1, #1
 8013f9e:	d921      	bls.n	8013fe4 <uxr_write_framed_msg+0x128>
 8013fa0:	2a29      	cmp	r2, #41	@ 0x29
 8013fa2:	f240 80af 	bls.w	8014104 <uxr_write_framed_msg+0x248>
 8013fa6:	2500      	movs	r5, #0
 8013fa8:	e000      	b.n	8013fac <uxr_write_framed_msg+0xf0>
 8013faa:	b160      	cbz	r0, 8013fc6 <uxr_write_framed_msg+0x10a>
 8013fac:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013fb0:	1b52      	subs	r2, r2, r5
 8013fb2:	465b      	mov	r3, fp
 8013fb4:	4421      	add	r1, r4
 8013fb6:	4638      	mov	r0, r7
 8013fb8:	47b0      	blx	r6
 8013fba:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013fbe:	4405      	add	r5, r0
 8013fc0:	4295      	cmp	r5, r2
 8013fc2:	d3f2      	bcc.n	8013faa <uxr_write_framed_msg+0xee>
 8013fc4:	d003      	beq.n	8013fce <uxr_write_framed_msg+0x112>
 8013fc6:	2000      	movs	r0, #0
 8013fc8:	b003      	add	sp, #12
 8013fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fce:	fa5f f18a 	uxtb.w	r1, sl
 8013fd2:	f04f 0300 	mov.w	r3, #0
 8013fd6:	2901      	cmp	r1, #1
 8013fd8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8013fdc:	f04f 0200 	mov.w	r2, #0
 8013fe0:	f200 8090 	bhi.w	8014104 <uxr_write_framed_msg+0x248>
 8013fe4:	1c51      	adds	r1, r2, #1
 8013fe6:	b2c9      	uxtb	r1, r1
 8013fe8:	2929      	cmp	r1, #41	@ 0x29
 8013fea:	d8dc      	bhi.n	8013fa6 <uxr_write_framed_msg+0xea>
 8013fec:	18a5      	adds	r5, r4, r2
 8013fee:	4421      	add	r1, r4
 8013ff0:	3202      	adds	r2, #2
 8013ff2:	f088 0820 	eor.w	r8, r8, #32
 8013ff6:	4648      	mov	r0, r9
 8013ff8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8013ffc:	b2d2      	uxtb	r2, r2
 8013ffe:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8014002:	f04f 0901 	mov.w	r9, #1
 8014006:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801400a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801400e:	2800      	cmp	r0, #0
 8014010:	f040 8085 	bne.w	801411e <uxr_write_framed_msg+0x262>
 8014014:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014018:	e7bc      	b.n	8013f94 <uxr_write_framed_msg+0xd8>
 801401a:	4611      	mov	r1, r2
 801401c:	f04f 0c03 	mov.w	ip, #3
 8014020:	2204      	movs	r2, #4
 8014022:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014024:	4421      	add	r1, r4
 8014026:	b2dd      	uxtb	r5, r3
 8014028:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801402c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8014030:	44a4      	add	ip, r4
 8014032:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014036:	f080 0020 	eor.w	r0, r0, #32
 801403a:	2901      	cmp	r1, #1
 801403c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8014040:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014044:	f63f af66 	bhi.w	8013f14 <uxr_write_framed_msg+0x58>
 8014048:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801404a:	18a0      	adds	r0, r4, r2
 801404c:	f085 0520 	eor.w	r5, r5, #32
 8014050:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014054:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014058:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 801405c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8014060:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8014064:	3202      	adds	r2, #2
 8014066:	2801      	cmp	r0, #1
 8014068:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801406c:	f63f af60 	bhi.w	8013f30 <uxr_write_framed_msg+0x74>
 8014070:	1c50      	adds	r0, r2, #1
 8014072:	18a5      	adds	r5, r4, r2
 8014074:	fa54 f080 	uxtab	r0, r4, r0
 8014078:	3202      	adds	r2, #2
 801407a:	f081 0120 	eor.w	r1, r1, #32
 801407e:	b2d2      	uxtb	r2, r2
 8014080:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014084:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8014088:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801408c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014090:	2b00      	cmp	r3, #0
 8014092:	f47f af57 	bne.w	8013f44 <uxr_write_framed_msg+0x88>
 8014096:	9301      	str	r3, [sp, #4]
 8014098:	4698      	mov	r8, r3
 801409a:	e779      	b.n	8013f90 <uxr_write_framed_msg+0xd4>
 801409c:	2500      	movs	r5, #0
 801409e:	e001      	b.n	80140a4 <uxr_write_framed_msg+0x1e8>
 80140a0:	2800      	cmp	r0, #0
 80140a2:	d090      	beq.n	8013fc6 <uxr_write_framed_msg+0x10a>
 80140a4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80140a8:	1b52      	subs	r2, r2, r5
 80140aa:	465b      	mov	r3, fp
 80140ac:	4421      	add	r1, r4
 80140ae:	4638      	mov	r0, r7
 80140b0:	47b0      	blx	r6
 80140b2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80140b6:	4405      	add	r5, r0
 80140b8:	4295      	cmp	r5, r2
 80140ba:	d3f1      	bcc.n	80140a0 <uxr_write_framed_msg+0x1e4>
 80140bc:	d183      	bne.n	8013fc6 <uxr_write_framed_msg+0x10a>
 80140be:	f04f 0300 	mov.w	r3, #0
 80140c2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80140c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80140c8:	4543      	cmp	r3, r8
 80140ca:	d964      	bls.n	8014196 <uxr_write_framed_msg+0x2da>
 80140cc:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80140d0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80140d4:	2901      	cmp	r1, #1
 80140d6:	f04f 0200 	mov.w	r2, #0
 80140da:	f63f af3d 	bhi.w	8013f58 <uxr_write_framed_msg+0x9c>
 80140de:	1c51      	adds	r1, r2, #1
 80140e0:	b2c9      	uxtb	r1, r1
 80140e2:	2929      	cmp	r1, #41	@ 0x29
 80140e4:	d8da      	bhi.n	801409c <uxr_write_framed_msg+0x1e0>
 80140e6:	18a0      	adds	r0, r4, r2
 80140e8:	4421      	add	r1, r4
 80140ea:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80140ee:	3202      	adds	r2, #2
 80140f0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80140f4:	b2d2      	uxtb	r2, r2
 80140f6:	f083 0020 	eor.w	r0, r3, #32
 80140fa:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80140fe:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014102:	e733      	b.n	8013f6c <uxr_write_framed_msg+0xb0>
 8014104:	18a1      	adds	r1, r4, r2
 8014106:	3201      	adds	r2, #1
 8014108:	4648      	mov	r0, r9
 801410a:	b2d2      	uxtb	r2, r2
 801410c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8014110:	f04f 0901 	mov.w	r9, #1
 8014114:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014118:	2800      	cmp	r0, #0
 801411a:	f43f af7b 	beq.w	8014014 <uxr_write_framed_msg+0x158>
 801411e:	2500      	movs	r5, #0
 8014120:	e002      	b.n	8014128 <uxr_write_framed_msg+0x26c>
 8014122:	2800      	cmp	r0, #0
 8014124:	f43f af4f 	beq.w	8013fc6 <uxr_write_framed_msg+0x10a>
 8014128:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801412c:	1b52      	subs	r2, r2, r5
 801412e:	465b      	mov	r3, fp
 8014130:	4421      	add	r1, r4
 8014132:	4638      	mov	r0, r7
 8014134:	47b0      	blx	r6
 8014136:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801413a:	4405      	add	r5, r0
 801413c:	4295      	cmp	r5, r2
 801413e:	d3f0      	bcc.n	8014122 <uxr_write_framed_msg+0x266>
 8014140:	f47f af41 	bne.w	8013fc6 <uxr_write_framed_msg+0x10a>
 8014144:	2300      	movs	r3, #0
 8014146:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801414a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801414c:	b298      	uxth	r0, r3
 801414e:	b003      	add	sp, #12
 8014150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014154:	217d      	movs	r1, #125	@ 0x7d
 8014156:	f082 0220 	eor.w	r2, r2, #32
 801415a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801415e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014162:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8014166:	2901      	cmp	r1, #1
 8014168:	f04f 0203 	mov.w	r2, #3
 801416c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014170:	d804      	bhi.n	801417c <uxr_write_framed_msg+0x2c0>
 8014172:	4611      	mov	r1, r2
 8014174:	f04f 0c04 	mov.w	ip, #4
 8014178:	2205      	movs	r2, #5
 801417a:	e752      	b.n	8014022 <uxr_write_framed_msg+0x166>
 801417c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801417e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8014182:	b2dd      	uxtb	r5, r3
 8014184:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014188:	2204      	movs	r2, #4
 801418a:	2901      	cmp	r1, #1
 801418c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014190:	f63f aec0 	bhi.w	8013f14 <uxr_write_framed_msg+0x58>
 8014194:	e758      	b.n	8014048 <uxr_write_framed_msg+0x18c>
 8014196:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801419a:	fa5f f889 	uxtb.w	r8, r9
 801419e:	9301      	str	r3, [sp, #4]
 80141a0:	2200      	movs	r2, #0
 80141a2:	e6f5      	b.n	8013f90 <uxr_write_framed_msg+0xd4>
 80141a4:	08017330 	.word	0x08017330

080141a8 <uxr_framing_read_transport>:
 80141a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141ac:	4604      	mov	r4, r0
 80141ae:	b083      	sub	sp, #12
 80141b0:	461f      	mov	r7, r3
 80141b2:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80141b6:	4689      	mov	r9, r1
 80141b8:	4692      	mov	sl, r2
 80141ba:	f7f8 ff03 	bl	800cfc4 <uxr_millis>
 80141be:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80141c2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80141c6:	42b3      	cmp	r3, r6
 80141c8:	4680      	mov	r8, r0
 80141ca:	d061      	beq.n	8014290 <uxr_framing_read_transport+0xe8>
 80141cc:	d81c      	bhi.n	8014208 <uxr_framing_read_transport+0x60>
 80141ce:	1e75      	subs	r5, r6, #1
 80141d0:	1aed      	subs	r5, r5, r3
 80141d2:	b2ed      	uxtb	r5, r5
 80141d4:	2600      	movs	r6, #0
 80141d6:	455d      	cmp	r5, fp
 80141d8:	d81f      	bhi.n	801421a <uxr_framing_read_transport+0x72>
 80141da:	19ab      	adds	r3, r5, r6
 80141dc:	455b      	cmp	r3, fp
 80141de:	bf84      	itt	hi
 80141e0:	ebab 0605 	subhi.w	r6, fp, r5
 80141e4:	b2f6      	uxtbhi	r6, r6
 80141e6:	b9ed      	cbnz	r5, 8014224 <uxr_framing_read_transport+0x7c>
 80141e8:	f04f 0b00 	mov.w	fp, #0
 80141ec:	f7f8 feea 	bl	800cfc4 <uxr_millis>
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	eba0 0808 	sub.w	r8, r0, r8
 80141f6:	eba3 0308 	sub.w	r3, r3, r8
 80141fa:	4658      	mov	r0, fp
 80141fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014200:	603b      	str	r3, [r7, #0]
 8014202:	b003      	add	sp, #12
 8014204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014208:	2e00      	cmp	r6, #0
 801420a:	d049      	beq.n	80142a0 <uxr_framing_read_transport+0xf8>
 801420c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8014210:	b2ed      	uxtb	r5, r5
 8014212:	3e01      	subs	r6, #1
 8014214:	455d      	cmp	r5, fp
 8014216:	b2f6      	uxtb	r6, r6
 8014218:	d9df      	bls.n	80141da <uxr_framing_read_transport+0x32>
 801421a:	fa5f f58b 	uxtb.w	r5, fp
 801421e:	2600      	movs	r6, #0
 8014220:	2d00      	cmp	r5, #0
 8014222:	d0e1      	beq.n	80141e8 <uxr_framing_read_transport+0x40>
 8014224:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014228:	3102      	adds	r1, #2
 801422a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801422c:	9300      	str	r3, [sp, #0]
 801422e:	683b      	ldr	r3, [r7, #0]
 8014230:	4421      	add	r1, r4
 8014232:	462a      	mov	r2, r5
 8014234:	4650      	mov	r0, sl
 8014236:	47c8      	blx	r9
 8014238:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801423c:	4a1a      	ldr	r2, [pc, #104]	@ (80142a8 <uxr_framing_read_transport+0x100>)
 801423e:	4403      	add	r3, r0
 8014240:	0859      	lsrs	r1, r3, #1
 8014242:	fba2 2101 	umull	r2, r1, r2, r1
 8014246:	0889      	lsrs	r1, r1, #2
 8014248:	222a      	movs	r2, #42	@ 0x2a
 801424a:	fb02 3111 	mls	r1, r2, r1, r3
 801424e:	4683      	mov	fp, r0
 8014250:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8014254:	2800      	cmp	r0, #0
 8014256:	d0c7      	beq.n	80141e8 <uxr_framing_read_transport+0x40>
 8014258:	42a8      	cmp	r0, r5
 801425a:	d1c7      	bne.n	80141ec <uxr_framing_read_transport+0x44>
 801425c:	2e00      	cmp	r6, #0
 801425e:	d0c5      	beq.n	80141ec <uxr_framing_read_transport+0x44>
 8014260:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014262:	9300      	str	r3, [sp, #0]
 8014264:	3102      	adds	r1, #2
 8014266:	4632      	mov	r2, r6
 8014268:	4421      	add	r1, r4
 801426a:	2300      	movs	r3, #0
 801426c:	4650      	mov	r0, sl
 801426e:	47c8      	blx	r9
 8014270:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014274:	4a0c      	ldr	r2, [pc, #48]	@ (80142a8 <uxr_framing_read_transport+0x100>)
 8014276:	180b      	adds	r3, r1, r0
 8014278:	0859      	lsrs	r1, r3, #1
 801427a:	fba2 1201 	umull	r1, r2, r2, r1
 801427e:	0892      	lsrs	r2, r2, #2
 8014280:	212a      	movs	r1, #42	@ 0x2a
 8014282:	fb01 3312 	mls	r3, r1, r2, r3
 8014286:	eb00 0b05 	add.w	fp, r0, r5
 801428a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801428e:	e7ad      	b.n	80141ec <uxr_framing_read_transport+0x44>
 8014290:	2600      	movs	r6, #0
 8014292:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8014296:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8014298:	d9bf      	bls.n	801421a <uxr_framing_read_transport+0x72>
 801429a:	2102      	movs	r1, #2
 801429c:	2529      	movs	r5, #41	@ 0x29
 801429e:	e7c4      	b.n	801422a <uxr_framing_read_transport+0x82>
 80142a0:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 80142a4:	b2ed      	uxtb	r5, r5
 80142a6:	e796      	b.n	80141d6 <uxr_framing_read_transport+0x2e>
 80142a8:	30c30c31 	.word	0x30c30c31

080142ac <uxr_read_framed_msg>:
 80142ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142b0:	461e      	mov	r6, r3
 80142b2:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80142b6:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80142ba:	429d      	cmp	r5, r3
 80142bc:	b083      	sub	sp, #12
 80142be:	4604      	mov	r4, r0
 80142c0:	4688      	mov	r8, r1
 80142c2:	4691      	mov	r9, r2
 80142c4:	f000 8188 	beq.w	80145d8 <uxr_read_framed_msg+0x32c>
 80142c8:	7823      	ldrb	r3, [r4, #0]
 80142ca:	4dc1      	ldr	r5, [pc, #772]	@ (80145d0 <uxr_read_framed_msg+0x324>)
 80142cc:	4fc1      	ldr	r7, [pc, #772]	@ (80145d4 <uxr_read_framed_msg+0x328>)
 80142ce:	2b07      	cmp	r3, #7
 80142d0:	d8fd      	bhi.n	80142ce <uxr_read_framed_msg+0x22>
 80142d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80142d6:	0115      	.short	0x0115
 80142d8:	00d600f6 	.word	0x00d600f6
 80142dc:	009000b9 	.word	0x009000b9
 80142e0:	0030004d 	.word	0x0030004d
 80142e4:	0008      	.short	0x0008
 80142e6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80142ea:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80142ee:	4299      	cmp	r1, r3
 80142f0:	f000 814a 	beq.w	8014588 <uxr_read_framed_msg+0x2dc>
 80142f4:	18e2      	adds	r2, r4, r3
 80142f6:	7892      	ldrb	r2, [r2, #2]
 80142f8:	2a7d      	cmp	r2, #125	@ 0x7d
 80142fa:	f000 8199 	beq.w	8014630 <uxr_read_framed_msg+0x384>
 80142fe:	3301      	adds	r3, #1
 8014300:	0858      	lsrs	r0, r3, #1
 8014302:	fba5 1000 	umull	r1, r0, r5, r0
 8014306:	0880      	lsrs	r0, r0, #2
 8014308:	212a      	movs	r1, #42	@ 0x2a
 801430a:	fb01 3310 	mls	r3, r1, r0, r3
 801430e:	2a7e      	cmp	r2, #126	@ 0x7e
 8014310:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014314:	f000 8252 	beq.w	80147bc <uxr_read_framed_msg+0x510>
 8014318:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801431a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801431c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014320:	b29b      	uxth	r3, r3
 8014322:	2200      	movs	r2, #0
 8014324:	4299      	cmp	r1, r3
 8014326:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8014328:	7022      	strb	r2, [r4, #0]
 801432a:	f000 8179 	beq.w	8014620 <uxr_read_framed_msg+0x374>
 801432e:	2000      	movs	r0, #0
 8014330:	b003      	add	sp, #12
 8014332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014336:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801433a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801433e:	4299      	cmp	r1, r3
 8014340:	f000 8131 	beq.w	80145a6 <uxr_read_framed_msg+0x2fa>
 8014344:	18e2      	adds	r2, r4, r3
 8014346:	7890      	ldrb	r0, [r2, #2]
 8014348:	287d      	cmp	r0, #125	@ 0x7d
 801434a:	f000 8190 	beq.w	801466e <uxr_read_framed_msg+0x3c2>
 801434e:	3301      	adds	r3, #1
 8014350:	085a      	lsrs	r2, r3, #1
 8014352:	fba5 1202 	umull	r1, r2, r5, r2
 8014356:	0892      	lsrs	r2, r2, #2
 8014358:	212a      	movs	r1, #42	@ 0x2a
 801435a:	fb01 3312 	mls	r3, r1, r2, r3
 801435e:	287e      	cmp	r0, #126	@ 0x7e
 8014360:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014364:	f000 821a 	beq.w	801479c <uxr_read_framed_msg+0x4f0>
 8014368:	2307      	movs	r3, #7
 801436a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801436c:	7023      	strb	r3, [r4, #0]
 801436e:	e7ae      	b.n	80142ce <uxr_read_framed_msg+0x22>
 8014370:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014372:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8014376:	459e      	cmp	lr, r3
 8014378:	d938      	bls.n	80143ec <uxr_read_framed_msg+0x140>
 801437a:	ee07 8a90 	vmov	s15, r8
 801437e:	212a      	movs	r1, #42	@ 0x2a
 8014380:	e020      	b.n	80143c4 <uxr_read_framed_msg+0x118>
 8014382:	f89b c002 	ldrb.w	ip, [fp, #2]
 8014386:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801438a:	f000 80d4 	beq.w	8014536 <uxr_read_framed_msg+0x28a>
 801438e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8014392:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014396:	f000 8219 	beq.w	80147cc <uxr_read_framed_msg+0x520>
 801439a:	f806 c003 	strb.w	ip, [r6, r3]
 801439e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 80143a2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80143a4:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80143a8:	ea8a 000c 	eor.w	r0, sl, ip
 80143ac:	b2c0      	uxtb	r0, r0
 80143ae:	3301      	adds	r3, #1
 80143b0:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80143b4:	b29b      	uxth	r3, r3
 80143b6:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80143ba:	4573      	cmp	r3, lr
 80143bc:	8663      	strh	r3, [r4, #50]	@ 0x32
 80143be:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80143c0:	f080 8120 	bcs.w	8014604 <uxr_read_framed_msg+0x358>
 80143c4:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80143c8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80143cc:	f100 0c01 	add.w	ip, r0, #1
 80143d0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80143d4:	fba5 8202 	umull	r8, r2, r5, r2
 80143d8:	0892      	lsrs	r2, r2, #2
 80143da:	4582      	cmp	sl, r0
 80143dc:	eb04 0b00 	add.w	fp, r4, r0
 80143e0:	fb01 c212 	mls	r2, r1, r2, ip
 80143e4:	d1cd      	bne.n	8014382 <uxr_read_framed_msg+0xd6>
 80143e6:	ee17 8a90 	vmov	r8, s15
 80143ea:	459e      	cmp	lr, r3
 80143ec:	f040 8111 	bne.w	8014612 <uxr_read_framed_msg+0x366>
 80143f0:	2306      	movs	r3, #6
 80143f2:	7023      	strb	r3, [r4, #0]
 80143f4:	e76b      	b.n	80142ce <uxr_read_framed_msg+0x22>
 80143f6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80143fa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80143fe:	4298      	cmp	r0, r3
 8014400:	f000 80c2 	beq.w	8014588 <uxr_read_framed_msg+0x2dc>
 8014404:	18e2      	adds	r2, r4, r3
 8014406:	7891      	ldrb	r1, [r2, #2]
 8014408:	297d      	cmp	r1, #125	@ 0x7d
 801440a:	f000 814c 	beq.w	80146a6 <uxr_read_framed_msg+0x3fa>
 801440e:	3301      	adds	r3, #1
 8014410:	085a      	lsrs	r2, r3, #1
 8014412:	fba5 0202 	umull	r0, r2, r5, r2
 8014416:	0892      	lsrs	r2, r2, #2
 8014418:	202a      	movs	r0, #42	@ 0x2a
 801441a:	fb00 3312 	mls	r3, r0, r2, r3
 801441e:	297e      	cmp	r1, #126	@ 0x7e
 8014420:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014424:	f000 81ca 	beq.w	80147bc <uxr_read_framed_msg+0x510>
 8014428:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801442a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801442e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014430:	b29b      	uxth	r3, r3
 8014432:	2000      	movs	r0, #0
 8014434:	428b      	cmp	r3, r1
 8014436:	8623      	strh	r3, [r4, #48]	@ 0x30
 8014438:	8660      	strh	r0, [r4, #50]	@ 0x32
 801443a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801443c:	f240 80df 	bls.w	80145fe <uxr_read_framed_msg+0x352>
 8014440:	7020      	strb	r0, [r4, #0]
 8014442:	b003      	add	sp, #12
 8014444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014448:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801444c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014450:	4299      	cmp	r1, r3
 8014452:	f000 80a8 	beq.w	80145a6 <uxr_read_framed_msg+0x2fa>
 8014456:	18e2      	adds	r2, r4, r3
 8014458:	7890      	ldrb	r0, [r2, #2]
 801445a:	287d      	cmp	r0, #125	@ 0x7d
 801445c:	f000 8164 	beq.w	8014728 <uxr_read_framed_msg+0x47c>
 8014460:	3301      	adds	r3, #1
 8014462:	085a      	lsrs	r2, r3, #1
 8014464:	fba5 1202 	umull	r1, r2, r5, r2
 8014468:	0892      	lsrs	r2, r2, #2
 801446a:	212a      	movs	r1, #42	@ 0x2a
 801446c:	fb01 3312 	mls	r3, r1, r2, r3
 8014470:	287e      	cmp	r0, #126	@ 0x7e
 8014472:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014476:	f000 8191 	beq.w	801479c <uxr_read_framed_msg+0x4f0>
 801447a:	2304      	movs	r3, #4
 801447c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801447e:	7023      	strb	r3, [r4, #0]
 8014480:	e725      	b.n	80142ce <uxr_read_framed_msg+0x22>
 8014482:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8014486:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801448a:	4290      	cmp	r0, r2
 801448c:	f000 80b3 	beq.w	80145f6 <uxr_read_framed_msg+0x34a>
 8014490:	18a3      	adds	r3, r4, r2
 8014492:	7899      	ldrb	r1, [r3, #2]
 8014494:	297d      	cmp	r1, #125	@ 0x7d
 8014496:	f000 8164 	beq.w	8014762 <uxr_read_framed_msg+0x4b6>
 801449a:	3201      	adds	r2, #1
 801449c:	0850      	lsrs	r0, r2, #1
 801449e:	fba5 3000 	umull	r3, r0, r5, r0
 80144a2:	0880      	lsrs	r0, r0, #2
 80144a4:	232a      	movs	r3, #42	@ 0x2a
 80144a6:	fb03 2210 	mls	r2, r3, r0, r2
 80144aa:	297e      	cmp	r1, #126	@ 0x7e
 80144ac:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80144b0:	f000 8188 	beq.w	80147c4 <uxr_read_framed_msg+0x518>
 80144b4:	7863      	ldrb	r3, [r4, #1]
 80144b6:	428b      	cmp	r3, r1
 80144b8:	bf0c      	ite	eq
 80144ba:	2303      	moveq	r3, #3
 80144bc:	2300      	movne	r3, #0
 80144be:	7023      	strb	r3, [r4, #0]
 80144c0:	e705      	b.n	80142ce <uxr_read_framed_msg+0x22>
 80144c2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80144c6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80144ca:	2200      	movs	r2, #0
 80144cc:	4299      	cmp	r1, r3
 80144ce:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80144d2:	d06c      	beq.n	80145ae <uxr_read_framed_msg+0x302>
 80144d4:	18e2      	adds	r2, r4, r3
 80144d6:	7890      	ldrb	r0, [r2, #2]
 80144d8:	287d      	cmp	r0, #125	@ 0x7d
 80144da:	f000 8101 	beq.w	80146e0 <uxr_read_framed_msg+0x434>
 80144de:	3301      	adds	r3, #1
 80144e0:	085a      	lsrs	r2, r3, #1
 80144e2:	fba5 1202 	umull	r1, r2, r5, r2
 80144e6:	0892      	lsrs	r2, r2, #2
 80144e8:	212a      	movs	r1, #42	@ 0x2a
 80144ea:	fb01 3312 	mls	r3, r1, r2, r3
 80144ee:	287e      	cmp	r0, #126	@ 0x7e
 80144f0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80144f4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80144f8:	d059      	beq.n	80145ae <uxr_read_framed_msg+0x302>
 80144fa:	2302      	movs	r3, #2
 80144fc:	7023      	strb	r3, [r4, #0]
 80144fe:	e6e6      	b.n	80142ce <uxr_read_framed_msg+0x22>
 8014500:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8014504:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014508:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801450c:	1c51      	adds	r1, r2, #1
 801450e:	084b      	lsrs	r3, r1, #1
 8014510:	fba5 c303 	umull	ip, r3, r5, r3
 8014514:	089b      	lsrs	r3, r3, #2
 8014516:	fb0e 1313 	mls	r3, lr, r3, r1
 801451a:	4592      	cmp	sl, r2
 801451c:	eb04 0002 	add.w	r0, r4, r2
 8014520:	b2da      	uxtb	r2, r3
 8014522:	f43f af04 	beq.w	801432e <uxr_read_framed_msg+0x82>
 8014526:	7883      	ldrb	r3, [r0, #2]
 8014528:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801452c:	2b7e      	cmp	r3, #126	@ 0x7e
 801452e:	d1ed      	bne.n	801450c <uxr_read_framed_msg+0x260>
 8014530:	2301      	movs	r3, #1
 8014532:	7023      	strb	r3, [r4, #0]
 8014534:	e6cb      	b.n	80142ce <uxr_read_framed_msg+0x22>
 8014536:	f100 0c01 	add.w	ip, r0, #1
 801453a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801453e:	fba5 8202 	umull	r8, r2, r5, r2
 8014542:	0892      	lsrs	r2, r2, #2
 8014544:	fb01 c212 	mls	r2, r1, r2, ip
 8014548:	eb04 0c02 	add.w	ip, r4, r2
 801454c:	b2d2      	uxtb	r2, r2
 801454e:	4592      	cmp	sl, r2
 8014550:	f100 0002 	add.w	r0, r0, #2
 8014554:	f43f af47 	beq.w	80143e6 <uxr_read_framed_msg+0x13a>
 8014558:	0842      	lsrs	r2, r0, #1
 801455a:	f89c a002 	ldrb.w	sl, [ip, #2]
 801455e:	fba5 8202 	umull	r8, r2, r5, r2
 8014562:	0892      	lsrs	r2, r2, #2
 8014564:	fb01 0012 	mls	r0, r1, r2, r0
 8014568:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801456c:	f08a 0c20 	eor.w	ip, sl, #32
 8014570:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8014574:	f47f af11 	bne.w	801439a <uxr_read_framed_msg+0xee>
 8014578:	459e      	cmp	lr, r3
 801457a:	ee17 8a90 	vmov	r8, s15
 801457e:	f43f af37 	beq.w	80143f0 <uxr_read_framed_msg+0x144>
 8014582:	2301      	movs	r3, #1
 8014584:	7023      	strb	r3, [r4, #0]
 8014586:	e6a2      	b.n	80142ce <uxr_read_framed_msg+0x22>
 8014588:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801458a:	9300      	str	r3, [sp, #0]
 801458c:	2301      	movs	r3, #1
 801458e:	9301      	str	r3, [sp, #4]
 8014590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014592:	464a      	mov	r2, r9
 8014594:	4641      	mov	r1, r8
 8014596:	4620      	mov	r0, r4
 8014598:	f7ff fe06 	bl	80141a8 <uxr_framing_read_transport>
 801459c:	2800      	cmp	r0, #0
 801459e:	f43f aec6 	beq.w	801432e <uxr_read_framed_msg+0x82>
 80145a2:	7823      	ldrb	r3, [r4, #0]
 80145a4:	e693      	b.n	80142ce <uxr_read_framed_msg+0x22>
 80145a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80145a8:	9300      	str	r3, [sp, #0]
 80145aa:	2302      	movs	r3, #2
 80145ac:	e7ef      	b.n	801458e <uxr_read_framed_msg+0x2e2>
 80145ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80145b0:	9300      	str	r3, [sp, #0]
 80145b2:	2304      	movs	r3, #4
 80145b4:	9301      	str	r3, [sp, #4]
 80145b6:	464a      	mov	r2, r9
 80145b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80145ba:	4641      	mov	r1, r8
 80145bc:	4620      	mov	r0, r4
 80145be:	f7ff fdf3 	bl	80141a8 <uxr_framing_read_transport>
 80145c2:	2800      	cmp	r0, #0
 80145c4:	d1ed      	bne.n	80145a2 <uxr_read_framed_msg+0x2f6>
 80145c6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80145ca:	2b7e      	cmp	r3, #126	@ 0x7e
 80145cc:	d0e9      	beq.n	80145a2 <uxr_read_framed_msg+0x2f6>
 80145ce:	e6ae      	b.n	801432e <uxr_read_framed_msg+0x82>
 80145d0:	30c30c31 	.word	0x30c30c31
 80145d4:	08017330 	.word	0x08017330
 80145d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80145da:	9300      	str	r3, [sp, #0]
 80145dc:	2305      	movs	r3, #5
 80145de:	9301      	str	r3, [sp, #4]
 80145e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80145e2:	f7ff fde1 	bl	80141a8 <uxr_framing_read_transport>
 80145e6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80145ea:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80145ee:	429a      	cmp	r2, r3
 80145f0:	f43f ae9d 	beq.w	801432e <uxr_read_framed_msg+0x82>
 80145f4:	e668      	b.n	80142c8 <uxr_read_framed_msg+0x1c>
 80145f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80145f8:	9300      	str	r3, [sp, #0]
 80145fa:	2303      	movs	r3, #3
 80145fc:	e7c7      	b.n	801458e <uxr_read_framed_msg+0x2e2>
 80145fe:	2305      	movs	r3, #5
 8014600:	7023      	strb	r3, [r4, #0]
 8014602:	e664      	b.n	80142ce <uxr_read_framed_msg+0x22>
 8014604:	ee17 8a90 	vmov	r8, s15
 8014608:	f43f aef2 	beq.w	80143f0 <uxr_read_framed_msg+0x144>
 801460c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8014610:	d08e      	beq.n	8014530 <uxr_read_framed_msg+0x284>
 8014612:	ebae 0303 	sub.w	r3, lr, r3
 8014616:	3302      	adds	r3, #2
 8014618:	9301      	str	r3, [sp, #4]
 801461a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801461c:	9300      	str	r3, [sp, #0]
 801461e:	e7b7      	b.n	8014590 <uxr_read_framed_msg+0x2e4>
 8014620:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014622:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8014626:	7013      	strb	r3, [r2, #0]
 8014628:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801462a:	b003      	add	sp, #12
 801462c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014630:	f103 0c01 	add.w	ip, r3, #1
 8014634:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014638:	fba5 0202 	umull	r0, r2, r5, r2
 801463c:	0892      	lsrs	r2, r2, #2
 801463e:	202a      	movs	r0, #42	@ 0x2a
 8014640:	fb00 c212 	mls	r2, r0, r2, ip
 8014644:	fa5f fc82 	uxtb.w	ip, r2
 8014648:	4561      	cmp	r1, ip
 801464a:	d09d      	beq.n	8014588 <uxr_read_framed_msg+0x2dc>
 801464c:	3302      	adds	r3, #2
 801464e:	4422      	add	r2, r4
 8014650:	0859      	lsrs	r1, r3, #1
 8014652:	7892      	ldrb	r2, [r2, #2]
 8014654:	fba5 c101 	umull	ip, r1, r5, r1
 8014658:	0889      	lsrs	r1, r1, #2
 801465a:	fb00 3311 	mls	r3, r0, r1, r3
 801465e:	2a7e      	cmp	r2, #126	@ 0x7e
 8014660:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014664:	f000 80aa 	beq.w	80147bc <uxr_read_framed_msg+0x510>
 8014668:	f082 0220 	eor.w	r2, r2, #32
 801466c:	e654      	b.n	8014318 <uxr_read_framed_msg+0x6c>
 801466e:	1c58      	adds	r0, r3, #1
 8014670:	0842      	lsrs	r2, r0, #1
 8014672:	fba5 c202 	umull	ip, r2, r5, r2
 8014676:	0892      	lsrs	r2, r2, #2
 8014678:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801467c:	fb0c 0212 	mls	r2, ip, r2, r0
 8014680:	b2d0      	uxtb	r0, r2
 8014682:	4281      	cmp	r1, r0
 8014684:	d08f      	beq.n	80145a6 <uxr_read_framed_msg+0x2fa>
 8014686:	4422      	add	r2, r4
 8014688:	3302      	adds	r3, #2
 801468a:	7890      	ldrb	r0, [r2, #2]
 801468c:	085a      	lsrs	r2, r3, #1
 801468e:	fba5 1202 	umull	r1, r2, r5, r2
 8014692:	0892      	lsrs	r2, r2, #2
 8014694:	fb0c 3312 	mls	r3, ip, r2, r3
 8014698:	287e      	cmp	r0, #126	@ 0x7e
 801469a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801469e:	d07d      	beq.n	801479c <uxr_read_framed_msg+0x4f0>
 80146a0:	f080 0020 	eor.w	r0, r0, #32
 80146a4:	e660      	b.n	8014368 <uxr_read_framed_msg+0xbc>
 80146a6:	1c59      	adds	r1, r3, #1
 80146a8:	084a      	lsrs	r2, r1, #1
 80146aa:	fba5 c202 	umull	ip, r2, r5, r2
 80146ae:	0892      	lsrs	r2, r2, #2
 80146b0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80146b4:	fb0c 1212 	mls	r2, ip, r2, r1
 80146b8:	b2d1      	uxtb	r1, r2
 80146ba:	4288      	cmp	r0, r1
 80146bc:	f43f af64 	beq.w	8014588 <uxr_read_framed_msg+0x2dc>
 80146c0:	4422      	add	r2, r4
 80146c2:	3302      	adds	r3, #2
 80146c4:	7891      	ldrb	r1, [r2, #2]
 80146c6:	085a      	lsrs	r2, r3, #1
 80146c8:	fba5 0202 	umull	r0, r2, r5, r2
 80146cc:	0892      	lsrs	r2, r2, #2
 80146ce:	fb0c 3312 	mls	r3, ip, r2, r3
 80146d2:	297e      	cmp	r1, #126	@ 0x7e
 80146d4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80146d8:	d070      	beq.n	80147bc <uxr_read_framed_msg+0x510>
 80146da:	f081 0120 	eor.w	r1, r1, #32
 80146de:	e6a3      	b.n	8014428 <uxr_read_framed_msg+0x17c>
 80146e0:	f103 0c01 	add.w	ip, r3, #1
 80146e4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80146e8:	fba5 0202 	umull	r0, r2, r5, r2
 80146ec:	0892      	lsrs	r2, r2, #2
 80146ee:	202a      	movs	r0, #42	@ 0x2a
 80146f0:	fb00 c212 	mls	r2, r0, r2, ip
 80146f4:	fa5f fc82 	uxtb.w	ip, r2
 80146f8:	4561      	cmp	r1, ip
 80146fa:	f43f af58 	beq.w	80145ae <uxr_read_framed_msg+0x302>
 80146fe:	4422      	add	r2, r4
 8014700:	3302      	adds	r3, #2
 8014702:	7891      	ldrb	r1, [r2, #2]
 8014704:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8014708:	085a      	lsrs	r2, r3, #1
 801470a:	fba5 c202 	umull	ip, r2, r5, r2
 801470e:	0892      	lsrs	r2, r2, #2
 8014710:	fb00 3312 	mls	r3, r0, r2, r3
 8014714:	297e      	cmp	r1, #126	@ 0x7e
 8014716:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801471a:	f43f af48 	beq.w	80145ae <uxr_read_framed_msg+0x302>
 801471e:	f081 0120 	eor.w	r1, r1, #32
 8014722:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8014726:	e6e8      	b.n	80144fa <uxr_read_framed_msg+0x24e>
 8014728:	1c58      	adds	r0, r3, #1
 801472a:	0842      	lsrs	r2, r0, #1
 801472c:	fba5 c202 	umull	ip, r2, r5, r2
 8014730:	0892      	lsrs	r2, r2, #2
 8014732:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014736:	fb0c 0212 	mls	r2, ip, r2, r0
 801473a:	b2d0      	uxtb	r0, r2
 801473c:	4281      	cmp	r1, r0
 801473e:	f43f af32 	beq.w	80145a6 <uxr_read_framed_msg+0x2fa>
 8014742:	4422      	add	r2, r4
 8014744:	3302      	adds	r3, #2
 8014746:	7890      	ldrb	r0, [r2, #2]
 8014748:	085a      	lsrs	r2, r3, #1
 801474a:	fba5 1202 	umull	r1, r2, r5, r2
 801474e:	0892      	lsrs	r2, r2, #2
 8014750:	fb0c 3312 	mls	r3, ip, r2, r3
 8014754:	287e      	cmp	r0, #126	@ 0x7e
 8014756:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801475a:	d01f      	beq.n	801479c <uxr_read_framed_msg+0x4f0>
 801475c:	f080 0020 	eor.w	r0, r0, #32
 8014760:	e68b      	b.n	801447a <uxr_read_framed_msg+0x1ce>
 8014762:	1c51      	adds	r1, r2, #1
 8014764:	084b      	lsrs	r3, r1, #1
 8014766:	fba5 c303 	umull	ip, r3, r5, r3
 801476a:	089b      	lsrs	r3, r3, #2
 801476c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014770:	fb0c 1313 	mls	r3, ip, r3, r1
 8014774:	b2d9      	uxtb	r1, r3
 8014776:	4288      	cmp	r0, r1
 8014778:	f43f af3d 	beq.w	80145f6 <uxr_read_framed_msg+0x34a>
 801477c:	3202      	adds	r2, #2
 801477e:	4423      	add	r3, r4
 8014780:	0850      	lsrs	r0, r2, #1
 8014782:	789b      	ldrb	r3, [r3, #2]
 8014784:	fba5 1000 	umull	r1, r0, r5, r0
 8014788:	0880      	lsrs	r0, r0, #2
 801478a:	fb0c 2210 	mls	r2, ip, r0, r2
 801478e:	2b7e      	cmp	r3, #126	@ 0x7e
 8014790:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014794:	d016      	beq.n	80147c4 <uxr_read_framed_msg+0x518>
 8014796:	f083 0120 	eor.w	r1, r3, #32
 801479a:	e68b      	b.n	80144b4 <uxr_read_framed_msg+0x208>
 801479c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801479e:	9300      	str	r3, [sp, #0]
 80147a0:	2302      	movs	r3, #2
 80147a2:	9301      	str	r3, [sp, #4]
 80147a4:	464a      	mov	r2, r9
 80147a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80147a8:	4641      	mov	r1, r8
 80147aa:	4620      	mov	r0, r4
 80147ac:	f7ff fcfc 	bl	80141a8 <uxr_framing_read_transport>
 80147b0:	2800      	cmp	r0, #0
 80147b2:	f47f aef6 	bne.w	80145a2 <uxr_read_framed_msg+0x2f6>
 80147b6:	2301      	movs	r3, #1
 80147b8:	7023      	strb	r3, [r4, #0]
 80147ba:	e588      	b.n	80142ce <uxr_read_framed_msg+0x22>
 80147bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80147be:	9300      	str	r3, [sp, #0]
 80147c0:	2301      	movs	r3, #1
 80147c2:	e7ee      	b.n	80147a2 <uxr_read_framed_msg+0x4f6>
 80147c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80147c6:	9300      	str	r3, [sp, #0]
 80147c8:	2303      	movs	r3, #3
 80147ca:	e7ea      	b.n	80147a2 <uxr_read_framed_msg+0x4f6>
 80147cc:	ee17 8a90 	vmov	r8, s15
 80147d0:	e6ae      	b.n	8014530 <uxr_read_framed_msg+0x284>
 80147d2:	bf00      	nop

080147d4 <rcl_get_default_domain_id>:
 80147d4:	b530      	push	{r4, r5, lr}
 80147d6:	b083      	sub	sp, #12
 80147d8:	2300      	movs	r3, #0
 80147da:	9300      	str	r3, [sp, #0]
 80147dc:	b1d0      	cbz	r0, 8014814 <rcl_get_default_domain_id+0x40>
 80147de:	4604      	mov	r4, r0
 80147e0:	4669      	mov	r1, sp
 80147e2:	4815      	ldr	r0, [pc, #84]	@ (8014838 <rcl_get_default_domain_id+0x64>)
 80147e4:	f7fc fc60 	bl	80110a8 <rcutils_get_env>
 80147e8:	4602      	mov	r2, r0
 80147ea:	b110      	cbz	r0, 80147f2 <rcl_get_default_domain_id+0x1e>
 80147ec:	2001      	movs	r0, #1
 80147ee:	b003      	add	sp, #12
 80147f0:	bd30      	pop	{r4, r5, pc}
 80147f2:	9b00      	ldr	r3, [sp, #0]
 80147f4:	b18b      	cbz	r3, 801481a <rcl_get_default_domain_id+0x46>
 80147f6:	7818      	ldrb	r0, [r3, #0]
 80147f8:	2800      	cmp	r0, #0
 80147fa:	d0f8      	beq.n	80147ee <rcl_get_default_domain_id+0x1a>
 80147fc:	a901      	add	r1, sp, #4
 80147fe:	4618      	mov	r0, r3
 8014800:	9201      	str	r2, [sp, #4]
 8014802:	f000 fe6d 	bl	80154e0 <strtoul>
 8014806:	4605      	mov	r5, r0
 8014808:	b150      	cbz	r0, 8014820 <rcl_get_default_domain_id+0x4c>
 801480a:	1c43      	adds	r3, r0, #1
 801480c:	d00d      	beq.n	801482a <rcl_get_default_domain_id+0x56>
 801480e:	6025      	str	r5, [r4, #0]
 8014810:	2000      	movs	r0, #0
 8014812:	e7ec      	b.n	80147ee <rcl_get_default_domain_id+0x1a>
 8014814:	200b      	movs	r0, #11
 8014816:	b003      	add	sp, #12
 8014818:	bd30      	pop	{r4, r5, pc}
 801481a:	4618      	mov	r0, r3
 801481c:	b003      	add	sp, #12
 801481e:	bd30      	pop	{r4, r5, pc}
 8014820:	9b01      	ldr	r3, [sp, #4]
 8014822:	781b      	ldrb	r3, [r3, #0]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d0f2      	beq.n	801480e <rcl_get_default_domain_id+0x3a>
 8014828:	e7e0      	b.n	80147ec <rcl_get_default_domain_id+0x18>
 801482a:	f001 f8a5 	bl	8015978 <__errno>
 801482e:	6803      	ldr	r3, [r0, #0]
 8014830:	2b22      	cmp	r3, #34	@ 0x22
 8014832:	d1ec      	bne.n	801480e <rcl_get_default_domain_id+0x3a>
 8014834:	e7da      	b.n	80147ec <rcl_get_default_domain_id+0x18>
 8014836:	bf00      	nop
 8014838:	08017530 	.word	0x08017530

0801483c <rcl_expand_topic_name>:
 801483c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014840:	b08b      	sub	sp, #44	@ 0x2c
 8014842:	9306      	str	r3, [sp, #24]
 8014844:	2800      	cmp	r0, #0
 8014846:	f000 80ad 	beq.w	80149a4 <rcl_expand_topic_name+0x168>
 801484a:	460e      	mov	r6, r1
 801484c:	2900      	cmp	r1, #0
 801484e:	f000 80a9 	beq.w	80149a4 <rcl_expand_topic_name+0x168>
 8014852:	4617      	mov	r7, r2
 8014854:	2a00      	cmp	r2, #0
 8014856:	f000 80a5 	beq.w	80149a4 <rcl_expand_topic_name+0x168>
 801485a:	2b00      	cmp	r3, #0
 801485c:	f000 80a2 	beq.w	80149a4 <rcl_expand_topic_name+0x168>
 8014860:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014862:	2b00      	cmp	r3, #0
 8014864:	f000 809e 	beq.w	80149a4 <rcl_expand_topic_name+0x168>
 8014868:	2200      	movs	r2, #0
 801486a:	a909      	add	r1, sp, #36	@ 0x24
 801486c:	4680      	mov	r8, r0
 801486e:	f000 f9fb 	bl	8014c68 <rcl_validate_topic_name>
 8014872:	4604      	mov	r4, r0
 8014874:	2800      	cmp	r0, #0
 8014876:	f040 8096 	bne.w	80149a6 <rcl_expand_topic_name+0x16a>
 801487a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801487c:	2b00      	cmp	r3, #0
 801487e:	f040 809a 	bne.w	80149b6 <rcl_expand_topic_name+0x17a>
 8014882:	4602      	mov	r2, r0
 8014884:	a909      	add	r1, sp, #36	@ 0x24
 8014886:	4630      	mov	r0, r6
 8014888:	f7fd f86c 	bl	8011964 <rmw_validate_node_name>
 801488c:	2800      	cmp	r0, #0
 801488e:	f040 808e 	bne.w	80149ae <rcl_expand_topic_name+0x172>
 8014892:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014894:	2a00      	cmp	r2, #0
 8014896:	f040 8093 	bne.w	80149c0 <rcl_expand_topic_name+0x184>
 801489a:	a909      	add	r1, sp, #36	@ 0x24
 801489c:	4638      	mov	r0, r7
 801489e:	f7fd f843 	bl	8011928 <rmw_validate_namespace>
 80148a2:	2800      	cmp	r0, #0
 80148a4:	f040 8083 	bne.w	80149ae <rcl_expand_topic_name+0x172>
 80148a8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80148aa:	2c00      	cmp	r4, #0
 80148ac:	f040 80ed 	bne.w	8014a8a <rcl_expand_topic_name+0x24e>
 80148b0:	217b      	movs	r1, #123	@ 0x7b
 80148b2:	4640      	mov	r0, r8
 80148b4:	f000 ffd4 	bl	8015860 <strchr>
 80148b8:	f898 3000 	ldrb.w	r3, [r8]
 80148bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80148be:	4605      	mov	r5, r0
 80148c0:	f000 809e 	beq.w	8014a00 <rcl_expand_topic_name+0x1c4>
 80148c4:	2b7e      	cmp	r3, #126	@ 0x7e
 80148c6:	f040 80a2 	bne.w	8014a0e <rcl_expand_topic_name+0x1d2>
 80148ca:	4638      	mov	r0, r7
 80148cc:	f7eb fc92 	bl	80001f4 <strlen>
 80148d0:	4a82      	ldr	r2, [pc, #520]	@ (8014adc <rcl_expand_topic_name+0x2a0>)
 80148d2:	4b83      	ldr	r3, [pc, #524]	@ (8014ae0 <rcl_expand_topic_name+0x2a4>)
 80148d4:	2801      	cmp	r0, #1
 80148d6:	bf18      	it	ne
 80148d8:	4613      	movne	r3, r2
 80148da:	9302      	str	r3, [sp, #8]
 80148dc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80148de:	9300      	str	r3, [sp, #0]
 80148e0:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80148e4:	f108 0301 	add.w	r3, r8, #1
 80148e8:	9305      	str	r3, [sp, #20]
 80148ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80148ee:	9301      	str	r3, [sp, #4]
 80148f0:	ab14      	add	r3, sp, #80	@ 0x50
 80148f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80148f4:	f7fc fc00 	bl	80110f8 <rcutils_format_string_limit>
 80148f8:	4682      	mov	sl, r0
 80148fa:	2800      	cmp	r0, #0
 80148fc:	f000 80c7 	beq.w	8014a8e <rcl_expand_topic_name+0x252>
 8014900:	2d00      	cmp	r5, #0
 8014902:	f000 80a2 	beq.w	8014a4a <rcl_expand_topic_name+0x20e>
 8014906:	217b      	movs	r1, #123	@ 0x7b
 8014908:	f000 ffaa 	bl	8015860 <strchr>
 801490c:	46d1      	mov	r9, sl
 801490e:	4605      	mov	r5, r0
 8014910:	9407      	str	r4, [sp, #28]
 8014912:	46d3      	mov	fp, sl
 8014914:	464c      	mov	r4, r9
 8014916:	2d00      	cmp	r5, #0
 8014918:	f000 80be 	beq.w	8014a98 <rcl_expand_topic_name+0x25c>
 801491c:	217d      	movs	r1, #125	@ 0x7d
 801491e:	4620      	mov	r0, r4
 8014920:	f000 ff9e 	bl	8015860 <strchr>
 8014924:	eba0 0905 	sub.w	r9, r0, r5
 8014928:	f109 0a01 	add.w	sl, r9, #1
 801492c:	486d      	ldr	r0, [pc, #436]	@ (8014ae4 <rcl_expand_topic_name+0x2a8>)
 801492e:	4652      	mov	r2, sl
 8014930:	4629      	mov	r1, r5
 8014932:	f000 ffa2 	bl	801587a <strncmp>
 8014936:	2800      	cmp	r0, #0
 8014938:	d067      	beq.n	8014a0a <rcl_expand_topic_name+0x1ce>
 801493a:	486b      	ldr	r0, [pc, #428]	@ (8014ae8 <rcl_expand_topic_name+0x2ac>)
 801493c:	4652      	mov	r2, sl
 801493e:	4629      	mov	r1, r5
 8014940:	f000 ff9b 	bl	801587a <strncmp>
 8014944:	b130      	cbz	r0, 8014954 <rcl_expand_topic_name+0x118>
 8014946:	4869      	ldr	r0, [pc, #420]	@ (8014aec <rcl_expand_topic_name+0x2b0>)
 8014948:	4652      	mov	r2, sl
 801494a:	4629      	mov	r1, r5
 801494c:	f000 ff95 	bl	801587a <strncmp>
 8014950:	2800      	cmp	r0, #0
 8014952:	d137      	bne.n	80149c4 <rcl_expand_topic_name+0x188>
 8014954:	46b9      	mov	r9, r7
 8014956:	ab16      	add	r3, sp, #88	@ 0x58
 8014958:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801495c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014960:	ab14      	add	r3, sp, #80	@ 0x50
 8014962:	4628      	mov	r0, r5
 8014964:	cb0c      	ldmia	r3, {r2, r3}
 8014966:	4651      	mov	r1, sl
 8014968:	f7fc fd02 	bl	8011370 <rcutils_strndup>
 801496c:	4605      	mov	r5, r0
 801496e:	2800      	cmp	r0, #0
 8014970:	f000 809c 	beq.w	8014aac <rcl_expand_topic_name+0x270>
 8014974:	464a      	mov	r2, r9
 8014976:	4620      	mov	r0, r4
 8014978:	ab14      	add	r3, sp, #80	@ 0x50
 801497a:	4629      	mov	r1, r5
 801497c:	f7fc fbf6 	bl	801116c <rcutils_repl_str>
 8014980:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014982:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014984:	4604      	mov	r4, r0
 8014986:	4628      	mov	r0, r5
 8014988:	4798      	blx	r3
 801498a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801498c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801498e:	4658      	mov	r0, fp
 8014990:	4798      	blx	r3
 8014992:	2c00      	cmp	r4, #0
 8014994:	d07b      	beq.n	8014a8e <rcl_expand_topic_name+0x252>
 8014996:	217b      	movs	r1, #123	@ 0x7b
 8014998:	4620      	mov	r0, r4
 801499a:	f000 ff61 	bl	8015860 <strchr>
 801499e:	46a3      	mov	fp, r4
 80149a0:	4605      	mov	r5, r0
 80149a2:	e7b8      	b.n	8014916 <rcl_expand_topic_name+0xda>
 80149a4:	240b      	movs	r4, #11
 80149a6:	4620      	mov	r0, r4
 80149a8:	b00b      	add	sp, #44	@ 0x2c
 80149aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149ae:	f7f9 fdd9 	bl	800e564 <rcl_convert_rmw_ret_to_rcl_ret>
 80149b2:	4604      	mov	r4, r0
 80149b4:	e7f7      	b.n	80149a6 <rcl_expand_topic_name+0x16a>
 80149b6:	2467      	movs	r4, #103	@ 0x67
 80149b8:	4620      	mov	r0, r4
 80149ba:	b00b      	add	sp, #44	@ 0x2c
 80149bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149c0:	24c9      	movs	r4, #201	@ 0xc9
 80149c2:	e7f0      	b.n	80149a6 <rcl_expand_topic_name+0x16a>
 80149c4:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80149c8:	9806      	ldr	r0, [sp, #24]
 80149ca:	1c69      	adds	r1, r5, #1
 80149cc:	f7fc fdea 	bl	80115a4 <rcutils_string_map_getn>
 80149d0:	4681      	mov	r9, r0
 80149d2:	2800      	cmp	r0, #0
 80149d4:	d1bf      	bne.n	8014956 <rcl_expand_topic_name+0x11a>
 80149d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80149d8:	aa16      	add	r2, sp, #88	@ 0x58
 80149da:	6018      	str	r0, [r3, #0]
 80149dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80149de:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80149e2:	ab14      	add	r3, sp, #80	@ 0x50
 80149e4:	cb0c      	ldmia	r3, {r2, r3}
 80149e6:	4651      	mov	r1, sl
 80149e8:	4628      	mov	r0, r5
 80149ea:	f7fc fcc1 	bl	8011370 <rcutils_strndup>
 80149ee:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80149f0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80149f2:	4798      	blx	r3
 80149f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80149f6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80149f8:	4658      	mov	r0, fp
 80149fa:	2469      	movs	r4, #105	@ 0x69
 80149fc:	4798      	blx	r3
 80149fe:	e7d2      	b.n	80149a6 <rcl_expand_topic_name+0x16a>
 8014a00:	2800      	cmp	r0, #0
 8014a02:	d05b      	beq.n	8014abc <rcl_expand_topic_name+0x280>
 8014a04:	46c1      	mov	r9, r8
 8014a06:	46a2      	mov	sl, r4
 8014a08:	e782      	b.n	8014910 <rcl_expand_topic_name+0xd4>
 8014a0a:	46b1      	mov	r9, r6
 8014a0c:	e7a3      	b.n	8014956 <rcl_expand_topic_name+0x11a>
 8014a0e:	2800      	cmp	r0, #0
 8014a10:	d1f8      	bne.n	8014a04 <rcl_expand_topic_name+0x1c8>
 8014a12:	4638      	mov	r0, r7
 8014a14:	f7eb fbee 	bl	80001f4 <strlen>
 8014a18:	4a35      	ldr	r2, [pc, #212]	@ (8014af0 <rcl_expand_topic_name+0x2b4>)
 8014a1a:	4b36      	ldr	r3, [pc, #216]	@ (8014af4 <rcl_expand_topic_name+0x2b8>)
 8014a1c:	f8cd 8010 	str.w	r8, [sp, #16]
 8014a20:	2801      	cmp	r0, #1
 8014a22:	bf18      	it	ne
 8014a24:	4613      	movne	r3, r2
 8014a26:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8014a2a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8014a2e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8014a30:	9703      	str	r7, [sp, #12]
 8014a32:	9200      	str	r2, [sp, #0]
 8014a34:	ab14      	add	r3, sp, #80	@ 0x50
 8014a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014a38:	f7fc fb5e 	bl	80110f8 <rcutils_format_string_limit>
 8014a3c:	4682      	mov	sl, r0
 8014a3e:	4653      	mov	r3, sl
 8014a40:	b32b      	cbz	r3, 8014a8e <rcl_expand_topic_name+0x252>
 8014a42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014a44:	f8c3 a000 	str.w	sl, [r3]
 8014a48:	e7ad      	b.n	80149a6 <rcl_expand_topic_name+0x16a>
 8014a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8014a4e:	2b2f      	cmp	r3, #47	@ 0x2f
 8014a50:	d0f7      	beq.n	8014a42 <rcl_expand_topic_name+0x206>
 8014a52:	4638      	mov	r0, r7
 8014a54:	f7eb fbce 	bl	80001f4 <strlen>
 8014a58:	4a25      	ldr	r2, [pc, #148]	@ (8014af0 <rcl_expand_topic_name+0x2b4>)
 8014a5a:	4b26      	ldr	r3, [pc, #152]	@ (8014af4 <rcl_expand_topic_name+0x2b8>)
 8014a5c:	f8cd a010 	str.w	sl, [sp, #16]
 8014a60:	2801      	cmp	r0, #1
 8014a62:	bf18      	it	ne
 8014a64:	4613      	movne	r3, r2
 8014a66:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8014a6a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8014a6e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8014a70:	9703      	str	r7, [sp, #12]
 8014a72:	9200      	str	r2, [sp, #0]
 8014a74:	ab14      	add	r3, sp, #80	@ 0x50
 8014a76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014a78:	f7fc fb3e 	bl	80110f8 <rcutils_format_string_limit>
 8014a7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014a7e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014a80:	4605      	mov	r5, r0
 8014a82:	4650      	mov	r0, sl
 8014a84:	4798      	blx	r3
 8014a86:	46aa      	mov	sl, r5
 8014a88:	e7d9      	b.n	8014a3e <rcl_expand_topic_name+0x202>
 8014a8a:	24ca      	movs	r4, #202	@ 0xca
 8014a8c:	e78b      	b.n	80149a6 <rcl_expand_topic_name+0x16a>
 8014a8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014a90:	2300      	movs	r3, #0
 8014a92:	6013      	str	r3, [r2, #0]
 8014a94:	240a      	movs	r4, #10
 8014a96:	e786      	b.n	80149a6 <rcl_expand_topic_name+0x16a>
 8014a98:	465b      	mov	r3, fp
 8014a9a:	9c07      	ldr	r4, [sp, #28]
 8014a9c:	46da      	mov	sl, fp
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d1d3      	bne.n	8014a4a <rcl_expand_topic_name+0x20e>
 8014aa2:	f898 3000 	ldrb.w	r3, [r8]
 8014aa6:	2b2f      	cmp	r3, #47	@ 0x2f
 8014aa8:	d0cb      	beq.n	8014a42 <rcl_expand_topic_name+0x206>
 8014aaa:	e7b2      	b.n	8014a12 <rcl_expand_topic_name+0x1d6>
 8014aac:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8014ab0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014ab2:	6015      	str	r5, [r2, #0]
 8014ab4:	4658      	mov	r0, fp
 8014ab6:	4798      	blx	r3
 8014ab8:	240a      	movs	r4, #10
 8014aba:	e774      	b.n	80149a6 <rcl_expand_topic_name+0x16a>
 8014abc:	ab17      	add	r3, sp, #92	@ 0x5c
 8014abe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014ac2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014ac6:	ab14      	add	r3, sp, #80	@ 0x50
 8014ac8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014aca:	4640      	mov	r0, r8
 8014acc:	f7fc fc2e 	bl	801132c <rcutils_strdup>
 8014ad0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014ad2:	2800      	cmp	r0, #0
 8014ad4:	6018      	str	r0, [r3, #0]
 8014ad6:	bf08      	it	eq
 8014ad8:	240a      	moveq	r4, #10
 8014ada:	e764      	b.n	80149a6 <rcl_expand_topic_name+0x16a>
 8014adc:	08017540 	.word	0x08017540
 8014ae0:	08016c14 	.word	0x08016c14
 8014ae4:	08017548 	.word	0x08017548
 8014ae8:	08017550 	.word	0x08017550
 8014aec:	08017558 	.word	0x08017558
 8014af0:	08016d9c 	.word	0x08016d9c
 8014af4:	08016c24 	.word	0x08016c24

08014af8 <rcl_get_default_topic_name_substitutions>:
 8014af8:	2800      	cmp	r0, #0
 8014afa:	bf0c      	ite	eq
 8014afc:	200b      	moveq	r0, #11
 8014afe:	2000      	movne	r0, #0
 8014b00:	4770      	bx	lr
 8014b02:	bf00      	nop

08014b04 <rcl_get_zero_initialized_guard_condition>:
 8014b04:	4a03      	ldr	r2, [pc, #12]	@ (8014b14 <rcl_get_zero_initialized_guard_condition+0x10>)
 8014b06:	4603      	mov	r3, r0
 8014b08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014b0c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014b10:	4618      	mov	r0, r3
 8014b12:	4770      	bx	lr
 8014b14:	08017564 	.word	0x08017564

08014b18 <rcl_guard_condition_init_from_rmw>:
 8014b18:	b082      	sub	sp, #8
 8014b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b1e:	b086      	sub	sp, #24
 8014b20:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014b24:	4604      	mov	r4, r0
 8014b26:	f84c 3f04 	str.w	r3, [ip, #4]!
 8014b2a:	460e      	mov	r6, r1
 8014b2c:	4617      	mov	r7, r2
 8014b2e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b32:	f10d 0e04 	add.w	lr, sp, #4
 8014b36:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014b3a:	f8dc 3000 	ldr.w	r3, [ip]
 8014b3e:	f8ce 3000 	str.w	r3, [lr]
 8014b42:	a801      	add	r0, sp, #4
 8014b44:	f7f5 ff80 	bl	800aa48 <rcutils_allocator_is_valid>
 8014b48:	b350      	cbz	r0, 8014ba0 <rcl_guard_condition_init_from_rmw+0x88>
 8014b4a:	b34c      	cbz	r4, 8014ba0 <rcl_guard_condition_init_from_rmw+0x88>
 8014b4c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014b50:	f1b8 0f00 	cmp.w	r8, #0
 8014b54:	d11e      	bne.n	8014b94 <rcl_guard_condition_init_from_rmw+0x7c>
 8014b56:	b31f      	cbz	r7, 8014ba0 <rcl_guard_condition_init_from_rmw+0x88>
 8014b58:	4638      	mov	r0, r7
 8014b5a:	f7f9 fd21 	bl	800e5a0 <rcl_context_is_valid>
 8014b5e:	b328      	cbz	r0, 8014bac <rcl_guard_condition_init_from_rmw+0x94>
 8014b60:	9b01      	ldr	r3, [sp, #4]
 8014b62:	9905      	ldr	r1, [sp, #20]
 8014b64:	201c      	movs	r0, #28
 8014b66:	4798      	blx	r3
 8014b68:	4605      	mov	r5, r0
 8014b6a:	6060      	str	r0, [r4, #4]
 8014b6c:	b358      	cbz	r0, 8014bc6 <rcl_guard_condition_init_from_rmw+0xae>
 8014b6e:	b1fe      	cbz	r6, 8014bb0 <rcl_guard_condition_init_from_rmw+0x98>
 8014b70:	6006      	str	r6, [r0, #0]
 8014b72:	f880 8004 	strb.w	r8, [r0, #4]
 8014b76:	ac01      	add	r4, sp, #4
 8014b78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b7a:	f105 0c08 	add.w	ip, r5, #8
 8014b7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b82:	6823      	ldr	r3, [r4, #0]
 8014b84:	f8cc 3000 	str.w	r3, [ip]
 8014b88:	2000      	movs	r0, #0
 8014b8a:	b006      	add	sp, #24
 8014b8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b90:	b002      	add	sp, #8
 8014b92:	4770      	bx	lr
 8014b94:	2064      	movs	r0, #100	@ 0x64
 8014b96:	b006      	add	sp, #24
 8014b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b9c:	b002      	add	sp, #8
 8014b9e:	4770      	bx	lr
 8014ba0:	200b      	movs	r0, #11
 8014ba2:	b006      	add	sp, #24
 8014ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ba8:	b002      	add	sp, #8
 8014baa:	4770      	bx	lr
 8014bac:	2065      	movs	r0, #101	@ 0x65
 8014bae:	e7f2      	b.n	8014b96 <rcl_guard_condition_init_from_rmw+0x7e>
 8014bb0:	6838      	ldr	r0, [r7, #0]
 8014bb2:	3028      	adds	r0, #40	@ 0x28
 8014bb4:	f000 fa3a 	bl	801502c <rmw_create_guard_condition>
 8014bb8:	6028      	str	r0, [r5, #0]
 8014bba:	6865      	ldr	r5, [r4, #4]
 8014bbc:	682e      	ldr	r6, [r5, #0]
 8014bbe:	b126      	cbz	r6, 8014bca <rcl_guard_condition_init_from_rmw+0xb2>
 8014bc0:	2301      	movs	r3, #1
 8014bc2:	712b      	strb	r3, [r5, #4]
 8014bc4:	e7d7      	b.n	8014b76 <rcl_guard_condition_init_from_rmw+0x5e>
 8014bc6:	200a      	movs	r0, #10
 8014bc8:	e7e5      	b.n	8014b96 <rcl_guard_condition_init_from_rmw+0x7e>
 8014bca:	4628      	mov	r0, r5
 8014bcc:	9b02      	ldr	r3, [sp, #8]
 8014bce:	9905      	ldr	r1, [sp, #20]
 8014bd0:	4798      	blx	r3
 8014bd2:	6066      	str	r6, [r4, #4]
 8014bd4:	2001      	movs	r0, #1
 8014bd6:	e7de      	b.n	8014b96 <rcl_guard_condition_init_from_rmw+0x7e>

08014bd8 <rcl_guard_condition_fini>:
 8014bd8:	b570      	push	{r4, r5, r6, lr}
 8014bda:	b082      	sub	sp, #8
 8014bdc:	b1f0      	cbz	r0, 8014c1c <rcl_guard_condition_fini+0x44>
 8014bde:	6843      	ldr	r3, [r0, #4]
 8014be0:	4604      	mov	r4, r0
 8014be2:	b163      	cbz	r3, 8014bfe <rcl_guard_condition_fini+0x26>
 8014be4:	6818      	ldr	r0, [r3, #0]
 8014be6:	68de      	ldr	r6, [r3, #12]
 8014be8:	6999      	ldr	r1, [r3, #24]
 8014bea:	b160      	cbz	r0, 8014c06 <rcl_guard_condition_fini+0x2e>
 8014bec:	791d      	ldrb	r5, [r3, #4]
 8014bee:	b965      	cbnz	r5, 8014c0a <rcl_guard_condition_fini+0x32>
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	47b0      	blx	r6
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	4628      	mov	r0, r5
 8014bf8:	6063      	str	r3, [r4, #4]
 8014bfa:	b002      	add	sp, #8
 8014bfc:	bd70      	pop	{r4, r5, r6, pc}
 8014bfe:	461d      	mov	r5, r3
 8014c00:	4628      	mov	r0, r5
 8014c02:	b002      	add	sp, #8
 8014c04:	bd70      	pop	{r4, r5, r6, pc}
 8014c06:	4605      	mov	r5, r0
 8014c08:	e7f2      	b.n	8014bf0 <rcl_guard_condition_fini+0x18>
 8014c0a:	9101      	str	r1, [sp, #4]
 8014c0c:	f000 fa22 	bl	8015054 <rmw_destroy_guard_condition>
 8014c10:	1e05      	subs	r5, r0, #0
 8014c12:	6863      	ldr	r3, [r4, #4]
 8014c14:	9901      	ldr	r1, [sp, #4]
 8014c16:	bf18      	it	ne
 8014c18:	2501      	movne	r5, #1
 8014c1a:	e7e9      	b.n	8014bf0 <rcl_guard_condition_fini+0x18>
 8014c1c:	250b      	movs	r5, #11
 8014c1e:	4628      	mov	r0, r5
 8014c20:	b002      	add	sp, #8
 8014c22:	bd70      	pop	{r4, r5, r6, pc}

08014c24 <rcl_guard_condition_get_default_options>:
 8014c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c26:	b087      	sub	sp, #28
 8014c28:	4606      	mov	r6, r0
 8014c2a:	4668      	mov	r0, sp
 8014c2c:	f7f5 fefe 	bl	800aa2c <rcutils_get_default_allocator>
 8014c30:	4b09      	ldr	r3, [pc, #36]	@ (8014c58 <rcl_guard_condition_get_default_options+0x34>)
 8014c32:	46ee      	mov	lr, sp
 8014c34:	469c      	mov	ip, r3
 8014c36:	461d      	mov	r5, r3
 8014c38:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014c3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c42:	4634      	mov	r4, r6
 8014c44:	f8de 7000 	ldr.w	r7, [lr]
 8014c48:	f8cc 7000 	str.w	r7, [ip]
 8014c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c4e:	4630      	mov	r0, r6
 8014c50:	6027      	str	r7, [r4, #0]
 8014c52:	b007      	add	sp, #28
 8014c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c56:	bf00      	nop
 8014c58:	2000dd1c 	.word	0x2000dd1c

08014c5c <rcl_guard_condition_get_rmw_handle>:
 8014c5c:	b110      	cbz	r0, 8014c64 <rcl_guard_condition_get_rmw_handle+0x8>
 8014c5e:	6840      	ldr	r0, [r0, #4]
 8014c60:	b100      	cbz	r0, 8014c64 <rcl_guard_condition_get_rmw_handle+0x8>
 8014c62:	6800      	ldr	r0, [r0, #0]
 8014c64:	4770      	bx	lr
 8014c66:	bf00      	nop

08014c68 <rcl_validate_topic_name>:
 8014c68:	2800      	cmp	r0, #0
 8014c6a:	d07a      	beq.n	8014d62 <rcl_validate_topic_name+0xfa>
 8014c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c70:	460e      	mov	r6, r1
 8014c72:	2900      	cmp	r1, #0
 8014c74:	d07c      	beq.n	8014d70 <rcl_validate_topic_name+0x108>
 8014c76:	4617      	mov	r7, r2
 8014c78:	4605      	mov	r5, r0
 8014c7a:	f7eb fabb 	bl	80001f4 <strlen>
 8014c7e:	b1b0      	cbz	r0, 8014cae <rcl_validate_topic_name+0x46>
 8014c80:	f895 9000 	ldrb.w	r9, [r5]
 8014c84:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8014e08 <rcl_validate_topic_name+0x1a0>
 8014c88:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8014c8c:	f013 0304 	ands.w	r3, r3, #4
 8014c90:	d169      	bne.n	8014d66 <rcl_validate_topic_name+0xfe>
 8014c92:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8014c96:	f815 2008 	ldrb.w	r2, [r5, r8]
 8014c9a:	2a2f      	cmp	r2, #47	@ 0x2f
 8014c9c:	d10e      	bne.n	8014cbc <rcl_validate_topic_name+0x54>
 8014c9e:	2202      	movs	r2, #2
 8014ca0:	6032      	str	r2, [r6, #0]
 8014ca2:	b36f      	cbz	r7, 8014d00 <rcl_validate_topic_name+0x98>
 8014ca4:	f8c7 8000 	str.w	r8, [r7]
 8014ca8:	4618      	mov	r0, r3
 8014caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cae:	2301      	movs	r3, #1
 8014cb0:	6033      	str	r3, [r6, #0]
 8014cb2:	b32f      	cbz	r7, 8014d00 <rcl_validate_topic_name+0x98>
 8014cb4:	2000      	movs	r0, #0
 8014cb6:	6038      	str	r0, [r7, #0]
 8014cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cbc:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8014cc0:	461c      	mov	r4, r3
 8014cc2:	4619      	mov	r1, r3
 8014cc4:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8014cc8:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8014ccc:	f1be 0f09 	cmp.w	lr, #9
 8014cd0:	d919      	bls.n	8014d06 <rcl_validate_topic_name+0x9e>
 8014cd2:	f022 0e20 	bic.w	lr, r2, #32
 8014cd6:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8014cda:	f1be 0f19 	cmp.w	lr, #25
 8014cde:	d912      	bls.n	8014d06 <rcl_validate_topic_name+0x9e>
 8014ce0:	2a5f      	cmp	r2, #95	@ 0x5f
 8014ce2:	d019      	beq.n	8014d18 <rcl_validate_topic_name+0xb0>
 8014ce4:	2a2f      	cmp	r2, #47	@ 0x2f
 8014ce6:	d051      	beq.n	8014d8c <rcl_validate_topic_name+0x124>
 8014ce8:	2a7e      	cmp	r2, #126	@ 0x7e
 8014cea:	d048      	beq.n	8014d7e <rcl_validate_topic_name+0x116>
 8014cec:	2a7b      	cmp	r2, #123	@ 0x7b
 8014cee:	d054      	beq.n	8014d9a <rcl_validate_topic_name+0x132>
 8014cf0:	2a7d      	cmp	r2, #125	@ 0x7d
 8014cf2:	d161      	bne.n	8014db8 <rcl_validate_topic_name+0x150>
 8014cf4:	2c00      	cmp	r4, #0
 8014cf6:	d155      	bne.n	8014da4 <rcl_validate_topic_name+0x13c>
 8014cf8:	2305      	movs	r3, #5
 8014cfa:	6033      	str	r3, [r6, #0]
 8014cfc:	b107      	cbz	r7, 8014d00 <rcl_validate_topic_name+0x98>
 8014cfe:	6039      	str	r1, [r7, #0]
 8014d00:	2000      	movs	r0, #0
 8014d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d06:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014d0a:	0752      	lsls	r2, r2, #29
 8014d0c:	d504      	bpl.n	8014d18 <rcl_validate_topic_name+0xb0>
 8014d0e:	b11c      	cbz	r4, 8014d18 <rcl_validate_topic_name+0xb0>
 8014d10:	b111      	cbz	r1, 8014d18 <rcl_validate_topic_name+0xb0>
 8014d12:	1e4a      	subs	r2, r1, #1
 8014d14:	429a      	cmp	r2, r3
 8014d16:	d02d      	beq.n	8014d74 <rcl_validate_topic_name+0x10c>
 8014d18:	3101      	adds	r1, #1
 8014d1a:	4288      	cmp	r0, r1
 8014d1c:	d1d2      	bne.n	8014cc4 <rcl_validate_topic_name+0x5c>
 8014d1e:	2c00      	cmp	r4, #0
 8014d20:	d145      	bne.n	8014dae <rcl_validate_topic_name+0x146>
 8014d22:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8014d26:	d04f      	beq.n	8014dc8 <rcl_validate_topic_name+0x160>
 8014d28:	4620      	mov	r0, r4
 8014d2a:	2301      	movs	r3, #1
 8014d2c:	e006      	b.n	8014d3c <rcl_validate_topic_name+0xd4>
 8014d2e:	428b      	cmp	r3, r1
 8014d30:	f105 0501 	add.w	r5, r5, #1
 8014d34:	f103 0201 	add.w	r2, r3, #1
 8014d38:	d236      	bcs.n	8014da8 <rcl_validate_topic_name+0x140>
 8014d3a:	4613      	mov	r3, r2
 8014d3c:	4580      	cmp	r8, r0
 8014d3e:	f100 0001 	add.w	r0, r0, #1
 8014d42:	d0f4      	beq.n	8014d2e <rcl_validate_topic_name+0xc6>
 8014d44:	782a      	ldrb	r2, [r5, #0]
 8014d46:	2a2f      	cmp	r2, #47	@ 0x2f
 8014d48:	d1f1      	bne.n	8014d2e <rcl_validate_topic_name+0xc6>
 8014d4a:	786a      	ldrb	r2, [r5, #1]
 8014d4c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014d50:	0754      	lsls	r4, r2, #29
 8014d52:	d5ec      	bpl.n	8014d2e <rcl_validate_topic_name+0xc6>
 8014d54:	2204      	movs	r2, #4
 8014d56:	6032      	str	r2, [r6, #0]
 8014d58:	2f00      	cmp	r7, #0
 8014d5a:	d0d1      	beq.n	8014d00 <rcl_validate_topic_name+0x98>
 8014d5c:	603b      	str	r3, [r7, #0]
 8014d5e:	2000      	movs	r0, #0
 8014d60:	e7aa      	b.n	8014cb8 <rcl_validate_topic_name+0x50>
 8014d62:	200b      	movs	r0, #11
 8014d64:	4770      	bx	lr
 8014d66:	2304      	movs	r3, #4
 8014d68:	6033      	str	r3, [r6, #0]
 8014d6a:	2f00      	cmp	r7, #0
 8014d6c:	d1a2      	bne.n	8014cb4 <rcl_validate_topic_name+0x4c>
 8014d6e:	e7c7      	b.n	8014d00 <rcl_validate_topic_name+0x98>
 8014d70:	200b      	movs	r0, #11
 8014d72:	e7a1      	b.n	8014cb8 <rcl_validate_topic_name+0x50>
 8014d74:	2309      	movs	r3, #9
 8014d76:	6033      	str	r3, [r6, #0]
 8014d78:	2f00      	cmp	r7, #0
 8014d7a:	d1c0      	bne.n	8014cfe <rcl_validate_topic_name+0x96>
 8014d7c:	e7c0      	b.n	8014d00 <rcl_validate_topic_name+0x98>
 8014d7e:	2900      	cmp	r1, #0
 8014d80:	d0ca      	beq.n	8014d18 <rcl_validate_topic_name+0xb0>
 8014d82:	2306      	movs	r3, #6
 8014d84:	6033      	str	r3, [r6, #0]
 8014d86:	2f00      	cmp	r7, #0
 8014d88:	d1b9      	bne.n	8014cfe <rcl_validate_topic_name+0x96>
 8014d8a:	e7b9      	b.n	8014d00 <rcl_validate_topic_name+0x98>
 8014d8c:	2c00      	cmp	r4, #0
 8014d8e:	d0c3      	beq.n	8014d18 <rcl_validate_topic_name+0xb0>
 8014d90:	2308      	movs	r3, #8
 8014d92:	6033      	str	r3, [r6, #0]
 8014d94:	2f00      	cmp	r7, #0
 8014d96:	d1b2      	bne.n	8014cfe <rcl_validate_topic_name+0x96>
 8014d98:	e7b2      	b.n	8014d00 <rcl_validate_topic_name+0x98>
 8014d9a:	2c00      	cmp	r4, #0
 8014d9c:	d1f8      	bne.n	8014d90 <rcl_validate_topic_name+0x128>
 8014d9e:	460b      	mov	r3, r1
 8014da0:	2401      	movs	r4, #1
 8014da2:	e7b9      	b.n	8014d18 <rcl_validate_topic_name+0xb0>
 8014da4:	2400      	movs	r4, #0
 8014da6:	e7b7      	b.n	8014d18 <rcl_validate_topic_name+0xb0>
 8014da8:	2000      	movs	r0, #0
 8014daa:	6030      	str	r0, [r6, #0]
 8014dac:	e784      	b.n	8014cb8 <rcl_validate_topic_name+0x50>
 8014dae:	2205      	movs	r2, #5
 8014db0:	6032      	str	r2, [r6, #0]
 8014db2:	2f00      	cmp	r7, #0
 8014db4:	d1d2      	bne.n	8014d5c <rcl_validate_topic_name+0xf4>
 8014db6:	e7a3      	b.n	8014d00 <rcl_validate_topic_name+0x98>
 8014db8:	2c00      	cmp	r4, #0
 8014dba:	bf14      	ite	ne
 8014dbc:	2308      	movne	r3, #8
 8014dbe:	2303      	moveq	r3, #3
 8014dc0:	6033      	str	r3, [r6, #0]
 8014dc2:	2f00      	cmp	r7, #0
 8014dc4:	d19b      	bne.n	8014cfe <rcl_validate_topic_name+0x96>
 8014dc6:	e79b      	b.n	8014d00 <rcl_validate_topic_name+0x98>
 8014dc8:	2301      	movs	r3, #1
 8014dca:	e00a      	b.n	8014de2 <rcl_validate_topic_name+0x17a>
 8014dcc:	2c01      	cmp	r4, #1
 8014dce:	d013      	beq.n	8014df8 <rcl_validate_topic_name+0x190>
 8014dd0:	4299      	cmp	r1, r3
 8014dd2:	f104 0401 	add.w	r4, r4, #1
 8014dd6:	f105 0501 	add.w	r5, r5, #1
 8014dda:	f103 0201 	add.w	r2, r3, #1
 8014dde:	d9e3      	bls.n	8014da8 <rcl_validate_topic_name+0x140>
 8014de0:	4613      	mov	r3, r2
 8014de2:	45a0      	cmp	r8, r4
 8014de4:	d0f4      	beq.n	8014dd0 <rcl_validate_topic_name+0x168>
 8014de6:	782a      	ldrb	r2, [r5, #0]
 8014de8:	2a2f      	cmp	r2, #47	@ 0x2f
 8014dea:	d1ef      	bne.n	8014dcc <rcl_validate_topic_name+0x164>
 8014dec:	786a      	ldrb	r2, [r5, #1]
 8014dee:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014df2:	0752      	lsls	r2, r2, #29
 8014df4:	d5ec      	bpl.n	8014dd0 <rcl_validate_topic_name+0x168>
 8014df6:	e7ad      	b.n	8014d54 <rcl_validate_topic_name+0xec>
 8014df8:	2307      	movs	r3, #7
 8014dfa:	6033      	str	r3, [r6, #0]
 8014dfc:	2f00      	cmp	r7, #0
 8014dfe:	f43f af7f 	beq.w	8014d00 <rcl_validate_topic_name+0x98>
 8014e02:	603c      	str	r4, [r7, #0]
 8014e04:	2000      	movs	r0, #0
 8014e06:	e757      	b.n	8014cb8 <rcl_validate_topic_name+0x50>
 8014e08:	080175dc 	.word	0x080175dc

08014e0c <rcutils_string_array_fini>:
 8014e0c:	b320      	cbz	r0, 8014e58 <rcutils_string_array_fini+0x4c>
 8014e0e:	b570      	push	{r4, r5, r6, lr}
 8014e10:	4604      	mov	r4, r0
 8014e12:	6840      	ldr	r0, [r0, #4]
 8014e14:	b1d8      	cbz	r0, 8014e4e <rcutils_string_array_fini+0x42>
 8014e16:	f104 0008 	add.w	r0, r4, #8
 8014e1a:	f7f5 fe15 	bl	800aa48 <rcutils_allocator_is_valid>
 8014e1e:	b1b8      	cbz	r0, 8014e50 <rcutils_string_array_fini+0x44>
 8014e20:	6823      	ldr	r3, [r4, #0]
 8014e22:	b1bb      	cbz	r3, 8014e54 <rcutils_string_array_fini+0x48>
 8014e24:	2500      	movs	r5, #0
 8014e26:	6860      	ldr	r0, [r4, #4]
 8014e28:	462e      	mov	r6, r5
 8014e2a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8014e2e:	68e3      	ldr	r3, [r4, #12]
 8014e30:	69a1      	ldr	r1, [r4, #24]
 8014e32:	4798      	blx	r3
 8014e34:	e9d4 3000 	ldrd	r3, r0, [r4]
 8014e38:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8014e3c:	3501      	adds	r5, #1
 8014e3e:	429d      	cmp	r5, r3
 8014e40:	d3f3      	bcc.n	8014e2a <rcutils_string_array_fini+0x1e>
 8014e42:	68e3      	ldr	r3, [r4, #12]
 8014e44:	69a1      	ldr	r1, [r4, #24]
 8014e46:	4798      	blx	r3
 8014e48:	2000      	movs	r0, #0
 8014e4a:	e9c4 0000 	strd	r0, r0, [r4]
 8014e4e:	bd70      	pop	{r4, r5, r6, pc}
 8014e50:	200b      	movs	r0, #11
 8014e52:	bd70      	pop	{r4, r5, r6, pc}
 8014e54:	6860      	ldr	r0, [r4, #4]
 8014e56:	e7f4      	b.n	8014e42 <rcutils_string_array_fini+0x36>
 8014e58:	200b      	movs	r0, #11
 8014e5a:	4770      	bx	lr

08014e5c <on_status>:
 8014e5c:	b082      	sub	sp, #8
 8014e5e:	b002      	add	sp, #8
 8014e60:	4770      	bx	lr
 8014e62:	bf00      	nop

08014e64 <on_topic>:
 8014e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e68:	4a22      	ldr	r2, [pc, #136]	@ (8014ef4 <on_topic+0x90>)
 8014e6a:	b094      	sub	sp, #80	@ 0x50
 8014e6c:	6812      	ldr	r2, [r2, #0]
 8014e6e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8014e70:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8014e74:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8014e78:	b3c2      	cbz	r2, 8014eec <on_topic+0x88>
 8014e7a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8014e7e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8014e82:	e001      	b.n	8014e88 <on_topic+0x24>
 8014e84:	6852      	ldr	r2, [r2, #4]
 8014e86:	b38a      	cbz	r2, 8014eec <on_topic+0x88>
 8014e88:	6894      	ldr	r4, [r2, #8]
 8014e8a:	8aa3      	ldrh	r3, [r4, #20]
 8014e8c:	428b      	cmp	r3, r1
 8014e8e:	d1f9      	bne.n	8014e84 <on_topic+0x20>
 8014e90:	7da3      	ldrb	r3, [r4, #22]
 8014e92:	4283      	cmp	r3, r0
 8014e94:	d1f6      	bne.n	8014e84 <on_topic+0x20>
 8014e96:	2248      	movs	r2, #72	@ 0x48
 8014e98:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014e9c:	4668      	mov	r0, sp
 8014e9e:	f000 fda0 	bl	80159e2 <memcpy>
 8014ea2:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8014ea6:	cb0c      	ldmia	r3, {r2, r3}
 8014ea8:	4620      	mov	r0, r4
 8014eaa:	f7f6 f9fd 	bl	800b2a8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014eae:	4607      	mov	r7, r0
 8014eb0:	b1e0      	cbz	r0, 8014eec <on_topic+0x88>
 8014eb2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8014eb6:	4632      	mov	r2, r6
 8014eb8:	4628      	mov	r0, r5
 8014eba:	f108 0110 	add.w	r1, r8, #16
 8014ebe:	f7fd ffc9 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 8014ec2:	b930      	cbnz	r0, 8014ed2 <on_topic+0x6e>
 8014ec4:	480c      	ldr	r0, [pc, #48]	@ (8014ef8 <on_topic+0x94>)
 8014ec6:	4639      	mov	r1, r7
 8014ec8:	b014      	add	sp, #80	@ 0x50
 8014eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ece:	f7fc bdb7 	b.w	8011a40 <put_memory>
 8014ed2:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8014ed6:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8014eda:	f7fd fedf 	bl	8012c9c <rmw_uros_epoch_nanos>
 8014ede:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8014ee2:	2305      	movs	r3, #5
 8014ee4:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014ee8:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8014eec:	b014      	add	sp, #80	@ 0x50
 8014eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ef2:	bf00      	nop
 8014ef4:	2000db7c 	.word	0x2000db7c
 8014ef8:	2000db6c 	.word	0x2000db6c

08014efc <on_request>:
 8014efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f00:	4823      	ldr	r0, [pc, #140]	@ (8014f90 <on_request+0x94>)
 8014f02:	b094      	sub	sp, #80	@ 0x50
 8014f04:	6800      	ldr	r0, [r0, #0]
 8014f06:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8014f08:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8014f0c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8014f0e:	2800      	cmp	r0, #0
 8014f10:	d03b      	beq.n	8014f8a <on_request+0x8e>
 8014f12:	461d      	mov	r5, r3
 8014f14:	e001      	b.n	8014f1a <on_request+0x1e>
 8014f16:	6840      	ldr	r0, [r0, #4]
 8014f18:	b3b8      	cbz	r0, 8014f8a <on_request+0x8e>
 8014f1a:	6884      	ldr	r4, [r0, #8]
 8014f1c:	8b21      	ldrh	r1, [r4, #24]
 8014f1e:	4291      	cmp	r1, r2
 8014f20:	d1f9      	bne.n	8014f16 <on_request+0x1a>
 8014f22:	2248      	movs	r2, #72	@ 0x48
 8014f24:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8014f28:	4668      	mov	r0, sp
 8014f2a:	f000 fd5a 	bl	80159e2 <memcpy>
 8014f2e:	f104 0320 	add.w	r3, r4, #32
 8014f32:	cb0c      	ldmia	r3, {r2, r3}
 8014f34:	4620      	mov	r0, r4
 8014f36:	f7f6 f9b7 	bl	800b2a8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014f3a:	4680      	mov	r8, r0
 8014f3c:	b328      	cbz	r0, 8014f8a <on_request+0x8e>
 8014f3e:	4638      	mov	r0, r7
 8014f40:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8014f44:	4632      	mov	r2, r6
 8014f46:	f107 0110 	add.w	r1, r7, #16
 8014f4a:	f7fd ff83 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 8014f4e:	b930      	cbnz	r0, 8014f5e <on_request+0x62>
 8014f50:	4810      	ldr	r0, [pc, #64]	@ (8014f94 <on_request+0x98>)
 8014f52:	4641      	mov	r1, r8
 8014f54:	b014      	add	sp, #80	@ 0x50
 8014f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f5a:	f7fc bd71 	b.w	8011a40 <put_memory>
 8014f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f60:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8014f64:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8014f68:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8014f6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014f74:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014f78:	f7fd fe90 	bl	8012c9c <rmw_uros_epoch_nanos>
 8014f7c:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8014f80:	2303      	movs	r3, #3
 8014f82:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014f86:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8014f8a:	b014      	add	sp, #80	@ 0x50
 8014f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f90:	2000db4c 	.word	0x2000db4c
 8014f94:	2000db6c 	.word	0x2000db6c

08014f98 <on_reply>:
 8014f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f9c:	4821      	ldr	r0, [pc, #132]	@ (8015024 <on_reply+0x8c>)
 8014f9e:	b094      	sub	sp, #80	@ 0x50
 8014fa0:	6800      	ldr	r0, [r0, #0]
 8014fa2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8014fa4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8014fa8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8014faa:	b3b8      	cbz	r0, 801501c <on_reply+0x84>
 8014fac:	461d      	mov	r5, r3
 8014fae:	e001      	b.n	8014fb4 <on_reply+0x1c>
 8014fb0:	6840      	ldr	r0, [r0, #4]
 8014fb2:	b398      	cbz	r0, 801501c <on_reply+0x84>
 8014fb4:	6884      	ldr	r4, [r0, #8]
 8014fb6:	8b21      	ldrh	r1, [r4, #24]
 8014fb8:	4291      	cmp	r1, r2
 8014fba:	d1f9      	bne.n	8014fb0 <on_reply+0x18>
 8014fbc:	2248      	movs	r2, #72	@ 0x48
 8014fbe:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8014fc2:	4668      	mov	r0, sp
 8014fc4:	f000 fd0d 	bl	80159e2 <memcpy>
 8014fc8:	f104 0320 	add.w	r3, r4, #32
 8014fcc:	cb0c      	ldmia	r3, {r2, r3}
 8014fce:	4620      	mov	r0, r4
 8014fd0:	f7f6 f96a 	bl	800b2a8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014fd4:	4680      	mov	r8, r0
 8014fd6:	b308      	cbz	r0, 801501c <on_reply+0x84>
 8014fd8:	4638      	mov	r0, r7
 8014fda:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8014fde:	4632      	mov	r2, r6
 8014fe0:	f107 0110 	add.w	r1, r7, #16
 8014fe4:	f7fd ff36 	bl	8012e54 <ucdr_deserialize_array_uint8_t>
 8014fe8:	b930      	cbnz	r0, 8014ff8 <on_reply+0x60>
 8014fea:	480f      	ldr	r0, [pc, #60]	@ (8015028 <on_reply+0x90>)
 8014fec:	4641      	mov	r1, r8
 8014fee:	b014      	add	sp, #80	@ 0x50
 8014ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ff4:	f7fc bd24 	b.w	8011a40 <put_memory>
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8014ffe:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015002:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015006:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801500a:	f7fd fe47 	bl	8012c9c <rmw_uros_epoch_nanos>
 801500e:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015012:	2304      	movs	r3, #4
 8015014:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015018:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801501c:	b014      	add	sp, #80	@ 0x50
 801501e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015022:	bf00      	nop
 8015024:	20009260 	.word	0x20009260
 8015028:	2000db6c 	.word	0x2000db6c

0801502c <rmw_create_guard_condition>:
 801502c:	b538      	push	{r3, r4, r5, lr}
 801502e:	4605      	mov	r5, r0
 8015030:	4807      	ldr	r0, [pc, #28]	@ (8015050 <rmw_create_guard_condition+0x24>)
 8015032:	f7fc fcf5 	bl	8011a20 <get_memory>
 8015036:	b148      	cbz	r0, 801504c <rmw_create_guard_condition+0x20>
 8015038:	6884      	ldr	r4, [r0, #8]
 801503a:	2300      	movs	r3, #0
 801503c:	7423      	strb	r3, [r4, #16]
 801503e:	61e5      	str	r5, [r4, #28]
 8015040:	f7fc fd56 	bl	8011af0 <rmw_get_implementation_identifier>
 8015044:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8015048:	f104 0014 	add.w	r0, r4, #20
 801504c:	bd38      	pop	{r3, r4, r5, pc}
 801504e:	bf00      	nop
 8015050:	2000db0c 	.word	0x2000db0c

08015054 <rmw_destroy_guard_condition>:
 8015054:	b508      	push	{r3, lr}
 8015056:	4b08      	ldr	r3, [pc, #32]	@ (8015078 <rmw_destroy_guard_condition+0x24>)
 8015058:	6819      	ldr	r1, [r3, #0]
 801505a:	b911      	cbnz	r1, 8015062 <rmw_destroy_guard_condition+0xe>
 801505c:	e00a      	b.n	8015074 <rmw_destroy_guard_condition+0x20>
 801505e:	6849      	ldr	r1, [r1, #4]
 8015060:	b141      	cbz	r1, 8015074 <rmw_destroy_guard_condition+0x20>
 8015062:	688b      	ldr	r3, [r1, #8]
 8015064:	3314      	adds	r3, #20
 8015066:	4298      	cmp	r0, r3
 8015068:	d1f9      	bne.n	801505e <rmw_destroy_guard_condition+0xa>
 801506a:	4803      	ldr	r0, [pc, #12]	@ (8015078 <rmw_destroy_guard_condition+0x24>)
 801506c:	f7fc fce8 	bl	8011a40 <put_memory>
 8015070:	2000      	movs	r0, #0
 8015072:	bd08      	pop	{r3, pc}
 8015074:	2001      	movs	r0, #1
 8015076:	bd08      	pop	{r3, pc}
 8015078:	2000db0c 	.word	0x2000db0c

0801507c <calloc>:
 801507c:	4b02      	ldr	r3, [pc, #8]	@ (8015088 <calloc+0xc>)
 801507e:	460a      	mov	r2, r1
 8015080:	4601      	mov	r1, r0
 8015082:	6818      	ldr	r0, [r3, #0]
 8015084:	f000 b802 	b.w	801508c <_calloc_r>
 8015088:	20000268 	.word	0x20000268

0801508c <_calloc_r>:
 801508c:	b570      	push	{r4, r5, r6, lr}
 801508e:	fba1 5402 	umull	r5, r4, r1, r2
 8015092:	b93c      	cbnz	r4, 80150a4 <_calloc_r+0x18>
 8015094:	4629      	mov	r1, r5
 8015096:	f000 f887 	bl	80151a8 <_malloc_r>
 801509a:	4606      	mov	r6, r0
 801509c:	b928      	cbnz	r0, 80150aa <_calloc_r+0x1e>
 801509e:	2600      	movs	r6, #0
 80150a0:	4630      	mov	r0, r6
 80150a2:	bd70      	pop	{r4, r5, r6, pc}
 80150a4:	220c      	movs	r2, #12
 80150a6:	6002      	str	r2, [r0, #0]
 80150a8:	e7f9      	b.n	801509e <_calloc_r+0x12>
 80150aa:	462a      	mov	r2, r5
 80150ac:	4621      	mov	r1, r4
 80150ae:	f000 fbcf 	bl	8015850 <memset>
 80150b2:	e7f5      	b.n	80150a0 <_calloc_r+0x14>

080150b4 <getenv>:
 80150b4:	b507      	push	{r0, r1, r2, lr}
 80150b6:	4b04      	ldr	r3, [pc, #16]	@ (80150c8 <getenv+0x14>)
 80150b8:	4601      	mov	r1, r0
 80150ba:	aa01      	add	r2, sp, #4
 80150bc:	6818      	ldr	r0, [r3, #0]
 80150be:	f000 f805 	bl	80150cc <_findenv_r>
 80150c2:	b003      	add	sp, #12
 80150c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80150c8:	20000268 	.word	0x20000268

080150cc <_findenv_r>:
 80150cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150d0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8015140 <_findenv_r+0x74>
 80150d4:	4606      	mov	r6, r0
 80150d6:	4689      	mov	r9, r1
 80150d8:	4617      	mov	r7, r2
 80150da:	f000 fcaf 	bl	8015a3c <__env_lock>
 80150de:	f8da 4000 	ldr.w	r4, [sl]
 80150e2:	b134      	cbz	r4, 80150f2 <_findenv_r+0x26>
 80150e4:	464b      	mov	r3, r9
 80150e6:	4698      	mov	r8, r3
 80150e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150ec:	b13a      	cbz	r2, 80150fe <_findenv_r+0x32>
 80150ee:	2a3d      	cmp	r2, #61	@ 0x3d
 80150f0:	d1f9      	bne.n	80150e6 <_findenv_r+0x1a>
 80150f2:	4630      	mov	r0, r6
 80150f4:	f000 fca8 	bl	8015a48 <__env_unlock>
 80150f8:	2000      	movs	r0, #0
 80150fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150fe:	eba8 0809 	sub.w	r8, r8, r9
 8015102:	46a3      	mov	fp, r4
 8015104:	f854 0b04 	ldr.w	r0, [r4], #4
 8015108:	2800      	cmp	r0, #0
 801510a:	d0f2      	beq.n	80150f2 <_findenv_r+0x26>
 801510c:	4642      	mov	r2, r8
 801510e:	4649      	mov	r1, r9
 8015110:	f000 fbb3 	bl	801587a <strncmp>
 8015114:	2800      	cmp	r0, #0
 8015116:	d1f4      	bne.n	8015102 <_findenv_r+0x36>
 8015118:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801511c:	eb03 0508 	add.w	r5, r3, r8
 8015120:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015124:	2b3d      	cmp	r3, #61	@ 0x3d
 8015126:	d1ec      	bne.n	8015102 <_findenv_r+0x36>
 8015128:	f8da 3000 	ldr.w	r3, [sl]
 801512c:	ebab 0303 	sub.w	r3, fp, r3
 8015130:	109b      	asrs	r3, r3, #2
 8015132:	4630      	mov	r0, r6
 8015134:	603b      	str	r3, [r7, #0]
 8015136:	f000 fc87 	bl	8015a48 <__env_unlock>
 801513a:	1c68      	adds	r0, r5, #1
 801513c:	e7dd      	b.n	80150fa <_findenv_r+0x2e>
 801513e:	bf00      	nop
 8015140:	20000000 	.word	0x20000000

08015144 <malloc>:
 8015144:	4b02      	ldr	r3, [pc, #8]	@ (8015150 <malloc+0xc>)
 8015146:	4601      	mov	r1, r0
 8015148:	6818      	ldr	r0, [r3, #0]
 801514a:	f000 b82d 	b.w	80151a8 <_malloc_r>
 801514e:	bf00      	nop
 8015150:	20000268 	.word	0x20000268

08015154 <free>:
 8015154:	4b02      	ldr	r3, [pc, #8]	@ (8015160 <free+0xc>)
 8015156:	4601      	mov	r1, r0
 8015158:	6818      	ldr	r0, [r3, #0]
 801515a:	f000 bc7b 	b.w	8015a54 <_free_r>
 801515e:	bf00      	nop
 8015160:	20000268 	.word	0x20000268

08015164 <sbrk_aligned>:
 8015164:	b570      	push	{r4, r5, r6, lr}
 8015166:	4e0f      	ldr	r6, [pc, #60]	@ (80151a4 <sbrk_aligned+0x40>)
 8015168:	460c      	mov	r4, r1
 801516a:	6831      	ldr	r1, [r6, #0]
 801516c:	4605      	mov	r5, r0
 801516e:	b911      	cbnz	r1, 8015176 <sbrk_aligned+0x12>
 8015170:	f000 fbe0 	bl	8015934 <_sbrk_r>
 8015174:	6030      	str	r0, [r6, #0]
 8015176:	4621      	mov	r1, r4
 8015178:	4628      	mov	r0, r5
 801517a:	f000 fbdb 	bl	8015934 <_sbrk_r>
 801517e:	1c43      	adds	r3, r0, #1
 8015180:	d103      	bne.n	801518a <sbrk_aligned+0x26>
 8015182:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015186:	4620      	mov	r0, r4
 8015188:	bd70      	pop	{r4, r5, r6, pc}
 801518a:	1cc4      	adds	r4, r0, #3
 801518c:	f024 0403 	bic.w	r4, r4, #3
 8015190:	42a0      	cmp	r0, r4
 8015192:	d0f8      	beq.n	8015186 <sbrk_aligned+0x22>
 8015194:	1a21      	subs	r1, r4, r0
 8015196:	4628      	mov	r0, r5
 8015198:	f000 fbcc 	bl	8015934 <_sbrk_r>
 801519c:	3001      	adds	r0, #1
 801519e:	d1f2      	bne.n	8015186 <sbrk_aligned+0x22>
 80151a0:	e7ef      	b.n	8015182 <sbrk_aligned+0x1e>
 80151a2:	bf00      	nop
 80151a4:	2000dd30 	.word	0x2000dd30

080151a8 <_malloc_r>:
 80151a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80151ac:	1ccd      	adds	r5, r1, #3
 80151ae:	f025 0503 	bic.w	r5, r5, #3
 80151b2:	3508      	adds	r5, #8
 80151b4:	2d0c      	cmp	r5, #12
 80151b6:	bf38      	it	cc
 80151b8:	250c      	movcc	r5, #12
 80151ba:	2d00      	cmp	r5, #0
 80151bc:	4606      	mov	r6, r0
 80151be:	db01      	blt.n	80151c4 <_malloc_r+0x1c>
 80151c0:	42a9      	cmp	r1, r5
 80151c2:	d904      	bls.n	80151ce <_malloc_r+0x26>
 80151c4:	230c      	movs	r3, #12
 80151c6:	6033      	str	r3, [r6, #0]
 80151c8:	2000      	movs	r0, #0
 80151ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80151ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80152a4 <_malloc_r+0xfc>
 80151d2:	f000 f869 	bl	80152a8 <__malloc_lock>
 80151d6:	f8d8 3000 	ldr.w	r3, [r8]
 80151da:	461c      	mov	r4, r3
 80151dc:	bb44      	cbnz	r4, 8015230 <_malloc_r+0x88>
 80151de:	4629      	mov	r1, r5
 80151e0:	4630      	mov	r0, r6
 80151e2:	f7ff ffbf 	bl	8015164 <sbrk_aligned>
 80151e6:	1c43      	adds	r3, r0, #1
 80151e8:	4604      	mov	r4, r0
 80151ea:	d158      	bne.n	801529e <_malloc_r+0xf6>
 80151ec:	f8d8 4000 	ldr.w	r4, [r8]
 80151f0:	4627      	mov	r7, r4
 80151f2:	2f00      	cmp	r7, #0
 80151f4:	d143      	bne.n	801527e <_malloc_r+0xd6>
 80151f6:	2c00      	cmp	r4, #0
 80151f8:	d04b      	beq.n	8015292 <_malloc_r+0xea>
 80151fa:	6823      	ldr	r3, [r4, #0]
 80151fc:	4639      	mov	r1, r7
 80151fe:	4630      	mov	r0, r6
 8015200:	eb04 0903 	add.w	r9, r4, r3
 8015204:	f000 fb96 	bl	8015934 <_sbrk_r>
 8015208:	4581      	cmp	r9, r0
 801520a:	d142      	bne.n	8015292 <_malloc_r+0xea>
 801520c:	6821      	ldr	r1, [r4, #0]
 801520e:	1a6d      	subs	r5, r5, r1
 8015210:	4629      	mov	r1, r5
 8015212:	4630      	mov	r0, r6
 8015214:	f7ff ffa6 	bl	8015164 <sbrk_aligned>
 8015218:	3001      	adds	r0, #1
 801521a:	d03a      	beq.n	8015292 <_malloc_r+0xea>
 801521c:	6823      	ldr	r3, [r4, #0]
 801521e:	442b      	add	r3, r5
 8015220:	6023      	str	r3, [r4, #0]
 8015222:	f8d8 3000 	ldr.w	r3, [r8]
 8015226:	685a      	ldr	r2, [r3, #4]
 8015228:	bb62      	cbnz	r2, 8015284 <_malloc_r+0xdc>
 801522a:	f8c8 7000 	str.w	r7, [r8]
 801522e:	e00f      	b.n	8015250 <_malloc_r+0xa8>
 8015230:	6822      	ldr	r2, [r4, #0]
 8015232:	1b52      	subs	r2, r2, r5
 8015234:	d420      	bmi.n	8015278 <_malloc_r+0xd0>
 8015236:	2a0b      	cmp	r2, #11
 8015238:	d917      	bls.n	801526a <_malloc_r+0xc2>
 801523a:	1961      	adds	r1, r4, r5
 801523c:	42a3      	cmp	r3, r4
 801523e:	6025      	str	r5, [r4, #0]
 8015240:	bf18      	it	ne
 8015242:	6059      	strne	r1, [r3, #4]
 8015244:	6863      	ldr	r3, [r4, #4]
 8015246:	bf08      	it	eq
 8015248:	f8c8 1000 	streq.w	r1, [r8]
 801524c:	5162      	str	r2, [r4, r5]
 801524e:	604b      	str	r3, [r1, #4]
 8015250:	4630      	mov	r0, r6
 8015252:	f000 f82f 	bl	80152b4 <__malloc_unlock>
 8015256:	f104 000b 	add.w	r0, r4, #11
 801525a:	1d23      	adds	r3, r4, #4
 801525c:	f020 0007 	bic.w	r0, r0, #7
 8015260:	1ac2      	subs	r2, r0, r3
 8015262:	bf1c      	itt	ne
 8015264:	1a1b      	subne	r3, r3, r0
 8015266:	50a3      	strne	r3, [r4, r2]
 8015268:	e7af      	b.n	80151ca <_malloc_r+0x22>
 801526a:	6862      	ldr	r2, [r4, #4]
 801526c:	42a3      	cmp	r3, r4
 801526e:	bf0c      	ite	eq
 8015270:	f8c8 2000 	streq.w	r2, [r8]
 8015274:	605a      	strne	r2, [r3, #4]
 8015276:	e7eb      	b.n	8015250 <_malloc_r+0xa8>
 8015278:	4623      	mov	r3, r4
 801527a:	6864      	ldr	r4, [r4, #4]
 801527c:	e7ae      	b.n	80151dc <_malloc_r+0x34>
 801527e:	463c      	mov	r4, r7
 8015280:	687f      	ldr	r7, [r7, #4]
 8015282:	e7b6      	b.n	80151f2 <_malloc_r+0x4a>
 8015284:	461a      	mov	r2, r3
 8015286:	685b      	ldr	r3, [r3, #4]
 8015288:	42a3      	cmp	r3, r4
 801528a:	d1fb      	bne.n	8015284 <_malloc_r+0xdc>
 801528c:	2300      	movs	r3, #0
 801528e:	6053      	str	r3, [r2, #4]
 8015290:	e7de      	b.n	8015250 <_malloc_r+0xa8>
 8015292:	230c      	movs	r3, #12
 8015294:	6033      	str	r3, [r6, #0]
 8015296:	4630      	mov	r0, r6
 8015298:	f000 f80c 	bl	80152b4 <__malloc_unlock>
 801529c:	e794      	b.n	80151c8 <_malloc_r+0x20>
 801529e:	6005      	str	r5, [r0, #0]
 80152a0:	e7d6      	b.n	8015250 <_malloc_r+0xa8>
 80152a2:	bf00      	nop
 80152a4:	2000dd34 	.word	0x2000dd34

080152a8 <__malloc_lock>:
 80152a8:	4801      	ldr	r0, [pc, #4]	@ (80152b0 <__malloc_lock+0x8>)
 80152aa:	f000 bb90 	b.w	80159ce <__retarget_lock_acquire_recursive>
 80152ae:	bf00      	nop
 80152b0:	2000de79 	.word	0x2000de79

080152b4 <__malloc_unlock>:
 80152b4:	4801      	ldr	r0, [pc, #4]	@ (80152bc <__malloc_unlock+0x8>)
 80152b6:	f000 bb8b 	b.w	80159d0 <__retarget_lock_release_recursive>
 80152ba:	bf00      	nop
 80152bc:	2000de79 	.word	0x2000de79

080152c0 <srand>:
 80152c0:	b538      	push	{r3, r4, r5, lr}
 80152c2:	4b10      	ldr	r3, [pc, #64]	@ (8015304 <srand+0x44>)
 80152c4:	681d      	ldr	r5, [r3, #0]
 80152c6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80152c8:	4604      	mov	r4, r0
 80152ca:	b9b3      	cbnz	r3, 80152fa <srand+0x3a>
 80152cc:	2018      	movs	r0, #24
 80152ce:	f7ff ff39 	bl	8015144 <malloc>
 80152d2:	4602      	mov	r2, r0
 80152d4:	6328      	str	r0, [r5, #48]	@ 0x30
 80152d6:	b920      	cbnz	r0, 80152e2 <srand+0x22>
 80152d8:	4b0b      	ldr	r3, [pc, #44]	@ (8015308 <srand+0x48>)
 80152da:	480c      	ldr	r0, [pc, #48]	@ (801530c <srand+0x4c>)
 80152dc:	2146      	movs	r1, #70	@ 0x46
 80152de:	f000 fb8f 	bl	8015a00 <__assert_func>
 80152e2:	490b      	ldr	r1, [pc, #44]	@ (8015310 <srand+0x50>)
 80152e4:	4b0b      	ldr	r3, [pc, #44]	@ (8015314 <srand+0x54>)
 80152e6:	e9c0 1300 	strd	r1, r3, [r0]
 80152ea:	4b0b      	ldr	r3, [pc, #44]	@ (8015318 <srand+0x58>)
 80152ec:	6083      	str	r3, [r0, #8]
 80152ee:	230b      	movs	r3, #11
 80152f0:	8183      	strh	r3, [r0, #12]
 80152f2:	2100      	movs	r1, #0
 80152f4:	2001      	movs	r0, #1
 80152f6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80152fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80152fc:	2200      	movs	r2, #0
 80152fe:	611c      	str	r4, [r3, #16]
 8015300:	615a      	str	r2, [r3, #20]
 8015302:	bd38      	pop	{r3, r4, r5, pc}
 8015304:	20000268 	.word	0x20000268
 8015308:	0801756c 	.word	0x0801756c
 801530c:	08017583 	.word	0x08017583
 8015310:	abcd330e 	.word	0xabcd330e
 8015314:	e66d1234 	.word	0xe66d1234
 8015318:	0005deec 	.word	0x0005deec

0801531c <rand>:
 801531c:	4b16      	ldr	r3, [pc, #88]	@ (8015378 <rand+0x5c>)
 801531e:	b510      	push	{r4, lr}
 8015320:	681c      	ldr	r4, [r3, #0]
 8015322:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015324:	b9b3      	cbnz	r3, 8015354 <rand+0x38>
 8015326:	2018      	movs	r0, #24
 8015328:	f7ff ff0c 	bl	8015144 <malloc>
 801532c:	4602      	mov	r2, r0
 801532e:	6320      	str	r0, [r4, #48]	@ 0x30
 8015330:	b920      	cbnz	r0, 801533c <rand+0x20>
 8015332:	4b12      	ldr	r3, [pc, #72]	@ (801537c <rand+0x60>)
 8015334:	4812      	ldr	r0, [pc, #72]	@ (8015380 <rand+0x64>)
 8015336:	2152      	movs	r1, #82	@ 0x52
 8015338:	f000 fb62 	bl	8015a00 <__assert_func>
 801533c:	4911      	ldr	r1, [pc, #68]	@ (8015384 <rand+0x68>)
 801533e:	4b12      	ldr	r3, [pc, #72]	@ (8015388 <rand+0x6c>)
 8015340:	e9c0 1300 	strd	r1, r3, [r0]
 8015344:	4b11      	ldr	r3, [pc, #68]	@ (801538c <rand+0x70>)
 8015346:	6083      	str	r3, [r0, #8]
 8015348:	230b      	movs	r3, #11
 801534a:	8183      	strh	r3, [r0, #12]
 801534c:	2100      	movs	r1, #0
 801534e:	2001      	movs	r0, #1
 8015350:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015354:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015356:	480e      	ldr	r0, [pc, #56]	@ (8015390 <rand+0x74>)
 8015358:	690b      	ldr	r3, [r1, #16]
 801535a:	694c      	ldr	r4, [r1, #20]
 801535c:	4a0d      	ldr	r2, [pc, #52]	@ (8015394 <rand+0x78>)
 801535e:	4358      	muls	r0, r3
 8015360:	fb02 0004 	mla	r0, r2, r4, r0
 8015364:	fba3 3202 	umull	r3, r2, r3, r2
 8015368:	3301      	adds	r3, #1
 801536a:	eb40 0002 	adc.w	r0, r0, r2
 801536e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8015372:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015376:	bd10      	pop	{r4, pc}
 8015378:	20000268 	.word	0x20000268
 801537c:	0801756c 	.word	0x0801756c
 8015380:	08017583 	.word	0x08017583
 8015384:	abcd330e 	.word	0xabcd330e
 8015388:	e66d1234 	.word	0xe66d1234
 801538c:	0005deec 	.word	0x0005deec
 8015390:	5851f42d 	.word	0x5851f42d
 8015394:	4c957f2d 	.word	0x4c957f2d

08015398 <realloc>:
 8015398:	4b02      	ldr	r3, [pc, #8]	@ (80153a4 <realloc+0xc>)
 801539a:	460a      	mov	r2, r1
 801539c:	4601      	mov	r1, r0
 801539e:	6818      	ldr	r0, [r3, #0]
 80153a0:	f000 b802 	b.w	80153a8 <_realloc_r>
 80153a4:	20000268 	.word	0x20000268

080153a8 <_realloc_r>:
 80153a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153ac:	4680      	mov	r8, r0
 80153ae:	4615      	mov	r5, r2
 80153b0:	460c      	mov	r4, r1
 80153b2:	b921      	cbnz	r1, 80153be <_realloc_r+0x16>
 80153b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80153b8:	4611      	mov	r1, r2
 80153ba:	f7ff bef5 	b.w	80151a8 <_malloc_r>
 80153be:	b92a      	cbnz	r2, 80153cc <_realloc_r+0x24>
 80153c0:	f000 fb48 	bl	8015a54 <_free_r>
 80153c4:	2400      	movs	r4, #0
 80153c6:	4620      	mov	r0, r4
 80153c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153cc:	f000 fb8c 	bl	8015ae8 <_malloc_usable_size_r>
 80153d0:	4285      	cmp	r5, r0
 80153d2:	4606      	mov	r6, r0
 80153d4:	d802      	bhi.n	80153dc <_realloc_r+0x34>
 80153d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80153da:	d8f4      	bhi.n	80153c6 <_realloc_r+0x1e>
 80153dc:	4629      	mov	r1, r5
 80153de:	4640      	mov	r0, r8
 80153e0:	f7ff fee2 	bl	80151a8 <_malloc_r>
 80153e4:	4607      	mov	r7, r0
 80153e6:	2800      	cmp	r0, #0
 80153e8:	d0ec      	beq.n	80153c4 <_realloc_r+0x1c>
 80153ea:	42b5      	cmp	r5, r6
 80153ec:	462a      	mov	r2, r5
 80153ee:	4621      	mov	r1, r4
 80153f0:	bf28      	it	cs
 80153f2:	4632      	movcs	r2, r6
 80153f4:	f000 faf5 	bl	80159e2 <memcpy>
 80153f8:	4621      	mov	r1, r4
 80153fa:	4640      	mov	r0, r8
 80153fc:	f000 fb2a 	bl	8015a54 <_free_r>
 8015400:	463c      	mov	r4, r7
 8015402:	e7e0      	b.n	80153c6 <_realloc_r+0x1e>

08015404 <_strtoul_l.constprop.0>:
 8015404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015408:	4e34      	ldr	r6, [pc, #208]	@ (80154dc <_strtoul_l.constprop.0+0xd8>)
 801540a:	4686      	mov	lr, r0
 801540c:	460d      	mov	r5, r1
 801540e:	4628      	mov	r0, r5
 8015410:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015414:	5d37      	ldrb	r7, [r6, r4]
 8015416:	f017 0708 	ands.w	r7, r7, #8
 801541a:	d1f8      	bne.n	801540e <_strtoul_l.constprop.0+0xa>
 801541c:	2c2d      	cmp	r4, #45	@ 0x2d
 801541e:	d12f      	bne.n	8015480 <_strtoul_l.constprop.0+0x7c>
 8015420:	782c      	ldrb	r4, [r5, #0]
 8015422:	2701      	movs	r7, #1
 8015424:	1c85      	adds	r5, r0, #2
 8015426:	f033 0010 	bics.w	r0, r3, #16
 801542a:	d109      	bne.n	8015440 <_strtoul_l.constprop.0+0x3c>
 801542c:	2c30      	cmp	r4, #48	@ 0x30
 801542e:	d12c      	bne.n	801548a <_strtoul_l.constprop.0+0x86>
 8015430:	7828      	ldrb	r0, [r5, #0]
 8015432:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8015436:	2858      	cmp	r0, #88	@ 0x58
 8015438:	d127      	bne.n	801548a <_strtoul_l.constprop.0+0x86>
 801543a:	786c      	ldrb	r4, [r5, #1]
 801543c:	2310      	movs	r3, #16
 801543e:	3502      	adds	r5, #2
 8015440:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015444:	2600      	movs	r6, #0
 8015446:	fbb8 f8f3 	udiv	r8, r8, r3
 801544a:	fb03 f908 	mul.w	r9, r3, r8
 801544e:	ea6f 0909 	mvn.w	r9, r9
 8015452:	4630      	mov	r0, r6
 8015454:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8015458:	f1bc 0f09 	cmp.w	ip, #9
 801545c:	d81c      	bhi.n	8015498 <_strtoul_l.constprop.0+0x94>
 801545e:	4664      	mov	r4, ip
 8015460:	42a3      	cmp	r3, r4
 8015462:	dd2a      	ble.n	80154ba <_strtoul_l.constprop.0+0xb6>
 8015464:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8015468:	d007      	beq.n	801547a <_strtoul_l.constprop.0+0x76>
 801546a:	4580      	cmp	r8, r0
 801546c:	d322      	bcc.n	80154b4 <_strtoul_l.constprop.0+0xb0>
 801546e:	d101      	bne.n	8015474 <_strtoul_l.constprop.0+0x70>
 8015470:	45a1      	cmp	r9, r4
 8015472:	db1f      	blt.n	80154b4 <_strtoul_l.constprop.0+0xb0>
 8015474:	fb00 4003 	mla	r0, r0, r3, r4
 8015478:	2601      	movs	r6, #1
 801547a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801547e:	e7e9      	b.n	8015454 <_strtoul_l.constprop.0+0x50>
 8015480:	2c2b      	cmp	r4, #43	@ 0x2b
 8015482:	bf04      	itt	eq
 8015484:	782c      	ldrbeq	r4, [r5, #0]
 8015486:	1c85      	addeq	r5, r0, #2
 8015488:	e7cd      	b.n	8015426 <_strtoul_l.constprop.0+0x22>
 801548a:	2b00      	cmp	r3, #0
 801548c:	d1d8      	bne.n	8015440 <_strtoul_l.constprop.0+0x3c>
 801548e:	2c30      	cmp	r4, #48	@ 0x30
 8015490:	bf0c      	ite	eq
 8015492:	2308      	moveq	r3, #8
 8015494:	230a      	movne	r3, #10
 8015496:	e7d3      	b.n	8015440 <_strtoul_l.constprop.0+0x3c>
 8015498:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801549c:	f1bc 0f19 	cmp.w	ip, #25
 80154a0:	d801      	bhi.n	80154a6 <_strtoul_l.constprop.0+0xa2>
 80154a2:	3c37      	subs	r4, #55	@ 0x37
 80154a4:	e7dc      	b.n	8015460 <_strtoul_l.constprop.0+0x5c>
 80154a6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80154aa:	f1bc 0f19 	cmp.w	ip, #25
 80154ae:	d804      	bhi.n	80154ba <_strtoul_l.constprop.0+0xb6>
 80154b0:	3c57      	subs	r4, #87	@ 0x57
 80154b2:	e7d5      	b.n	8015460 <_strtoul_l.constprop.0+0x5c>
 80154b4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80154b8:	e7df      	b.n	801547a <_strtoul_l.constprop.0+0x76>
 80154ba:	1c73      	adds	r3, r6, #1
 80154bc:	d106      	bne.n	80154cc <_strtoul_l.constprop.0+0xc8>
 80154be:	2322      	movs	r3, #34	@ 0x22
 80154c0:	f8ce 3000 	str.w	r3, [lr]
 80154c4:	4630      	mov	r0, r6
 80154c6:	b932      	cbnz	r2, 80154d6 <_strtoul_l.constprop.0+0xd2>
 80154c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154cc:	b107      	cbz	r7, 80154d0 <_strtoul_l.constprop.0+0xcc>
 80154ce:	4240      	negs	r0, r0
 80154d0:	2a00      	cmp	r2, #0
 80154d2:	d0f9      	beq.n	80154c8 <_strtoul_l.constprop.0+0xc4>
 80154d4:	b106      	cbz	r6, 80154d8 <_strtoul_l.constprop.0+0xd4>
 80154d6:	1e69      	subs	r1, r5, #1
 80154d8:	6011      	str	r1, [r2, #0]
 80154da:	e7f5      	b.n	80154c8 <_strtoul_l.constprop.0+0xc4>
 80154dc:	080175dc 	.word	0x080175dc

080154e0 <strtoul>:
 80154e0:	4613      	mov	r3, r2
 80154e2:	460a      	mov	r2, r1
 80154e4:	4601      	mov	r1, r0
 80154e6:	4802      	ldr	r0, [pc, #8]	@ (80154f0 <strtoul+0x10>)
 80154e8:	6800      	ldr	r0, [r0, #0]
 80154ea:	f7ff bf8b 	b.w	8015404 <_strtoul_l.constprop.0>
 80154ee:	bf00      	nop
 80154f0:	20000268 	.word	0x20000268

080154f4 <std>:
 80154f4:	2300      	movs	r3, #0
 80154f6:	b510      	push	{r4, lr}
 80154f8:	4604      	mov	r4, r0
 80154fa:	e9c0 3300 	strd	r3, r3, [r0]
 80154fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015502:	6083      	str	r3, [r0, #8]
 8015504:	8181      	strh	r1, [r0, #12]
 8015506:	6643      	str	r3, [r0, #100]	@ 0x64
 8015508:	81c2      	strh	r2, [r0, #14]
 801550a:	6183      	str	r3, [r0, #24]
 801550c:	4619      	mov	r1, r3
 801550e:	2208      	movs	r2, #8
 8015510:	305c      	adds	r0, #92	@ 0x5c
 8015512:	f000 f99d 	bl	8015850 <memset>
 8015516:	4b0d      	ldr	r3, [pc, #52]	@ (801554c <std+0x58>)
 8015518:	6263      	str	r3, [r4, #36]	@ 0x24
 801551a:	4b0d      	ldr	r3, [pc, #52]	@ (8015550 <std+0x5c>)
 801551c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801551e:	4b0d      	ldr	r3, [pc, #52]	@ (8015554 <std+0x60>)
 8015520:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015522:	4b0d      	ldr	r3, [pc, #52]	@ (8015558 <std+0x64>)
 8015524:	6323      	str	r3, [r4, #48]	@ 0x30
 8015526:	4b0d      	ldr	r3, [pc, #52]	@ (801555c <std+0x68>)
 8015528:	6224      	str	r4, [r4, #32]
 801552a:	429c      	cmp	r4, r3
 801552c:	d006      	beq.n	801553c <std+0x48>
 801552e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015532:	4294      	cmp	r4, r2
 8015534:	d002      	beq.n	801553c <std+0x48>
 8015536:	33d0      	adds	r3, #208	@ 0xd0
 8015538:	429c      	cmp	r4, r3
 801553a:	d105      	bne.n	8015548 <std+0x54>
 801553c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015544:	f000 ba42 	b.w	80159cc <__retarget_lock_init_recursive>
 8015548:	bd10      	pop	{r4, pc}
 801554a:	bf00      	nop
 801554c:	08015705 	.word	0x08015705
 8015550:	08015727 	.word	0x08015727
 8015554:	0801575f 	.word	0x0801575f
 8015558:	08015783 	.word	0x08015783
 801555c:	2000dd38 	.word	0x2000dd38

08015560 <stdio_exit_handler>:
 8015560:	4a02      	ldr	r2, [pc, #8]	@ (801556c <stdio_exit_handler+0xc>)
 8015562:	4903      	ldr	r1, [pc, #12]	@ (8015570 <stdio_exit_handler+0x10>)
 8015564:	4803      	ldr	r0, [pc, #12]	@ (8015574 <stdio_exit_handler+0x14>)
 8015566:	f000 b869 	b.w	801563c <_fwalk_sglue>
 801556a:	bf00      	nop
 801556c:	2000025c 	.word	0x2000025c
 8015570:	08016451 	.word	0x08016451
 8015574:	2000026c 	.word	0x2000026c

08015578 <cleanup_stdio>:
 8015578:	6841      	ldr	r1, [r0, #4]
 801557a:	4b0c      	ldr	r3, [pc, #48]	@ (80155ac <cleanup_stdio+0x34>)
 801557c:	4299      	cmp	r1, r3
 801557e:	b510      	push	{r4, lr}
 8015580:	4604      	mov	r4, r0
 8015582:	d001      	beq.n	8015588 <cleanup_stdio+0x10>
 8015584:	f000 ff64 	bl	8016450 <_fflush_r>
 8015588:	68a1      	ldr	r1, [r4, #8]
 801558a:	4b09      	ldr	r3, [pc, #36]	@ (80155b0 <cleanup_stdio+0x38>)
 801558c:	4299      	cmp	r1, r3
 801558e:	d002      	beq.n	8015596 <cleanup_stdio+0x1e>
 8015590:	4620      	mov	r0, r4
 8015592:	f000 ff5d 	bl	8016450 <_fflush_r>
 8015596:	68e1      	ldr	r1, [r4, #12]
 8015598:	4b06      	ldr	r3, [pc, #24]	@ (80155b4 <cleanup_stdio+0x3c>)
 801559a:	4299      	cmp	r1, r3
 801559c:	d004      	beq.n	80155a8 <cleanup_stdio+0x30>
 801559e:	4620      	mov	r0, r4
 80155a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80155a4:	f000 bf54 	b.w	8016450 <_fflush_r>
 80155a8:	bd10      	pop	{r4, pc}
 80155aa:	bf00      	nop
 80155ac:	2000dd38 	.word	0x2000dd38
 80155b0:	2000dda0 	.word	0x2000dda0
 80155b4:	2000de08 	.word	0x2000de08

080155b8 <global_stdio_init.part.0>:
 80155b8:	b510      	push	{r4, lr}
 80155ba:	4b0b      	ldr	r3, [pc, #44]	@ (80155e8 <global_stdio_init.part.0+0x30>)
 80155bc:	4c0b      	ldr	r4, [pc, #44]	@ (80155ec <global_stdio_init.part.0+0x34>)
 80155be:	4a0c      	ldr	r2, [pc, #48]	@ (80155f0 <global_stdio_init.part.0+0x38>)
 80155c0:	601a      	str	r2, [r3, #0]
 80155c2:	4620      	mov	r0, r4
 80155c4:	2200      	movs	r2, #0
 80155c6:	2104      	movs	r1, #4
 80155c8:	f7ff ff94 	bl	80154f4 <std>
 80155cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80155d0:	2201      	movs	r2, #1
 80155d2:	2109      	movs	r1, #9
 80155d4:	f7ff ff8e 	bl	80154f4 <std>
 80155d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80155dc:	2202      	movs	r2, #2
 80155de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80155e2:	2112      	movs	r1, #18
 80155e4:	f7ff bf86 	b.w	80154f4 <std>
 80155e8:	2000de70 	.word	0x2000de70
 80155ec:	2000dd38 	.word	0x2000dd38
 80155f0:	08015561 	.word	0x08015561

080155f4 <__sfp_lock_acquire>:
 80155f4:	4801      	ldr	r0, [pc, #4]	@ (80155fc <__sfp_lock_acquire+0x8>)
 80155f6:	f000 b9ea 	b.w	80159ce <__retarget_lock_acquire_recursive>
 80155fa:	bf00      	nop
 80155fc:	2000de7a 	.word	0x2000de7a

08015600 <__sfp_lock_release>:
 8015600:	4801      	ldr	r0, [pc, #4]	@ (8015608 <__sfp_lock_release+0x8>)
 8015602:	f000 b9e5 	b.w	80159d0 <__retarget_lock_release_recursive>
 8015606:	bf00      	nop
 8015608:	2000de7a 	.word	0x2000de7a

0801560c <__sinit>:
 801560c:	b510      	push	{r4, lr}
 801560e:	4604      	mov	r4, r0
 8015610:	f7ff fff0 	bl	80155f4 <__sfp_lock_acquire>
 8015614:	6a23      	ldr	r3, [r4, #32]
 8015616:	b11b      	cbz	r3, 8015620 <__sinit+0x14>
 8015618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801561c:	f7ff bff0 	b.w	8015600 <__sfp_lock_release>
 8015620:	4b04      	ldr	r3, [pc, #16]	@ (8015634 <__sinit+0x28>)
 8015622:	6223      	str	r3, [r4, #32]
 8015624:	4b04      	ldr	r3, [pc, #16]	@ (8015638 <__sinit+0x2c>)
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d1f5      	bne.n	8015618 <__sinit+0xc>
 801562c:	f7ff ffc4 	bl	80155b8 <global_stdio_init.part.0>
 8015630:	e7f2      	b.n	8015618 <__sinit+0xc>
 8015632:	bf00      	nop
 8015634:	08015579 	.word	0x08015579
 8015638:	2000de70 	.word	0x2000de70

0801563c <_fwalk_sglue>:
 801563c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015640:	4607      	mov	r7, r0
 8015642:	4688      	mov	r8, r1
 8015644:	4614      	mov	r4, r2
 8015646:	2600      	movs	r6, #0
 8015648:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801564c:	f1b9 0901 	subs.w	r9, r9, #1
 8015650:	d505      	bpl.n	801565e <_fwalk_sglue+0x22>
 8015652:	6824      	ldr	r4, [r4, #0]
 8015654:	2c00      	cmp	r4, #0
 8015656:	d1f7      	bne.n	8015648 <_fwalk_sglue+0xc>
 8015658:	4630      	mov	r0, r6
 801565a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801565e:	89ab      	ldrh	r3, [r5, #12]
 8015660:	2b01      	cmp	r3, #1
 8015662:	d907      	bls.n	8015674 <_fwalk_sglue+0x38>
 8015664:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015668:	3301      	adds	r3, #1
 801566a:	d003      	beq.n	8015674 <_fwalk_sglue+0x38>
 801566c:	4629      	mov	r1, r5
 801566e:	4638      	mov	r0, r7
 8015670:	47c0      	blx	r8
 8015672:	4306      	orrs	r6, r0
 8015674:	3568      	adds	r5, #104	@ 0x68
 8015676:	e7e9      	b.n	801564c <_fwalk_sglue+0x10>

08015678 <iprintf>:
 8015678:	b40f      	push	{r0, r1, r2, r3}
 801567a:	b507      	push	{r0, r1, r2, lr}
 801567c:	4906      	ldr	r1, [pc, #24]	@ (8015698 <iprintf+0x20>)
 801567e:	ab04      	add	r3, sp, #16
 8015680:	6808      	ldr	r0, [r1, #0]
 8015682:	f853 2b04 	ldr.w	r2, [r3], #4
 8015686:	6881      	ldr	r1, [r0, #8]
 8015688:	9301      	str	r3, [sp, #4]
 801568a:	f000 fbb7 	bl	8015dfc <_vfiprintf_r>
 801568e:	b003      	add	sp, #12
 8015690:	f85d eb04 	ldr.w	lr, [sp], #4
 8015694:	b004      	add	sp, #16
 8015696:	4770      	bx	lr
 8015698:	20000268 	.word	0x20000268

0801569c <sniprintf>:
 801569c:	b40c      	push	{r2, r3}
 801569e:	b530      	push	{r4, r5, lr}
 80156a0:	4b17      	ldr	r3, [pc, #92]	@ (8015700 <sniprintf+0x64>)
 80156a2:	1e0c      	subs	r4, r1, #0
 80156a4:	681d      	ldr	r5, [r3, #0]
 80156a6:	b09d      	sub	sp, #116	@ 0x74
 80156a8:	da08      	bge.n	80156bc <sniprintf+0x20>
 80156aa:	238b      	movs	r3, #139	@ 0x8b
 80156ac:	602b      	str	r3, [r5, #0]
 80156ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80156b2:	b01d      	add	sp, #116	@ 0x74
 80156b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80156b8:	b002      	add	sp, #8
 80156ba:	4770      	bx	lr
 80156bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80156c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80156c4:	bf14      	ite	ne
 80156c6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80156ca:	4623      	moveq	r3, r4
 80156cc:	9304      	str	r3, [sp, #16]
 80156ce:	9307      	str	r3, [sp, #28]
 80156d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80156d4:	9002      	str	r0, [sp, #8]
 80156d6:	9006      	str	r0, [sp, #24]
 80156d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80156dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80156de:	ab21      	add	r3, sp, #132	@ 0x84
 80156e0:	a902      	add	r1, sp, #8
 80156e2:	4628      	mov	r0, r5
 80156e4:	9301      	str	r3, [sp, #4]
 80156e6:	f000 fa63 	bl	8015bb0 <_svfiprintf_r>
 80156ea:	1c43      	adds	r3, r0, #1
 80156ec:	bfbc      	itt	lt
 80156ee:	238b      	movlt	r3, #139	@ 0x8b
 80156f0:	602b      	strlt	r3, [r5, #0]
 80156f2:	2c00      	cmp	r4, #0
 80156f4:	d0dd      	beq.n	80156b2 <sniprintf+0x16>
 80156f6:	9b02      	ldr	r3, [sp, #8]
 80156f8:	2200      	movs	r2, #0
 80156fa:	701a      	strb	r2, [r3, #0]
 80156fc:	e7d9      	b.n	80156b2 <sniprintf+0x16>
 80156fe:	bf00      	nop
 8015700:	20000268 	.word	0x20000268

08015704 <__sread>:
 8015704:	b510      	push	{r4, lr}
 8015706:	460c      	mov	r4, r1
 8015708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801570c:	f000 f900 	bl	8015910 <_read_r>
 8015710:	2800      	cmp	r0, #0
 8015712:	bfab      	itete	ge
 8015714:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015716:	89a3      	ldrhlt	r3, [r4, #12]
 8015718:	181b      	addge	r3, r3, r0
 801571a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801571e:	bfac      	ite	ge
 8015720:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015722:	81a3      	strhlt	r3, [r4, #12]
 8015724:	bd10      	pop	{r4, pc}

08015726 <__swrite>:
 8015726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801572a:	461f      	mov	r7, r3
 801572c:	898b      	ldrh	r3, [r1, #12]
 801572e:	05db      	lsls	r3, r3, #23
 8015730:	4605      	mov	r5, r0
 8015732:	460c      	mov	r4, r1
 8015734:	4616      	mov	r6, r2
 8015736:	d505      	bpl.n	8015744 <__swrite+0x1e>
 8015738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801573c:	2302      	movs	r3, #2
 801573e:	2200      	movs	r2, #0
 8015740:	f000 f8d4 	bl	80158ec <_lseek_r>
 8015744:	89a3      	ldrh	r3, [r4, #12]
 8015746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801574a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801574e:	81a3      	strh	r3, [r4, #12]
 8015750:	4632      	mov	r2, r6
 8015752:	463b      	mov	r3, r7
 8015754:	4628      	mov	r0, r5
 8015756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801575a:	f000 b8fb 	b.w	8015954 <_write_r>

0801575e <__sseek>:
 801575e:	b510      	push	{r4, lr}
 8015760:	460c      	mov	r4, r1
 8015762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015766:	f000 f8c1 	bl	80158ec <_lseek_r>
 801576a:	1c43      	adds	r3, r0, #1
 801576c:	89a3      	ldrh	r3, [r4, #12]
 801576e:	bf15      	itete	ne
 8015770:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015772:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015776:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801577a:	81a3      	strheq	r3, [r4, #12]
 801577c:	bf18      	it	ne
 801577e:	81a3      	strhne	r3, [r4, #12]
 8015780:	bd10      	pop	{r4, pc}

08015782 <__sclose>:
 8015782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015786:	f000 b8a1 	b.w	80158cc <_close_r>

0801578a <_vsniprintf_r>:
 801578a:	b530      	push	{r4, r5, lr}
 801578c:	4614      	mov	r4, r2
 801578e:	2c00      	cmp	r4, #0
 8015790:	b09b      	sub	sp, #108	@ 0x6c
 8015792:	4605      	mov	r5, r0
 8015794:	461a      	mov	r2, r3
 8015796:	da05      	bge.n	80157a4 <_vsniprintf_r+0x1a>
 8015798:	238b      	movs	r3, #139	@ 0x8b
 801579a:	6003      	str	r3, [r0, #0]
 801579c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80157a0:	b01b      	add	sp, #108	@ 0x6c
 80157a2:	bd30      	pop	{r4, r5, pc}
 80157a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80157a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80157ac:	bf14      	ite	ne
 80157ae:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80157b2:	4623      	moveq	r3, r4
 80157b4:	9302      	str	r3, [sp, #8]
 80157b6:	9305      	str	r3, [sp, #20]
 80157b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80157bc:	9100      	str	r1, [sp, #0]
 80157be:	9104      	str	r1, [sp, #16]
 80157c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80157c4:	4669      	mov	r1, sp
 80157c6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80157c8:	f000 f9f2 	bl	8015bb0 <_svfiprintf_r>
 80157cc:	1c43      	adds	r3, r0, #1
 80157ce:	bfbc      	itt	lt
 80157d0:	238b      	movlt	r3, #139	@ 0x8b
 80157d2:	602b      	strlt	r3, [r5, #0]
 80157d4:	2c00      	cmp	r4, #0
 80157d6:	d0e3      	beq.n	80157a0 <_vsniprintf_r+0x16>
 80157d8:	9b00      	ldr	r3, [sp, #0]
 80157da:	2200      	movs	r2, #0
 80157dc:	701a      	strb	r2, [r3, #0]
 80157de:	e7df      	b.n	80157a0 <_vsniprintf_r+0x16>

080157e0 <vsniprintf>:
 80157e0:	b507      	push	{r0, r1, r2, lr}
 80157e2:	9300      	str	r3, [sp, #0]
 80157e4:	4613      	mov	r3, r2
 80157e6:	460a      	mov	r2, r1
 80157e8:	4601      	mov	r1, r0
 80157ea:	4803      	ldr	r0, [pc, #12]	@ (80157f8 <vsniprintf+0x18>)
 80157ec:	6800      	ldr	r0, [r0, #0]
 80157ee:	f7ff ffcc 	bl	801578a <_vsniprintf_r>
 80157f2:	b003      	add	sp, #12
 80157f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80157f8:	20000268 	.word	0x20000268

080157fc <memcmp>:
 80157fc:	b510      	push	{r4, lr}
 80157fe:	3901      	subs	r1, #1
 8015800:	4402      	add	r2, r0
 8015802:	4290      	cmp	r0, r2
 8015804:	d101      	bne.n	801580a <memcmp+0xe>
 8015806:	2000      	movs	r0, #0
 8015808:	e005      	b.n	8015816 <memcmp+0x1a>
 801580a:	7803      	ldrb	r3, [r0, #0]
 801580c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015810:	42a3      	cmp	r3, r4
 8015812:	d001      	beq.n	8015818 <memcmp+0x1c>
 8015814:	1b18      	subs	r0, r3, r4
 8015816:	bd10      	pop	{r4, pc}
 8015818:	3001      	adds	r0, #1
 801581a:	e7f2      	b.n	8015802 <memcmp+0x6>

0801581c <memmove>:
 801581c:	4288      	cmp	r0, r1
 801581e:	b510      	push	{r4, lr}
 8015820:	eb01 0402 	add.w	r4, r1, r2
 8015824:	d902      	bls.n	801582c <memmove+0x10>
 8015826:	4284      	cmp	r4, r0
 8015828:	4623      	mov	r3, r4
 801582a:	d807      	bhi.n	801583c <memmove+0x20>
 801582c:	1e43      	subs	r3, r0, #1
 801582e:	42a1      	cmp	r1, r4
 8015830:	d008      	beq.n	8015844 <memmove+0x28>
 8015832:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015836:	f803 2f01 	strb.w	r2, [r3, #1]!
 801583a:	e7f8      	b.n	801582e <memmove+0x12>
 801583c:	4402      	add	r2, r0
 801583e:	4601      	mov	r1, r0
 8015840:	428a      	cmp	r2, r1
 8015842:	d100      	bne.n	8015846 <memmove+0x2a>
 8015844:	bd10      	pop	{r4, pc}
 8015846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801584a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801584e:	e7f7      	b.n	8015840 <memmove+0x24>

08015850 <memset>:
 8015850:	4402      	add	r2, r0
 8015852:	4603      	mov	r3, r0
 8015854:	4293      	cmp	r3, r2
 8015856:	d100      	bne.n	801585a <memset+0xa>
 8015858:	4770      	bx	lr
 801585a:	f803 1b01 	strb.w	r1, [r3], #1
 801585e:	e7f9      	b.n	8015854 <memset+0x4>

08015860 <strchr>:
 8015860:	b2c9      	uxtb	r1, r1
 8015862:	4603      	mov	r3, r0
 8015864:	4618      	mov	r0, r3
 8015866:	f813 2b01 	ldrb.w	r2, [r3], #1
 801586a:	b112      	cbz	r2, 8015872 <strchr+0x12>
 801586c:	428a      	cmp	r2, r1
 801586e:	d1f9      	bne.n	8015864 <strchr+0x4>
 8015870:	4770      	bx	lr
 8015872:	2900      	cmp	r1, #0
 8015874:	bf18      	it	ne
 8015876:	2000      	movne	r0, #0
 8015878:	4770      	bx	lr

0801587a <strncmp>:
 801587a:	b510      	push	{r4, lr}
 801587c:	b16a      	cbz	r2, 801589a <strncmp+0x20>
 801587e:	3901      	subs	r1, #1
 8015880:	1884      	adds	r4, r0, r2
 8015882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015886:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801588a:	429a      	cmp	r2, r3
 801588c:	d103      	bne.n	8015896 <strncmp+0x1c>
 801588e:	42a0      	cmp	r0, r4
 8015890:	d001      	beq.n	8015896 <strncmp+0x1c>
 8015892:	2a00      	cmp	r2, #0
 8015894:	d1f5      	bne.n	8015882 <strncmp+0x8>
 8015896:	1ad0      	subs	r0, r2, r3
 8015898:	bd10      	pop	{r4, pc}
 801589a:	4610      	mov	r0, r2
 801589c:	e7fc      	b.n	8015898 <strncmp+0x1e>

0801589e <strstr>:
 801589e:	780a      	ldrb	r2, [r1, #0]
 80158a0:	b570      	push	{r4, r5, r6, lr}
 80158a2:	b96a      	cbnz	r2, 80158c0 <strstr+0x22>
 80158a4:	bd70      	pop	{r4, r5, r6, pc}
 80158a6:	429a      	cmp	r2, r3
 80158a8:	d109      	bne.n	80158be <strstr+0x20>
 80158aa:	460c      	mov	r4, r1
 80158ac:	4605      	mov	r5, r0
 80158ae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d0f6      	beq.n	80158a4 <strstr+0x6>
 80158b6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80158ba:	429e      	cmp	r6, r3
 80158bc:	d0f7      	beq.n	80158ae <strstr+0x10>
 80158be:	3001      	adds	r0, #1
 80158c0:	7803      	ldrb	r3, [r0, #0]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d1ef      	bne.n	80158a6 <strstr+0x8>
 80158c6:	4618      	mov	r0, r3
 80158c8:	e7ec      	b.n	80158a4 <strstr+0x6>
	...

080158cc <_close_r>:
 80158cc:	b538      	push	{r3, r4, r5, lr}
 80158ce:	4d06      	ldr	r5, [pc, #24]	@ (80158e8 <_close_r+0x1c>)
 80158d0:	2300      	movs	r3, #0
 80158d2:	4604      	mov	r4, r0
 80158d4:	4608      	mov	r0, r1
 80158d6:	602b      	str	r3, [r5, #0]
 80158d8:	f7ec f9ca 	bl	8001c70 <_close>
 80158dc:	1c43      	adds	r3, r0, #1
 80158de:	d102      	bne.n	80158e6 <_close_r+0x1a>
 80158e0:	682b      	ldr	r3, [r5, #0]
 80158e2:	b103      	cbz	r3, 80158e6 <_close_r+0x1a>
 80158e4:	6023      	str	r3, [r4, #0]
 80158e6:	bd38      	pop	{r3, r4, r5, pc}
 80158e8:	2000de74 	.word	0x2000de74

080158ec <_lseek_r>:
 80158ec:	b538      	push	{r3, r4, r5, lr}
 80158ee:	4d07      	ldr	r5, [pc, #28]	@ (801590c <_lseek_r+0x20>)
 80158f0:	4604      	mov	r4, r0
 80158f2:	4608      	mov	r0, r1
 80158f4:	4611      	mov	r1, r2
 80158f6:	2200      	movs	r2, #0
 80158f8:	602a      	str	r2, [r5, #0]
 80158fa:	461a      	mov	r2, r3
 80158fc:	f7ec f9df 	bl	8001cbe <_lseek>
 8015900:	1c43      	adds	r3, r0, #1
 8015902:	d102      	bne.n	801590a <_lseek_r+0x1e>
 8015904:	682b      	ldr	r3, [r5, #0]
 8015906:	b103      	cbz	r3, 801590a <_lseek_r+0x1e>
 8015908:	6023      	str	r3, [r4, #0]
 801590a:	bd38      	pop	{r3, r4, r5, pc}
 801590c:	2000de74 	.word	0x2000de74

08015910 <_read_r>:
 8015910:	b538      	push	{r3, r4, r5, lr}
 8015912:	4d07      	ldr	r5, [pc, #28]	@ (8015930 <_read_r+0x20>)
 8015914:	4604      	mov	r4, r0
 8015916:	4608      	mov	r0, r1
 8015918:	4611      	mov	r1, r2
 801591a:	2200      	movs	r2, #0
 801591c:	602a      	str	r2, [r5, #0]
 801591e:	461a      	mov	r2, r3
 8015920:	f7ec f96d 	bl	8001bfe <_read>
 8015924:	1c43      	adds	r3, r0, #1
 8015926:	d102      	bne.n	801592e <_read_r+0x1e>
 8015928:	682b      	ldr	r3, [r5, #0]
 801592a:	b103      	cbz	r3, 801592e <_read_r+0x1e>
 801592c:	6023      	str	r3, [r4, #0]
 801592e:	bd38      	pop	{r3, r4, r5, pc}
 8015930:	2000de74 	.word	0x2000de74

08015934 <_sbrk_r>:
 8015934:	b538      	push	{r3, r4, r5, lr}
 8015936:	4d06      	ldr	r5, [pc, #24]	@ (8015950 <_sbrk_r+0x1c>)
 8015938:	2300      	movs	r3, #0
 801593a:	4604      	mov	r4, r0
 801593c:	4608      	mov	r0, r1
 801593e:	602b      	str	r3, [r5, #0]
 8015940:	f7ec f9ca 	bl	8001cd8 <_sbrk>
 8015944:	1c43      	adds	r3, r0, #1
 8015946:	d102      	bne.n	801594e <_sbrk_r+0x1a>
 8015948:	682b      	ldr	r3, [r5, #0]
 801594a:	b103      	cbz	r3, 801594e <_sbrk_r+0x1a>
 801594c:	6023      	str	r3, [r4, #0]
 801594e:	bd38      	pop	{r3, r4, r5, pc}
 8015950:	2000de74 	.word	0x2000de74

08015954 <_write_r>:
 8015954:	b538      	push	{r3, r4, r5, lr}
 8015956:	4d07      	ldr	r5, [pc, #28]	@ (8015974 <_write_r+0x20>)
 8015958:	4604      	mov	r4, r0
 801595a:	4608      	mov	r0, r1
 801595c:	4611      	mov	r1, r2
 801595e:	2200      	movs	r2, #0
 8015960:	602a      	str	r2, [r5, #0]
 8015962:	461a      	mov	r2, r3
 8015964:	f7ec f968 	bl	8001c38 <_write>
 8015968:	1c43      	adds	r3, r0, #1
 801596a:	d102      	bne.n	8015972 <_write_r+0x1e>
 801596c:	682b      	ldr	r3, [r5, #0]
 801596e:	b103      	cbz	r3, 8015972 <_write_r+0x1e>
 8015970:	6023      	str	r3, [r4, #0]
 8015972:	bd38      	pop	{r3, r4, r5, pc}
 8015974:	2000de74 	.word	0x2000de74

08015978 <__errno>:
 8015978:	4b01      	ldr	r3, [pc, #4]	@ (8015980 <__errno+0x8>)
 801597a:	6818      	ldr	r0, [r3, #0]
 801597c:	4770      	bx	lr
 801597e:	bf00      	nop
 8015980:	20000268 	.word	0x20000268

08015984 <__libc_init_array>:
 8015984:	b570      	push	{r4, r5, r6, lr}
 8015986:	4d0d      	ldr	r5, [pc, #52]	@ (80159bc <__libc_init_array+0x38>)
 8015988:	4c0d      	ldr	r4, [pc, #52]	@ (80159c0 <__libc_init_array+0x3c>)
 801598a:	1b64      	subs	r4, r4, r5
 801598c:	10a4      	asrs	r4, r4, #2
 801598e:	2600      	movs	r6, #0
 8015990:	42a6      	cmp	r6, r4
 8015992:	d109      	bne.n	80159a8 <__libc_init_array+0x24>
 8015994:	4d0b      	ldr	r5, [pc, #44]	@ (80159c4 <__libc_init_array+0x40>)
 8015996:	4c0c      	ldr	r4, [pc, #48]	@ (80159c8 <__libc_init_array+0x44>)
 8015998:	f000 fef8 	bl	801678c <_init>
 801599c:	1b64      	subs	r4, r4, r5
 801599e:	10a4      	asrs	r4, r4, #2
 80159a0:	2600      	movs	r6, #0
 80159a2:	42a6      	cmp	r6, r4
 80159a4:	d105      	bne.n	80159b2 <__libc_init_array+0x2e>
 80159a6:	bd70      	pop	{r4, r5, r6, pc}
 80159a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80159ac:	4798      	blx	r3
 80159ae:	3601      	adds	r6, #1
 80159b0:	e7ee      	b.n	8015990 <__libc_init_array+0xc>
 80159b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80159b6:	4798      	blx	r3
 80159b8:	3601      	adds	r6, #1
 80159ba:	e7f2      	b.n	80159a2 <__libc_init_array+0x1e>
 80159bc:	08017754 	.word	0x08017754
 80159c0:	08017754 	.word	0x08017754
 80159c4:	08017754 	.word	0x08017754
 80159c8:	08017760 	.word	0x08017760

080159cc <__retarget_lock_init_recursive>:
 80159cc:	4770      	bx	lr

080159ce <__retarget_lock_acquire_recursive>:
 80159ce:	4770      	bx	lr

080159d0 <__retarget_lock_release_recursive>:
 80159d0:	4770      	bx	lr

080159d2 <strcpy>:
 80159d2:	4603      	mov	r3, r0
 80159d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80159d8:	f803 2b01 	strb.w	r2, [r3], #1
 80159dc:	2a00      	cmp	r2, #0
 80159de:	d1f9      	bne.n	80159d4 <strcpy+0x2>
 80159e0:	4770      	bx	lr

080159e2 <memcpy>:
 80159e2:	440a      	add	r2, r1
 80159e4:	4291      	cmp	r1, r2
 80159e6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80159ea:	d100      	bne.n	80159ee <memcpy+0xc>
 80159ec:	4770      	bx	lr
 80159ee:	b510      	push	{r4, lr}
 80159f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80159f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80159f8:	4291      	cmp	r1, r2
 80159fa:	d1f9      	bne.n	80159f0 <memcpy+0xe>
 80159fc:	bd10      	pop	{r4, pc}
	...

08015a00 <__assert_func>:
 8015a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015a02:	4614      	mov	r4, r2
 8015a04:	461a      	mov	r2, r3
 8015a06:	4b09      	ldr	r3, [pc, #36]	@ (8015a2c <__assert_func+0x2c>)
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	4605      	mov	r5, r0
 8015a0c:	68d8      	ldr	r0, [r3, #12]
 8015a0e:	b954      	cbnz	r4, 8015a26 <__assert_func+0x26>
 8015a10:	4b07      	ldr	r3, [pc, #28]	@ (8015a30 <__assert_func+0x30>)
 8015a12:	461c      	mov	r4, r3
 8015a14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015a18:	9100      	str	r1, [sp, #0]
 8015a1a:	462b      	mov	r3, r5
 8015a1c:	4905      	ldr	r1, [pc, #20]	@ (8015a34 <__assert_func+0x34>)
 8015a1e:	f000 fd3f 	bl	80164a0 <fiprintf>
 8015a22:	f000 fde3 	bl	80165ec <abort>
 8015a26:	4b04      	ldr	r3, [pc, #16]	@ (8015a38 <__assert_func+0x38>)
 8015a28:	e7f4      	b.n	8015a14 <__assert_func+0x14>
 8015a2a:	bf00      	nop
 8015a2c:	20000268 	.word	0x20000268
 8015a30:	08017717 	.word	0x08017717
 8015a34:	080176e9 	.word	0x080176e9
 8015a38:	080176dc 	.word	0x080176dc

08015a3c <__env_lock>:
 8015a3c:	4801      	ldr	r0, [pc, #4]	@ (8015a44 <__env_lock+0x8>)
 8015a3e:	f7ff bfc6 	b.w	80159ce <__retarget_lock_acquire_recursive>
 8015a42:	bf00      	nop
 8015a44:	2000de78 	.word	0x2000de78

08015a48 <__env_unlock>:
 8015a48:	4801      	ldr	r0, [pc, #4]	@ (8015a50 <__env_unlock+0x8>)
 8015a4a:	f7ff bfc1 	b.w	80159d0 <__retarget_lock_release_recursive>
 8015a4e:	bf00      	nop
 8015a50:	2000de78 	.word	0x2000de78

08015a54 <_free_r>:
 8015a54:	b538      	push	{r3, r4, r5, lr}
 8015a56:	4605      	mov	r5, r0
 8015a58:	2900      	cmp	r1, #0
 8015a5a:	d041      	beq.n	8015ae0 <_free_r+0x8c>
 8015a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a60:	1f0c      	subs	r4, r1, #4
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	bfb8      	it	lt
 8015a66:	18e4      	addlt	r4, r4, r3
 8015a68:	f7ff fc1e 	bl	80152a8 <__malloc_lock>
 8015a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8015ae4 <_free_r+0x90>)
 8015a6e:	6813      	ldr	r3, [r2, #0]
 8015a70:	b933      	cbnz	r3, 8015a80 <_free_r+0x2c>
 8015a72:	6063      	str	r3, [r4, #4]
 8015a74:	6014      	str	r4, [r2, #0]
 8015a76:	4628      	mov	r0, r5
 8015a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a7c:	f7ff bc1a 	b.w	80152b4 <__malloc_unlock>
 8015a80:	42a3      	cmp	r3, r4
 8015a82:	d908      	bls.n	8015a96 <_free_r+0x42>
 8015a84:	6820      	ldr	r0, [r4, #0]
 8015a86:	1821      	adds	r1, r4, r0
 8015a88:	428b      	cmp	r3, r1
 8015a8a:	bf01      	itttt	eq
 8015a8c:	6819      	ldreq	r1, [r3, #0]
 8015a8e:	685b      	ldreq	r3, [r3, #4]
 8015a90:	1809      	addeq	r1, r1, r0
 8015a92:	6021      	streq	r1, [r4, #0]
 8015a94:	e7ed      	b.n	8015a72 <_free_r+0x1e>
 8015a96:	461a      	mov	r2, r3
 8015a98:	685b      	ldr	r3, [r3, #4]
 8015a9a:	b10b      	cbz	r3, 8015aa0 <_free_r+0x4c>
 8015a9c:	42a3      	cmp	r3, r4
 8015a9e:	d9fa      	bls.n	8015a96 <_free_r+0x42>
 8015aa0:	6811      	ldr	r1, [r2, #0]
 8015aa2:	1850      	adds	r0, r2, r1
 8015aa4:	42a0      	cmp	r0, r4
 8015aa6:	d10b      	bne.n	8015ac0 <_free_r+0x6c>
 8015aa8:	6820      	ldr	r0, [r4, #0]
 8015aaa:	4401      	add	r1, r0
 8015aac:	1850      	adds	r0, r2, r1
 8015aae:	4283      	cmp	r3, r0
 8015ab0:	6011      	str	r1, [r2, #0]
 8015ab2:	d1e0      	bne.n	8015a76 <_free_r+0x22>
 8015ab4:	6818      	ldr	r0, [r3, #0]
 8015ab6:	685b      	ldr	r3, [r3, #4]
 8015ab8:	6053      	str	r3, [r2, #4]
 8015aba:	4408      	add	r0, r1
 8015abc:	6010      	str	r0, [r2, #0]
 8015abe:	e7da      	b.n	8015a76 <_free_r+0x22>
 8015ac0:	d902      	bls.n	8015ac8 <_free_r+0x74>
 8015ac2:	230c      	movs	r3, #12
 8015ac4:	602b      	str	r3, [r5, #0]
 8015ac6:	e7d6      	b.n	8015a76 <_free_r+0x22>
 8015ac8:	6820      	ldr	r0, [r4, #0]
 8015aca:	1821      	adds	r1, r4, r0
 8015acc:	428b      	cmp	r3, r1
 8015ace:	bf04      	itt	eq
 8015ad0:	6819      	ldreq	r1, [r3, #0]
 8015ad2:	685b      	ldreq	r3, [r3, #4]
 8015ad4:	6063      	str	r3, [r4, #4]
 8015ad6:	bf04      	itt	eq
 8015ad8:	1809      	addeq	r1, r1, r0
 8015ada:	6021      	streq	r1, [r4, #0]
 8015adc:	6054      	str	r4, [r2, #4]
 8015ade:	e7ca      	b.n	8015a76 <_free_r+0x22>
 8015ae0:	bd38      	pop	{r3, r4, r5, pc}
 8015ae2:	bf00      	nop
 8015ae4:	2000dd34 	.word	0x2000dd34

08015ae8 <_malloc_usable_size_r>:
 8015ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015aec:	1f18      	subs	r0, r3, #4
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	bfbc      	itt	lt
 8015af2:	580b      	ldrlt	r3, [r1, r0]
 8015af4:	18c0      	addlt	r0, r0, r3
 8015af6:	4770      	bx	lr

08015af8 <__ssputs_r>:
 8015af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015afc:	688e      	ldr	r6, [r1, #8]
 8015afe:	461f      	mov	r7, r3
 8015b00:	42be      	cmp	r6, r7
 8015b02:	680b      	ldr	r3, [r1, #0]
 8015b04:	4682      	mov	sl, r0
 8015b06:	460c      	mov	r4, r1
 8015b08:	4690      	mov	r8, r2
 8015b0a:	d82d      	bhi.n	8015b68 <__ssputs_r+0x70>
 8015b0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015b10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015b14:	d026      	beq.n	8015b64 <__ssputs_r+0x6c>
 8015b16:	6965      	ldr	r5, [r4, #20]
 8015b18:	6909      	ldr	r1, [r1, #16]
 8015b1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015b1e:	eba3 0901 	sub.w	r9, r3, r1
 8015b22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015b26:	1c7b      	adds	r3, r7, #1
 8015b28:	444b      	add	r3, r9
 8015b2a:	106d      	asrs	r5, r5, #1
 8015b2c:	429d      	cmp	r5, r3
 8015b2e:	bf38      	it	cc
 8015b30:	461d      	movcc	r5, r3
 8015b32:	0553      	lsls	r3, r2, #21
 8015b34:	d527      	bpl.n	8015b86 <__ssputs_r+0x8e>
 8015b36:	4629      	mov	r1, r5
 8015b38:	f7ff fb36 	bl	80151a8 <_malloc_r>
 8015b3c:	4606      	mov	r6, r0
 8015b3e:	b360      	cbz	r0, 8015b9a <__ssputs_r+0xa2>
 8015b40:	6921      	ldr	r1, [r4, #16]
 8015b42:	464a      	mov	r2, r9
 8015b44:	f7ff ff4d 	bl	80159e2 <memcpy>
 8015b48:	89a3      	ldrh	r3, [r4, #12]
 8015b4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015b52:	81a3      	strh	r3, [r4, #12]
 8015b54:	6126      	str	r6, [r4, #16]
 8015b56:	6165      	str	r5, [r4, #20]
 8015b58:	444e      	add	r6, r9
 8015b5a:	eba5 0509 	sub.w	r5, r5, r9
 8015b5e:	6026      	str	r6, [r4, #0]
 8015b60:	60a5      	str	r5, [r4, #8]
 8015b62:	463e      	mov	r6, r7
 8015b64:	42be      	cmp	r6, r7
 8015b66:	d900      	bls.n	8015b6a <__ssputs_r+0x72>
 8015b68:	463e      	mov	r6, r7
 8015b6a:	6820      	ldr	r0, [r4, #0]
 8015b6c:	4632      	mov	r2, r6
 8015b6e:	4641      	mov	r1, r8
 8015b70:	f7ff fe54 	bl	801581c <memmove>
 8015b74:	68a3      	ldr	r3, [r4, #8]
 8015b76:	1b9b      	subs	r3, r3, r6
 8015b78:	60a3      	str	r3, [r4, #8]
 8015b7a:	6823      	ldr	r3, [r4, #0]
 8015b7c:	4433      	add	r3, r6
 8015b7e:	6023      	str	r3, [r4, #0]
 8015b80:	2000      	movs	r0, #0
 8015b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b86:	462a      	mov	r2, r5
 8015b88:	f7ff fc0e 	bl	80153a8 <_realloc_r>
 8015b8c:	4606      	mov	r6, r0
 8015b8e:	2800      	cmp	r0, #0
 8015b90:	d1e0      	bne.n	8015b54 <__ssputs_r+0x5c>
 8015b92:	6921      	ldr	r1, [r4, #16]
 8015b94:	4650      	mov	r0, sl
 8015b96:	f7ff ff5d 	bl	8015a54 <_free_r>
 8015b9a:	230c      	movs	r3, #12
 8015b9c:	f8ca 3000 	str.w	r3, [sl]
 8015ba0:	89a3      	ldrh	r3, [r4, #12]
 8015ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015ba6:	81a3      	strh	r3, [r4, #12]
 8015ba8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015bac:	e7e9      	b.n	8015b82 <__ssputs_r+0x8a>
	...

08015bb0 <_svfiprintf_r>:
 8015bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bb4:	4698      	mov	r8, r3
 8015bb6:	898b      	ldrh	r3, [r1, #12]
 8015bb8:	061b      	lsls	r3, r3, #24
 8015bba:	b09d      	sub	sp, #116	@ 0x74
 8015bbc:	4607      	mov	r7, r0
 8015bbe:	460d      	mov	r5, r1
 8015bc0:	4614      	mov	r4, r2
 8015bc2:	d510      	bpl.n	8015be6 <_svfiprintf_r+0x36>
 8015bc4:	690b      	ldr	r3, [r1, #16]
 8015bc6:	b973      	cbnz	r3, 8015be6 <_svfiprintf_r+0x36>
 8015bc8:	2140      	movs	r1, #64	@ 0x40
 8015bca:	f7ff faed 	bl	80151a8 <_malloc_r>
 8015bce:	6028      	str	r0, [r5, #0]
 8015bd0:	6128      	str	r0, [r5, #16]
 8015bd2:	b930      	cbnz	r0, 8015be2 <_svfiprintf_r+0x32>
 8015bd4:	230c      	movs	r3, #12
 8015bd6:	603b      	str	r3, [r7, #0]
 8015bd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015bdc:	b01d      	add	sp, #116	@ 0x74
 8015bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015be2:	2340      	movs	r3, #64	@ 0x40
 8015be4:	616b      	str	r3, [r5, #20]
 8015be6:	2300      	movs	r3, #0
 8015be8:	9309      	str	r3, [sp, #36]	@ 0x24
 8015bea:	2320      	movs	r3, #32
 8015bec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015bf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8015bf4:	2330      	movs	r3, #48	@ 0x30
 8015bf6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015d94 <_svfiprintf_r+0x1e4>
 8015bfa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015bfe:	f04f 0901 	mov.w	r9, #1
 8015c02:	4623      	mov	r3, r4
 8015c04:	469a      	mov	sl, r3
 8015c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c0a:	b10a      	cbz	r2, 8015c10 <_svfiprintf_r+0x60>
 8015c0c:	2a25      	cmp	r2, #37	@ 0x25
 8015c0e:	d1f9      	bne.n	8015c04 <_svfiprintf_r+0x54>
 8015c10:	ebba 0b04 	subs.w	fp, sl, r4
 8015c14:	d00b      	beq.n	8015c2e <_svfiprintf_r+0x7e>
 8015c16:	465b      	mov	r3, fp
 8015c18:	4622      	mov	r2, r4
 8015c1a:	4629      	mov	r1, r5
 8015c1c:	4638      	mov	r0, r7
 8015c1e:	f7ff ff6b 	bl	8015af8 <__ssputs_r>
 8015c22:	3001      	adds	r0, #1
 8015c24:	f000 80a7 	beq.w	8015d76 <_svfiprintf_r+0x1c6>
 8015c28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015c2a:	445a      	add	r2, fp
 8015c2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8015c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	f000 809f 	beq.w	8015d76 <_svfiprintf_r+0x1c6>
 8015c38:	2300      	movs	r3, #0
 8015c3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015c3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c42:	f10a 0a01 	add.w	sl, sl, #1
 8015c46:	9304      	str	r3, [sp, #16]
 8015c48:	9307      	str	r3, [sp, #28]
 8015c4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015c4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8015c50:	4654      	mov	r4, sl
 8015c52:	2205      	movs	r2, #5
 8015c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c58:	484e      	ldr	r0, [pc, #312]	@ (8015d94 <_svfiprintf_r+0x1e4>)
 8015c5a:	f7ea fad9 	bl	8000210 <memchr>
 8015c5e:	9a04      	ldr	r2, [sp, #16]
 8015c60:	b9d8      	cbnz	r0, 8015c9a <_svfiprintf_r+0xea>
 8015c62:	06d0      	lsls	r0, r2, #27
 8015c64:	bf44      	itt	mi
 8015c66:	2320      	movmi	r3, #32
 8015c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c6c:	0711      	lsls	r1, r2, #28
 8015c6e:	bf44      	itt	mi
 8015c70:	232b      	movmi	r3, #43	@ 0x2b
 8015c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c76:	f89a 3000 	ldrb.w	r3, [sl]
 8015c7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c7c:	d015      	beq.n	8015caa <_svfiprintf_r+0xfa>
 8015c7e:	9a07      	ldr	r2, [sp, #28]
 8015c80:	4654      	mov	r4, sl
 8015c82:	2000      	movs	r0, #0
 8015c84:	f04f 0c0a 	mov.w	ip, #10
 8015c88:	4621      	mov	r1, r4
 8015c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c8e:	3b30      	subs	r3, #48	@ 0x30
 8015c90:	2b09      	cmp	r3, #9
 8015c92:	d94b      	bls.n	8015d2c <_svfiprintf_r+0x17c>
 8015c94:	b1b0      	cbz	r0, 8015cc4 <_svfiprintf_r+0x114>
 8015c96:	9207      	str	r2, [sp, #28]
 8015c98:	e014      	b.n	8015cc4 <_svfiprintf_r+0x114>
 8015c9a:	eba0 0308 	sub.w	r3, r0, r8
 8015c9e:	fa09 f303 	lsl.w	r3, r9, r3
 8015ca2:	4313      	orrs	r3, r2
 8015ca4:	9304      	str	r3, [sp, #16]
 8015ca6:	46a2      	mov	sl, r4
 8015ca8:	e7d2      	b.n	8015c50 <_svfiprintf_r+0xa0>
 8015caa:	9b03      	ldr	r3, [sp, #12]
 8015cac:	1d19      	adds	r1, r3, #4
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	9103      	str	r1, [sp, #12]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	bfbb      	ittet	lt
 8015cb6:	425b      	neglt	r3, r3
 8015cb8:	f042 0202 	orrlt.w	r2, r2, #2
 8015cbc:	9307      	strge	r3, [sp, #28]
 8015cbe:	9307      	strlt	r3, [sp, #28]
 8015cc0:	bfb8      	it	lt
 8015cc2:	9204      	strlt	r2, [sp, #16]
 8015cc4:	7823      	ldrb	r3, [r4, #0]
 8015cc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8015cc8:	d10a      	bne.n	8015ce0 <_svfiprintf_r+0x130>
 8015cca:	7863      	ldrb	r3, [r4, #1]
 8015ccc:	2b2a      	cmp	r3, #42	@ 0x2a
 8015cce:	d132      	bne.n	8015d36 <_svfiprintf_r+0x186>
 8015cd0:	9b03      	ldr	r3, [sp, #12]
 8015cd2:	1d1a      	adds	r2, r3, #4
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	9203      	str	r2, [sp, #12]
 8015cd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015cdc:	3402      	adds	r4, #2
 8015cde:	9305      	str	r3, [sp, #20]
 8015ce0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015da4 <_svfiprintf_r+0x1f4>
 8015ce4:	7821      	ldrb	r1, [r4, #0]
 8015ce6:	2203      	movs	r2, #3
 8015ce8:	4650      	mov	r0, sl
 8015cea:	f7ea fa91 	bl	8000210 <memchr>
 8015cee:	b138      	cbz	r0, 8015d00 <_svfiprintf_r+0x150>
 8015cf0:	9b04      	ldr	r3, [sp, #16]
 8015cf2:	eba0 000a 	sub.w	r0, r0, sl
 8015cf6:	2240      	movs	r2, #64	@ 0x40
 8015cf8:	4082      	lsls	r2, r0
 8015cfa:	4313      	orrs	r3, r2
 8015cfc:	3401      	adds	r4, #1
 8015cfe:	9304      	str	r3, [sp, #16]
 8015d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d04:	4824      	ldr	r0, [pc, #144]	@ (8015d98 <_svfiprintf_r+0x1e8>)
 8015d06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015d0a:	2206      	movs	r2, #6
 8015d0c:	f7ea fa80 	bl	8000210 <memchr>
 8015d10:	2800      	cmp	r0, #0
 8015d12:	d036      	beq.n	8015d82 <_svfiprintf_r+0x1d2>
 8015d14:	4b21      	ldr	r3, [pc, #132]	@ (8015d9c <_svfiprintf_r+0x1ec>)
 8015d16:	bb1b      	cbnz	r3, 8015d60 <_svfiprintf_r+0x1b0>
 8015d18:	9b03      	ldr	r3, [sp, #12]
 8015d1a:	3307      	adds	r3, #7
 8015d1c:	f023 0307 	bic.w	r3, r3, #7
 8015d20:	3308      	adds	r3, #8
 8015d22:	9303      	str	r3, [sp, #12]
 8015d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d26:	4433      	add	r3, r6
 8015d28:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d2a:	e76a      	b.n	8015c02 <_svfiprintf_r+0x52>
 8015d2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d30:	460c      	mov	r4, r1
 8015d32:	2001      	movs	r0, #1
 8015d34:	e7a8      	b.n	8015c88 <_svfiprintf_r+0xd8>
 8015d36:	2300      	movs	r3, #0
 8015d38:	3401      	adds	r4, #1
 8015d3a:	9305      	str	r3, [sp, #20]
 8015d3c:	4619      	mov	r1, r3
 8015d3e:	f04f 0c0a 	mov.w	ip, #10
 8015d42:	4620      	mov	r0, r4
 8015d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d48:	3a30      	subs	r2, #48	@ 0x30
 8015d4a:	2a09      	cmp	r2, #9
 8015d4c:	d903      	bls.n	8015d56 <_svfiprintf_r+0x1a6>
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d0c6      	beq.n	8015ce0 <_svfiprintf_r+0x130>
 8015d52:	9105      	str	r1, [sp, #20]
 8015d54:	e7c4      	b.n	8015ce0 <_svfiprintf_r+0x130>
 8015d56:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d5a:	4604      	mov	r4, r0
 8015d5c:	2301      	movs	r3, #1
 8015d5e:	e7f0      	b.n	8015d42 <_svfiprintf_r+0x192>
 8015d60:	ab03      	add	r3, sp, #12
 8015d62:	9300      	str	r3, [sp, #0]
 8015d64:	462a      	mov	r2, r5
 8015d66:	4b0e      	ldr	r3, [pc, #56]	@ (8015da0 <_svfiprintf_r+0x1f0>)
 8015d68:	a904      	add	r1, sp, #16
 8015d6a:	4638      	mov	r0, r7
 8015d6c:	f3af 8000 	nop.w
 8015d70:	1c42      	adds	r2, r0, #1
 8015d72:	4606      	mov	r6, r0
 8015d74:	d1d6      	bne.n	8015d24 <_svfiprintf_r+0x174>
 8015d76:	89ab      	ldrh	r3, [r5, #12]
 8015d78:	065b      	lsls	r3, r3, #25
 8015d7a:	f53f af2d 	bmi.w	8015bd8 <_svfiprintf_r+0x28>
 8015d7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015d80:	e72c      	b.n	8015bdc <_svfiprintf_r+0x2c>
 8015d82:	ab03      	add	r3, sp, #12
 8015d84:	9300      	str	r3, [sp, #0]
 8015d86:	462a      	mov	r2, r5
 8015d88:	4b05      	ldr	r3, [pc, #20]	@ (8015da0 <_svfiprintf_r+0x1f0>)
 8015d8a:	a904      	add	r1, sp, #16
 8015d8c:	4638      	mov	r0, r7
 8015d8e:	f000 f9bb 	bl	8016108 <_printf_i>
 8015d92:	e7ed      	b.n	8015d70 <_svfiprintf_r+0x1c0>
 8015d94:	08017718 	.word	0x08017718
 8015d98:	08017722 	.word	0x08017722
 8015d9c:	00000000 	.word	0x00000000
 8015da0:	08015af9 	.word	0x08015af9
 8015da4:	0801771e 	.word	0x0801771e

08015da8 <__sfputc_r>:
 8015da8:	6893      	ldr	r3, [r2, #8]
 8015daa:	3b01      	subs	r3, #1
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	b410      	push	{r4}
 8015db0:	6093      	str	r3, [r2, #8]
 8015db2:	da08      	bge.n	8015dc6 <__sfputc_r+0x1e>
 8015db4:	6994      	ldr	r4, [r2, #24]
 8015db6:	42a3      	cmp	r3, r4
 8015db8:	db01      	blt.n	8015dbe <__sfputc_r+0x16>
 8015dba:	290a      	cmp	r1, #10
 8015dbc:	d103      	bne.n	8015dc6 <__sfputc_r+0x1e>
 8015dbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015dc2:	f000 bb7f 	b.w	80164c4 <__swbuf_r>
 8015dc6:	6813      	ldr	r3, [r2, #0]
 8015dc8:	1c58      	adds	r0, r3, #1
 8015dca:	6010      	str	r0, [r2, #0]
 8015dcc:	7019      	strb	r1, [r3, #0]
 8015dce:	4608      	mov	r0, r1
 8015dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015dd4:	4770      	bx	lr

08015dd6 <__sfputs_r>:
 8015dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dd8:	4606      	mov	r6, r0
 8015dda:	460f      	mov	r7, r1
 8015ddc:	4614      	mov	r4, r2
 8015dde:	18d5      	adds	r5, r2, r3
 8015de0:	42ac      	cmp	r4, r5
 8015de2:	d101      	bne.n	8015de8 <__sfputs_r+0x12>
 8015de4:	2000      	movs	r0, #0
 8015de6:	e007      	b.n	8015df8 <__sfputs_r+0x22>
 8015de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dec:	463a      	mov	r2, r7
 8015dee:	4630      	mov	r0, r6
 8015df0:	f7ff ffda 	bl	8015da8 <__sfputc_r>
 8015df4:	1c43      	adds	r3, r0, #1
 8015df6:	d1f3      	bne.n	8015de0 <__sfputs_r+0xa>
 8015df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015dfc <_vfiprintf_r>:
 8015dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e00:	460d      	mov	r5, r1
 8015e02:	b09d      	sub	sp, #116	@ 0x74
 8015e04:	4614      	mov	r4, r2
 8015e06:	4698      	mov	r8, r3
 8015e08:	4606      	mov	r6, r0
 8015e0a:	b118      	cbz	r0, 8015e14 <_vfiprintf_r+0x18>
 8015e0c:	6a03      	ldr	r3, [r0, #32]
 8015e0e:	b90b      	cbnz	r3, 8015e14 <_vfiprintf_r+0x18>
 8015e10:	f7ff fbfc 	bl	801560c <__sinit>
 8015e14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015e16:	07d9      	lsls	r1, r3, #31
 8015e18:	d405      	bmi.n	8015e26 <_vfiprintf_r+0x2a>
 8015e1a:	89ab      	ldrh	r3, [r5, #12]
 8015e1c:	059a      	lsls	r2, r3, #22
 8015e1e:	d402      	bmi.n	8015e26 <_vfiprintf_r+0x2a>
 8015e20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015e22:	f7ff fdd4 	bl	80159ce <__retarget_lock_acquire_recursive>
 8015e26:	89ab      	ldrh	r3, [r5, #12]
 8015e28:	071b      	lsls	r3, r3, #28
 8015e2a:	d501      	bpl.n	8015e30 <_vfiprintf_r+0x34>
 8015e2c:	692b      	ldr	r3, [r5, #16]
 8015e2e:	b99b      	cbnz	r3, 8015e58 <_vfiprintf_r+0x5c>
 8015e30:	4629      	mov	r1, r5
 8015e32:	4630      	mov	r0, r6
 8015e34:	f000 fb84 	bl	8016540 <__swsetup_r>
 8015e38:	b170      	cbz	r0, 8015e58 <_vfiprintf_r+0x5c>
 8015e3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015e3c:	07dc      	lsls	r4, r3, #31
 8015e3e:	d504      	bpl.n	8015e4a <_vfiprintf_r+0x4e>
 8015e40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015e44:	b01d      	add	sp, #116	@ 0x74
 8015e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e4a:	89ab      	ldrh	r3, [r5, #12]
 8015e4c:	0598      	lsls	r0, r3, #22
 8015e4e:	d4f7      	bmi.n	8015e40 <_vfiprintf_r+0x44>
 8015e50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015e52:	f7ff fdbd 	bl	80159d0 <__retarget_lock_release_recursive>
 8015e56:	e7f3      	b.n	8015e40 <_vfiprintf_r+0x44>
 8015e58:	2300      	movs	r3, #0
 8015e5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e5c:	2320      	movs	r3, #32
 8015e5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015e62:	f8cd 800c 	str.w	r8, [sp, #12]
 8015e66:	2330      	movs	r3, #48	@ 0x30
 8015e68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016018 <_vfiprintf_r+0x21c>
 8015e6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015e70:	f04f 0901 	mov.w	r9, #1
 8015e74:	4623      	mov	r3, r4
 8015e76:	469a      	mov	sl, r3
 8015e78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e7c:	b10a      	cbz	r2, 8015e82 <_vfiprintf_r+0x86>
 8015e7e:	2a25      	cmp	r2, #37	@ 0x25
 8015e80:	d1f9      	bne.n	8015e76 <_vfiprintf_r+0x7a>
 8015e82:	ebba 0b04 	subs.w	fp, sl, r4
 8015e86:	d00b      	beq.n	8015ea0 <_vfiprintf_r+0xa4>
 8015e88:	465b      	mov	r3, fp
 8015e8a:	4622      	mov	r2, r4
 8015e8c:	4629      	mov	r1, r5
 8015e8e:	4630      	mov	r0, r6
 8015e90:	f7ff ffa1 	bl	8015dd6 <__sfputs_r>
 8015e94:	3001      	adds	r0, #1
 8015e96:	f000 80a7 	beq.w	8015fe8 <_vfiprintf_r+0x1ec>
 8015e9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015e9c:	445a      	add	r2, fp
 8015e9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	f000 809f 	beq.w	8015fe8 <_vfiprintf_r+0x1ec>
 8015eaa:	2300      	movs	r3, #0
 8015eac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015eb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015eb4:	f10a 0a01 	add.w	sl, sl, #1
 8015eb8:	9304      	str	r3, [sp, #16]
 8015eba:	9307      	str	r3, [sp, #28]
 8015ebc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015ec0:	931a      	str	r3, [sp, #104]	@ 0x68
 8015ec2:	4654      	mov	r4, sl
 8015ec4:	2205      	movs	r2, #5
 8015ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015eca:	4853      	ldr	r0, [pc, #332]	@ (8016018 <_vfiprintf_r+0x21c>)
 8015ecc:	f7ea f9a0 	bl	8000210 <memchr>
 8015ed0:	9a04      	ldr	r2, [sp, #16]
 8015ed2:	b9d8      	cbnz	r0, 8015f0c <_vfiprintf_r+0x110>
 8015ed4:	06d1      	lsls	r1, r2, #27
 8015ed6:	bf44      	itt	mi
 8015ed8:	2320      	movmi	r3, #32
 8015eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015ede:	0713      	lsls	r3, r2, #28
 8015ee0:	bf44      	itt	mi
 8015ee2:	232b      	movmi	r3, #43	@ 0x2b
 8015ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015ee8:	f89a 3000 	ldrb.w	r3, [sl]
 8015eec:	2b2a      	cmp	r3, #42	@ 0x2a
 8015eee:	d015      	beq.n	8015f1c <_vfiprintf_r+0x120>
 8015ef0:	9a07      	ldr	r2, [sp, #28]
 8015ef2:	4654      	mov	r4, sl
 8015ef4:	2000      	movs	r0, #0
 8015ef6:	f04f 0c0a 	mov.w	ip, #10
 8015efa:	4621      	mov	r1, r4
 8015efc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015f00:	3b30      	subs	r3, #48	@ 0x30
 8015f02:	2b09      	cmp	r3, #9
 8015f04:	d94b      	bls.n	8015f9e <_vfiprintf_r+0x1a2>
 8015f06:	b1b0      	cbz	r0, 8015f36 <_vfiprintf_r+0x13a>
 8015f08:	9207      	str	r2, [sp, #28]
 8015f0a:	e014      	b.n	8015f36 <_vfiprintf_r+0x13a>
 8015f0c:	eba0 0308 	sub.w	r3, r0, r8
 8015f10:	fa09 f303 	lsl.w	r3, r9, r3
 8015f14:	4313      	orrs	r3, r2
 8015f16:	9304      	str	r3, [sp, #16]
 8015f18:	46a2      	mov	sl, r4
 8015f1a:	e7d2      	b.n	8015ec2 <_vfiprintf_r+0xc6>
 8015f1c:	9b03      	ldr	r3, [sp, #12]
 8015f1e:	1d19      	adds	r1, r3, #4
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	9103      	str	r1, [sp, #12]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	bfbb      	ittet	lt
 8015f28:	425b      	neglt	r3, r3
 8015f2a:	f042 0202 	orrlt.w	r2, r2, #2
 8015f2e:	9307      	strge	r3, [sp, #28]
 8015f30:	9307      	strlt	r3, [sp, #28]
 8015f32:	bfb8      	it	lt
 8015f34:	9204      	strlt	r2, [sp, #16]
 8015f36:	7823      	ldrb	r3, [r4, #0]
 8015f38:	2b2e      	cmp	r3, #46	@ 0x2e
 8015f3a:	d10a      	bne.n	8015f52 <_vfiprintf_r+0x156>
 8015f3c:	7863      	ldrb	r3, [r4, #1]
 8015f3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015f40:	d132      	bne.n	8015fa8 <_vfiprintf_r+0x1ac>
 8015f42:	9b03      	ldr	r3, [sp, #12]
 8015f44:	1d1a      	adds	r2, r3, #4
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	9203      	str	r2, [sp, #12]
 8015f4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015f4e:	3402      	adds	r4, #2
 8015f50:	9305      	str	r3, [sp, #20]
 8015f52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016028 <_vfiprintf_r+0x22c>
 8015f56:	7821      	ldrb	r1, [r4, #0]
 8015f58:	2203      	movs	r2, #3
 8015f5a:	4650      	mov	r0, sl
 8015f5c:	f7ea f958 	bl	8000210 <memchr>
 8015f60:	b138      	cbz	r0, 8015f72 <_vfiprintf_r+0x176>
 8015f62:	9b04      	ldr	r3, [sp, #16]
 8015f64:	eba0 000a 	sub.w	r0, r0, sl
 8015f68:	2240      	movs	r2, #64	@ 0x40
 8015f6a:	4082      	lsls	r2, r0
 8015f6c:	4313      	orrs	r3, r2
 8015f6e:	3401      	adds	r4, #1
 8015f70:	9304      	str	r3, [sp, #16]
 8015f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f76:	4829      	ldr	r0, [pc, #164]	@ (801601c <_vfiprintf_r+0x220>)
 8015f78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015f7c:	2206      	movs	r2, #6
 8015f7e:	f7ea f947 	bl	8000210 <memchr>
 8015f82:	2800      	cmp	r0, #0
 8015f84:	d03f      	beq.n	8016006 <_vfiprintf_r+0x20a>
 8015f86:	4b26      	ldr	r3, [pc, #152]	@ (8016020 <_vfiprintf_r+0x224>)
 8015f88:	bb1b      	cbnz	r3, 8015fd2 <_vfiprintf_r+0x1d6>
 8015f8a:	9b03      	ldr	r3, [sp, #12]
 8015f8c:	3307      	adds	r3, #7
 8015f8e:	f023 0307 	bic.w	r3, r3, #7
 8015f92:	3308      	adds	r3, #8
 8015f94:	9303      	str	r3, [sp, #12]
 8015f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f98:	443b      	add	r3, r7
 8015f9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f9c:	e76a      	b.n	8015e74 <_vfiprintf_r+0x78>
 8015f9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015fa2:	460c      	mov	r4, r1
 8015fa4:	2001      	movs	r0, #1
 8015fa6:	e7a8      	b.n	8015efa <_vfiprintf_r+0xfe>
 8015fa8:	2300      	movs	r3, #0
 8015faa:	3401      	adds	r4, #1
 8015fac:	9305      	str	r3, [sp, #20]
 8015fae:	4619      	mov	r1, r3
 8015fb0:	f04f 0c0a 	mov.w	ip, #10
 8015fb4:	4620      	mov	r0, r4
 8015fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015fba:	3a30      	subs	r2, #48	@ 0x30
 8015fbc:	2a09      	cmp	r2, #9
 8015fbe:	d903      	bls.n	8015fc8 <_vfiprintf_r+0x1cc>
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d0c6      	beq.n	8015f52 <_vfiprintf_r+0x156>
 8015fc4:	9105      	str	r1, [sp, #20]
 8015fc6:	e7c4      	b.n	8015f52 <_vfiprintf_r+0x156>
 8015fc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8015fcc:	4604      	mov	r4, r0
 8015fce:	2301      	movs	r3, #1
 8015fd0:	e7f0      	b.n	8015fb4 <_vfiprintf_r+0x1b8>
 8015fd2:	ab03      	add	r3, sp, #12
 8015fd4:	9300      	str	r3, [sp, #0]
 8015fd6:	462a      	mov	r2, r5
 8015fd8:	4b12      	ldr	r3, [pc, #72]	@ (8016024 <_vfiprintf_r+0x228>)
 8015fda:	a904      	add	r1, sp, #16
 8015fdc:	4630      	mov	r0, r6
 8015fde:	f3af 8000 	nop.w
 8015fe2:	4607      	mov	r7, r0
 8015fe4:	1c78      	adds	r0, r7, #1
 8015fe6:	d1d6      	bne.n	8015f96 <_vfiprintf_r+0x19a>
 8015fe8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015fea:	07d9      	lsls	r1, r3, #31
 8015fec:	d405      	bmi.n	8015ffa <_vfiprintf_r+0x1fe>
 8015fee:	89ab      	ldrh	r3, [r5, #12]
 8015ff0:	059a      	lsls	r2, r3, #22
 8015ff2:	d402      	bmi.n	8015ffa <_vfiprintf_r+0x1fe>
 8015ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015ff6:	f7ff fceb 	bl	80159d0 <__retarget_lock_release_recursive>
 8015ffa:	89ab      	ldrh	r3, [r5, #12]
 8015ffc:	065b      	lsls	r3, r3, #25
 8015ffe:	f53f af1f 	bmi.w	8015e40 <_vfiprintf_r+0x44>
 8016002:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016004:	e71e      	b.n	8015e44 <_vfiprintf_r+0x48>
 8016006:	ab03      	add	r3, sp, #12
 8016008:	9300      	str	r3, [sp, #0]
 801600a:	462a      	mov	r2, r5
 801600c:	4b05      	ldr	r3, [pc, #20]	@ (8016024 <_vfiprintf_r+0x228>)
 801600e:	a904      	add	r1, sp, #16
 8016010:	4630      	mov	r0, r6
 8016012:	f000 f879 	bl	8016108 <_printf_i>
 8016016:	e7e4      	b.n	8015fe2 <_vfiprintf_r+0x1e6>
 8016018:	08017718 	.word	0x08017718
 801601c:	08017722 	.word	0x08017722
 8016020:	00000000 	.word	0x00000000
 8016024:	08015dd7 	.word	0x08015dd7
 8016028:	0801771e 	.word	0x0801771e

0801602c <_printf_common>:
 801602c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016030:	4616      	mov	r6, r2
 8016032:	4698      	mov	r8, r3
 8016034:	688a      	ldr	r2, [r1, #8]
 8016036:	690b      	ldr	r3, [r1, #16]
 8016038:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801603c:	4293      	cmp	r3, r2
 801603e:	bfb8      	it	lt
 8016040:	4613      	movlt	r3, r2
 8016042:	6033      	str	r3, [r6, #0]
 8016044:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016048:	4607      	mov	r7, r0
 801604a:	460c      	mov	r4, r1
 801604c:	b10a      	cbz	r2, 8016052 <_printf_common+0x26>
 801604e:	3301      	adds	r3, #1
 8016050:	6033      	str	r3, [r6, #0]
 8016052:	6823      	ldr	r3, [r4, #0]
 8016054:	0699      	lsls	r1, r3, #26
 8016056:	bf42      	ittt	mi
 8016058:	6833      	ldrmi	r3, [r6, #0]
 801605a:	3302      	addmi	r3, #2
 801605c:	6033      	strmi	r3, [r6, #0]
 801605e:	6825      	ldr	r5, [r4, #0]
 8016060:	f015 0506 	ands.w	r5, r5, #6
 8016064:	d106      	bne.n	8016074 <_printf_common+0x48>
 8016066:	f104 0a19 	add.w	sl, r4, #25
 801606a:	68e3      	ldr	r3, [r4, #12]
 801606c:	6832      	ldr	r2, [r6, #0]
 801606e:	1a9b      	subs	r3, r3, r2
 8016070:	42ab      	cmp	r3, r5
 8016072:	dc26      	bgt.n	80160c2 <_printf_common+0x96>
 8016074:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016078:	6822      	ldr	r2, [r4, #0]
 801607a:	3b00      	subs	r3, #0
 801607c:	bf18      	it	ne
 801607e:	2301      	movne	r3, #1
 8016080:	0692      	lsls	r2, r2, #26
 8016082:	d42b      	bmi.n	80160dc <_printf_common+0xb0>
 8016084:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016088:	4641      	mov	r1, r8
 801608a:	4638      	mov	r0, r7
 801608c:	47c8      	blx	r9
 801608e:	3001      	adds	r0, #1
 8016090:	d01e      	beq.n	80160d0 <_printf_common+0xa4>
 8016092:	6823      	ldr	r3, [r4, #0]
 8016094:	6922      	ldr	r2, [r4, #16]
 8016096:	f003 0306 	and.w	r3, r3, #6
 801609a:	2b04      	cmp	r3, #4
 801609c:	bf02      	ittt	eq
 801609e:	68e5      	ldreq	r5, [r4, #12]
 80160a0:	6833      	ldreq	r3, [r6, #0]
 80160a2:	1aed      	subeq	r5, r5, r3
 80160a4:	68a3      	ldr	r3, [r4, #8]
 80160a6:	bf0c      	ite	eq
 80160a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80160ac:	2500      	movne	r5, #0
 80160ae:	4293      	cmp	r3, r2
 80160b0:	bfc4      	itt	gt
 80160b2:	1a9b      	subgt	r3, r3, r2
 80160b4:	18ed      	addgt	r5, r5, r3
 80160b6:	2600      	movs	r6, #0
 80160b8:	341a      	adds	r4, #26
 80160ba:	42b5      	cmp	r5, r6
 80160bc:	d11a      	bne.n	80160f4 <_printf_common+0xc8>
 80160be:	2000      	movs	r0, #0
 80160c0:	e008      	b.n	80160d4 <_printf_common+0xa8>
 80160c2:	2301      	movs	r3, #1
 80160c4:	4652      	mov	r2, sl
 80160c6:	4641      	mov	r1, r8
 80160c8:	4638      	mov	r0, r7
 80160ca:	47c8      	blx	r9
 80160cc:	3001      	adds	r0, #1
 80160ce:	d103      	bne.n	80160d8 <_printf_common+0xac>
 80160d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80160d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160d8:	3501      	adds	r5, #1
 80160da:	e7c6      	b.n	801606a <_printf_common+0x3e>
 80160dc:	18e1      	adds	r1, r4, r3
 80160de:	1c5a      	adds	r2, r3, #1
 80160e0:	2030      	movs	r0, #48	@ 0x30
 80160e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80160e6:	4422      	add	r2, r4
 80160e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80160ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80160f0:	3302      	adds	r3, #2
 80160f2:	e7c7      	b.n	8016084 <_printf_common+0x58>
 80160f4:	2301      	movs	r3, #1
 80160f6:	4622      	mov	r2, r4
 80160f8:	4641      	mov	r1, r8
 80160fa:	4638      	mov	r0, r7
 80160fc:	47c8      	blx	r9
 80160fe:	3001      	adds	r0, #1
 8016100:	d0e6      	beq.n	80160d0 <_printf_common+0xa4>
 8016102:	3601      	adds	r6, #1
 8016104:	e7d9      	b.n	80160ba <_printf_common+0x8e>
	...

08016108 <_printf_i>:
 8016108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801610c:	7e0f      	ldrb	r7, [r1, #24]
 801610e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016110:	2f78      	cmp	r7, #120	@ 0x78
 8016112:	4691      	mov	r9, r2
 8016114:	4680      	mov	r8, r0
 8016116:	460c      	mov	r4, r1
 8016118:	469a      	mov	sl, r3
 801611a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801611e:	d807      	bhi.n	8016130 <_printf_i+0x28>
 8016120:	2f62      	cmp	r7, #98	@ 0x62
 8016122:	d80a      	bhi.n	801613a <_printf_i+0x32>
 8016124:	2f00      	cmp	r7, #0
 8016126:	f000 80d2 	beq.w	80162ce <_printf_i+0x1c6>
 801612a:	2f58      	cmp	r7, #88	@ 0x58
 801612c:	f000 80b9 	beq.w	80162a2 <_printf_i+0x19a>
 8016130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016134:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016138:	e03a      	b.n	80161b0 <_printf_i+0xa8>
 801613a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801613e:	2b15      	cmp	r3, #21
 8016140:	d8f6      	bhi.n	8016130 <_printf_i+0x28>
 8016142:	a101      	add	r1, pc, #4	@ (adr r1, 8016148 <_printf_i+0x40>)
 8016144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016148:	080161a1 	.word	0x080161a1
 801614c:	080161b5 	.word	0x080161b5
 8016150:	08016131 	.word	0x08016131
 8016154:	08016131 	.word	0x08016131
 8016158:	08016131 	.word	0x08016131
 801615c:	08016131 	.word	0x08016131
 8016160:	080161b5 	.word	0x080161b5
 8016164:	08016131 	.word	0x08016131
 8016168:	08016131 	.word	0x08016131
 801616c:	08016131 	.word	0x08016131
 8016170:	08016131 	.word	0x08016131
 8016174:	080162b5 	.word	0x080162b5
 8016178:	080161df 	.word	0x080161df
 801617c:	0801626f 	.word	0x0801626f
 8016180:	08016131 	.word	0x08016131
 8016184:	08016131 	.word	0x08016131
 8016188:	080162d7 	.word	0x080162d7
 801618c:	08016131 	.word	0x08016131
 8016190:	080161df 	.word	0x080161df
 8016194:	08016131 	.word	0x08016131
 8016198:	08016131 	.word	0x08016131
 801619c:	08016277 	.word	0x08016277
 80161a0:	6833      	ldr	r3, [r6, #0]
 80161a2:	1d1a      	adds	r2, r3, #4
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	6032      	str	r2, [r6, #0]
 80161a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80161ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80161b0:	2301      	movs	r3, #1
 80161b2:	e09d      	b.n	80162f0 <_printf_i+0x1e8>
 80161b4:	6833      	ldr	r3, [r6, #0]
 80161b6:	6820      	ldr	r0, [r4, #0]
 80161b8:	1d19      	adds	r1, r3, #4
 80161ba:	6031      	str	r1, [r6, #0]
 80161bc:	0606      	lsls	r6, r0, #24
 80161be:	d501      	bpl.n	80161c4 <_printf_i+0xbc>
 80161c0:	681d      	ldr	r5, [r3, #0]
 80161c2:	e003      	b.n	80161cc <_printf_i+0xc4>
 80161c4:	0645      	lsls	r5, r0, #25
 80161c6:	d5fb      	bpl.n	80161c0 <_printf_i+0xb8>
 80161c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80161cc:	2d00      	cmp	r5, #0
 80161ce:	da03      	bge.n	80161d8 <_printf_i+0xd0>
 80161d0:	232d      	movs	r3, #45	@ 0x2d
 80161d2:	426d      	negs	r5, r5
 80161d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80161d8:	4859      	ldr	r0, [pc, #356]	@ (8016340 <_printf_i+0x238>)
 80161da:	230a      	movs	r3, #10
 80161dc:	e011      	b.n	8016202 <_printf_i+0xfa>
 80161de:	6821      	ldr	r1, [r4, #0]
 80161e0:	6833      	ldr	r3, [r6, #0]
 80161e2:	0608      	lsls	r0, r1, #24
 80161e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80161e8:	d402      	bmi.n	80161f0 <_printf_i+0xe8>
 80161ea:	0649      	lsls	r1, r1, #25
 80161ec:	bf48      	it	mi
 80161ee:	b2ad      	uxthmi	r5, r5
 80161f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80161f2:	4853      	ldr	r0, [pc, #332]	@ (8016340 <_printf_i+0x238>)
 80161f4:	6033      	str	r3, [r6, #0]
 80161f6:	bf14      	ite	ne
 80161f8:	230a      	movne	r3, #10
 80161fa:	2308      	moveq	r3, #8
 80161fc:	2100      	movs	r1, #0
 80161fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016202:	6866      	ldr	r6, [r4, #4]
 8016204:	60a6      	str	r6, [r4, #8]
 8016206:	2e00      	cmp	r6, #0
 8016208:	bfa2      	ittt	ge
 801620a:	6821      	ldrge	r1, [r4, #0]
 801620c:	f021 0104 	bicge.w	r1, r1, #4
 8016210:	6021      	strge	r1, [r4, #0]
 8016212:	b90d      	cbnz	r5, 8016218 <_printf_i+0x110>
 8016214:	2e00      	cmp	r6, #0
 8016216:	d04b      	beq.n	80162b0 <_printf_i+0x1a8>
 8016218:	4616      	mov	r6, r2
 801621a:	fbb5 f1f3 	udiv	r1, r5, r3
 801621e:	fb03 5711 	mls	r7, r3, r1, r5
 8016222:	5dc7      	ldrb	r7, [r0, r7]
 8016224:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016228:	462f      	mov	r7, r5
 801622a:	42bb      	cmp	r3, r7
 801622c:	460d      	mov	r5, r1
 801622e:	d9f4      	bls.n	801621a <_printf_i+0x112>
 8016230:	2b08      	cmp	r3, #8
 8016232:	d10b      	bne.n	801624c <_printf_i+0x144>
 8016234:	6823      	ldr	r3, [r4, #0]
 8016236:	07df      	lsls	r7, r3, #31
 8016238:	d508      	bpl.n	801624c <_printf_i+0x144>
 801623a:	6923      	ldr	r3, [r4, #16]
 801623c:	6861      	ldr	r1, [r4, #4]
 801623e:	4299      	cmp	r1, r3
 8016240:	bfde      	ittt	le
 8016242:	2330      	movle	r3, #48	@ 0x30
 8016244:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016248:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801624c:	1b92      	subs	r2, r2, r6
 801624e:	6122      	str	r2, [r4, #16]
 8016250:	f8cd a000 	str.w	sl, [sp]
 8016254:	464b      	mov	r3, r9
 8016256:	aa03      	add	r2, sp, #12
 8016258:	4621      	mov	r1, r4
 801625a:	4640      	mov	r0, r8
 801625c:	f7ff fee6 	bl	801602c <_printf_common>
 8016260:	3001      	adds	r0, #1
 8016262:	d14a      	bne.n	80162fa <_printf_i+0x1f2>
 8016264:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016268:	b004      	add	sp, #16
 801626a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801626e:	6823      	ldr	r3, [r4, #0]
 8016270:	f043 0320 	orr.w	r3, r3, #32
 8016274:	6023      	str	r3, [r4, #0]
 8016276:	4833      	ldr	r0, [pc, #204]	@ (8016344 <_printf_i+0x23c>)
 8016278:	2778      	movs	r7, #120	@ 0x78
 801627a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801627e:	6823      	ldr	r3, [r4, #0]
 8016280:	6831      	ldr	r1, [r6, #0]
 8016282:	061f      	lsls	r7, r3, #24
 8016284:	f851 5b04 	ldr.w	r5, [r1], #4
 8016288:	d402      	bmi.n	8016290 <_printf_i+0x188>
 801628a:	065f      	lsls	r7, r3, #25
 801628c:	bf48      	it	mi
 801628e:	b2ad      	uxthmi	r5, r5
 8016290:	6031      	str	r1, [r6, #0]
 8016292:	07d9      	lsls	r1, r3, #31
 8016294:	bf44      	itt	mi
 8016296:	f043 0320 	orrmi.w	r3, r3, #32
 801629a:	6023      	strmi	r3, [r4, #0]
 801629c:	b11d      	cbz	r5, 80162a6 <_printf_i+0x19e>
 801629e:	2310      	movs	r3, #16
 80162a0:	e7ac      	b.n	80161fc <_printf_i+0xf4>
 80162a2:	4827      	ldr	r0, [pc, #156]	@ (8016340 <_printf_i+0x238>)
 80162a4:	e7e9      	b.n	801627a <_printf_i+0x172>
 80162a6:	6823      	ldr	r3, [r4, #0]
 80162a8:	f023 0320 	bic.w	r3, r3, #32
 80162ac:	6023      	str	r3, [r4, #0]
 80162ae:	e7f6      	b.n	801629e <_printf_i+0x196>
 80162b0:	4616      	mov	r6, r2
 80162b2:	e7bd      	b.n	8016230 <_printf_i+0x128>
 80162b4:	6833      	ldr	r3, [r6, #0]
 80162b6:	6825      	ldr	r5, [r4, #0]
 80162b8:	6961      	ldr	r1, [r4, #20]
 80162ba:	1d18      	adds	r0, r3, #4
 80162bc:	6030      	str	r0, [r6, #0]
 80162be:	062e      	lsls	r6, r5, #24
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	d501      	bpl.n	80162c8 <_printf_i+0x1c0>
 80162c4:	6019      	str	r1, [r3, #0]
 80162c6:	e002      	b.n	80162ce <_printf_i+0x1c6>
 80162c8:	0668      	lsls	r0, r5, #25
 80162ca:	d5fb      	bpl.n	80162c4 <_printf_i+0x1bc>
 80162cc:	8019      	strh	r1, [r3, #0]
 80162ce:	2300      	movs	r3, #0
 80162d0:	6123      	str	r3, [r4, #16]
 80162d2:	4616      	mov	r6, r2
 80162d4:	e7bc      	b.n	8016250 <_printf_i+0x148>
 80162d6:	6833      	ldr	r3, [r6, #0]
 80162d8:	1d1a      	adds	r2, r3, #4
 80162da:	6032      	str	r2, [r6, #0]
 80162dc:	681e      	ldr	r6, [r3, #0]
 80162de:	6862      	ldr	r2, [r4, #4]
 80162e0:	2100      	movs	r1, #0
 80162e2:	4630      	mov	r0, r6
 80162e4:	f7e9 ff94 	bl	8000210 <memchr>
 80162e8:	b108      	cbz	r0, 80162ee <_printf_i+0x1e6>
 80162ea:	1b80      	subs	r0, r0, r6
 80162ec:	6060      	str	r0, [r4, #4]
 80162ee:	6863      	ldr	r3, [r4, #4]
 80162f0:	6123      	str	r3, [r4, #16]
 80162f2:	2300      	movs	r3, #0
 80162f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80162f8:	e7aa      	b.n	8016250 <_printf_i+0x148>
 80162fa:	6923      	ldr	r3, [r4, #16]
 80162fc:	4632      	mov	r2, r6
 80162fe:	4649      	mov	r1, r9
 8016300:	4640      	mov	r0, r8
 8016302:	47d0      	blx	sl
 8016304:	3001      	adds	r0, #1
 8016306:	d0ad      	beq.n	8016264 <_printf_i+0x15c>
 8016308:	6823      	ldr	r3, [r4, #0]
 801630a:	079b      	lsls	r3, r3, #30
 801630c:	d413      	bmi.n	8016336 <_printf_i+0x22e>
 801630e:	68e0      	ldr	r0, [r4, #12]
 8016310:	9b03      	ldr	r3, [sp, #12]
 8016312:	4298      	cmp	r0, r3
 8016314:	bfb8      	it	lt
 8016316:	4618      	movlt	r0, r3
 8016318:	e7a6      	b.n	8016268 <_printf_i+0x160>
 801631a:	2301      	movs	r3, #1
 801631c:	4632      	mov	r2, r6
 801631e:	4649      	mov	r1, r9
 8016320:	4640      	mov	r0, r8
 8016322:	47d0      	blx	sl
 8016324:	3001      	adds	r0, #1
 8016326:	d09d      	beq.n	8016264 <_printf_i+0x15c>
 8016328:	3501      	adds	r5, #1
 801632a:	68e3      	ldr	r3, [r4, #12]
 801632c:	9903      	ldr	r1, [sp, #12]
 801632e:	1a5b      	subs	r3, r3, r1
 8016330:	42ab      	cmp	r3, r5
 8016332:	dcf2      	bgt.n	801631a <_printf_i+0x212>
 8016334:	e7eb      	b.n	801630e <_printf_i+0x206>
 8016336:	2500      	movs	r5, #0
 8016338:	f104 0619 	add.w	r6, r4, #25
 801633c:	e7f5      	b.n	801632a <_printf_i+0x222>
 801633e:	bf00      	nop
 8016340:	08017729 	.word	0x08017729
 8016344:	0801773a 	.word	0x0801773a

08016348 <__sflush_r>:
 8016348:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801634c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016350:	0716      	lsls	r6, r2, #28
 8016352:	4605      	mov	r5, r0
 8016354:	460c      	mov	r4, r1
 8016356:	d454      	bmi.n	8016402 <__sflush_r+0xba>
 8016358:	684b      	ldr	r3, [r1, #4]
 801635a:	2b00      	cmp	r3, #0
 801635c:	dc02      	bgt.n	8016364 <__sflush_r+0x1c>
 801635e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016360:	2b00      	cmp	r3, #0
 8016362:	dd48      	ble.n	80163f6 <__sflush_r+0xae>
 8016364:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016366:	2e00      	cmp	r6, #0
 8016368:	d045      	beq.n	80163f6 <__sflush_r+0xae>
 801636a:	2300      	movs	r3, #0
 801636c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016370:	682f      	ldr	r7, [r5, #0]
 8016372:	6a21      	ldr	r1, [r4, #32]
 8016374:	602b      	str	r3, [r5, #0]
 8016376:	d030      	beq.n	80163da <__sflush_r+0x92>
 8016378:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801637a:	89a3      	ldrh	r3, [r4, #12]
 801637c:	0759      	lsls	r1, r3, #29
 801637e:	d505      	bpl.n	801638c <__sflush_r+0x44>
 8016380:	6863      	ldr	r3, [r4, #4]
 8016382:	1ad2      	subs	r2, r2, r3
 8016384:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016386:	b10b      	cbz	r3, 801638c <__sflush_r+0x44>
 8016388:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801638a:	1ad2      	subs	r2, r2, r3
 801638c:	2300      	movs	r3, #0
 801638e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016390:	6a21      	ldr	r1, [r4, #32]
 8016392:	4628      	mov	r0, r5
 8016394:	47b0      	blx	r6
 8016396:	1c43      	adds	r3, r0, #1
 8016398:	89a3      	ldrh	r3, [r4, #12]
 801639a:	d106      	bne.n	80163aa <__sflush_r+0x62>
 801639c:	6829      	ldr	r1, [r5, #0]
 801639e:	291d      	cmp	r1, #29
 80163a0:	d82b      	bhi.n	80163fa <__sflush_r+0xb2>
 80163a2:	4a2a      	ldr	r2, [pc, #168]	@ (801644c <__sflush_r+0x104>)
 80163a4:	410a      	asrs	r2, r1
 80163a6:	07d6      	lsls	r6, r2, #31
 80163a8:	d427      	bmi.n	80163fa <__sflush_r+0xb2>
 80163aa:	2200      	movs	r2, #0
 80163ac:	6062      	str	r2, [r4, #4]
 80163ae:	04d9      	lsls	r1, r3, #19
 80163b0:	6922      	ldr	r2, [r4, #16]
 80163b2:	6022      	str	r2, [r4, #0]
 80163b4:	d504      	bpl.n	80163c0 <__sflush_r+0x78>
 80163b6:	1c42      	adds	r2, r0, #1
 80163b8:	d101      	bne.n	80163be <__sflush_r+0x76>
 80163ba:	682b      	ldr	r3, [r5, #0]
 80163bc:	b903      	cbnz	r3, 80163c0 <__sflush_r+0x78>
 80163be:	6560      	str	r0, [r4, #84]	@ 0x54
 80163c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80163c2:	602f      	str	r7, [r5, #0]
 80163c4:	b1b9      	cbz	r1, 80163f6 <__sflush_r+0xae>
 80163c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80163ca:	4299      	cmp	r1, r3
 80163cc:	d002      	beq.n	80163d4 <__sflush_r+0x8c>
 80163ce:	4628      	mov	r0, r5
 80163d0:	f7ff fb40 	bl	8015a54 <_free_r>
 80163d4:	2300      	movs	r3, #0
 80163d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80163d8:	e00d      	b.n	80163f6 <__sflush_r+0xae>
 80163da:	2301      	movs	r3, #1
 80163dc:	4628      	mov	r0, r5
 80163de:	47b0      	blx	r6
 80163e0:	4602      	mov	r2, r0
 80163e2:	1c50      	adds	r0, r2, #1
 80163e4:	d1c9      	bne.n	801637a <__sflush_r+0x32>
 80163e6:	682b      	ldr	r3, [r5, #0]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d0c6      	beq.n	801637a <__sflush_r+0x32>
 80163ec:	2b1d      	cmp	r3, #29
 80163ee:	d001      	beq.n	80163f4 <__sflush_r+0xac>
 80163f0:	2b16      	cmp	r3, #22
 80163f2:	d11e      	bne.n	8016432 <__sflush_r+0xea>
 80163f4:	602f      	str	r7, [r5, #0]
 80163f6:	2000      	movs	r0, #0
 80163f8:	e022      	b.n	8016440 <__sflush_r+0xf8>
 80163fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80163fe:	b21b      	sxth	r3, r3
 8016400:	e01b      	b.n	801643a <__sflush_r+0xf2>
 8016402:	690f      	ldr	r7, [r1, #16]
 8016404:	2f00      	cmp	r7, #0
 8016406:	d0f6      	beq.n	80163f6 <__sflush_r+0xae>
 8016408:	0793      	lsls	r3, r2, #30
 801640a:	680e      	ldr	r6, [r1, #0]
 801640c:	bf08      	it	eq
 801640e:	694b      	ldreq	r3, [r1, #20]
 8016410:	600f      	str	r7, [r1, #0]
 8016412:	bf18      	it	ne
 8016414:	2300      	movne	r3, #0
 8016416:	eba6 0807 	sub.w	r8, r6, r7
 801641a:	608b      	str	r3, [r1, #8]
 801641c:	f1b8 0f00 	cmp.w	r8, #0
 8016420:	dde9      	ble.n	80163f6 <__sflush_r+0xae>
 8016422:	6a21      	ldr	r1, [r4, #32]
 8016424:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016426:	4643      	mov	r3, r8
 8016428:	463a      	mov	r2, r7
 801642a:	4628      	mov	r0, r5
 801642c:	47b0      	blx	r6
 801642e:	2800      	cmp	r0, #0
 8016430:	dc08      	bgt.n	8016444 <__sflush_r+0xfc>
 8016432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801643a:	81a3      	strh	r3, [r4, #12]
 801643c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016444:	4407      	add	r7, r0
 8016446:	eba8 0800 	sub.w	r8, r8, r0
 801644a:	e7e7      	b.n	801641c <__sflush_r+0xd4>
 801644c:	dfbffffe 	.word	0xdfbffffe

08016450 <_fflush_r>:
 8016450:	b538      	push	{r3, r4, r5, lr}
 8016452:	690b      	ldr	r3, [r1, #16]
 8016454:	4605      	mov	r5, r0
 8016456:	460c      	mov	r4, r1
 8016458:	b913      	cbnz	r3, 8016460 <_fflush_r+0x10>
 801645a:	2500      	movs	r5, #0
 801645c:	4628      	mov	r0, r5
 801645e:	bd38      	pop	{r3, r4, r5, pc}
 8016460:	b118      	cbz	r0, 801646a <_fflush_r+0x1a>
 8016462:	6a03      	ldr	r3, [r0, #32]
 8016464:	b90b      	cbnz	r3, 801646a <_fflush_r+0x1a>
 8016466:	f7ff f8d1 	bl	801560c <__sinit>
 801646a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d0f3      	beq.n	801645a <_fflush_r+0xa>
 8016472:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016474:	07d0      	lsls	r0, r2, #31
 8016476:	d404      	bmi.n	8016482 <_fflush_r+0x32>
 8016478:	0599      	lsls	r1, r3, #22
 801647a:	d402      	bmi.n	8016482 <_fflush_r+0x32>
 801647c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801647e:	f7ff faa6 	bl	80159ce <__retarget_lock_acquire_recursive>
 8016482:	4628      	mov	r0, r5
 8016484:	4621      	mov	r1, r4
 8016486:	f7ff ff5f 	bl	8016348 <__sflush_r>
 801648a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801648c:	07da      	lsls	r2, r3, #31
 801648e:	4605      	mov	r5, r0
 8016490:	d4e4      	bmi.n	801645c <_fflush_r+0xc>
 8016492:	89a3      	ldrh	r3, [r4, #12]
 8016494:	059b      	lsls	r3, r3, #22
 8016496:	d4e1      	bmi.n	801645c <_fflush_r+0xc>
 8016498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801649a:	f7ff fa99 	bl	80159d0 <__retarget_lock_release_recursive>
 801649e:	e7dd      	b.n	801645c <_fflush_r+0xc>

080164a0 <fiprintf>:
 80164a0:	b40e      	push	{r1, r2, r3}
 80164a2:	b503      	push	{r0, r1, lr}
 80164a4:	4601      	mov	r1, r0
 80164a6:	ab03      	add	r3, sp, #12
 80164a8:	4805      	ldr	r0, [pc, #20]	@ (80164c0 <fiprintf+0x20>)
 80164aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80164ae:	6800      	ldr	r0, [r0, #0]
 80164b0:	9301      	str	r3, [sp, #4]
 80164b2:	f7ff fca3 	bl	8015dfc <_vfiprintf_r>
 80164b6:	b002      	add	sp, #8
 80164b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80164bc:	b003      	add	sp, #12
 80164be:	4770      	bx	lr
 80164c0:	20000268 	.word	0x20000268

080164c4 <__swbuf_r>:
 80164c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164c6:	460e      	mov	r6, r1
 80164c8:	4614      	mov	r4, r2
 80164ca:	4605      	mov	r5, r0
 80164cc:	b118      	cbz	r0, 80164d6 <__swbuf_r+0x12>
 80164ce:	6a03      	ldr	r3, [r0, #32]
 80164d0:	b90b      	cbnz	r3, 80164d6 <__swbuf_r+0x12>
 80164d2:	f7ff f89b 	bl	801560c <__sinit>
 80164d6:	69a3      	ldr	r3, [r4, #24]
 80164d8:	60a3      	str	r3, [r4, #8]
 80164da:	89a3      	ldrh	r3, [r4, #12]
 80164dc:	071a      	lsls	r2, r3, #28
 80164de:	d501      	bpl.n	80164e4 <__swbuf_r+0x20>
 80164e0:	6923      	ldr	r3, [r4, #16]
 80164e2:	b943      	cbnz	r3, 80164f6 <__swbuf_r+0x32>
 80164e4:	4621      	mov	r1, r4
 80164e6:	4628      	mov	r0, r5
 80164e8:	f000 f82a 	bl	8016540 <__swsetup_r>
 80164ec:	b118      	cbz	r0, 80164f6 <__swbuf_r+0x32>
 80164ee:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80164f2:	4638      	mov	r0, r7
 80164f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164f6:	6823      	ldr	r3, [r4, #0]
 80164f8:	6922      	ldr	r2, [r4, #16]
 80164fa:	1a98      	subs	r0, r3, r2
 80164fc:	6963      	ldr	r3, [r4, #20]
 80164fe:	b2f6      	uxtb	r6, r6
 8016500:	4283      	cmp	r3, r0
 8016502:	4637      	mov	r7, r6
 8016504:	dc05      	bgt.n	8016512 <__swbuf_r+0x4e>
 8016506:	4621      	mov	r1, r4
 8016508:	4628      	mov	r0, r5
 801650a:	f7ff ffa1 	bl	8016450 <_fflush_r>
 801650e:	2800      	cmp	r0, #0
 8016510:	d1ed      	bne.n	80164ee <__swbuf_r+0x2a>
 8016512:	68a3      	ldr	r3, [r4, #8]
 8016514:	3b01      	subs	r3, #1
 8016516:	60a3      	str	r3, [r4, #8]
 8016518:	6823      	ldr	r3, [r4, #0]
 801651a:	1c5a      	adds	r2, r3, #1
 801651c:	6022      	str	r2, [r4, #0]
 801651e:	701e      	strb	r6, [r3, #0]
 8016520:	6962      	ldr	r2, [r4, #20]
 8016522:	1c43      	adds	r3, r0, #1
 8016524:	429a      	cmp	r2, r3
 8016526:	d004      	beq.n	8016532 <__swbuf_r+0x6e>
 8016528:	89a3      	ldrh	r3, [r4, #12]
 801652a:	07db      	lsls	r3, r3, #31
 801652c:	d5e1      	bpl.n	80164f2 <__swbuf_r+0x2e>
 801652e:	2e0a      	cmp	r6, #10
 8016530:	d1df      	bne.n	80164f2 <__swbuf_r+0x2e>
 8016532:	4621      	mov	r1, r4
 8016534:	4628      	mov	r0, r5
 8016536:	f7ff ff8b 	bl	8016450 <_fflush_r>
 801653a:	2800      	cmp	r0, #0
 801653c:	d0d9      	beq.n	80164f2 <__swbuf_r+0x2e>
 801653e:	e7d6      	b.n	80164ee <__swbuf_r+0x2a>

08016540 <__swsetup_r>:
 8016540:	b538      	push	{r3, r4, r5, lr}
 8016542:	4b29      	ldr	r3, [pc, #164]	@ (80165e8 <__swsetup_r+0xa8>)
 8016544:	4605      	mov	r5, r0
 8016546:	6818      	ldr	r0, [r3, #0]
 8016548:	460c      	mov	r4, r1
 801654a:	b118      	cbz	r0, 8016554 <__swsetup_r+0x14>
 801654c:	6a03      	ldr	r3, [r0, #32]
 801654e:	b90b      	cbnz	r3, 8016554 <__swsetup_r+0x14>
 8016550:	f7ff f85c 	bl	801560c <__sinit>
 8016554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016558:	0719      	lsls	r1, r3, #28
 801655a:	d422      	bmi.n	80165a2 <__swsetup_r+0x62>
 801655c:	06da      	lsls	r2, r3, #27
 801655e:	d407      	bmi.n	8016570 <__swsetup_r+0x30>
 8016560:	2209      	movs	r2, #9
 8016562:	602a      	str	r2, [r5, #0]
 8016564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016568:	81a3      	strh	r3, [r4, #12]
 801656a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801656e:	e033      	b.n	80165d8 <__swsetup_r+0x98>
 8016570:	0758      	lsls	r0, r3, #29
 8016572:	d512      	bpl.n	801659a <__swsetup_r+0x5a>
 8016574:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016576:	b141      	cbz	r1, 801658a <__swsetup_r+0x4a>
 8016578:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801657c:	4299      	cmp	r1, r3
 801657e:	d002      	beq.n	8016586 <__swsetup_r+0x46>
 8016580:	4628      	mov	r0, r5
 8016582:	f7ff fa67 	bl	8015a54 <_free_r>
 8016586:	2300      	movs	r3, #0
 8016588:	6363      	str	r3, [r4, #52]	@ 0x34
 801658a:	89a3      	ldrh	r3, [r4, #12]
 801658c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016590:	81a3      	strh	r3, [r4, #12]
 8016592:	2300      	movs	r3, #0
 8016594:	6063      	str	r3, [r4, #4]
 8016596:	6923      	ldr	r3, [r4, #16]
 8016598:	6023      	str	r3, [r4, #0]
 801659a:	89a3      	ldrh	r3, [r4, #12]
 801659c:	f043 0308 	orr.w	r3, r3, #8
 80165a0:	81a3      	strh	r3, [r4, #12]
 80165a2:	6923      	ldr	r3, [r4, #16]
 80165a4:	b94b      	cbnz	r3, 80165ba <__swsetup_r+0x7a>
 80165a6:	89a3      	ldrh	r3, [r4, #12]
 80165a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80165ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80165b0:	d003      	beq.n	80165ba <__swsetup_r+0x7a>
 80165b2:	4621      	mov	r1, r4
 80165b4:	4628      	mov	r0, r5
 80165b6:	f000 f846 	bl	8016646 <__smakebuf_r>
 80165ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165be:	f013 0201 	ands.w	r2, r3, #1
 80165c2:	d00a      	beq.n	80165da <__swsetup_r+0x9a>
 80165c4:	2200      	movs	r2, #0
 80165c6:	60a2      	str	r2, [r4, #8]
 80165c8:	6962      	ldr	r2, [r4, #20]
 80165ca:	4252      	negs	r2, r2
 80165cc:	61a2      	str	r2, [r4, #24]
 80165ce:	6922      	ldr	r2, [r4, #16]
 80165d0:	b942      	cbnz	r2, 80165e4 <__swsetup_r+0xa4>
 80165d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80165d6:	d1c5      	bne.n	8016564 <__swsetup_r+0x24>
 80165d8:	bd38      	pop	{r3, r4, r5, pc}
 80165da:	0799      	lsls	r1, r3, #30
 80165dc:	bf58      	it	pl
 80165de:	6962      	ldrpl	r2, [r4, #20]
 80165e0:	60a2      	str	r2, [r4, #8]
 80165e2:	e7f4      	b.n	80165ce <__swsetup_r+0x8e>
 80165e4:	2000      	movs	r0, #0
 80165e6:	e7f7      	b.n	80165d8 <__swsetup_r+0x98>
 80165e8:	20000268 	.word	0x20000268

080165ec <abort>:
 80165ec:	b508      	push	{r3, lr}
 80165ee:	2006      	movs	r0, #6
 80165f0:	f000 f88e 	bl	8016710 <raise>
 80165f4:	2001      	movs	r0, #1
 80165f6:	f7eb faf7 	bl	8001be8 <_exit>

080165fa <__swhatbuf_r>:
 80165fa:	b570      	push	{r4, r5, r6, lr}
 80165fc:	460c      	mov	r4, r1
 80165fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016602:	2900      	cmp	r1, #0
 8016604:	b096      	sub	sp, #88	@ 0x58
 8016606:	4615      	mov	r5, r2
 8016608:	461e      	mov	r6, r3
 801660a:	da0d      	bge.n	8016628 <__swhatbuf_r+0x2e>
 801660c:	89a3      	ldrh	r3, [r4, #12]
 801660e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016612:	f04f 0100 	mov.w	r1, #0
 8016616:	bf14      	ite	ne
 8016618:	2340      	movne	r3, #64	@ 0x40
 801661a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801661e:	2000      	movs	r0, #0
 8016620:	6031      	str	r1, [r6, #0]
 8016622:	602b      	str	r3, [r5, #0]
 8016624:	b016      	add	sp, #88	@ 0x58
 8016626:	bd70      	pop	{r4, r5, r6, pc}
 8016628:	466a      	mov	r2, sp
 801662a:	f000 f879 	bl	8016720 <_fstat_r>
 801662e:	2800      	cmp	r0, #0
 8016630:	dbec      	blt.n	801660c <__swhatbuf_r+0x12>
 8016632:	9901      	ldr	r1, [sp, #4]
 8016634:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016638:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801663c:	4259      	negs	r1, r3
 801663e:	4159      	adcs	r1, r3
 8016640:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016644:	e7eb      	b.n	801661e <__swhatbuf_r+0x24>

08016646 <__smakebuf_r>:
 8016646:	898b      	ldrh	r3, [r1, #12]
 8016648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801664a:	079d      	lsls	r5, r3, #30
 801664c:	4606      	mov	r6, r0
 801664e:	460c      	mov	r4, r1
 8016650:	d507      	bpl.n	8016662 <__smakebuf_r+0x1c>
 8016652:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016656:	6023      	str	r3, [r4, #0]
 8016658:	6123      	str	r3, [r4, #16]
 801665a:	2301      	movs	r3, #1
 801665c:	6163      	str	r3, [r4, #20]
 801665e:	b003      	add	sp, #12
 8016660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016662:	ab01      	add	r3, sp, #4
 8016664:	466a      	mov	r2, sp
 8016666:	f7ff ffc8 	bl	80165fa <__swhatbuf_r>
 801666a:	9f00      	ldr	r7, [sp, #0]
 801666c:	4605      	mov	r5, r0
 801666e:	4639      	mov	r1, r7
 8016670:	4630      	mov	r0, r6
 8016672:	f7fe fd99 	bl	80151a8 <_malloc_r>
 8016676:	b948      	cbnz	r0, 801668c <__smakebuf_r+0x46>
 8016678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801667c:	059a      	lsls	r2, r3, #22
 801667e:	d4ee      	bmi.n	801665e <__smakebuf_r+0x18>
 8016680:	f023 0303 	bic.w	r3, r3, #3
 8016684:	f043 0302 	orr.w	r3, r3, #2
 8016688:	81a3      	strh	r3, [r4, #12]
 801668a:	e7e2      	b.n	8016652 <__smakebuf_r+0xc>
 801668c:	89a3      	ldrh	r3, [r4, #12]
 801668e:	6020      	str	r0, [r4, #0]
 8016690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016694:	81a3      	strh	r3, [r4, #12]
 8016696:	9b01      	ldr	r3, [sp, #4]
 8016698:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801669c:	b15b      	cbz	r3, 80166b6 <__smakebuf_r+0x70>
 801669e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80166a2:	4630      	mov	r0, r6
 80166a4:	f000 f84e 	bl	8016744 <_isatty_r>
 80166a8:	b128      	cbz	r0, 80166b6 <__smakebuf_r+0x70>
 80166aa:	89a3      	ldrh	r3, [r4, #12]
 80166ac:	f023 0303 	bic.w	r3, r3, #3
 80166b0:	f043 0301 	orr.w	r3, r3, #1
 80166b4:	81a3      	strh	r3, [r4, #12]
 80166b6:	89a3      	ldrh	r3, [r4, #12]
 80166b8:	431d      	orrs	r5, r3
 80166ba:	81a5      	strh	r5, [r4, #12]
 80166bc:	e7cf      	b.n	801665e <__smakebuf_r+0x18>

080166be <_raise_r>:
 80166be:	291f      	cmp	r1, #31
 80166c0:	b538      	push	{r3, r4, r5, lr}
 80166c2:	4605      	mov	r5, r0
 80166c4:	460c      	mov	r4, r1
 80166c6:	d904      	bls.n	80166d2 <_raise_r+0x14>
 80166c8:	2316      	movs	r3, #22
 80166ca:	6003      	str	r3, [r0, #0]
 80166cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80166d0:	bd38      	pop	{r3, r4, r5, pc}
 80166d2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80166d4:	b112      	cbz	r2, 80166dc <_raise_r+0x1e>
 80166d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80166da:	b94b      	cbnz	r3, 80166f0 <_raise_r+0x32>
 80166dc:	4628      	mov	r0, r5
 80166de:	f000 f853 	bl	8016788 <_getpid_r>
 80166e2:	4622      	mov	r2, r4
 80166e4:	4601      	mov	r1, r0
 80166e6:	4628      	mov	r0, r5
 80166e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166ec:	f000 b83a 	b.w	8016764 <_kill_r>
 80166f0:	2b01      	cmp	r3, #1
 80166f2:	d00a      	beq.n	801670a <_raise_r+0x4c>
 80166f4:	1c59      	adds	r1, r3, #1
 80166f6:	d103      	bne.n	8016700 <_raise_r+0x42>
 80166f8:	2316      	movs	r3, #22
 80166fa:	6003      	str	r3, [r0, #0]
 80166fc:	2001      	movs	r0, #1
 80166fe:	e7e7      	b.n	80166d0 <_raise_r+0x12>
 8016700:	2100      	movs	r1, #0
 8016702:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016706:	4620      	mov	r0, r4
 8016708:	4798      	blx	r3
 801670a:	2000      	movs	r0, #0
 801670c:	e7e0      	b.n	80166d0 <_raise_r+0x12>
	...

08016710 <raise>:
 8016710:	4b02      	ldr	r3, [pc, #8]	@ (801671c <raise+0xc>)
 8016712:	4601      	mov	r1, r0
 8016714:	6818      	ldr	r0, [r3, #0]
 8016716:	f7ff bfd2 	b.w	80166be <_raise_r>
 801671a:	bf00      	nop
 801671c:	20000268 	.word	0x20000268

08016720 <_fstat_r>:
 8016720:	b538      	push	{r3, r4, r5, lr}
 8016722:	4d07      	ldr	r5, [pc, #28]	@ (8016740 <_fstat_r+0x20>)
 8016724:	2300      	movs	r3, #0
 8016726:	4604      	mov	r4, r0
 8016728:	4608      	mov	r0, r1
 801672a:	4611      	mov	r1, r2
 801672c:	602b      	str	r3, [r5, #0]
 801672e:	f7eb faab 	bl	8001c88 <_fstat>
 8016732:	1c43      	adds	r3, r0, #1
 8016734:	d102      	bne.n	801673c <_fstat_r+0x1c>
 8016736:	682b      	ldr	r3, [r5, #0]
 8016738:	b103      	cbz	r3, 801673c <_fstat_r+0x1c>
 801673a:	6023      	str	r3, [r4, #0]
 801673c:	bd38      	pop	{r3, r4, r5, pc}
 801673e:	bf00      	nop
 8016740:	2000de74 	.word	0x2000de74

08016744 <_isatty_r>:
 8016744:	b538      	push	{r3, r4, r5, lr}
 8016746:	4d06      	ldr	r5, [pc, #24]	@ (8016760 <_isatty_r+0x1c>)
 8016748:	2300      	movs	r3, #0
 801674a:	4604      	mov	r4, r0
 801674c:	4608      	mov	r0, r1
 801674e:	602b      	str	r3, [r5, #0]
 8016750:	f7eb faaa 	bl	8001ca8 <_isatty>
 8016754:	1c43      	adds	r3, r0, #1
 8016756:	d102      	bne.n	801675e <_isatty_r+0x1a>
 8016758:	682b      	ldr	r3, [r5, #0]
 801675a:	b103      	cbz	r3, 801675e <_isatty_r+0x1a>
 801675c:	6023      	str	r3, [r4, #0]
 801675e:	bd38      	pop	{r3, r4, r5, pc}
 8016760:	2000de74 	.word	0x2000de74

08016764 <_kill_r>:
 8016764:	b538      	push	{r3, r4, r5, lr}
 8016766:	4d07      	ldr	r5, [pc, #28]	@ (8016784 <_kill_r+0x20>)
 8016768:	2300      	movs	r3, #0
 801676a:	4604      	mov	r4, r0
 801676c:	4608      	mov	r0, r1
 801676e:	4611      	mov	r1, r2
 8016770:	602b      	str	r3, [r5, #0]
 8016772:	f7eb fa29 	bl	8001bc8 <_kill>
 8016776:	1c43      	adds	r3, r0, #1
 8016778:	d102      	bne.n	8016780 <_kill_r+0x1c>
 801677a:	682b      	ldr	r3, [r5, #0]
 801677c:	b103      	cbz	r3, 8016780 <_kill_r+0x1c>
 801677e:	6023      	str	r3, [r4, #0]
 8016780:	bd38      	pop	{r3, r4, r5, pc}
 8016782:	bf00      	nop
 8016784:	2000de74 	.word	0x2000de74

08016788 <_getpid_r>:
 8016788:	f7eb ba16 	b.w	8001bb8 <_getpid>

0801678c <_init>:
 801678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801678e:	bf00      	nop
 8016790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016792:	bc08      	pop	{r3}
 8016794:	469e      	mov	lr, r3
 8016796:	4770      	bx	lr

08016798 <_fini>:
 8016798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801679a:	bf00      	nop
 801679c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801679e:	bc08      	pop	{r3}
 80167a0:	469e      	mov	lr, r3
 80167a2:	4770      	bx	lr
